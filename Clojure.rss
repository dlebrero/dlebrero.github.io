<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='https://danlebrero.com' rel='self' type='application/rss+xml'/>
<title>
Daniel Lebrero Berna Blog
</title>
<link>
https://danlebrero.com
</link>
<language>
en
</language>
<lastBuildDate>
Wed, 11 Apr 2018 09:45:00 +0200
</lastBuildDate>
<pubDate>
Wed, 11 Apr 2018 09:45:00 +0200
</pubDate>
<description>
Daniel Lebrero blog
</description>
<generator>
clj-rss
</generator>
<item>
<title>
Kafka, GDPR and Event Sourcing - Implementation details
</title>
<link>
https://danlebrero.com/2018/04/11/kafka-gdpr-event-sourcing-implentation/
</link>
<guid>
https://danlebrero.com/2018/04/11/kafka-gdpr-event-sourcing-implentation/
</guid>
<pubDate>
Wed, 11 Apr 2018 09:45:00 +0200
</pubDate>
<description>
Implementation details for a proof of concept for compliance with GDPR on an Event Sourcing architecture built with Apache Kafka.
</description>
</item>
<item>
<title>
Kafka, distributed coordination and the actor model
</title>
<link>
https://danlebrero.com/2018/04/09/kafka-distributed-coordination-actor-model/
</link>
<guid>
https://danlebrero.com/2018/04/09/kafka-distributed-coordination-actor-model/
</guid>
<pubDate>
Mon, 09 Apr 2018 10:00:00 +0200
</pubDate>
<description>
On how to design KafkaStream applications in terms of the actor model. 
</description>
</item>
<item>
<title>
Production data never lies
</title>
<link>
https://danlebrero.com/2018/03/20/production-data-never-lies/
</link>
<guid>
https://danlebrero.com/2018/03/20/production-data-never-lies/
</guid>
<pubDate>
Tue, 20 Mar 2018 00:00:00 +0100
</pubDate>
<description>
Using production data to automatically generate Avro schemas, using Spec-Provider. 
</description>
</item>
<item>
<title>
How to Docker Compose a developer environment: an open source example
</title>
<link>
https://danlebrero.com/2017/09/25/how-do-docker-compose-development-environement/
</link>
<guid>
https://danlebrero.com/2017/09/25/how-do-docker-compose-development-environement/
</guid>
<pubDate>
Mon, 25 Sep 2017 13:35:00 +0200
</pubDate>
<description>
An efficient team needs to have an easy way of setting up a development environment. This is a detailed example of how to do it. 
</description>
</item>
<item>
<title>
Swagger Search: Finding an endpoint in your microservice primordial soup 
</title>
<link>
https://danlebrero.com/2017/09/18/swagger-search-finding-endpoints-in-microservices/
</link>
<guid>
https://danlebrero.com/2017/09/18/swagger-search-finding-endpoints-in-microservices/
</guid>
<pubDate>
Mon, 18 Sep 2017 13:35:00 +0200
</pubDate>
<description>
An open source tools to find endpoints in a microservice architecture.
</description>
</item>
<item>
<title>
Atoms, delays and side effects: a resource management idiom for Clojure
</title>
<link>
https://danlebrero.com/2017/06/21/atoms-delays-and-side-effects-resource-managent-in-clojure/
</link>
<guid>
https://danlebrero.com/2017/06/21/atoms-delays-and-side-effects-resource-managent-in-clojure/
</guid>
<pubDate>
Wed, 21 Jun 2017 14:15:00 +0200
</pubDate>
<description>
Concurrency in Clojure is easy peasy, unless you have to deal with side effects. But atoms and delays can still help us. Let's look at an idiom for resource management.
</description>
</item>
<item>
<title>
Delay: Clojure's forgotten concurrency primitive
</title>
<link>
https://danlebrero.com/2017/06/12/delay-clojure-forgotten-concurrency-primitive/
</link>
<guid>
https://danlebrero.com/2017/06/12/delay-clojure-forgotten-concurrency-primitive/
</guid>
<pubDate>
Mon, 12 Jun 2017 09:00:00 +0200
</pubDate>
<description>
When talking about Clojure's concurrency primitives, we often forget &quot;delay&quot;. Let's see how it can help us.
</description>
</item>
<item>
<title>
Clojure's most important lesson
</title>
<link>
https://danlebrero.com/2017/05/24/clojure-most-important-lesson/
</link>
<guid>
https://danlebrero.com/2017/05/24/clojure-most-important-lesson/
</guid>
<pubDate>
Wed, 24 May 2017 20:00:00 +0200
</pubDate>
<description>
Clojure has a lot of important and unique lessons to teach, but which one is the most important?
</description>
</item>
<item>
<title>
Automating resilience testing with Docker and Property Based Testing - Devoxx UK 2017
</title>
<link>
https://danlebrero.com/2017/05/20/automating-resilience-testing-with-docker-and-property-based-testing-devoxx-uk-2017-video/
</link>
<guid>
https://danlebrero.com/2017/05/20/automating-resilience-testing-with-docker-and-property-based-testing-devoxx-uk-2017-video/
</guid>
<pubDate>
Sat, 20 May 2017 00:00:00 +0200
</pubDate>
<description>
Video from my presentation on Devoxx UK 2017 on Docker, resilience and property based testing
</description>
</item>
<item>
<title>
Joins on stateful stream processing using Kafka Streams' KTables and GlobalKTables
</title>
<link>
https://danlebrero.com/2017/05/07/kafka-streams-ktable-globalktable-joining-reference-data/
</link>
<guid>
https://danlebrero.com/2017/05/07/kafka-streams-ktable-globalktable-joining-reference-data/
</guid>
<pubDate>
Sun, 07 May 2017 13:00:00 +0200
</pubDate>
<description>
Exploring different options in Kafka Streams to join KTables, both with and without shared keys.
</description>
</item>
</channel>
</rss>
