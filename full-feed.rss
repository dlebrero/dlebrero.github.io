<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='https://danlebrero.com' rel='self' type='application/rss+xml'/>
<title>
Daniel Lebrero Berna Blog
</title>
<link>
https://danlebrero.com
</link>
<language>
en
</language>
<lastBuildDate>
Wed, 25 Nov 2020 00:00:00 +0100
</lastBuildDate>
<pubDate>
Wed, 25 Nov 2020 00:00:00 +0100
</pubDate>
<description>
Daniel Lebrero blog
</description>
<generator>
clj-rss
</generator>
<item>
<title>
Course notes: Time Management for Technical Leaders
</title>
<link>
https://danlebrero.com/2020/11/25/time-management-for-technical-leaders-summary/
</link>
<guid>
https://danlebrero.com/2020/11/25/time-management-for-technical-leaders-summary/
</guid>
<pubDate>
Wed, 25 Nov 2020 00:00:00 +0100
</pubDate>
<description>
<![CDATA[<p>These are my notes on <a href="https://www.patkua.com/">Patrick Kua</a>&rsquo;s <a href="https://techlead.academy/p/time-management">Time Management for Technical Leaders</a>. </p><p>Main insight: plan, split scary tasks, time box and rest. Aim for a WIP of 1.</p><h2>Notes</h2>
<ul>
  <li>Focus on how you can have the biggest impact with the time you have.</li>
  <li><a href="https://www.eisenhower.me/eisenhower-matrix/">Eisenhower Matrix</a>:<br/> <img src="/images/blog/time-management-for-technical-leaders/eisenhower-matrix.jpg" alt="organization before" />
  <ul>
    <li>Do: emergencies, major outages, crisis, someone quitting.</li>
    <li>Decide:
    <ul>
      <li>Manage technical debt.</li>
      <li>Building relationships.</li>
      <li>Schedule time.</li>
      <li>Research.</li>
    </ul></li>
    <li>Delegate: See Camille Fournier&rsquo;s <a href="/2020/07/22/the-managers-path-book-summary/#ch-6">delegation matrix</a>.</li>
  </ul></li>
  <li>Biorhythm: Keep track for a week on how is your energy level on each task.</li>
  <li>Defrag your calendar: group together similar nature tasks.</li>
  <li>2 minutes rule: Do now anything that takes less than two minutes.</li>
  <li>Parkinson&rsquo;s Law:
  <ul>
    <li>&ldquo;Work expands to fill the time available for its completion&rdquo;.</li>
    <li>Time box.</li>
    <li>Spit into smaller tasks.</li>
  </ul></li>
  <li>Pareto&rsquo;s Law.</li>
  <li>Carlson&rsquo;s Law: Multitasking is bad.</li>
  <li>Law of Diminishing Returns (Illich&rsquo;s Law): You need to rest.</li>
  <li>Hofstadter&rsquo;s Law:
  <ul>
    <li>&ldquo;It always takes longer than you expect, even when you take into account Hofstadter&rsquo;s Law&rdquo;.</li>
    <li>Prepare plan B.</li>
    <li>Early feedback.</li>
    <li>On planning, think about all possible bad scenarios.</li>
  </ul></li>
  <li>Law of The Least Effort (Laborit&rsquo;s Law):
  <ul>
    <li>&ldquo;Human behaviour drives us to do what makes us happy first&rdquo;.</li>
    <li>It is human nature to avoid stress.</li>
    <li>Eat the frog first.</li>
    <li>Give yourself a reward.</li>
    <li>Get started by baby steps.</li>
  </ul></li>
  <li>How to kill dead time:
  <ul>
    <li>Meditation.</li>
    <li>Make notes.</li>
    <li>Call someone.</li>
    <li>Do nothing.</li>
  </ul></li>
  <li><a href="https://www.amazon.com/Slack-Getting-Burnout-Busywork-Efficiency/dp/0767907698">Slack</a>. Great book.</li>
  <li>Productivity Systems:
  <ol>
    <li><a href="https://www.goodreads.com/book/show/1633.Getting_Things_Done">Get Things Done</a>:
    <ul>
      <li>Open Loops:
      <ul>
        <li>When you worry about when and if something is going to get done.</li>
        <li>Source of stress.</li>
      </ul></li>
      <li>Three steps:
      <ul>
        <li>What is the outcome.</li>
        <li>What is the next step.</li>
        <li>Reminder.</li>
      </ul></li>
      <li>Bucked things per timeframe.</li>
    </ul></li>
    <li><a href="https://en.wikipedia.org/wiki/Pomodoro_Technique">Pomodoro Technique</a>.</li>
    <li>Personal Kanban:
    <ul>
      <li>Visualize your work.</li>
      <li>Limit WIP to 1.</li>
    </ul></li>
  </ol></li>
</ul>]]>
</description>
</item>
<item>
<title>
CTO day 1: first steps and hiring framework
</title>
<link>
https://danlebrero.com/2020/11/11/cto-diary-definition-first-steps-hiring-framework/
</link>
<guid>
https://danlebrero.com/2020/11/11/cto-diary-definition-first-steps-hiring-framework/
</guid>
<pubDate>
Wed, 11 Nov 2020 00:00:00 +0100
</pubDate>
<description>
<![CDATA[<p>About a year ago, I agreed to be promoted to interim CTO at Akvo.</p><p>This is the &ldquo;first steps that I took&rdquo; on a series of blog posts about it.</p><h2>So, what is a CTO again?</h2><p>Nobody will give you a clear definition because the expectations for the role are very context specific. </p><p>Context being the organization and each organization being unique, this is how I understood Akvo back then:</p><p><img src="/images/blog/cto/organization-before.jpg" alt="organization before" /> </p><p>The partnership team had plenty of structure, but from my point of view it was just an amorphous blob of people that I rarely had to interact with. They were &ldquo;The Business&rdquo;.</p><p>The Head of Product Development position has been vacant for more than nine months and the Management Team shrinked a few months back leaving the Technical Director out. </p><p>The Solutions Director has been taking care of all the software teams during this time, and we have formed a &ldquo;Council of Elders&rdquo; with all the technical team leads to cover for the most technical aspects until there was a new CTO.</p><p>Given my very technical background, the existence of the Council of Elders and that the CTO position was going to report to the Solutions Director, I understood it was a mostly technical position, being the Solutions Director still responsible for the product managers and the design team. </p><p>That suited me well.</p><p>Shortly after accepting the role, I learned that the Solutions Director was leaving in a few months.</p><p>So to my surprise, I found myself leading a team of 17, owning five different products and having to manage for the first time people outside my area of expertise. Is it even possible to be a good manager if you have no clue what those people are doing or talking about?</p><h2>A mentor</h2><p>Conscious of my own limitations and lack of experience, I started looking for a fellow CTO mentor without too much luck. </p><p>Grumbling about it with an old friend from university, <a href="https://www.linkedin.com/in/jrbronet/">Jose Bronet</a>, he offered his help. As Senior Director at Cisco he has been managing big teams for years.</p><p>This is the only piece of advice that I will give you today: find yourself a good mentor. </p><p>Jose&rsquo;s help has been invaluable.</p><h2>First steps</h2><p>We started the mentorship with the following activities:</p>
<ul>
  <li>Read “Becoming a Tech lead”. Very insightful. <a href="/2019/11/27/becoming-a-technical-leader-book-notes/#content">Here</a> are my notes.</li>
  <li>Understand and apply <a href="/2020/04/01/no-nonsense-leadership-summary/#ch-2">Situational leadership</a>.</li>
  <li>Loads of work to understand how Akvo’s side of the business works.</li>
  <li>Know yourself:
  <ul>
    <li><a href="https://www.authentichappiness.sas.upenn.edu/questionnaires/survey-character-strengths">Your streghts</a>: <em>Curiosity and interest in the world</em> is my top one.</li>
    <li><a href="/images/blog/cto/learning-styles-questionnaire.doc">Learning style</a>: I am a reflector/theorist.</li>
    <li><a href="https://www.16personalities.com">MBTI test</a>: I am a <a href="https://www.16personalities.com/profiles/0b8c2bee205b9">logician (INTP-T)</a>:
    <ul>
      <li>&ldquo;Tend to share thoughts that are not fully developed, using others as a sounding board for ideas and theories in a debate against themselves rather than as actual conversation partners&rdquo;.</li>
    </ul></li>
    <li>List of my values:
    <ul>
      <li>Curiosity</li>
      <li>Passion</li>
      <li>Accountability</li>
      <li>Safety</li>
      <li>Joy</li>
    </ul></li>
  </ul></li>
  <li>Writing down what being a good CTO means:
  <ul>
    <li>Technically capable:
    <ul>
      <li>Coding.</li>
      <li>Architecture.</li>
      <li>Software process and practices.</li>
    </ul></li>
    <li>Align software development strategy with business strategy:
    <ul>
      <li>Buy vs build, Refactor vs Rewrite.</li>
      <li>Stop useless development.</li>
      <li>Keep an eye on new trends.</li>
    </ul></li>
    <li>Able to communicate up the technical aspects and down the business aspects.</li>
    <li>Empowers teams:
    <ul>
      <li>Gives them autonomy.</li>
      <li>Gives them a vision.</li>
      <li>Makes constraints clear.</li>
      <li>Supports their decisions.</li>
      <li>Hires, fires and retains the correct people:
      <ul>
        <li>To retain, grow people.</li>
      </ul></li>
      <li>Provide problems, not solutions.</li>
    </ul></li>
    <li>Teaches and inspires.</li>
    <li>Creates connections between teams, between departments, so they have enough information.</li>
    <li>Works on the correct problem.</li>
    <li>Know his weaknesses and asks for help.</li>
  </ul></li>
</ul><p>I would also recommend to read <a href="https://www.pluralsight.com/resource-center/guides/first-60-days/thank-you">Your first 60 days as a CIO</a> and sight up for <a href="https://levelup.patkua.com">Patrick Kua’s newsletter</a>.</p><h2>SMART challenges</h2><p>Jose’s answer to how to manage people outside your expertise area is to challenge your reportees to ensure their work and ideas are Specific, Measurable, Attainable, Realistic and Time bound (aka SMART).</p><p>Questioning on all those aspects confirms if the reportee understands the problem, possible solution, and that their decisions are data based. </p><p>Questioning will highlight missing information and holes in the reportee line of thought and will help them find their own solutions.</p><p>Questioning gives you more information, which will allows for making better informed decisions down the line.</p><p>This technique is not only useful with your reportees but also with your peers and boss, and most importantly with yourself.</p><h2>Career paths and hiring framework</h2><p>It takes nine to twelve months to replace the wrong hire, so hiring the right people first time around is crucial.</p><p>For this I started working on a hiring framework:</p>
<ul>
  <li>Identify three to five Values that are the most important.</li>
  <li>Hiring framework is aimed to score the candidate on those Values.</li>
  <li>Interview questions must always be the same to avoid some biases.</li>
  <li>Each question should be related to one Value in the framework.</li>
  <li>Score each question with a red (0 points), yellow (1 point) or green (2 points).</li>
  <li>Sum up all the scores per Value.</li>
  <li>For each Value, determined the point range for a green, yellow or red:
  <ul>
    <li>For example, a green in Passion is 8-12, a yellow 5-7, a red less than 5.</li>
  </ul></li>
  <li>Each Value can have different ranges.</li>
  <li>Define which combinations of Value colours are acceptable. Example:
  <ul>
    <li>At least 3 green and two yellows, or</li>
    <li>Tech capability must be green and at least two other yellow, or</li>
    <li>If tech capability is yellow, at least three others must be green.</li>
  </ul></li>
</ul><p>The expectation is that the hiring framework will make the hiring faster, consistent and remove biases.</p><p>To give clarity to the team, I worked in parallel on a career path for Akvo’s technical staff. </p><p>I would recommend <a href="https://twitter.com/polotek">Marco Rogers</a>&rsquo; <a href="https://www.youtube.com/watch?v=jA1Q94d2z10">Creating a career ladder for engineers</a> talk, <a href="https://twitter.com/skamille">Camille Fournier</a>&rsquo;s <a href="/2020/07/22/the-managers-path-book-summary/#content">The Manager&rsquo;s Path</a>, and <a href="https://www.progression.fyi">https://www.progression.fyi</a> has plenty of examples from well known companies.</p><p>But all this work went into shambles as my next task was <a href="/2020/11/25/cto-diary-downsizing-team-firing/#content">not precisely hiring&hellip;</a></p>]]>
</description>
</item>
<item>
<title>
Where TDD falls short, find yourself a good REPL
</title>
<link>
https://danlebrero.com/2020/09/16/where-test-driven-development-falls-short-find-a-good-repl/
</link>
<guid>
https://danlebrero.com/2020/09/16/where-test-driven-development-falls-short-find-a-good-repl/
</guid>
<pubDate>
Wed, 16 Sep 2020 09:00:00 +0200
</pubDate>
<description>
<![CDATA[<p>Test-Driven Development (TDD) is by far the <a href="/2019/02/18/other-reasons-for-test-driven-development-baby-steps-roi-evil-manager-watching-the-watchmen/#content">best workflow</a> to get things done. </p><p>It has but one little problem: before you start doing, you need to understand and learn what must be done.</p><p><img src="/images/blog/tdd-repl/learning-doing.jpg" alt="learning before doing" /> </p><p>The TDD workflow by itself does not help with the learning, but as most of our work is about changing existing code, the byproduct of TDD &ndash; tests &ndash;, can help us to learn how things are working now.</p>
<p class="sidenote">Unfortunately tests usually do not help to understand why things are the way they are.</p><p>For novel work, neither the TDD workflow nor the existing test suite is of any use. For novel work, we need to use other sources and tools to acquire that knowledge.</p><p>We can split novel work into:</p>
<ol>
  <li>New business logic.</li>
  <li>Unfamiliar libraries and frameworks.</li>
  <li>Side effects.</li>
</ol><h2>New business logic</h2><p>To learn about the new business logic to implement, you cannot start by writing tests, but neither can you start writing production code. </p><p>You will need to sit down with your business expert counterpart. </p><p>As you implement the new logic, you will need clarification, you will find edge cases, you will discover contradictions with the existing logic, &hellip; all of which will require again of the business expert input, creating a loop between <em>doing</em> and <em>learning</em>:</p><p><img src="/images/blog/tdd-repl/learning-doing-loop.jpg" alt="learning doing loop" /> </p><p>To make this feedback loop fast, the <a href="http://www.extremeprogramming.org/rules/customer.html">on-site customer practice</a> may help you.</p><p>But your business expert will not have all the answers, and as part of the learning, you will together explore what is possible, what data would be required, what third parties should we integrate, what edge cases we will need to cover, &hellip;</p><p><img src="/images/blog/tdd-repl/learning-exploration.jpg" alt="exploration" /> </p><p>This exploration phase requires you to read loads of documentation, dig into databases, investigate third-party APIs, mix and match internal services, and sniff into your event queues.</p><p>And a REPL is the best tool for this.</p><h2>Unfamiliar libraries and frameworks</h2><p>Another area where you cannot jump into TDD is when you are using some library for the first time, or when using some part of a library that you are not exactly sure how it behaves.</p><p>For a long time, I used to write &ldquo;assertion-less tests&rdquo; with little pieces of code to exercise the library that I wanted to learn about and then set debugging breakpoints to inspect the data that was coming in and out or peak into the state of the system.</p><p>I would write dozens and dozens of those &ldquo;exploratory&rdquo; examples until I was confident enough to start <em>doing</em>. But as I was <em>doing</em>, I would need to go back to this technique when my knowledge of the library would falter again, moving from <em>doing</em> to exploring several times per day:</p><p><img src="/images/blog/tdd-repl/learning-exploration-doing.jpg" alt="learning, doing, exploration loop" /> </p><p>I wrote that exploratory code in the form of tests for no other reason than the IDE made it very easy to run them.</p><p>And a REPL is the best tool for this.</p><h2>Side effects</h2><p>Side effects make it very obvious all of our testing efforts are based on lies. </p><p>Mocks, stubs, fakes, spies: all lies to make our testing feedback loop <a href="/2016/11/06/good-test-vs-bad-tests/#content">robust and fast</a>. </p>
<p class="sidenote">All types of testing are based on lies. Some lies are more truthful than others, but your unit tests are a lie, your TEST environment is a big lie, your performance tests are a lie. The only real testing is actual users bashing your production system, but we call this type of testing <a href="/2017/06/05/testing-or-monitoring-mtbf-mttr-make-your-choice/#content">"monitoring"</a>.</p><p>The best thing is to avoid lies altogether. Why mock a database if running a local database can be robust and fast enough for your testing?</p><p>A lot of times this is not practical so we are forced to write those lies to keep our sanity. </p><p>To make our lies truthful, you need to understand pretty well the behavior of both the external system and the libraries that we will use to interact with them.</p><p>For this, we need to go back to the exploration phase, where we write lots of little programs to exercise the external system, to understand its behavior and misbehavior so that we fill up our knowledge and convert those <strong>unknown</strong> side effects into <strong>known</strong> side effects that we are confident enough to mock, fake or stub. </p><p>And a REPL is the best tool for this.</p>
<p class="sidenote">This is why testing the frontend is so damn difficult. The side effect of the frontend is painting pixels on a screen and, no matter how many years of experience you have, this is a side effect that will never become a known side effect with so many screen sizes, browsers, and all their quirks.</p><h1>What is a REPL?</h1><p>Is like a command-line shell but using your production language. </p><p>It is like a Google DevTools console but within your IDE. </p><p>It is like an all-powerful debugger in your production environment.</p><p>It is like having a fluid conversation with your application, without any interruptions.</p><h2>Not any REPL but a good REPL.</h2><p>As not all REPL are born the same, you can read what to makes a <a href="https://vvvvalvalval.github.io/posts/what-makes-a-good-repl.html">good REPL good</a>, but I have a very simple test: </p>
<blockquote><p>You have a good REPL if you write all your code (exploratory, proof of concepts, one-off scripts, tests, and production) using a REPL. </p>
</blockquote><p>Note that I said “using” a REPL and not “in” the REPL, which is an important distinction and what sets good REPLs apart.</p><h2>A REPL for exploring new business logic.</h2><p>A REPL allows for your exploration to be done in the most efficient way: by <a href="/2017/08/03/efficient-developer-write-programs-for-yourself/#content">writing little programs</a> using a Turing complete language. </p><p>And not any language, but your production language, the one you are the most familiar with, that makes you the most efficient, that you can use from your awesome IDE, and has all those libraries to connect to, dig into and inspect any data source.</p><h2>A REPL for exploring unfamiliar libraries.</h2><p>To learn about unfamiliar libraries, you need to read their docs and write loads and loads of experiments.</p><p>As <a href="https://twitter.com/_JamesWard/status/1303530732615348224">James Ward</a> puts it:</p>
<blockquote><p>Programming, no matter what level, is mostly trial &amp; error. So before anything else, optimize for the shortest feedback loop possible.</p>
</blockquote><p>With a REPL, the feedback loop is immediate: there is no build, compilation, deploy, or start-up delay. </p><p>Compared with a script, a REPL allows you just chose which bits of the application or experiment you want to re-run, which makes it easier focus, instead of having to run a whole script all the time.</p><p>Once you get used to this feedback loop, even delays of a couple of seconds feel like <a href="https://www.youtube.com/watch?v=_fNp37zFn9Q">&ldquo;living with lag&rdquo;</a>. You want to have a conversation with your application, not one of those <a href="https://www.youtube.com/watch?v=j-WUJs0HYtI">Skype conversations</a>.</p><h2>A REPL for exploring side effects.</h2><p>It is quite usual to use specific tools to explore databases and other external systems, but those tools do not compose.</p><p>By using a REPL, you can again use a full Turing complete language and mix and max data from any system.</p><p>As a big plus, the side effect of exploring side effects with a REPL is <em>production code</em> ready to be used, and data samples for your TDD workflow.</p><h2>A REPL for doing.</h2><p>The immediate feedback loop is not only extremely useful during the exploration phase, but also for <em>doing</em>. </p><p>And the most important, with a REPL you are carving your application from inside it, building it from zero without ever having to stop it, adding functionality in baby steps.</p><p>As we are constantly moving between <em>doing</em> and <em>learning</em>, using the same tool for both doing and learning removes the friction of switching between tools and makes the feedback loop way faster.</p><p>If you want to learn more about the REPL, maybe you want to watch <a href="/2018/11/26/repl-driven-development-immediate-feedback-for-you-backend/#content">my talk about it</a> or Stuart Halloway&rsquo;s <a href="https://vimeo.com/223309989">REPL Driven Development</a>.</p>
<hr/><p>More about efficiency:</p>
<ol>
  <li><a href="/2017/08/01/efficient-developer-disable-notifications/#content">Disable notifications</a></li>
  <li><a href="/2017/08/02/efficient-developer-master-your-ide/#content">Master your IDE</a></li>
  <li><a href="/2017/08/03/efficient-developer-write-programs-for-yourself/#content">Write programs for yourself</a></li>
  <li><a href="/2017/09/01/a-docker-compose-environment/#content">Why to Docker Compose a calm environment</a></li>
  <li><a href="/2018/04/30/did-you-read-my-email/#content">Did you read my email?</a></li>
  <li><a href="/2018/07/02/efficient-developer-rest-and-sleep/#content">Go and have a rest</a></li>
  <li><a href="/2018/07/04/habits-of-efficient-developers-wearedevelopers-2018-video/#content">The conference talk</a></li>
  <li><a href="/2019/02/18/other-reasons-for-test-driven-development-baby-steps-roi-evil-manager-watching-the-watchmen/#content">Other reasons for TDD: Baby steps, ROI, Evil Manager Syndrome and Watching the watchmen</a></li>
  <li>Where TDD falls short, find yourself a good REPL (you are here)</li>
</ol>]]>
</description>
</item>
<item>
<title>
Book notes: Good Strategy, Bad Strategy
</title>
<link>
https://danlebrero.com/2020/08/31/good-strategy-bad-strategy-summary/
</link>
<guid>
https://danlebrero.com/2020/08/31/good-strategy-bad-strategy-summary/
</guid>
<pubDate>
Mon, 31 Aug 2020 00:00:00 +0200
</pubDate>
<description>
<![CDATA[<p>These are my notes on Professor Richard Rumelt&rsquo;s <a href="http://goodbadstrategy.com/">Good Strategy / Bad Strategy</a>. </p><p>The book is an excellent introduction about what strategy is and what is not.</p><p>You can see Rumelt talking about the content of the book in <a href="https://www.youtube.com/watch?v=UZrTl16hZdk">this video</a>.</p><h1>Key Insights</h1>
<ul>
  <li>Basic idea of strategy: apply strength to opportunity.</li>
  <li>Subtle shifts in viewpoints is a huge source of strength.</li>
  <li>Most useful shift in viewpoint: thinking about your own thinking.
  <ul>
    <li>Question your own ideas.</li>
  </ul></li>
  <li>A new strategy is an hypothesis and its implementation an experiment.</li>
  <li>Good strategy:
  <ul>
    <li>Has:
    <ol>
      <li>Diagnosis:
      <ul>
        <li>Simplifies reality by identifying the critical aspects.</li>
        <li>Answers: &ldquo;What is going on here?&rdquo;.</li>
      </ul></li>
      <li>Guiding policy:
      <ul>
        <li>It channels action in certain direction without defining exactly what shall be done.</li>
        <li>Drawn upon or creates sources of advantage.</li>
      </ul></li>
      <li>Coherent action.</li>
    </ol></li>
    <li>Emphasize focus over compromise.</li>
    <li>Build on knowledge only available to your company.</li>
    <li>Is an advantage on itself.</li>
  </ul></li>
  <li>Strategy is not about choice/decision but about design, more constructed than chosen.
  <ul>
    <li>Most of the work in system design is figuring out the interactions.</li>
  </ul></li>
  <li>Strategy is as much what to do as what not to do.</li>
  <li>The secret of using advantage is understanding the advantage itself:
  <ul>
    <li>Which kind it is.</li>
    <li>Under which conditions it is.</li>
  </ul></li>
  <li>Quality matters when quantity is an inadequate substitute.</li>
  <li>The more uncertain the future, the more proximate objectives must be.
  <ul>
    <li>How proximate an objective is depends on the skills and accumulated resources of the organization.</li>
  </ul></li>
  <li>Resources and tight coordination are partial substitutes for each other.</li>
  <li>When change occurs, understand the forces underlying the main effect to find out the second order effects. These second effects are the ones to focus on.</li>
  <li>Weakly managed organizations tend to be less organized and focused.</li>
  <li>To change the culture, replace the alpha members.</li>
  <li>Make a list.</li>
  <li>Judgment can be practiced.</li>
  <li>Learn both from successful and failing organizations.</li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#part-0">Introduction: Overwhelming obstacles</a></li>
  <li><a href="#part-one">Part one: Good and bad strategy</a>
  <ul>
    <li><a href="#ch-1">Chapter 1 - Good strategy is unexpected</a></li>
    <li><a href="#ch-2">Chapter 2 - Discovering power</a></li>
    <li><a href="#ch-3">Chapter 3 - Bad strategy</a></li>
    <li><a href="#ch-4">Chapter 4 - Why so much bad strategy?</a></li>
    <li><a href="#ch-5">Chapter 5 - The Kernel of good strategy</a></li>
  </ul></li>
  <li><a href="#part-2">Part 2: Sources of power</a>
  <ul>
    <li><a href="#ch-6">Chapter 6 - Using leverage</a></li>
    <li><a href="#ch-7">Chapter 7 - Proximate objectives</a></li>
    <li><a href="#ch-8">Chapter 8 - Chain-link systems.</a></li>
    <li><a href="#ch-9">Chapter 9 - Using Design</a></li>
    <li><a href="#ch-10">Chapter 10 - Focus</a></li>
    <li><a href="#ch-11">Chapter 11 - Growth</a></li>
    <li><a href="#ch-12">Chapter 12 - Using advantage</a></li>
    <li><a href="#ch-13">Chapter 13 - Using dynamics</a></li>
    <li><a href="#ch-14">Chapter 14 - Inertia and entropy</a></li>
    <li><a href="#ch-15">Chapter 15 - Putting it together</a></li>
  </ul></li>
  <li><a href="#part-3">Part 3 - Thinking like a strategist</a>
  <ul>
    <li><a href="#ch-16">Chapter 16 - The science of strategy</a></li>
    <li><a href="#ch-17">Chapter 17 - Using your head</a></li>
    <li><a href="#ch-18">Chapter 18 - Keeping your head</a></li>
  </ul></li>
</ul><h1><a name="part-0"></a>Introduction: Overwhelming obstacles</h1>
<ul>
  <li>Core of strategy work: Discovering the critical factors in a situation and designing a way of coordination and focusing actions to deal with those factors.</li>
  <li>Good strategy honestly acknowledges the challenges being faces and provides an approach to overcoming them.</li>
  <li>Strategy selects the path, identifying how, why, and where determination and leadership are to be applied.</li>
  <li>Strategy must include concrete actions (&ldquo;Implementation&rdquo;).</li>
  <li>Goal setting != strategy.</li>
</ul><h1><a name="part-one"></a>Part one: Good and bad strategy</h1>
<ul>
  <li>Basic idea of strategy: apply strength to opportunity.</li>
  <li>Huge sources of strength:
  <ul>
    <li>Having a coherent strategy, one that creates strength.</li>
    <li>Subtle shifts in viewpoints.</li>
  </ul></li>
</ul><h2><a name="ch-1"></a>Chapter 1 - Good strategy is unexpected</h2>
<ul>
  <li>Having a good strategy is an advantage because most companies do not have one and do not expect you to have one.</li>
  <li>Apple strategy: survive and wait for the next big thing. Succeed on that next thing.</li>
  <li>Strategy is as much what to do as what not to do.</li>
</ul><h2><a name="ch-2"></a>Chapter 2 - Discovering power</h2>
<ul>
  <li>When there is a successful company, there is always failing competition. Learn from both.
  <ul>
    <li>What the competition was not able to copy?</li>
  </ul></li>
  <li>Wal-Mart: did not break conventional wisdom, it broke the definition of store.</li>
  <li>US Department of Defense: From pure military capabilities to asymmetric cost on opponent.</li>
</ul><h2><a name="ch-3"></a>Chapter 3 - Bad strategy</h2>
<ul>
  <li>Hallmarks of bad strategy:
  <ol>
    <li>Fluff:
    <ul>
      <li>Origin in [&hellip;] and recently in the IT industry.</li>
    </ul></li>
    <li>Failure to face the challenge.</li>
    <li>Mistaking goals for strategy.</li>
    <li>Bad strategic objectives:
    <ul>
      <li>Fail to address critical issues.</li>
      <li>Impracticable.</li>
    </ul></li>
  </ol></li>
  <li>True expertise is making a complex subject understandable.</li>
  <li>If a challenge is not defined, it is impossible to assess the quality of the strategy.</li>
  <li>Strategy work is episodic, not annual.</li>
  <li>One of the challenges of being a leader is mastering the shift from having others define your goals to being the architect of the organization&rsquo;s purpose and objectives.</li>
  <li>Goal: overall values and desires.</li>
  <li>Objective: specific operational target.</li>
  <li>Strategy transforms goals into coherent actionable objectives.</li>
  <li>Underperformance is not a challenge. Is a result.
  <ul>
    <li>The true challenges are the reasons for it.</li>
  </ul></li>
</ul><h2><a name="ch-4"></a>Chapter 4 - Why so much bad strategy?</h2>
<ul>
  <li>Bad strategy is the active avoidance of the hard work of crafting a good strategy.</li>
  <li>Pathways to bad strategy:
  <ol>
    <li>Unwillingness or inability to choose:
    <ul>
      <li>Essential difficulty in creating strategy is not logical, it is choice itself.</li>
      <li>Universal buy-in usually signals the absence of choice.</li>
    </ul></li>
    <li>Template-style strategy:
    <ul>
      <li>Charisma does not guarantee effective leadership.</li>
      <li>Charisma (transformational) leadership:
      <ol>
        <li>Set vision.</li>
        <li>Inspire people to change for the org.</li>
        <li>Empowers people to accomplish the vision.</li>
      </ol></li>
    </ul></li>
    <li>New Thought (aka New Age):
    <ul>
      <li>The believe that thinking in success and avoiding thinking in failure is enough to be successful.</li>
      <li>A shared vision within an organization being required for success is part of the New Thought.</li>
    </ul></li>
  </ol></li>
</ul><h2><a name="ch-5"></a>Chapter 5 - The Kernel of good strategy</h2>
<ul>
  <li>Good strategy has an essential logical structure called Kernel, that has:
  <ol>
    <li>Diagnosis:
    <ul>
      <li>Simplifies reality by identifying the critical aspects.</li>
      <li>Leaders must absorb a large part of a situation/problem&rsquo;s complexity and ambiguity and pass on to the organization a simpler problem, one that is solvable.</li>
      <li>Answers: &ldquo;What is going on here?&rdquo;.</li>
      <li>At minimum:
      <ul>
        <li>Names/classifies situation.</li>
        <li>Links facts into patterns.</li>
        <li>Highlights important issues.</li>
      </ul></li>
      <li>It defines a domain of action:
      <ul>
        <li>If no action can be derived from it, the diagnosis is useless.</li>
      </ul></li>
      <li>If a challenge is ill-structured, the diagnosis has to be an educated guess.</li>
      <li>In business, most deep strategic changes are brought about by a change in diagnosis.</li>
    </ul></li>
    <li>Guiding policy:
    <ul>
      <li>Overall approach to cope or overcome the obstacles identified in the diagnosis.</li>
      <li>Drawn upon or creates sources of advantage.</li>
      <li>It channels action in certain direction without defining exactly what shall be done.</li>
      <li>Not goals or vision.</li>
      <li>In nonprofit and public policy, good strategy creates advantage by magnifying the effects of resources and actions.</li>
      <li>A good guiding policy itself can be a source of advantage by:
      <ul>
        <li>Anticipating actions of others.</li>
        <li>Reducing complexity and ambiguity.</li>
        <li>Concentrating effort on critical aspects.</li>
        <li>Create coherent actions.</li>
      </ul></li>
    </ul></li>
    <li>Coherent action:
    <ul>
      <li>Non conflicting and coordinated.</li>
      <li>Resource commitments.</li>
      <li>Coordination by itself can be a source of advantage.</li>
    </ul></li>
  </ol></li>
  <li>Strategy is visible as coordinated action imposed on a system.
  <ul>
    <li>Imposed: exercise in centralized power used to overcome the natural workings of a system.</li>
  </ul></li>
</ul><h1><a name="part-2"></a>Part 2: Sources of power</h1><h2><a name="ch-6"></a>Chapter 6 - Using leverage</h2>
<ul>
  <li>Strategic leverage, mix of:
  <ul>
    <li>Anticipation:
    <ul>
      <li>Buyer demand.</li>
      <li>Competition reactions.</li>
    </ul></li>
    <li>Pivot points:
    <ul>
      <li>Small adjustment magnifies effect of effort.</li>
    </ul></li>
    <li>Concentration:
    <ul>
      <li>Focus on few objectives.</li>
      <li>Due to:
      <ul>
        <li>Limited resources.</li>
        <li>Limited leadership cognition.</li>
        <li>Perceived effectiveness:
        <ul>
          <li>A 100% improvement in one department seems more effective than a 10% improvement in 100 departments.</li>
        </ul></li>
      </ul></li>
    </ul></li>
  </ul></li>
</ul><h2><a name="ch-7"></a>Chapter 7 - Proximate objectives</h2>
<ul>
  <li>Proximate objective: one that is close enough at hand to be feasible.</li>
  <li>Proximate objective is guided by forecast of the future.
  <ul>
    <li>The more uncertain the future, the more proximate objective must be.</li>
  </ul></li>
  <li>How proximate an objective is depends on the skills and accumulated resources of the organization.</li>
</ul><h2><a name="ch-8"></a>Chapter 8 - Chain-link systems.</h2>
<ul>
  <li>Strengthen the weakest link.</li>
  <li>Quality matters when quantity is an inadequate substitute.</li>
  <li>Find limiting factors.</li>
  <li>Quality matching: when each link is managed separately, the system can get stuck in a low-effectiveness state:
  <ul>
    <li>Quality of the chain is equal to the lowest link.</li>
    <li>Improving on any other link is a waste.</li>
  </ul></li>
  <li>Problems with chain-linked:
  <ol>
    <li>Identify bottlenecks.</li>
    <li>Incremental change may not pay off and even make things worse:
    <ul>
      <li>Focus success measurement on change itself.</li>
    </ul></li>
  </ol></li>
  <li>Excellence in a chain-linked system is difficult to replicate.</li>
</ul><h2><a name="ch-9"></a>Chapter 9 - Using Design</h2>
<ul>
  <li>Strategy is not about choice/decision but about design, more constructed than chosen.</li>
  <li>In design, issue of mutual adjustment:
  <ul>
    <li>Sharp gain or cost on getting the combinations right or wrong.</li>
  </ul></li>
  <li>Most of the work in system design is figuring out the interactions.</li>
  <li>A design-type strategy is an adroit configuration of resources and actions that yields an advantage in a challenging situation.</li>
  <li>Given a set bundle of resources, the greater the competitive challenge, the greater the need for the clever, tight integration of resources and actions.</li>
  <li>Given a set level of challenge, higher-quality resources lessen the need for the tight integration of resources and actions.</li>
  <li>Resources and tight coordination are partial substitutes for each other.</li>
  <li>Tight integration cost:
  <ul>
    <li>Harder to create.</li>
    <li>Narrower focus.</li>
    <li>More fragile.</li>
    <li>Less flexible to change.</li>
  </ul></li>
  <li>Strategic resource is one that competitors cannot duplicate without suffering a net economic loss.
  <ul>
    <li>High quality strategic resource yielding a powerful competitive advantage makes for great strategy simplicity (think useful patents).</li>
    <li>But it can impede innovation.</li>
    <li>Current profits are rarely associated with recent action, but with actions from the past.</li>
  </ul></li>
  <li>Success leads to laxity and bloat, and these lead to decline.</li>
</ul><h2><a name="ch-10"></a>Chapter 10 - Focus</h2>
<ul>
  <li>To identify a company&rsquo;s strategy:
  <ol>
    <li>Studying how competitors make their living.</li>
    <li>Notice each policy on that company that are different from the norm in the industry.</li>
    <li>Figure out the common target of those policies.</li>
  </ol></li>
  <li>When doing analysis, do not stop at the first reasonable explanation. Test against evidence.</li>
  <li>Focus:
  <ol>
    <li>Coordination of policies that produce extra power through their interacting and overlapping effects.</li>
    <li>Application of that power to the right markets.</li>
  </ol></li>
</ul><h2><a name="ch-11"></a>Chapter 11 - Growth</h2>
<ul>
  <li>Growth cannot be brought through acquisitions.</li>
</ul><h2><a name="ch-12"></a>Chapter 12 - Using advantage</h2>
<ul>
  <li>The secret of using advantage is understanding the advantage itself:
  <ul>
    <li>Which kind it is.</li>
    <li>Under which conditions it is.</li>
  </ul></li>
  <li>By providing more value you avoid being a commodity.</li>
  <li>When another person speaks, you hear both less and more than they mean.</li>
  <li>A competitive advantage is interesting when one has insights into ways to increase its value.</li>
  <li>Competitive advantage != high profitability.</li>
  <li>Increasing value requires a strategy for:
  <ul>
    <li>Deepening advantages: increase value or reduce cost.</li>
    <li>Broadening the extent of advantages:
    <ul>
      <li>Based on know-how is easier.</li>
      <li>Based on customer beliefs (like brand) can damage if extension is a failure.</li>
    </ul></li>
    <li>Creating higher demand.</li>
    <li>Strengthening the isolation mechanism that blocks easy replication.</li>
  </ul></li>
</ul><h2><a name="ch-13"></a>Chapter 13 - Using dynamics</h2>
<ul>
  <li>Restate a general question in specific terms help to answer the general question.</li>
  <li>To gain strategic advantage, exploit a wave of change.</li>
  <li>Waves of change are exogenous.</li>
  <li>Most industries, most of the time, are fairly stable.</li>
  <li>When change occurs, understand the forces underlying the main effect to find out the second order effects. These second effects are the ones to focus on.</li>
  <li>To discern a wave of change, you need to understand the gritty details well enough to question experts.</li>
  <li>Guidepost:
  <ol>
    <li>Rising fixed costs, especially product development.</li>
    <li>Deregulation.</li>
    <li>Predictable biases in forecasting:
    <ul>
      <li>Ignore the fact that all business trends peak and then decline.</li>
      <li>Market leaders will duke it out for supremacy.</li>
      <li>The future winners will be the current apparent winners.</li>
    </ul></li>
    <li>Incumbent response (see (chapter 14)[#ch-14]).</li>
    <li>Attractors state:
    <ul>
      <li>How the industry &ldquo;should&rdquo; work based on demand and overall efficiency.</li>
    </ul></li>
  </ol></li>
</ul><h2><a name="ch-14"></a>Chapter 14 - Inertia and entropy</h2>
<ul>
  <li>Entropy: weakly managed organizations tend to be less organized and focused.</li>
  <li>Inertia:
  <ul>
    <li>Even when change programs at full speed, it can take years to alter a large company.</li>
    <li>Types:
    <ol>
      <li>Routine:
      <ul>
        <li>If top management are convinced that new routines are essential, change can be quick.</li>
      </ul></li>
      <li>Culture:
      <ul>
        <li>To break:
        <ol>
          <li>Simplification: it will highlight obsolete units, waste, bad behaviour.</li>
          <li>Fragment the operation units.</li>
          <li>Triage units: close, repair or empower.</li>
        </ol></li>
        <li>To change the culture, replace the alpha members.</li>
      </ul></li>
      <li>By proxy:
      <ul>
        <li>Abandon old profit streams.</li>
      </ul></li>
    </ol></li>
  </ul></li>
</ul><h2><a name="ch-15"></a>Chapter 15 - Putting it together</h2>
<ul>
  <li>Nvidia strategy.</li>
</ul><h1><a name="part-3"></a>Part 3 - Thinking like a strategist</h1>
<ul>
  <li>Change in viewpoint is important when creating strategy.</li>
  <li>Most useful shift in viewpoint: thinking about your own thinking.</li>
</ul><h2><a name="ch-16"></a>Chapter 16 - The science of strategy</h2>
<ul>
  <li>A new strategy is an hypothesis and its implementation an experiment.</li>
  <li>Best knowledge to build good strategy is the one available only to your company.</li>
  <li>If new insights or ideas are not needed, deduction is sufficient.</li>
  <li>Strategy requires induction.</li>
</ul><h2><a name="ch-17"></a>Chapter 17 - Using your head</h2>
<ul>
  <li>Make a short list of the most important and actionable.
  <ul>
    <li>Things to do, not things to worry about.</li>
  </ul></li>
  <li>It is unnatural, even painful, to question your own ideas.</li>
  <li>Good strategy emphasize focus over compromise.</li>
  <li>Judgment can be practiced:
  <ul>
    <li>Write down before every meeting what issues will arise and who will take which positions.</li>
  </ul></li>
</ul><h2><a name="ch-18"></a>Chapter 18 - Keeping your head</h2>
<ul>
  <li>Independent, not eccentric.</li>
  <li>Doubting without curmudgeon.</li>
  <li>Errors in judgment:
  <ol>
    <li>Engineering overreach: when failure modes and consequences are not understood.</li>
    <li>Smooth-sailing fallacy: when lack of recent failures make people overconfident.</li>
    <li>Working under risk-seeking malincentives:
    <ul>
      <li>You profit if things go well, others pay if things go bad.</li>
    </ul></li>
    <li>Social herding.</li>
    <li>Inside view: believe &ldquo;this case is different&rdquo; despite data.</li>
  </ol></li>
</ul>]]>
</description>
</item>
<item>
<title>
Book notes: Elements of Clojure
</title>
<link>
https://danlebrero.com/2020/08/12/elements-of-clojure-book-summary/
</link>
<guid>
https://danlebrero.com/2020/08/12/elements-of-clojure-book-summary/
</guid>
<pubDate>
Wed, 12 Aug 2020 10:00:00 +0200
</pubDate>
<description>
<![CDATA[<p>These are my notes on <a href="https://twitter.com/ztellman">Zachary Tellman</a>&rsquo;s <a href="https://leanpub.com/elementsofclojure">Elements of Clojure</a>. </p><p>There are some elements of Clojure on the book, but most of the content covered is universal to any language. </p><p>Zach has several talks were he covers the subjects of the book: <a href="https://www.youtube.com/watch?v=JaKLSH4csqE">names</a>, <a href="https://www.youtube.com/watch?v=x9pxbnFC4aQ">abstraction</a> and <a href="https://clojuresync.com/zach-tellman/">composition</a>.</p><h1>Key Insights</h1>
<ul>
  <li>Good software is built through effective indirection.</li>
  <li>Names are the most common way of creating indirection.</li>
  <li>The act of writing software is the act of naming repeated over and over again.</li>
  <li>Any project involving multiple people exists in a continuous state of low-level confusion.</li>
  <li>We are constantly drawn to software we don&rsquo;t know well enough to dislike.</li>
  <li>The models of SW are build atop inductive analogies and aspire only to satisfice.</li>
  <li>Broad assumptions means smaller models which means simpler code.
  <ul>
    <li>Over-engineered code == too few assumptions.</li>
  </ul></li>
  <li>If a model cant fit in our head, it has little value.</li>
  <li>Build SW from principled components (build to be discarded), separated by interfaces where necessary (build to last).</li>
  <li>City planning is a better metaphor for SW development than civil engineering.</li>
  <li>The ultimate goal of composition is to define processes.</li>
  <li>Any system that exceeds our understanding will inevitably grow a bit slow and flaky.</li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#ch-0">Introduction</a></li>
  <li><a href="#ch-1">1 - Names</a></li>
  <li><a href="#ch-2">2 - Idioms</a></li>
  <li><a href="#ch-3">3 - Indirection</a></li>
  <li><a href="#ch-4">4 - Composition</a></li>
</ul><h1><a name="ch-0"></a>Introduction</h1>
<ul>
  <li>To write software we must learn to draw boundaries.</li>
  <li>Good software is built through effective indirection.</li>
  <li>Finding good names is difficult, so we should try to avoid.</li>
  <li>Any project involving multiple people exists in a continuous state of low-level confusion.</li>
</ul><h1><a name="ch-1"></a>Names</h1>
<ul>
  <li>Names are the most common way of creating indirection.</li>
  <li>The act of writing software is the act of naming repeated over and over again.</li>
  <li>Names are composed of:</li>
</ul>
<table>
  <thead>
    <tr>
      <th> </th>
      <th> </th>
      <th>In SW terms </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Sign </td>
      <td>Textual representation </td>
      <td>Textual representation </td>
    </tr>
    <tr>
      <td>Referent </td>
      <td>What it references </td>
      <td>Current implementation </td>
    </tr>
    <tr>
      <td>Sense </td>
      <td>How it is referenced </td>
      <td>Set of fundamental properties we ascribe to it </td>
    </tr>
  </tbody>
</table>
<ul>
  <li>When finding a new name, we only need to understand its sense.</li>
  <li>Sense can be communicated through:
  <ul>
    <li>Sign.</li>
    <li>Context.</li>
    <li>Documentation.</li>
    <li>Everyday conversation.</li>
  </ul></li>
  <li>Names should be:
  <ul>
    <li>Narrow:
    <ul>
      <li>Exclude things it cannot represent.</li>
      <li>Reveals its sense:
      <ul>
        <li>Too specific leaks implementation details.</li>
        <li>Too general misses fundamental properties, inviting breaking changes.</li>
      </ul></li>
    </ul></li>
    <li>Consistent: easily understood in its context.</li>
  </ul></li>
  <li>Any project involving multiple people exists in a continuous state of low-level confusion.</li>
</ul>
<table>
  <thead>
    <tr>
      <th>Natural Names </th>
      <th>Synthetic Names </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Multiple senses </td>
      <td>One sense </td>
    </tr>
    <tr>
      <td>Ambiguous </td>
      <td>Fully consistent with sign </td>
    </tr>
    <tr>
      <td>Reason by analogy</td>
      <td>Sense must be learn </td>
    </tr>
    <tr>
      <td>Lower entry barrier</td>
      <td>High entry barrier </td>
    </tr>
  </tbody>
</table>
<ul>
  <li>The threshold for self-evidency depends on the reader.</li>
  <li>Finding good names is difficult, so we should try to avoid.</li>
  <li>Functions can do three things:
  <ul>
    <li>Pull data into scope: Name should describe the data type it returns.</li>
    <li>Transform data in scope: Avoid verbs.</li>
    <li>Push data to another scope: Name should be the effect it has.</li>
  </ul></li>
  <li>At least one function in every process must do all three. This functions are difficult to reuse.</li>
  <li>All functions in a namespace should operate on a common data type and/or data scope.</li>
  <li>As few namespaces as possible.</li>
  <li>Macros are poor means of indirection.</li>
</ul><h2><a name="ch-2"></a>Idioms</h2>
<ul>
  <li>Prefer <code>&lt;</code> or <code>&lt;=</code>. Always use the same.</li>
  <li>Avoid named parameters.</li>
  <li>Only use <code>letfn</code> when mutual recursion is required.</li>
  <li>Use <code>for</code> for cartesian products.</li>
  <li>Check for <code>nil</code> at regular intervals.</li>
</ul><h2><a name="ch-3"></a>Indirection</h2>
<ul>
  <li>Two indirection tools:
  <ul>
    <li>References:
    <ul>
      <li>Conveys values.</li>
      <li>Open.</li>
    </ul></li>
    <li>Conditionals:
    <ul>
      <li>Decides based upon values.</li>
      <li>Closed: to change them, we need to change code.</li>
    </ul></li>
  </ul></li>
  <li><code>nil</code> has been know to cause runtime errors.</li>
  <li>For a decision mechanism to be open it must be unordered: table with unique keys.</li>
  <li>Indirection is a mechanism for creating abstractions.</li>
  <li>Indirection allow us to work with a codebase without completely understand it.</li>
  <li>Proofs lack context: they are only concern with being self-consistent.</li>
  <li>In SW, we don&rsquo;t have the luxury of ignoring context. Our models must be self-consistent and useful within our context.</li>
  <li>Self-consistency is objective, usefulness is subjective.</li>
  <li>Model for modules:
  <ul>
    <li>Model: data and functions.</li>
    <li>Interface: means by which model and environment interact.</li>
    <li>Environment: everything else.</li>
    <li>Assumption: everything that the model does not represent.</li>
    <li>Invariants: to avoid model&rsquo;s invalid states.</li>
    <li>Invalid states: those which cannot be found in the environment.</li>
  </ul></li>
</ul><p><img src="/images/blog/elements-of-clojure/modules-model.jpg" alt="Module model" title="A model for modules" /></p>
<ul>
  <li>Better models: those with less exceptions.</li>
  <li>Reasoning:
  <ul>
    <li>Deductive:
    <ul>
      <li>Conclusions are necessary: if they are wrong is because the initial assumptions were wrong.</li>
      <li>Tries to predict.</li>
    </ul></li>
    <li>Inductive:
    <ul>
      <li>By analogy, only compares.</li>
      <li>Conclusions are contingent: they are allowed to be wrong.</li>
    </ul></li>
  </ul></li>
  <li>Inductive is more resilient than deductive at the cost of not being optimal.</li>
  <li>Model satisfices if it is good enough given the environment.</li>
  <li>The models of SW are build atop inductive analogies and aspire only to satisfice.</li>
  <li>Broad assumptions means smaller models which means simpler code.</li>
  <li>Group models with similar assumptions, wrap them in a single layer that enforces those assumptions.</li>
  <li>Abstractions that fail together should stay together.</li>
  <li>Better modules == more useful.</li>
  <li>Models reflect our perception of their environment.
  <ul>
    <li>There is no objective measure of the importance of a given facet.</li>
  </ul></li>
  <li>A module is useful only if its assumptions are sound now and in the near future.</li>
  <li>Over-engineered code == too few assumptions.</li>
  <li>Every conversation about SW can be more productive by describing, up front, our subjective understanding of its environment.</li>
  <li>We are constantly drawn to software we don&rsquo;t know well enough to dislike.</li>
  <li>Confidence requires understanding: I disagree! <a href="https://en.wikipedia.org/wiki/Four_stages_of_competence">Unconscious incompetence</a></li>
  <li>A module cannot prevent itself to be misused.</li>
  <li>Convention: how we enforce assumptions that are not hidden away by an abstraction layer (because abstraction layer is too expensive to build or execute)
  <ul>
    <li>Are a useful tool but not a solution.</li>
  </ul></li>
  <li>The &ldquo;seniority&rdquo; of an engineer derives more from their ability to predict adverse environments than from mastery of any particular technology.</li>
  <li>The easiest way to know that a failure mode exists is to see it happen.</li>
  <li>If a model cant fit in our head, it has little value.
  <ul>
    <li>As growing a model is not a problem if our understanding grows with it. Still a problem for new people.</li>
    <li>As we internalize a model, individual faces coalesce into larger, more manageable concepts.</li>
  </ul></li>
  <li>If we dont solve a user&rsquo;s problem, someone else will.</li>
  <li>City planning is a better metaphor for SW development than civil engineering.</li>
  <li>SW would be easy if thing never changed.</li>
  <li>Build SW from principled components (build to be discarded), separated by interfaces where necessary (build to last).</li>
  <li>Principled systems:
  <ul>
    <li>Minimal indirection.</li>
    <li>Hierarchical: each layer smaller, faster and with broader assumptions.</li>
    <li>Fragile.</li>
    <li>Easier to understand (per layer).</li>
  </ul></li>
  <li>Adaptable system:
  <ul>
    <li>Loads of indirection.</li>
    <li>Larger component, less efficient, redundant.</li>
    <li>More flexible.</li>
  </ul></li>
  <li>Clojure promote the creation of adaptable software.</li>
</ul><h2><a name="ch-4"></a>Composition</h2>
<ul>
  <li>The ultimate goal of composition is to define processes.</li>
  <li>Process always:
  <ul>
    <li>Pull data from environment.</li>
    <li>Transform data.</li>
    <li>Push data to environment.</li>
    <li>Keep them separated until the last possible moment.</li>
  </ul></li>
  <li>Communication between processes is only possible via shared references.</li>
  <li>(side) effect: any change to shared references.</li>
  <li>We can consider a process in isolation if:
  <ul>
    <li>Performance isnt a primary concern.</li>
    <li>Some (timeout) failures are acceptable.</li>
  </ul></li>
  <li>Any system that exceeds our understanding will inevitably grow a bit slow and flaky.</li>
  <li>Execution model: strategies describing what our process will do when its environment provides too much or too little.</li>
  <li>Push and pull phases:
  <ul>
    <li>Enforce invariants.</li>
    <li>Context dependant.</li>
  </ul></li>
  <li>Transform:
  <ul>
    <li>Functional.</li>
    <li>Either accrete, reduce or reshape.</li>
    <li>Return a descriptor of the effects to be performed.</li>
  </ul></li>
  <li>Keep transform code in a different namespace than push/pull code.</li>
  <li>In a robust process, pull phase invokes transform phase so handling errors is a pull phase concern.
  <ul>
    <li>Using lazy-seqs with side effects breaks this rule.</li>
  </ul></li>
</ul>]]>
</description>
</item>
<item>
<title>
Book notes: The Manager's Path
</title>
<link>
https://danlebrero.com/2020/07/22/the-managers-path-book-summary/
</link>
<guid>
https://danlebrero.com/2020/07/22/the-managers-path-book-summary/
</guid>
<pubDate>
Wed, 22 Jul 2020 10:00:00 +0200
</pubDate>
<description>
<![CDATA[<p>These are my notes on <a href="https://twitter.com/skamille">Camille Fournier</a>&rsquo;s <a href="https://www.amazon.com/Managers-Path-Leaders-Navigating-Growth-ebook/dp/B06XP3GJ7F">The Manager&rsquo;s Path</a>. </p><p>I specially liked that the book is IT specific and that it lays down all the different levels on the management ladder, so you can get a feeling of what you will be expected to do at each level and decide which level is the one that you would like to aspire to.</p><p>Excellent read. </p><h1>Key Insights</h1>
<ul>
  <li>The only person you can change is yourself.</li>
  <li>Asking for advice is a way of showing trust and respect.</li>
  <li>Listening is a precursor to empathy.</li>
  <li>If you want autonomy over your work, you must gain mastery over your time.</li>
  <li>Create a safe environment for disagreement to work itself out.</li>
  <li>Practice continuous feedback.</li>
  <li>Real potential in people show itself quickly.</li>
  <li>Be kind, not nice.</li>
  <li>Delegation is essential for career growth.</li>
  <li>Ways to say no:
  <ul>
    <li>&ldquo;YES, AND &hellip;&rdquo; state what would require to say yes or what it will impact.</li>
  </ul></li>
  <li>As a manager, your first team is not the people that report to you but your peers.</li>
  <li>As a manager, ask yourself:
  <ul>
    <li>Can I do this faster (by cutting scope)?</li>
    <li>Do I need to be doing this at all?</li>
    <li>What value am I providing with this work?</li>
  </ul></li>
  <li>Management is a very culture-specific task.</li>
  <li>Managing outside your skill set: be curious, ask questions, learn.</li>
  <li>Boring meetings are a sign of dysfunctional teams.</li>
  <li>We learn the most from failures.</li>
  <li>Process is risk management.</li>
  <li>CTO shape business strategy through the lens of technology.</li>
  <li>You will be measured against the company&rsquo;s values.
  <ul>
    <li>If your values are not those of the company, you will struggle.</li>
  </ul></li>
  <li>You have to be able to manage yourself if you want to be good at managing others.
  <ul>
    <li>For this, you need to understand yourself.</li>
  </ul></li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#ch-1">1 - Management 101</a></li>
  <li><a href="#ch-2">2 - Mentoring</a></li>
  <li><a href="#ch-3">3 - Tech Lead</a></li>
  <li><a href="#ch-4">4 - Managing People</a></li>
  <li><a href="#ch-5">5 - Managing a team</a></li>
  <li><a href="#ch-6">6 - Managing Multiple Teams</a></li>
  <li><a href="#ch-7">7 - Managing Managers</a></li>
  <li><a href="#ch-8">8 - The Big Leagues</a></li>
  <li><a href="#ch-9">9 - Bootstrapping Culture</a></li>
  <li><a href="#ch-10">Conclusion</a></li>
</ul><h1><a name="ch-1"></a>Chapter 1 - Management 101</h1>
<ul>
  <li>What to expect from a manager:
  <ul>
    <li>Grow your career:
    <ul>
      <li>Help find the training/conf/books.</li>
      <li>Find &ldquo;stretch&rdquo; projects.</li>
    </ul></li>
    <li>Feedback.</li>
    <li>Figure out what you need to learn.</li>
    <li>Understand what to focus on and enable you to have that focus.</li>
    <li>Take your manager&rsquo;s job.</li>
    <li>Find a sense of purpose in day-to-day by connecting what you do with the overall picture.</li>
  </ul></li>
  <li>1-2-1 purpose:
  <ul>
    <li>Create human connection.</li>
    <li>Discuss privately.</li>
    <li>Not a status meeting.</li>
    <li>Must be regular.</li>
  </ul></li>
  <li>Feedback:
  <ul>
    <li>Public for praise, private for criticism.</li>
    <li>Behavioural feedback.</li>
  </ul></li>
  <li>How to be managed:
  <ul>
    <li>Spend time thinking about what you want.</li>
    <li>You are responsible for yourself.</li>
    <li>The only person you can change is yourself.</li>
    <li>Asking for advice is a way of showing trust and respect.</li>
  </ul></li>
</ul><h2><a name="ch-2"></a>Chapter 2 - Mentoring</h2>
<ul>
  <li>Listening is a precursor to empathy.</li>
</ul><h2><a name="ch-3"></a>Chapter 3 - Tech Lead</h2>
<ul>
  <li>Not a point in the ladder, but a temporal role.</li>
  <li>At least 30% time coding.</li>
  <li>Main new skill: project management.</li>
  <li>Learn how to balance your time of tech work vs management work.</li>
  <li>If you want autonomy over your work, you must gain mastery over your time.</li>
  <li>Tech Lead roles:
  <ul>
    <li>Software developer.</li>
    <li>System architect.</li>
    <li>Business analysts.</li>
    <li>Project planner.</li>
    <li>Team leader.</li>
  </ul></li>
  <li>Expect the tech lead position to be a big increase in responsibility and workload.</li>
  <li>Project management is a necessary pain:
  <ul>
    <li>Break deliverables into small tasks.</li>
    <li>Sort task in the most efficient way.</li>
    <li>Push through unknowns.</li>
  </ul></li>
  <li>Successful team leads excel at communication:
  <ul>
    <li>Read/write.</li>
    <li>Speak/listen.</li>
    <li>Note taking.</li>
  </ul></li>
</ul><h2><a name="ch-4"></a>Chapter 4 - Managing People</h2>
<ul>
  <li>New hire:
  <ul>
    <li><a href="https://larahogan.me/blog/first-one-on-one-questions/">First 1-2-1 questions</a>.</li>
    <li>Create a 30/60/90 plan.</li>
  </ul></li>
  <li>1-2-1 styles:
  <ul>
    <li>TODO list:
    <ul>
      <li>Professional and efficient but cold.</li>
      <li>Forces to think beforehand.</li>
      <li>Items to discuss should be worth the face to face time.</li>
    </ul></li>
    <li>Catch-up:
    <ul>
      <li>Listen to what report thinks is most important.</li>
      <li>Careful with too much complaining.</li>
    </ul></li>
    <li>Feedback meeting:
    <ul>
      <li>Quarterly enough for career development.</li>
      <li>Review process towards goals.</li>
    </ul></li>
    <li>Progress report (when managing managers).</li>
  </ul></li>
  <li>Get to know your report at a personal level.</li>
  <li>Take notes in a shared document.</li>
  <li>Delegate effectively:
  <ul>
    <li>Do not &ldquo;intervene&rdquo; if:
    <ul>
      <li>Team is making progress on its goals.</li>
      <li>System&rsquo;s are stable.</li>
      <li>Product manager is happy.</li>
    </ul></li>
    <li>If a team has no goals, use what you want to monitor to help them create one.</li>
    <li>Gather information yourself from system instead of asking the team.</li>
  </ul></li>
  <li>Continuous feedback:
  <ul>
    <li>You must know your people.</li>
    <li>Forces you to pay attention to individuals.</li>
    <li>Makes it easy to foster talent.</li>
    <li>Practice tricky conversations in the small.</li>
    <li>Weekly for everyone who reports to you.</li>
    <li>Start with positive feedback.</li>
  </ul></li>
  <li>Performance reviews:
  <ul>
    <li>Include the whole year: summarize the 1-2-1.</li>
    <li>It is not a one hour process, but much longer.</li>
    <li>Use concrete examples to avoid bias.</li>
    <li>Spend plenty of time on accomplishments.</li>
    <li>Keep the areas of improvement focus.</li>
  </ul></li>
  <li>Real potential in people show itself quickly.</li>
  <li>Keep an eye out for opportunities for your team members to stretch themselves and grow.</li>
</ul><h2><a name="ch-5"></a>Chapter 5 - Managing a team</h2>
<ul>
  <li>New set of skills and challenges.</li>
  <li>Engineering managers:
  <ul>
    <li>Must be technically credible to get the respect of the engineering team.</li>
    <li>Keep contributing to code so you can see the bottlenecks.</li>
  </ul></li>
  <li>Dysfunctional teams:
  <ul>
    <li>Not shipping: Tools/processes poor.</li>
    <li>People drama: negative, brilliant jerk, gossip.</li>
    <li>Unhappiness due to overwork:
    <ul>
      <li>Pay tech debt.</li>
      <li>If time-critical release:
      <ul>
        <li>Play cheerleader.</li>
        <li>Cut features.</li>
        <li>Push back date.</li>
        <li>Contribute.</li>
      </ul></li>
    </ul></li>
    <li>Collaboration problems:
    <ul>
      <li>With other teams:
      <ul>
        <li>Regular catch up with peers to work through issues.</li>
        <li>Actionable feedback.</li>
      </ul></li>
      <li>Within the team:
      <ul>
        <li>Team building activities.</li>
      </ul></li>
    </ul></li>
  </ul></li>
  <li>Learn enough about the product and customers.</li>
  <li>Long term vision of technology and product.</li>
  <li>Create a safe environment for disagreement to work itself out.</li>
  <li>Managing conflict:
  <ul>
    <li>Don&rsquo;t rely exclusively on voting.</li>
    <li>Set up clear process to depersonalize decisions.</li>
    <li>Don&rsquo;t turn a blind eye on simmering issues.</li>
    <li>Don&rsquo;t take it out on the other teams.</li>
    <li>Be kind, not nice.</li>
    <li>Don&rsquo;t be afraid of conflict.</li>
  </ul></li>
  <li>Psychological safety: you are willing to take risks and make mistakes in front of others.</li>
  <li>Don&rsquo;t hire brilliant jerks as it is too difficult to get rid of one.</li>
  <li>Get rid of the people that don&rsquo;t respect you as a manager, or the team.</li>
  <li>Non-communicator:
  <ul>
    <li>Raise his habits asap.</li>
    <li>Find the root cause of the hiding.</li>
  </ul></li>
  <li>Advanced project management:
  <ul>
    <li>Use agile for short term.</li>
    <li>10 productive weeks per quarter.</li>
    <li>Budget 20% for tech debt.</li>
    <li>Cut features as deadline approaches.</li>
    <li>Spend time planning and estimating.</li>
  </ul></li>
</ul><h2><a name="ch-6"></a>Chapter 6 - Managing Multiple Teams</h2>
<ul>
  <li>No more coding. You will miss coding.</li>
  <li>Be fluent in at least one programming language before taking this role.</li>
  <li>Manage your own time: <a href="https://jamesclear.com/eisenhower-box">Eisenhower Matrix</a>.</li>
  <li>How much time did you spent on non-urgent but important tasks?</li>
  <li>Delegate:</li>
</ul>
<table>
  <thead>
    <tr>
      <th> </th>
      <th>Frequent </th>
      <th>Infrequent </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Simple </td>
      <td>Delegate </td>
      <td>Do it yourself </td>
    </tr>
    <tr>
      <td>Complex </td>
      <td>Delegate carefully </td>
      <td>Delegate for training </td>
    </tr>
  </tbody>
</table>
<ul>
  <li>Delegation is essential for career growth.</li>
  <li>Ways to say no:
  <ul>
    <li>&ldquo;YES, AND &hellip;&rdquo; state what would require to say yes or what it will impact.</li>
    <li>Create policies that clearly define what is needed for a yes.</li>
    <li>&ldquo;Help me say yes&rdquo;: ask questions.</li>
    <li>&ldquo;Not right now&rdquo;: you must do something later.</li>
    <li>Ask a peer to say no in your behalf.</li>
    <li>Don&rsquo;t delay saying no.</li>
  </ul></li>
  <li>Your technical focus at this level is to improve the system of work that your developers are operating within.</li>
  <li>Durable teams are built on a shared purpose that comes from the company itself, and they align themselves with the company&rsquo;s values.</li>
  <li>As a manager, your first team is not the people that report to you but your peers.</li>
  <li>Ask yourself:
  <ul>
    <li>Can I do this faster (by cutting scope)?</li>
    <li>Do I need to be doing this at all?</li>
    <li>What value am I providing with this work?</li>
  </ul></li>
</ul><h2><a name="ch-7"></a>Chapter 7 - Managing Managers</h2>
<ul>
  <li>Same as managing multiple teams, but an order of magnitude bigger. New set of skills.</li>
  <li>Things are obscured by the additional level of abstraction.</li>
  <li>Skip-Level meetings:
  <ul>
    <li>Critical to build trust and engagement.</li>
    <li>Either quarterly 1-2-1 or group lunches.</li>
    <li>Prompts in page 129.</li>
  </ul></li>
  <li>Open-Door policy does not work.</li>
  <li>Managers should make your life easier, by bringing clear problems before they turn into raging fires.</li>
  <li>Make managers accountable for their teams.</li>
  <li>New managers need a lot of coaching:
  <ul>
    <li>How to do 1-2-1.</li>
    <li>How to let go previous work.</li>
    <li>How to not become a control freak.</li>
    <li>Find external training.</li>
  </ul></li>
  <li>Management is a very culture-specific task,
  <ul>
    <li>Hence is better to promote people that has been in the company for long and already understand the culture.</li>
  </ul></li>
  <li>Culture fit more important than industry-specific knowledge.</li>
  <li>Hiring managers - Page 140:
  <ul>
    <li>Do reference checks.</li>
  </ul></li>
  <li>Managing outside your skill set: be curious, ask questions, learn.</li>
  <li>Boring meetings are a sign of dysfunctional teams.</li>
  <li>People need to feel an understanding and connection with the purpose of their work.</li>
  <li>Your technical responsibility is to optimize tech investments by matching it to future product or customer needs.</li>
</ul><h2><a name="ch-8"></a>Chapter 8 - The Big Leagues</h2>
<ul>
  <li>As tech senior managers, we bring a willingness to embrace and drive change as needed.</li>
  <li>Be a leader; your company looks to you for:
  <ul>
    <li>What to do.</li>
    <li>Where to go.</li>
    <li>How to act.</li>
    <li>How to think.</li>
    <li>What to value.</li>
    <li>Make hard decisions without perfect information.</li>
    <li>Understand current business landscape and plan for possible futures.</li>
    <li>Hold individuals/teams accountable.</li>
  </ul></li>
  <li>4 tasks:
  <ul>
    <li>Information gathering or sharing.</li>
    <li>Nudging.</li>
    <li>Decision making.</li>
    <li>Role modeling.</li>
  </ul></li>
  <li>Possible roles:
  <ul>
    <li>R&amp;D.</li>
    <li>Tech strategy.</li>
    <li>Organization.</li>
    <li>Execution.</li>
    <li>External face of technology.</li>
    <li>Infrastructure and tech operations manager.</li>
    <li>Business executive.</li>
  </ul></li>
  <li>CTO must care about business and shape business strategy through the lens of technology.</li>
  <li>CTO without management responsibilities will have little influence.</li>
  <li>To make something top priority, ou need to explicitly kill or postpone in-flight work.</li>
  <li>You need to communicate things three or more times before it sinks.</li>
  <li>Setting strategy:
  <ul>
    <li>Improve operational efficiency.</li>
    <li>Expand features.</li>
    <li>Grow the business.</li>
    <li>It entitles:
    <ul>
      <li>Tech architecture.</li>
      <li>Team structure.</li>
      <li>Understanding direction of business.</li>
    </ul></li>
  </ul></li>
  <li>Delivery bad news:
  <ul>
    <li>Do it by individuals or small groups.</li>
    <li>Must be in-person.</li>
    <li>Don&rsquo;t force yourself to delive if you cannot stand behind it.</li>
    <li>Be honest.</li>
  </ul></li>
  <li>CEO as a boss:
  <ul>
    <li>Getting 1-2-1 time is a challenge.
    <ul>
      <li>Bring topics, set up agenda.</li>
    </ul></li>
    <li>Bring solutions, not problems.</li>
    <li>Ask for advice.</li>
    <li>Don&rsquo;t be afraid of repeating yourself.</li>
    <li>Be supportive.</li>
    <li>Look for coaching and skills development in other places.</li>
  </ul></li>
  <li>Your team:
  <ul>
    <li>Peers in other functions.</li>
    <li>First focus on the success of business, then on their departments.</li>
    <li>You trust them as experts in their areas.</li>
    <li>You trust they are not trying to undermine you.</li>
    <li>Disagreement in leadership team is ok, but once a decision is made, team shows a united front.</li>
  </ul></li>
  <li>You need to detach from your previous team:
  <ul>
    <li>Avoid having favourites.</li>
    <li>People to take you seriously.</li>
    <li>People will copy your behaviours.</li>
    <li>Your presence will change the behaviour.</li>
    <li>Do not discuss uncertainty with your old peers.</li>
    <li>Care even more about individuals.</li>
  </ul></li>
  <li>True North: core principles that a person in a functional role must keep in mind as he does his job.</li>
</ul><h2><a name="ch-9"></a>Chapter 9 - Bootstrapping Culture</h2>
<ul>
  <li>You need an hypothesis to learn from new processes and structures.</li>
  <li>Structure allow to scale, diversify and take on more complex long-term tasks.</li>
  <li>We learn the most from failures: examine failures to decide what structure needs to be added.</li>
  <li>Culture is how things get done, without people having to think about it &ndash; Frederick Laloux.</li>
  <li>You will be measured against the company&rsquo;s values.
  <ul>
    <li>If your values are not those of the company, you will struggle.</li>
  </ul></li>
  <li>Culture:
  <ul>
    <li>Map company values to tech team, maybe adding a couple that are specially important.</li>
    <li>Reinforce by rewarding people that exhibit the values in a positive way.</li>
    <li>Use when hiring.</li>
  </ul></li>
  <li>Create a career ladder - Page 202.</li>
  <li>Process is risk management.</li>
</ul><h2><a name="ch-10"></a>Conclusion</h2>
<ul>
  <li>You have to be able to manage yourself if you want to be good at managing others.
  <ul>
    <li>You need to understand yourself.</li>
  </ul></li>
  <li>Masters of working through conflict.</li>
  <li>Meditate.</li>
  <li>Get curious.</li>
  <li>Look for the other side of the story.</li>
</ul>]]>
</description>
</item>
<item>
<title>
Book notes: The Pragmatic Programmer, 20th Anniversary Edition
</title>
<link>
https://danlebrero.com/2020/07/08/the-pragmatic-programmer-20th-anniversary-edition-book-summary/
</link>
<guid>
https://danlebrero.com/2020/07/08/the-pragmatic-programmer-20th-anniversary-edition-book-summary/
</guid>
<pubDate>
Wed, 08 Jul 2020 10:00:00 +0200
</pubDate>
<description>
<![CDATA[<p>These are my notes on <a href="https://twitter.com/pragdave">David Thomas</a> and <a href="https://twitter.com/PragmaticAndy">Andrew Hunt</a>&rsquo;s <a href="https://pragprog.com/titles/tpp20/">The Pragmatic Programmer, 20th anniversary edition</a>. </p><p>The original version was in my &ldquo;must read&rdquo; list for any software developer, and this update version one is no different.</p><p>Key insight: After reading the new edition, I have come to realize of how huge an impact the first edition made on my career. I can see that most of <a href="/2018/07/04/habits-of-efficient-developers-wearedevelopers-2018-video/#content">my advice</a> is rooted in this book.</p><p>It is also nice to see how the authors have come to the same conclusions regarding functional programming (Clojure style) and OO that I have. From the &ldquo;transforming programming&rdquo; section:</p>
<ul>
  <li>All programs transform data, converting input into an output.</li>
  <li>When we think of programs as something that transforms input into output, many of the details we previously worry about just evaporate. The structure becomes clearer, the error handling consistent and coupling drops way down.</li>
</ul><p>See <a href="https://www.youtube.com/watch?v=iLMiPhYVG8w">Dave Thoma&rsquo;s YOW! keynote</a> for a longer explanation.</p><p>You can find all the tips <a href="https://pragprog.com/tips/">here</a>.</p><h1>Key Insights</h1>
<ul>
  <li>You own your life.</li>
  <li>Good enough software.</li>
  <li>Most important strategic asset: learn to learn.</li>
  <li>A team that doesn&rsquo;t continuously experiment with their process is not an agile team.</li>
  <li><p>Tip 76: Programmers help people understand what they want.</p>
  <blockquote>Perfection is achieved not when there is nothing left to add but when there is nothing left to take away. <cite>Antoine de Saint-Exupéry, Wind, Sand and Stars 1939.</cite>
  </blockquote></li>
  <li>Try it.</li>
  <li>How will you know that we&rsquo;ve all been successful after this project is done?</li>
  <li>Moral compass:
  <ol>
    <li>Have I protected the user?</li>
    <li>Would I use this myself?</li>
  </ol></li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#ch-0">Preface</a></li>
  <li><a href="#ch-1">1 - Pragmatic Philosophy</a></li>
  <li><a href="#ch-2">2 - A Pragmatic Approach</a></li>
  <li><a href="#ch-3">3 - The Basic Tools</a></li>
  <li><a href="#ch-4">4 - Pragmatic Paranoia</a></li>
  <li><a href="#ch-5">5 - Bend, or Break</a></li>
  <li><a href="#ch-6">6 - Concurrency</a></li>
  <li><a href="#ch-7">7 - While You Are Coding</a></li>
  <li><a href="#ch-8">8 - Before the Project</a></li>
  <li><a href="#ch-9">9 - Pragmatic Projects</a></li>
  <li><a href="#ch-10">Postface</a></li>
</ul><h1><a name="ch-0"></a>Preface</h1>
<ul>
  <li>There is no best solution.</li>
  <li>Tip 1: Care about your craft.</li>
  <li>Tip 2: Think about your work.</li>
  <li>Software is engineering with individual craftsmanship.</li>
  <li>Kaizen: continuous improvement, every day.</li>
</ul><h1><a name="ch-1"></a>Chapter 1 - Pragmatic Philosophy</h1>
<ul>
  <li>You own your life.</li>
  <li>Team trust is essential.</li>
  <li>Provide options, not excuses.</li>
  <li>Tip 5: No broken windows.</li>
  <li>People find it easy to join an ongoing success.</li>
  <li>Good enough software.</li>
  <li>Most important strategic asset: learn to learn.</li>
  <li>Your knowledge is the most important asset.</li>
</ul><h2><a name="ch-2"></a>Chapter 2 - A Pragmatic Approach</h2>
<ul>
  <li>Tip 14: Good design is easier to change.</li>
  <li>Programmers are constantly in maintenance mode.</li>
  <li>Tip 18: There are no final decisions.</li>
  <li>Tip 20: Tracer Bullets (aka. walking skeleton).</li>
  <li>Tip 21: Prototype to learn.</li>
  <li>Learn what you see risk in.</li>
  <li>Keep a log of your estimates, find out why went wrong for those with &gt; 50% of error.</li>
</ul><h2><a name="ch-3"></a>Chapter 3 - The Basic Tools</h2>
<ul>
  <li>Tip 25: Keep knowledge in plain text.</li>
  <li>Keep an engineering daybook.</li>
</ul><h2><a name="ch-4"></a>Chapter 4 - Pragmatic Paranoia</h2>
<ul>
  <li><a href="https://wiki.c2.com/?LetItCrash">Crash, dont trash</a>.</li>
  <li>Leave assertions on in production.</li>
  <li>Tip 42: Take small steps - Always.</li>
</ul><h2><a name="ch-5"></a>Chapter 5 - Bend, or Break</h2>
<ul>
  <li>Tip 45: Tell, dont ask</li>
  <li>Events:
  <ul>
    <li>Finite state machines.</li>
    <li>PubSub</li>
    <li>Reactive programming.</li>
  </ul></li>
  <li>All programs transform data, converting input into an output.</li>
  <li>When we think of programs as something that transforms input into output, many of the details we previously worry about just evaporate. The structure becomes clearer, the error handling consistent and coupling drops way down.</li>
  <li>Big reason that OO systems are hard to change: encapsulation.</li>
</ul><h2><a name="ch-6"></a>Chapter 6 - Concurrency</h2>
<ul>
  <li>Agents.</li>
  <li>Blackboards.</li>
</ul><h2><a name="ch-7"></a>Chapter 7 - While You Are Coding</h2>
<ul>
  <li>When stuck, give yourself a break.</li>
  <li>Tip 34: Dont assume, prove it.</li>
  <li>Dont let existing code dictate future code.</li>
  <li>Tip 65: Refactor early, refactor often.</li>
  <li>TDD FTW.</li>
  <li>Property-based testing FTW.</li>
</ul><h2><a name="ch-8"></a>Chapter 8 - Before the Project</h2>
<ul>
  <li>Perfection is achieved not when there is nothing left to add but when there is nothing left to take away. Antonie de St. Exupery, Wind, Sand and Stars 1939.</li>
  <li>Tip 75: No one know what exactly what they want.</li>
  <li>Tip 76: Programmers help people understand what they want.</li>
  <li>Tip 78: Work with a user to think like a user.</li>
  <li>The only requirements document is working code.</li>
  <li>Tip 80: Use a project glossary.</li>
  <li>A team that doesn&rsquo;t continuously experiment with their process is not an agile team.</li>
</ul><h2><a name="ch-9"></a>Chapter 9 - Pragmatic Projects</h2>
<ul>
  <li>Tip 84: Maintain small, stable teams.</li>
  <li>Tip 85: Schedule it to make it happen.</li>
  <li>Team speaks with one voice to the rest of the org.</li>
  <li>Generate a team brand.</li>
  <li>Good communication: instant and frictionless.</li>
  <li>Try it.</li>
  <li>How will you know that we&rsquo;ve all been successful after this project is done?</li>
  <li>Tip 97: Sign your work.</li>
</ul><h2><a name="ch-10"></a>Postface</h2>
<ul>
  <li>Moral compass:
  <ol>
    <li>Have I protected the user?</li>
    <li>Would I use this myself?</li>
  </ol></li>
  <li>Tip 99: Dont enable scumbags.</li>
</ul>]]>
</description>
</item>
<item>
<title>
Book notes: Implementing Lean Software Development
</title>
<link>
https://danlebrero.com/2020/06/24/implementing-lean-software-development-book-summary/
</link>
<guid>
https://danlebrero.com/2020/06/24/implementing-lean-software-development-book-summary/
</guid>
<pubDate>
Wed, 24 Jun 2020 10:00:00 +0200
</pubDate>
<description>
<![CDATA[<p>These are my notes on <a href="https://twitter.com/mpoppendieck">Mary Poppendieck</a> and Tom Poppendieck&rsquo;s <a href="https://www.amazon.com/Implementing-Lean-Software-Development-Concept/dp/0321437381">Implementing Lean Software Development</a>. </p><p>After reading <a href="/2020/03/04/the-lean-mindset-summary/#content">The Lean Mindset</a>, I decided to reread my old (13 years!) &ldquo;Implementing Lean Software Development&rdquo; copy. Unsurprisingly, most of the content still applies today.</p><h1>Key Insights</h1>
<ul>
  <li>Software development is a knowledge-creating process.</li>
  <li>Process should be improved by the team doing the work.</li>
  <li>Instead of predicting the future, aim to reduce response time so we can respond correctly as the future unfolds.</li>
  <li>Product quality is determined by quality of information flow.</li>
  <li>The cost of complexity is exponential.</li>
  <li>Dont automate complexity. Simplify before automating.</li>
  <li>Synergy between parts of any system is the key to the success of the system.</li>
  <li>When things go wrong, the cause is inherent to the system, and therefore is a management problem.</li>
  <li>Build cause of low quality and productivity is inherent to the system, hence must change the system to address those.</li>
  <li>The thing that turns a group into a team is the mutual commitment of the members to pool their various skills and work together for a common purpose.</li>
  <li>Teamwork is essential, but someone always needs to be responsible.</li>
  <li>You get what you reward:
  <ul>
    <li>Find effective ways to reward collaboration.</li>
  </ul></li>
  <li>Decisions: First decide when the decision must be made.</li>
  <li>IT Contracts: focus on how parties will work together to determine what to deliver, instead of an specification of what to build.</li>
  <li>Measure a few key indicators:
  <ul>
    <li>cycle time.</li>
    <li>financial results.</li>
    <li>customer satisfaction (NPS).</li>
  </ul></li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#ch-1">1 - History</a></li>
  <li><a href="#ch-2">2 - Principles</a></li>
  <li><a href="#ch-3">3 - Value</a></li>
  <li><a href="#ch-4">4 - Waste</a></li>
  <li><a href="#ch-5">5 - Speed</a></li>
  <li><a href="#ch-6">6 - People</a></li>
  <li><a href="#ch-7">7 - Knowledge</a></li>
  <li><a href="#ch-8">8 - Quality</a></li>
  <li><a href="#ch-9">9 - Partners</a></li>
  <li><a href="#ch-10">10 - Journey</a></li>
</ul><h1><a name="ch-1"></a>Chapter 1 - History</h1><p>Main point repeated in other chapters.</p><h2><a name="ch-2"></a>Chapter 2 - Principles</h2>
<ul>
  <li>Software development should be an empirical process.</li>
  <li>7 Principles:
  <ol>
    <li>Eliminate waste.</li>
    <li>Build Quality in:
    <ul>
      <li>Target is to not need a defect tracking system.</li>
      <li>Job of testing is to prevent defects.</li>
      <li>If final verification routinely triggers test-and-fix cycles, then the development process is defective.</li>
    </ul></li>
    <li>Create Knowledge:
    <ul>
      <li>Codify knowledge for use in future products is essential.</li>
      <li>Instead of predicting the future, aim to reduce response time so we can respond correctly as the future unfolds.</li>
    </ul></li>
    <li>Defer commitment:
    <ul>
      <li>Make decisions reversible.</li>
      <li>Last responsible moment.</li>
      <li>Plans are useless, planning is indispensable &ndash; Eisenhower.</li>
    </ul></li>
    <li>Deliver fast:
    <ul>
      <li>Repeatable and reliable speed is impossible without superior quality.</li>
      <li>Deep customer understanding.</li>
    </ul></li>
    <li>Respect people:
    <ul>
      <li>Give people goals.</li>
      <li>Process should be improved by the team doing the work.</li>
    </ul></li>
    <li>Optimize the whole (value stream):
    <ul>
      <li>From order to real need is addressed.</li>
      <li>Crossing organizational boundaries is expensive.</li>
    </ul></li>
  </ol></li>
</ul><h2><a name="ch-3"></a>Chapter 3 - Value</h2>
<ul>
  <li>Product development performance (Clack and Fujimoto, 1991):
  <ul>
    <li>Product quality is determined by quality of information flow.</li>
    <li>Customer quality: flow between marketplace and development team.</li>
    <li>Technical quality: flow between technical team members.</li>
  </ul></li>
  <li>To facilitate information flow:
  <ol>
    <li>Leadership:
    <ul>
      <li>Champion:
      <ul>
        <li>Understands the customer&rsquo;s job.</li>
        <li>Understands the technology that surprise them.</li>
        <li>Makes key product decisions.</li>
        <li>Accountable.</li>
        <li>Possible models:
        <ol>
          <li>Chief engineer:
          <ul>
            <li>Learn what the customer wants.</li>
            <li>With senior management direction.</li>
            <li>Role: Integrate knowledge.</li>
          </ul></li>
          <li>Leadership team:
          <ul>
            <li>Market expert + Technical expert (+ manufacturing expert)</li>
          </ul></li>
          <li>Shared leadership.</li>
        </ol></li>
      </ul></li>
    </ul></li>
    <li>Complete teams: Marketing + customer support + ops.</li>
  </ol></li>
  <li>Delight customers:
  <ul>
    <li>Discover needs that customer is not aware of.</li>
    <li>Exponential increase in satisfaction (<a href="https://en.wikipedia.org/wiki/Kano_model">Kano model</a>).</li>
  </ul></li>
  <li>Internal IT should be run as a software company:
  <ul>
    <li>Research what the market wants. Do not expect other to do it.</li>
    <li>Perform cost/benefit analysis. Do not implement everything that business asks for.</li>
    <li>Products are successful. Do not leave all responsibility to the business unit.</li>
    <li>Accountability rests on the business funding the effort.</li>
  </ul></li>
</ul><h2><a name="ch-4"></a>Chapter 4 - Waste</h2>
<ul>
  <li>Waste: Anything that does not add customer value or delays it.</li>
  <li>Write less code:
  <ul>
    <li>The cost of complexity is exponential.</li>
    <li>Justify every feature.</li>
    <li>Less bugs.</li>
    <li>Minimum useful feature set.</li>
    <li>Dont automate complexity. Simplify before automating.</li>
  </ul></li>
  <li>Seven wastes:
  <ul>
    <li>Partially done work:
    <ul>
      <li>Avoid with small batches.</li>
      <li>Too early requirements.</li>
      <li>Long live branches.</li>
      <li>Untested code.</li>
      <li>Undocumented features.</li>
      <li>Undeployed code.</li>
    </ul></li>
    <li>Extra features.</li>
    <li>Relearning:
    <ul>
      <li>Retrying something that did not work in the past.</li>
      <li>Not leveraging on existing knowledge.</li>
    </ul></li>
    <li>Hand-offs: tacit knowledge is lost.</li>
    <li>Task switching.</li>
    <li>Delays.</li>
    <li>Defects.</li>
  </ul></li>
  <li>Mapping the value stream:
  <ul>
    <li>Find the delays (queues) and loop-backs (churn).</li>
    <li>Map the process, not an event.</li>
    <li>Concept to cash.</li>
    <li>Preparation:
    <ul>
      <li>What to map.</li>
      <li>When to start/stop the timeline.</li>
      <li>Approval process should be included.</li>
    </ul></li>
    <li>Value from the point of view of the customer.</li>
    <li>Identify value stream owner.
    <ul>
      <li>Someone that cares about organization cross-boundary issues.</li>
    </ul></li>
    <li>Keep it simple:
    <ul>
      <li>About 10 steps.</li>
      <li>Value stream maps have no value by themselves.</li>
    </ul></li>
  </ul></li>
</ul><h2><a name="ch-5"></a>Chapter 5 - Speed</h2>
<ul>
  <li>Speed is the absence of waste.</li>
  <li>Cycle time is the measurement that alert us when anything is going wrong.</li>
  <li><a href="https://en.wikipedia.org/wiki/Little%27s_law">Little&rsquo;s Law</a>: in a stable system cycle time = things in process / average completion time.</li>
  <li>Reduce cycle time by:
  <ul>
    <li>Reduce WIP. (&lt;&ndash; cheaper)</li>
    <li>Increase speed.</li>
    <li>Event out the arrival of work.</li>
    <li>Establish regular cadence:
    <ul>
      <li>If big flurry of activity at the end of iteration, then iteration is too long.</li>
    </ul></li>
    <li>Limit work to capacity.</li>
    <li>Use pull schedule:
    <ul>
      <li>Queuing at the edges of the organization.</li>
      <li>Keep queues short: two cycles of work.</li>
      <li>Changes in queues are ok, but not once the work is being done.</li>
      <li>Team pulls works.</li>
      <li>Queue must have a max size.</li>
    </ul></li>
  </ul></li>
  <li>Unstable systems:
  <ul>
    <li>High variation: Fix by small batches.</li>
    <li>High utilization: Above 80%, things start to slow down.</li>
  </ul></li>
</ul><h2><a name="ch-6"></a>Chapter 6 - People</h2>
<ul>
  <li><a href="https://medium.com/10x-curiosity/system-of-profound-knowledge-ce8cd368ca62">System of profound knowledge</a> (Edwards Deming):
  <ol>
    <li>Appreciation for a system:
    <ul>
      <li>Synergy between parts of any system is the key to the success of the system.</li>
    </ul></li>
    <li>Knowledge about variation:
    <ul>
      <li>Build cause of low quality and productivity is inherent to the system, hence must change the system to address those.</li>
    </ul></li>
    <li>Theory of knowledge:
    <ul>
      <li><a href="https://en.wikipedia.org/wiki/PDCA">Deming cycle</a>: plan, do, check, act.</li>
    </ul></li>
    <li>Psychology:
    <ul>
      <li>When it comes to people, things that make a difference are skills, pride, expertise, confidence and cooperation.</li>
    </ul></li>
  </ol></li>
  <li>Deming&rsquo;s 14 points on quality for management (page 122):
  <ul>
    <li>(1) Dont focus on short-term profitability.</li>
    <li>(3) Quit depending on inspection to find defects.</li>
    <li>(6) Institute training.</li>
    <li>(8) Drive out fear.</li>
    <li>(9) Break down barriers between departments. Do not undermine team cooperation by rewarding individual performance.</li>
    <li>(11) Eliminate arbitrary deadlines. This is management by fear.</li>
  </ul></li>
  <li>When things go wrong, the cause is inherent to the system, and therefore is a management problem.</li>
  <li>Toyota&rsquo;s real innovation is its ability to harness the intellect of &ldquo;ordinary&rdquo; employees.</li>
  <li>Do you talk about trust with suppliers but insist on fixed price contracts?</li>
  <li>The thing that turns a group into a team is the mutual commitment of the members to pool their various skills and work together for a common purpose.</li>
  <li>Teamwork is essential, but someone always needs to be responsible.</li>
  <li>Process leadership != product leadership != technical leadership.</li>
  <li>Responsibility based planning and control:
  <ul>
    <li>Chief engineer sets synchronization events. Teams figure themselves how to meet them.</li>
    <li>Remember to:
    <ul>
      <li>Give people the time to do the job.</li>
      <li>Details will/can change.</li>
      <li>Limit work to capacity.</li>
    </ul></li>
    <li>The job of managing dependencies should fall to the system design, not the schedule.</li>
  </ul></li>
  <li>Self-directing work: everybody can figure out what is the most important thing they can do without being told.
  <ul>
    <li>Three levels of info:
    <ol>
      <li>Kanban:
      <ul>
        <li>Challenges:
        <ul>
          <li>Right size.</li>
          <li>Enough detail.</li>
          <li>Correct priority</li>
        </ul></li>
        <li>The card is not a specification.</li>
        <li>The card is a signal to bring together the right people to create the detailed design, verifications and implementations.</li>
      </ul></li>
      <li>Anden: Board with any abnormalities that requires attention.</li>
      <li>Dashboard:
      <ul>
        <li>How do people know their progress towards meeting the overall goal of their work?</li>
        <li>How well the team is doing.</li>
      </ul></li>
    </ol></li>
  </ul></li>
  <li>Two types of companies:
  <ul>
    <li>Economic company: exchange your skills for remuneration.</li>
    <li>River company: exchange your care and commitment for the fact that the company will try to develop you to your maximum potential.</li>
  </ul></li>
  <li>Eliminate annual performance ratings: They kill cooperation and pride.</li>
  <li>You get what you reward: Find effective ways to reward collaboration.</li>
  <li>Performance evaluation: time set aside to reflect on where your potential lies and next steps to develop that potential.</li>
  <li>When an employee is not performing, the first question a manager should ask is: What am I doing wrong?</li>
  <li>Compensation:
  <ol>
    <li>Make sure the promotion system is unassailable.</li>
    <li>De-empathize annual raises.</li>
    <li>Reward based on span of influence, not span of control.</li>
    <li>Find better motivators than money.</li>
  </ol></li>
</ul><h2><a name="ch-7"></a>Chapter 7 - Knowledge</h2>
<ul>
  <li>First step in any improvement effort should be to ask two basic questions (Art Smalley):
  <ul>
    <li>How do you intend to make a profit and satisfy your customers?</li>
    <li>What exactly is your main problem?</li>
  </ul></li>
  <li>Disciplined problem-solving method. Train everybody on this.</li>
  <li>Piles of documentation are useless as a learning tool:
  <ul>
    <li>Condense knowledge in a A3.</li>
    <li>If it does not fit an A3, use an A4.</li>
  </ul></li>
  <li>Decisions:
  <ul>
    <li>First decide when the decision must be made.</li>
  </ul></li>
  <li>The work of any SW development process is to create knowledge that gets embedded in the software.</li>
  <li>Set-Based design:
  <ul>
    <li>Implement several options at the same time.</li>
    <li>Each option is better but less likely to hit the deadline.</li>
    <li>When to use:
    <ul>
      <li>Unmovable deadline.</li>
      <li>Failure is not an option.</li>
    </ul></li>
    <li>Best method to meet deadlines and to learn the most.</li>
  </ul></li>
  <li>Refactoring is the fundamental enabler of limiting code complexity, increase change tolerance, value and longevity of the code.</li>
  <li>Kaizen Events:
  <ul>
    <li>Representatives from different functional areas to work intensely for a few days to solve a well defined critical problem.</li>
  </ul></li>
  <li>For longer improvements, see GE Workout.</li>
</ul><h2><a name="ch-8"></a>Chapter 8 - Quality</h2>
<ul>
  <li>Prioritize:
  <ol>
    <li>High value before lower value.</li>
    <li>High risk before lower risk.</li>
    <li>Features that create new knowledge before those well understood.</li>
    <li>Lower cost before higher cost.</li>
  </ol></li>
  <li>Standards: follow them, but also challenge them.</li>
  <li>Pair programming, automation, TDD, CI.</li>
</ul><h2><a name="ch-9"></a>Chapter 9 - Partners</h2>
<ul>
  <li>The fundamental reason for partnership is synergy: achieve better results through cooperation.</li>
  <li>Fuelled by trust and paid with applause.</li>
  <li>How to build global teams:
  <ul>
    <li>Frequent integration.</li>
    <li>Exchange people.</li>
    <li>Exchange tests.</li>
    <li>Proxy: one person acting as a proxy of a full remote team.</li>
    <li>Traveling team leader.</li>
    <li>No second-hand citizens.</li>
  </ul></li>
  <li>Outsourcing: avoid conflict of interest of employees and companies involved.</li>
  <li>Contracts&rsquo; purpose, either:
  <ol>
    <li>Protects each party from opportunistic behaviour.</li>
    <li>Setup appropriate incentives to work together in a synergistic way.</li>
  </ol></li>
  <li><a href="https://en.wikipedia.org/wiki/Relational_contract">Relational contracts</a></li>
  <li>IT Contracts: focus on how parties will work together to determine what to deliver, instead of an specification of what to build.</li>
</ul><h2><a name="ch-10"></a>Chapter 10 - Journey</h2>
<ul>
  <li>Start lean initiative by answering:
  <ol>
    <li>How do you create value for customers and make a profit?</li>
    <li>What is your main problem right now?</li>
    <li>What threatens your continued existence?</li>
    <li>What do you really believe about people?</li>
  </ol></li>
  <li>Effective way to start lean development:
  <ol>
    <li>Train team leaders and supervisors.</li>
    <li>Emphasize on-the-job thinking.</li>
    <li>Measure a few key indicators:
    <ul>
      <li>cycle time.</li>
      <li>financial results.</li>
      <li>customer satisfaction (NPS).</li>
    </ul></li>
  </ol></li>
  <li>Automation should aim to &ldquo;upskill&rdquo; workers, not &ldquo;deskill&rdquo; the process.</li>
  <li>Theory of Constraints:
  <ul>
    <li>New technology is useful if it removes a limitation.</li>
    <li>We must deal with the existing accommodations: existing rules/mechanisms to cope with the limitation.</li>
  </ul></li>
  <li>Critical chain:
  <ul>
    <li>Theory of constraints applied to projects.</li>
    <li>Product development is a project.</li>
    <li>Key constraint: estimates regarded as commitments.</li>
    <li>Because of this, people over-estimate, and then <a href="https://en.wikipedia.org/wiki/Parkinson%27s_law">Parkinson&rsquo;s law</a>.</li>
  </ul></li>
</ul>]]>
</description>
</item>
<item>
<title>
You dont believe in clean code
</title>
<link>
https://danlebrero.com/2020/06/10/you-dont-believe-in-clean-code/
</link>
<guid>
https://danlebrero.com/2020/06/10/you-dont-believe-in-clean-code/
</guid>
<pubDate>
Wed, 10 Jun 2020 11:45:00 +0200
</pubDate>
<description>
<![CDATA[<p>It happened again yesterday.</p><p>I was completely focused on some code when my manager jumped out of nowhere and started shouting: &ldquo;The cyclomatic complexity is fine and the coupling between packages is acceptable! Stop splitting that class! Don’t extract a new method! And for god’s sake, don’t you dare to write another test!&rdquo;</p><p>Or maybe it didn&rsquo;t happen yesterday, or the day before, or any day in my 20 years of professional experience. In fact, I have never seen it happen to anybody else.</p><p>One reason is because no manager knows what cyclomatic complexity is, they cannot name any refactoring, and they cannot distinguish test code from production code. And why should they? It is none of their business.</p><p>Another reason could be because good managers, even if they know our jargon, also know their limits and wisely stay away from the code. It is none of their business.</p><p>So how come even if none of my dozens of managers have ever implicitly or explicitly forbidden any technical practice, I still have seen plenty of poor codebases, bug-ridden applications and unmaintainable systems?</p><p>Could it be our fault? </p><h2>Time pressure</h2><p>Of course it is never our fault. If we had just been given the time to write clean code, to do some refactoring here and there, to write more tests, to follow all those &ldquo;best&rdquo; practices …</p><p>But no, your manager keeps on pushing for more features and arbitrary deadlines. So we are forced to cut some corners, and which corners do we choose to cut?</p><p>It is you that decides to not clean up, it is you that decides that each one should work on its own, it is you that decides to not write any tests. All those practices to improve quality have an extra cost. </p><p>And quality is expensive. </p><h2>Application Quality vs Code Quality</h2>
<blockquote><p>Quality is value to some person <cite>Jerry Weinberg</cite></p>
</blockquote><p>Application quality, without question, takes time: a pretty UI, an awesome UX, fast, slick, scalable, always available, feature <strike>rich</strike> correct&hellip; All those things are going to impact your clients’ perception of the quality of your application.</p><p>But what about code quality?</p><p>The state of your codebase and your systems, whether you use tabs or spaces, is completely irrelevant to your users. It has zero value to them.</p><p>Code quality is what developers value in a codebase.</p><p>And all the attributes that we value in a codebase can be distilled into one: how easy it is to change without negatively impacting the application quality.</p><p>And by easy to change, we mean that it is fast to make the change. </p><p>Code quality allows us to go faster, contradicting our perception of quality being expensive.</p><h2>Why code quality is perceived as expensive</h2><p>The reason code quality is perceived as expensive is because we are investing time on things that actually do not increase quality, that do not make us go faster. </p><p>Some of those things are:</p>
<ul>
  <li>Beautiful code</li>
  <li>Design for no change</li>
  <li>Abstractions</li>
  <li>Best practices</li>
</ul><h3>Beautiful code</h3><p>In my early years as a software developer, I read plenty of books and articles that made me believe that software development was like:</p><p><img src="/images/blog/clean-code/dreamy-software-developer.jpg" alt="dreamy-software-developer" /><br/><span style="background-color: #ecf0f1"><small>Image attribution: <a href="https://commons.wikimedia.org/wiki/File:Artist_at_Mansudae_Art_Studio,_Pyongyang_(10104200854).jpg" title="via Wikimedia Commons">Uri Tours (uritours.com)</a> / <a href="https://creativecommons.org/licenses/by-sa/2.0">CC BY-SA</a>.</small></span></p><p>This perception, coupled with the fact that even for the simplest work we were treated as geniuses, gave us the license to behave like <a href="https://en.wikipedia.org/wiki/Michelangelo">Michelangelo</a>:</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/xPJzhocW7vw" frameborder="0" allowfullscreen></iframe></p><p>But software development is not an art, code does not need to read as a novel, and your codebase is not a zen garden.</p><p>I have spent far too much time on pointless debates, endless refactorings and polishing sessions for the sake of <em>beautiful</em> code. It was mentally very satisfying but it had little actual business value.</p><p>And as much as the romantic vision of craftsmanship is very appealing, I wish that the craftsmanship <a href="https://www.amazon.com/Software-Craftsman-Professionalism-Pragmatism-Pride/dp/0134052501">books</a>’ <a href="https://www.amazon.com/Software-Craftsmanship-Imperative-Pete-McBreen/dp/0201733862">covers</a> showed the kind of craftsman that I now identify the most with:</p><p><img src="/images/blog/clean-code/real-software-craftsman.jpg" alt="real-software-craftman" /><br/><span style="background-color: #ecf0f1"><small>Image attribution: <a href="https://oficiossite.wordpress.com/2017/05/14/oficio-del-pintor-de-brocha-gorda/">Pintor de brocha gorda</a> by <a href="https://oficiossite.wordpress.com"><a href="https://oficiossite.wordpress.com">https://oficiossite.wordpress.com</a><a></small></span></p><p>Maybe not as sexy, but more in line with what we actually do.</p><p>Remember that the most <em>beautiful</em> thing that you can do with any code is <a href="http://blog.cognitect.com/blog/2016/3/17/the-new-normal-protected-asset-or-disposable-inventory">delete it</a>.</p><h3>Design for no change</h3><p>Change is a constant in software development.</p><p>The common wisdom to cope with change is to add enough hooks, extension points and interfaces in our design so that when change comes, we do not need to change the existing code.</p><p>We cope with change by designing for no-change. </p><p>And how <em>beautiful</em> it is when a new requirement fits in the design and allows us to add new functionality without touching the existing code, without the fear of breaking existing functionality and with minimum effort.</p><p>This is the <a href="https://en.wikipedia.org/wiki/Open–closed_principle">Open-Closed principle</a> at its best.</p><p>And of course this is extremely useful and you will be crazy of not trying to design for no-change, but how do you arrive at this design?</p><p>One approach is to look at the future and make a bet on what the system will need. Unless your precognition skills are particularly good, this usually leads to <a href="https://en.wikipedia.org/wiki/Overengineering">over-engineering</a>.</p><p>The other approach is to aim to be <a href="https://www.youtube.com/watch?v=gdbjw27QPJQ">Captain Hindsight</a>, so that when it is obvious what should have happened, we are in a position to make it happen. </p><p>What would you need to do in order to implement Captain Hindsight’s hindsight without the fear of breaking existing functionality?</p><h3>Abstractions</h3><p>Humans are notoriously good at finding patterns anywhere, even where there are none, and when coding we are no exception.</p><p>When we find such patterns in code, we are strongly compelled to codify them in an abstraction, which very often leads to the wrong abstraction.</p><p>And I could not explain better than <a href="https://twitter.com/sandimetz">Sandi Metz</a> how expensive wrong abstractions are:</p>
<blockquote><p>Duplication is far cheaper than the wrong abstraction <cite><a href="https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction">https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction</a></cite></p>
</blockquote><p>And worst of all, how <em>beautiful</em> we find are our own abstractions.</p><h3>Best practices</h3><p>As a profession, we have managed to make a dogma of all the practices and processes that we have been discovering, transforming something that can be useful in some context, into something that must be universally applied, disregarding our context and failing to understand the context where the practice came from.</p><p>As I said in <a href="https://dev.to/danlebrero/the-tragedy-of-100-code-coverage">The tragedy of 100% code coverage</a>:</p>
<blockquote><p>Once a &ldquo;good practice&rdquo; becomes mainstream we seem to forget how it came to be, what its benefits are, and most importantly, what the cost of using it is. </p><p>Instead, we just mechanically apply it without too much thought, which usually means that we end up with at best mediocre results, losing most of the benefits but paying all (or even more) of the cost.</p>
</blockquote><h2>We do not believe in clean code</h2><p>Because deep inside us, we still believe that none of the good practices makes us go faster. They slow us down for the sake of quality.</p><p>But application quality is different from code quality.</p><p>Code quality is not expensive, it is the only way to go fast.</p><p>It is up to you and your team to decide which practices to follow, which practices increase the quality of your code and systems, which practices make you go fast. And I am sorry but you will need to <a href="/2020/01/22/accelerate-high-performing-technology-orgs-summary/#content">measure it</a>. </p><p>And please, <a href="/2017/05/24/clojure-most-important-lesson/#content">be open</a>. Code and practices are just tools. Don’t be proud of a hammer.</p><p>Be proud of your job, but remember that your job is a client problem solved in the most efficient and effective way.</p>]]>
</description>
</item>
<item>
<title>
In case of doubt, ask for clarification
</title>
<link>
https://danlebrero.com/2020/04/15/on-the-importance-of-clear-communication-in-devops/
</link>
<guid>
https://danlebrero.com/2020/04/15/on-the-importance-of-clear-communication-in-devops/
</guid>
<pubDate>
Wed, 15 Apr 2020 09:00:00 +0200
</pubDate>
<description>
<![CDATA[<p>As an example of what not to do, here I am earlier this year with a teammate, doing some Ops work (<a href="https://github.com/akvo/akvo-unified-log">Unilog</a> is a backend service, <a href="https://github.com/akvo/akvo-flow/">akvoflow-87</a> is a tenant of another backend service that depends on the Unilog):</p><p><img src="/images/blog/importance-of-communication/importance-of-clear-communication.jpg" alt="Not so clear communication" title="Not so clear communication" /></p><p>I hope it is not obvious to you, as it was not for me, but what my teammate was actually asking was:</p>
<blockquote><p>Can I completely decommission Unilog forever?</p>
</blockquote><p>But what I understood was:</p>
<blockquote><p>Can I stop Unilog for a minute?</p>
</blockquote><p>Result: a massive slowdown of the whole system for a few hours.</p><p>We have been talking about decommissioning that Unilog service the whole week, so it even crossed my mind that maybe it was related to it, I thought <em>he surely cannot be asking about decommissioning it</em>.</p><p>Silly me for not asking.</p>]]>
</description>
</item>
<item>
<title>
Book notes: No-Nonsense Leadership
</title>
<link>
https://danlebrero.com/2020/04/01/no-nonsense-leadership-summary/
</link>
<guid>
https://danlebrero.com/2020/04/01/no-nonsense-leadership-summary/
</guid>
<pubDate>
Wed, 01 Apr 2020 09:00:00 +0200
</pubDate>
<description>
<![CDATA[<p>These are my notes on <a href="https://twitter.com/NadiavdVlies">Nadia van der Vlies</a>&rsquo;s <a href="https://www.amazon.com/No-Nonsense-Leadership-Become-Effective-Manager-ebook/dp/B07S8CYNNT">No-nonsense Leadership</a>.</p><p>It contains quite practical advice, but it is not software/engineering specific. </p><p>Keeps the trend on other leadership books: Empower people by letting them find their own solutions.</p><h1>Key Insights</h1>
<ul>
  <li>Mature leadership:
  <ul>
    <li>High empathy, High honesty.</li>
    <li>Treat others as equals.</li>
    <li>Everybody can self-manage.</li>
    <li>Empower people to come up with solutions.</li>
    <li>Bidirectional trust.</li>
  </ul></li>
  <li>New behaviours are acquired by doing, doing and doing.</li>
  <li>To keep control, take ownership:</li>
</ul><p><img src="/images/blog/no-nonse-leadership/take-ownership.jpg" alt="Take ownership" title="Taking ownership" /> </p>
<ul>
  <li>Keep sharing the mission, vision and strategy.</li>
  <li>You are no longer one of your (ex-)co-workers.</li>
  <li>Performance reviews:
  <ul>
    <li>Negative reviews should never come as a surprise.</li>
    <li>Make notes through the year.</li>
    <li>Would I hire this employee if they were applying for their current position?</li>
  </ul></li>
  <li>Give compliments regularly:
  <ul>
    <li>Stimulate culture where people speak positively about others.</li>
    <li>Be specific.</li>
  </ul></li>
  <li>If you want your employees to feel safe, you have to show some vulnerability.</li>
  <li>Coaching:
  <ul>
    <li>Coaching means biting your tongue a lot.</li>
    <li>A success is an attempt to change behaviour, even if the attempt failed.</li>
    <li>Coachee is responsible for his personal development.</li>
  </ul></li>
  <li>To reflect is to learn.</li>
  <li>If you work hard, other wont have to.</li>
  <li><a href="#respectful-confrontation">Respectful confrontation</a>.</li>
  <li><a href="#bad-news">Delivering bad news</a>.</li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#ch-1">1 - No-Nonsense Leadership</a></li>
  <li><a href="#ch-2">2 - Leadership Skills</a></li>
  <li><a href="#ch-3">3 - Leader, Manager, Coach</a></li>
  <li><a href="#ch-4">4 - Leader</a></li>
  <li><a href="#ch-5">5 - Manager</a></li>
  <li><a href="#ch-6">6 - Coach</a></li>
  <li><a href="#ch-7">7 - Reflexes</a></li>
  <li><a href="#ch-8">8 - Tricky Situations</a></li>
  <li><a href="#ch-9">9 - The truism of no-nonsense leadership</a></li>
</ul><h1><a name="ch-1"></a>Chapter 1 - No-Nonsense Leadership</h1>
<ul>
  <li>Mature model based on <a href="https://en.wikipedia.org/wiki/Transactional_analysis">Transactional Analysis</a>.</li>
  <li>Mature:
  <ul>
    <li>Treat others as equals.</li>
    <li>Everybody is a responsible human being.</li>
    <li>Everybody can self-manage.</li>
    <li>Coaching leadership style.</li>
    <li>Empower people to come up with solutions.</li>
    <li>Honest.</li>
    <li>Conscious and considerate choice.</li>
    <li>Bidirectional trust.</li>
  </ul></li>
  <li>You need:
  <ul>
    <li>Empathy.</li>
    <li>Honesty.</li>
  </ul></li>
  <li>Pitfalls:
  <ul>
    <li>Mother:
    <ul>
      <li>High empathy. Low Honesty.</li>
      <li>Always eager to help.</li>
      <li>Effects:
      <ul>
        <li>Takes away responsibility, hence opportunity to grow.</li>
        <li>Leader become overworked.</li>
      </ul></li>
    </ul></li>
    <li>Macho:
    <ul>
      <li>Low empathy. High Honesty.</li>
      <li>I know better attitude. Judgemental.</li>
      <li>Effects:
      <ul>
        <li>Obedient or rebel employees.</li>
        <li>Takes away responsibility, hence opportunity to grow.</li>
      </ul></li>
    </ul></li>
    <li>Mole:
    <ul>
      <li>Low empathy. Low Honesty.</li>
      <li>Avoids confronting issues.</li>
      <li>Effects:
      <ul>
        <li>Nothing is improved.</li>
      </ul></li>
    </ul></li>
  </ul></li>
  <li>Pitfalls are not pitfalls if you consciously chose them and don’t use them often.</li>
</ul><h2><a name="ch-2"></a>Chapter 2 - Leadership Skills</h2>
<ul>
  <li>Situational leadership:
  <ul>
    <li>Use a different kind of leadership depending on employee task maturity.</li>
    <li>Task Maturity:
    <ul>
      <li>Willingness to do the task.</li>
      <li>Ability to perform it.</li>
      <li>Levels M1 to M6:
      <ul>
        <li>M1: Loads of detailed instructions.</li>
        <li>M2: Still lots of instructions, but also explain the why.</li>
        <li>M3: Focus on person, not task.</li>
      </ul></li>
      <li>How to asses task maturity? Ask employee.</li>
    </ul></li>
  </ul></li>
</ul><p><img src="/images/blog/no-nonse-leadership/task-maturity.jpg" alt="Situational leadership. Task Maturity" title="Situational leadership. Task maturity." /> </p>
<ul>
  <li>Taking ownership:
  <ul>
    <li>Keep your values in mind.</li>
    <li>When things do not go as expected, to keep control you have to:</li>
  </ul></li>
</ul><p><img src="/images/blog/no-nonse-leadership/take-ownership.jpg" alt="Take ownership" title="Taking ownership" /> </p>
<ul>
  <li>Conversations:
  <ul>
    <li>Keep three perspectives: yours, the others, that of an objective observer.</li>
    <li>Active listening:
    <ul>
      <li>Listen.</li>
      <li>Recap:
      <ul>
        <li>Use your own words unless is a delicate matter.</li>
        <li>Content and feelings.</li>
      </ul></li>
      <li>Keep asking questions.</li>
      <li>Tolerate silences.</li>
    </ul></li>
    <li>Stay in control:
    <ul>
      <li>Commit: set the goal.</li>
      <li>Monitor: check if the talking is relevant.</li>
      <li>Off topic: draw attention and ask if it is relevant.</li>
      <li>Difficult interaction: draw attention and ask why.</li>
      <li>Two tracks: commit again.</li>
    </ul></li>
  </ul></li>
</ul><h2><a name="ch-3"></a>Chapter 3 - Leader, Manager, Coach</h2>
<ul>
  <li>You are no longer one of your (ex-)co-workers.</li>
  <li>Leader before Manager or Coach.</li>
</ul><h2><a name="ch-4"></a>Chapter 4 - Leader</h2>
<ul>
  <li>Enthusiastic, authentic.</li>
  <li>Keep sharing the mission, vision and strategy.</li>
  <li>Know and learn company values.</li>
  <li>Motivate and inspire:
  <ul>
    <li>Share conclusions <em>and reasoning</em>.</li>
    <li>Show appreciation.</li>
    <li>Repeat yourself.</li>
    <li>Connect.</li>
  </ul></li>
</ul><h2><a name="ch-5"></a>Chapter 5 - Manager</h2>
<ul>
  <li>Translates Vision to Goals:
  <ul>
    <li>Employee translates goals to solutions.</li>
    <li>Let employees have a say on their goals to create greater commitment.</li>
  </ul></li>
  <li>Monitor and review results and behaviours:
  <ul>
    <li><a name="respectful-confrontation"></a>Respectful confrontation:
    <ul>
      <li>Step 0: reflect if it is you or the employee.</li>
      <li>Step 1: Expose facts and only facts.
      <ul>
        <li>Use first person.</li>
        <li>No judgement.</li>
        <li>Be very specific.</li>
      </ul></li>
      <li>Step 2: The effect it causes.
      <ul>
        <li>I think + I feel + I act.</li>
      </ul></li>
      <li>Step 3: Ask &ldquo;Is this something you recognize?&rdquo;</li>
      <li>Step 4: Explain your request/desire.</li>
      <li>This is the kick-off for a conversation.</li>
      <li>Dealing with responses:
      <ul>
        <li>Reflect on feeling.</li>
        <li>Explain.</li>
        <li>Guess underlying need.</li>
        <li>Express your need.</li>
        <li>Make your request/proposal.</li>
      </ul></li>
    </ul></li>
  </ul></li>
  <li>Asses and adjust:
  <ul>
    <li>Performance review:
    <ul>
      <li>Your employee is never your equal.</li>
      <li>Demotivating for others if poor performing coworkers get same pay raises.</li>
      <li>Make notes through the year.</li>
      <li>Would I hire this employee if they were applying for their current position?</li>
      <li>SMART goals.</li>
      <li>Start with the good things.</li>
      <li>Negative reviews should never come as a surprise.</li>
      <li>Ask for feedback on the assessment.</li>
    </ul></li>
    <li>Give compliments regularly:
    <ul>
      <li>Stimulate culture where people speak positively about others.</li>
      <li>Honest.</li>
      <li>Specific.</li>
      <li>Do not delay it.</li>
    </ul></li>
    <li><a name="bad-news"></a>Delivering bad news:
    <ol>
      <li>Deliver the blow:
      <ul>
        <li>Go straight to the bad news.</li>
        <li>Give one or two reasons.</li>
      </ul></li>
      <li>Manage the reaction:
      <ul>
        <li>Be understanding. Do not justify yourself.</li>
        <li>Give space. Do not fill silences.</li>
      </ul></li>
      <li>Solution, explanation, follow up appointment:
      <ul>
        <li>Wait for the employee to be ready. When she starts asking &ldquo;why&rdquo; or &ldquo;what now&rdquo;</li>
        <li>Reiterate reasons.</li>
        <li>Maybe follow up with another meeting.</li>
      </ul></li>
    </ol></li>
  </ul></li>
</ul><h2><a name="ch-6"></a>Chapter 6 - Coach</h2>
<ul>
  <li>Coaching as a manager is more difficult as you already expect something from your employee.</li>
  <li>Do not give tips or advice.</li>
  <li>Coachee comes with their own problems and solutions.</li>
  <li>Coachee is responsible for his personal development.</li>
  <li>Accept what it is, without judging. Emphatic.</li>
  <li>Pitfalls:
  <ul>
    <li>Comparing and going one worse.</li>
    <li>Educating and giving advice.</li>
    <li>Playing down the problem.</li>
    <li>Interrogating.</li>
    <li>Psychoanalyzing.</li>
    <li>Join in and making it worse.</li>
  </ul></li>
  <li>Walk ins with no clear question or need:
  <ul>
    <li>Respectful interrogation.</li>
    <li>Emotion reflection.</li>
    <li>What do you want from me? What is your question?</li>
    <li>Commit: on condition, now, later, never.</li>
  </ul></li>
  <li>Coaching without a coaching goal is pointless.</li>
  <li>Marteen Kouwenhoven coaching matrix 4 doors:
  <ol>
    <li>Thought door: get the facts.</li>
    <li>Emotions door: why is this a problem to be solved?</li>
    <li>Needs door:
    <ul>
      <li>Positive opposite of emotions door.</li>
      <li>Cannot be about others changing.</li>
    </ul></li>
    <li>Actions door:
    <ul>
      <li>Coachee should find her own solutions.</li>
    </ul></li>
  </ol></li>
  <li>Coaching means biting your tongue a lot.</li>
  <li>Celebrate success:
  <ul>
    <li>Start coaching session by talking about successes.</li>
    <li>A success is an attempt to change behaviour, even if the attempt failed.</li>
  </ul></li>
  <li>Growth mindset:
  <ul>
    <li>Learning about fixed vs growth can get you out of the fixed mindset.</li>
  </ul></li>
  <li>If you want your employees to feel safe, you have to show some vulnerability.</li>
</ul><h2><a name="ch-7"></a>Chapter 7 - Reflexes</h2>
<ul>
  <li>Beliefs that get on your way to do what you have to do.</li>
  <li>&ldquo;Survival&rdquo; strategies.</li>
</ul><h2><a name="ch-8"></a>Chapter 8 - Tricky Situations</h2>
<ul>
  <li>Passive employee, defiant employee, moaning employee, &hellip;
  <ul>
    <li>Respectful confrontation</li>
  </ul></li>
  <li>Top performing employee:
  <ul>
    <li>Sincere and explicit compliments.</li>
    <li>Not everyone wants to develop further.</li>
    <li>Check regularly so they dont get bored.</li>
  </ul></li>
  <li>Quarreling employees:
  <ul>
    <li>Employee should state exactly what she expects from you. This makes her responsible for the solution.</li>
    <li>Employees should settle it themselves.</li>
    <li>Make sure employees responsibilities are well defined.</li>
  </ul></li>
</ul><h2><a name="ch-9"></a>Bonus 1 - The truism of no-nonsense leadership</h2>
<ul>
  <li>To reflect is to learn.</li>
  <li>The answer to most questions is &ldquo;lets talk about it&rdquo;</li>
  <li>If you have something to say, say it. If you have something to ask, ask it.</li>
  <li>If you work hard, other wont have to.</li>
  <li>New behaviours are acquired by doing, doing and doing.</li>
</ul>]]>
</description>
</item>
<item>
<title>
Virtual backgrounds for remote Software Developers
</title>
<link>
https://danlebrero.com/2020/03/16/backgrounds-for-software-developers-zoom-virtual-backgrounds/
</link>
<guid>
https://danlebrero.com/2020/03/16/backgrounds-for-software-developers-zoom-virtual-backgrounds/
</guid>
<pubDate>
Mon, 16 Mar 2020 13:15:00 +0100
</pubDate>
<description>
<![CDATA[<p>As a lot of developers are going to be forced to work remotely these days, they are going to need an appropriate background for all those enjoyable remote meetings.</p><p>You can find the full background images without my ugly face at the bottom of this post.</p><h2>Client requirement gathering</h2><p>Use this one with your most important clients:</p><p><img src="/images/blog/zoom/kids-zoom.jpg" alt="kids" title="kids zoom background" /></p><p>A classic for any remote worker. In case you do not understand it, watch the <a href="https://www.youtube.com/watch?v=Mh4f9AYRCZY">full video</a>.</p><p>Original idea by <a href="https://twitter.com/nthonyChu">Anthony Chu</a>.</p><h2>All-hands meeting</h2><p>When the whole company must be present for those long long meetings:</p><p><img src="/images/blog/zoom/lotr-humans-zoom.jpg" alt="lotr-humans" title="lotr-humans zoom background" /></p><p>Make sure that one of you teammates brings the elves along:</p><p><img src="/images/blog/zoom/lotr-elves-zoom.jpg" alt="lotr-elves" title="lotr-elves zoom background" /></p><h2>Virtual coffee</h2><p>You no longer have spontaneous water cooler conversations, but that means that you can come prepared and make your team jealous: </p><p><img src="/images/blog/zoom/holidays-zoom.jpg" alt="holidays" title="holidays zoom background" /></p><h2>Architecture meeting</h2><p>Here you have two good options. </p><p>First one if you are <strong>THE</strong> <strong>A</strong>rchitect of your team:</p><p><img src="/images/blog/zoom/architect-zoom.jpg" alt="architect" title="architect zoom background" /></p><p>The second option is if you want to bring some subliminal message to the architecture discussion:</p><p><img src="/images/blog/zoom/kafka-zoom.jpg" alt="kafka" title="kafka zoom background" /></p><h2>Remote pair programming time</h2><p>Time to do some actual work now, trying to get in flow so that <a href="https://danlebrero.com/2018/11/26/repl-driven-development-immediate-feedback-for-you-backend/#content">you feel like Neo when we realizes he is the chosen one</a>:</p><p><img src="/images/blog/zoom/matrix-zoom.jpg" alt="matrix" title="Matrix zoom background" /></p><h2>Talking with QA</h2><p>And squashing some bugs:</p><p><img src="/images/blog/zoom/bugs-zoom.jpg" alt="bugs" title="bugs zoom background" /></p><h2>Deploying to production</h2><p>Useful also for any outage:</p><p><img src="/images/blog/zoom/fire-zoom.jpg" alt="fire" title="fire zoom background" /></p><p>Credits <a href="https://kcgreendotcom.com/index.html">KC Green</a> for his awesome comics.</p><h2>Fixing production</h2><p>For those very special occasions when you just want to say &ldquo;I told you so&rdquo; to all your teammates:</p><p><img src="/images/blog/zoom/sunset-sunrays-zoom.jpg" alt="sunset" title="sunset zoom background" /></p><p>You can also use it when giving some lecture or developer learning session.</p><h2>Brown bag sessions</h2><p>When it is one of your teammates giving a lecture:</p><p><img src="/images/blog/zoom/preaching-zoom.jpg" alt="preaching" title="preaching zoom background" /></p><h2>Friday afternoon</h2><p>Escaping from the Evil Empire (aka your boss).</p><p><img src="/images/blog/zoom/starwars-zoom.jpg" alt="starwars" title="starwars zoom background" /></p><h2>Working over the weekend</h2><p>And when you fail to escape and have to work over the weekend:</p><p><img src="/images/blog/zoom/mugshot-zoom.jpg" alt="jail" title="mugshot zoom background" /></p><h2>Images</h2><p>Backgrounds work for me in <a href="https://zoom.us">Zoom</a> with a 16:9 camera.</p>
<table>
  <thead>
    <tr>
      <th>Image </th>
      <th align="center">Clean background </th>
      <th>Image </th>
      <th align="center">Clean background </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><img src="/images/blog/zoom/kids-zoom.jpg" width="100"> </td>
      <td align="center"><a href="/images/blog/zoom/kids.png" target="_blank">here</a> </td>
      <td><img src="/images/blog/zoom/lotr-humans-zoom.jpg" width="100"> </td>
      <td align="center"><a href="/images/blog/zoom/lort-humans.png" target="_blank">here</a> </td>
    </tr>
    <tr>
      <td><img src="/images/blog/zoom/lotr-elves-zoom.jpg" width="100"> </td>
      <td align="center"><a href="/images/blog/zoom/lort-elves.png" target="_blank">here</a> </td>
      <td><img src="/images/blog/zoom/holidays-zoom.jpg" width="100"> </td>
      <td align="center"><a href="/images/blog/zoom/holidays.jpg" target="_blank">here</a> </td>
    </tr>
    <tr>
      <td><img src="/images/blog/zoom/architect-zoom.jpg" width="100"> </td>
      <td align="center"><a href="/images/blog/zoom/architect.png" target="_blank">here</a> </td>
      <td><img src="/images/blog/zoom/kafka-zoom.jpg" width="100"> </td>
      <td align="center"><a href="/images/blog/zoom/kafka.png" target="_blank">here</a> </td>
    </tr>
    <tr>
      <td><img src="/images/blog/zoom/matrix-zoom.jpg" width="100"> </td>
      <td align="center"><a href="/images/blog/zoom/matrix.png" target="_blank">here</a> </td>
      <td><img src="/images/blog/zoom/bugs-zoom.jpg" width="100"> </td>
      <td align="center"><a href="/images/blog/zoom/bugs.png" target="_blank">here</a> </td>
    </tr>
    <tr>
      <td><img src="/images/blog/zoom/fire-zoom.jpg" width="100"> </td>
      <td align="center"><a href="/images/blog/zoom/fire.jpg" target="_blank">here</a> </td>
      <td><img src="/images/blog/zoom/sunset-sunrays-zoom.jpg" width="100"> </td>
      <td align="center"><a href="/images/blog/zoom/sunset-sunrays.jpg" target="_blank">here</a> </td>
    </tr>
    <tr>
      <td><img src="/images/blog/zoom/preaching-zoom.jpg" width="100"> </td>
      <td align="center"><a href="/images/blog/zoom/preaching.jpg" target="_blank">here</a> </td>
      <td><img src="/images/blog/zoom/starwars-zoom.jpg" width="100"> </td>
      <td align="center"><a href="/images/blog/zoom/starwars.jpg" target="_blank">here</a> </td>
    </tr>
    <tr>
      <td><img src="/images/blog/zoom/mugshot-zoom.jpg" width="100"> </td>
      <td align="center"><a href="/images/blog/zoom/mugshot.jpg" target="_blank">here</a> </td>
      <td> </td>
      <td align="center"> </td>
    </tr>
  </tbody>
</table><p>Share some if you have!</p>]]>
</description>
</item>
<item>
<title>
Book notes: The Lean Mindset
</title>
<link>
https://danlebrero.com/2020/03/04/the-lean-mindset-summary/
</link>
<guid>
https://danlebrero.com/2020/03/04/the-lean-mindset-summary/
</guid>
<pubDate>
Wed, 04 Mar 2020 09:15:00 +0100
</pubDate>
<description>
<![CDATA[<p>These are my notes on <a href="https://twitter.com/mpoppendieck">Mary Poppendieck</a> and Tom Poppendieck&rsquo;s <a href="https://www.amazon.com/Lean-Mindset-Ask-Right-Questions/dp/0321896904">The Lean Mindset</a>. </p><p>This book is not an intro the Lean, but contains plenty of examples of how real world companies applied Lean principles.</p><p>As the authors mention on the introduction: Do not copy the practices. Develop a Lean Mindset.</p><h1>Key Insights</h1>
<ul>
  <li>Stop thinking about software development as a delivery process and start thinking of it as a problem solving process.</li>
  <li>Wrong questions: &ldquo;How will Lean or Agile increase productivity?&rdquo;
  <ul>
    <li>Efficiency is not about more features but <strong>only</strong> the right features.
    <ul>
      <li>Flow efficiency, not resource efficiency.</li>
      <li>The way to achieve a software objective within time and budget is to develop <strong>less</strong> features.</li>
    </ul></li>
    <li>High speed goes hand in hand with serious discipline and excellent quality.</li>
  </ul></li>
  <li>Great products come from changing the focus from:
  <ul>
    <li>productivity to impact.</li>
    <li>predictability to experimentation.</li>
    <li>efficiency to decentralization.</li>
    <li>product to problem.</li>
  </ul></li>
  <li>To find the business purpose ask: Who are our customers?</li>
  <li>Long term success:
  <ul>
    <li>Better before cheaper.</li>
    <li>Revenue before cost.</li>
  </ul></li>
  <li><a href="https://en.wikipedia.org/wiki/Tragedy_of_the_commons">Tragedy of the commons</a> is untrue if there is a self-governing community.</li>
  <li>Reciprocity is the currency of cooperation.</li>
  <li>Do not separate design from implementation.
  <ul>
    <li>Requirements docs are design.</li>
  </ul></li>
  <li>Inverse estimation: Each feature has a time constraint determined by its value and market need.</li>
  <li>Centralization due to cost savings/pressure, but if this cost pressure is due to market conditions changing, the company should be looking at innovation.</li>
  <li><a href="#learn-experiment">Learn to experiment</a>.</li>
  <li>Walk in the shoes of your customers.</li>
  <li>Focus on execution gives best solutions to the problems you are trying to solve, but it will not tell you if they are the right problems.</li>
  <li>Managers should be coaches, expert roles should be teachers.</li>
  <li>Optimist develop software, pessimists run the data centers. <i class="far fa-grin-tongue-squint"></i></li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#into">Introduction</a></li>
  <li><a href="#ch-1">The Purpose of Business</a></li>
  <li><a href="#ch-2">Energized Workers</a></li>
  <li><a href="#ch-3">Genuine Efficiency</a></li>
  <li><a href="#ch-4">Delighted Customers</a></li>
  <li><a href="#ch-6">Breakthrough Innovation</a></li>
  <li><a href="#epilogue">Epilogue</a></li>
</ul><h1><a name="intro"></a>Introduction</h1>
<ul>
  <li>Mindset: a mental model of how the world works.</li>
  <li>Great products come from changing the focus from:
  <ul>
    <li>productivity to impact.</li>
    <li>predictability to experimentation.</li>
    <li>efficiency to decentralization.</li>
    <li>product to problem.</li>
  </ul></li>
  <li>Do not copy the practices. Developing a mindset is about developing the expertise to:
  <ul>
    <li>Ask the right questions.</li>
    <li>Solve the right problems.</li>
    <li>Do the right things for the context at hand.</li>
  </ul></li>
  <li>Dual processing theory:
  <ul>
    <li>Humans have two &ldquo;minds&rdquo;:
    <ul>
      <li>System 1: intuition, habit, emotions, fast.</li>
      <li>System 2: analysis, plans, rational, slow.</li>
    </ul></li>
  </ul></li>
  <li>The Fabric of Lean:
  <ul>
    <li>Purpose of Business:
    <ul>
      <li>Optimize the whole.</li>
      <li>Focus on customers: long term success.</li>
      <li>Douglas McGregor&rsquo;s Theory X:
      <ul>
        <li>X - people do not want to work and will do the minimum.</li>
        <li>Y - people are eager to work and want to do a good job.</li>
      </ul></li>
    </ul></li>
    <li>Energize workers:
    <ul>
      <li>Reciprocity:
      <ul>
        <li>Treat well workers, they will treat well customers, which will treat well the company.</li>
        <li>Is local, hence leverage on power of peers, not incentives.</li>
      </ul></li>
      <li>Workers want well-framed challenges.
      <ul>
        <li>Not too easy (boring), not too hard (discouraging).</li>
      </ul></li>
      <li>Regulatory fit:
      <ul>
        <li>Aspirational: action, experimentation, start ups.</li>
        <li>Duty: safety, failure prevention, big companies.</li>
      </ul></li>
      <li>Constant Improvement.</li>
      <li>Eliminate waste:
      <ul>
        <li>Building the wrong thing is the biggest wast of all.</li>
      </ul></li>
      <li>Learn first.</li>
      <li>Deliver fast.</li>
      <li>Build Quality In.</li>
      <li>Keep getting better.</li>
    </ul></li>
  </ul></li>
</ul><h1><a name="ch-1"></a>The Purpose of Business</h1>
<ul>
  <li>Two theories:
  <ul>
    <li>Peter Drucker: to create a customer.</li>
    <li>Shareholder Value Theory: to maximize shareholder value. (Rational economics)
    <ul>
      <li>US CEO 1976 x36 average worker income.</li>
      <li>US CEO 2010 x369 times.</li>
    </ul></li>
  </ul></li>
  <li>To find the purpose ask:
  <ul>
    <li>Who are our customers?</li>
  </ul></li>
  <li>Purpose is master, profit is servant.</li>
  <li>Best entrepreneurs are mission oriented (Todd Park):
  <ul>
    <li>They could not stand the idea of a world without what they were building.</li>
  </ul></li>
  <li>Rational work system:
  <ul>
    <li>Rational people are shrinkers:
    <ul>
      <li>Try to maximize personal benefit with minimal work.</li>
      <li>People are inherently selfish.</li>
      <li>Companies can either:
      <ul>
        <li>Give very detailed instructions and close supervision:
        <ul>
          <li>Discourage thinking and improving.</li>
        </ul></li>
        <li>Setup incentive system aligned to company interests:
        <ul>
          <li>Attracts shrinkers (self-fulfilling prophecy).</li>
          <li>Kill intrinsic motivation.</li>
          <li>Never fair: kills collaboration.</li>
        </ul></li>
      </ul></li>
    </ul></li>
    <li>Research:
    <ul>
      <li>30% population are selfish.</li>
      <li>50% not.</li>
      <li>20% undecided: if company assumes they are selfish, they will be.</li>
    </ul></li>
  </ul></li>
  <li>Two types of profits:
  <ul>
    <li>Good profits: the customer feels have received good value.</li>
    <li>Bad profits: customer thinks he has been cheated:
    <ul>
      <li>Reduce customer loyalty.</li>
      <li>Demoralize employees.</li>
    </ul></li>
  </ul></li>
  <li>Common strategies for success in the long term (Michael Raynor and Mumtaz Ahmed):
  <ul>
    <li>Better before cheaper.</li>
    <li>Revenue before cost.</li>
  </ul></li>
  <li>Cooperative Work Systems:
  <ul>
    <li><a href="https://en.wikipedia.org/wiki/Tragedy_of_the_commons">Tragedy of the commons</a> is untrue if there is a self-governing community.</li>
    <li>8 principles of self-governing communities in page 26.</li>
    <li>Peer pressure is better at controlling bad behaviour than external agents.</li>
    <li><a href="https://en.wikipedia.org/wiki/Dunbar%27s_number">The Dunbar Number</a>:
    <ul>
      <li>Size of primate&rsquo;s neocortex is directly related to the number of social relationships.</li>
      <li>This directly relates to the maximum size of a group.</li>
      <li>For humans is 150.</li>
      <li>Pre-industrial social groups:
      <ul>
        <li>3-5 very close friends.</li>
        <li>12-15 close friends.</li>
        <li>30-50 hunting group: colleges who cooperate to accomplish a task.</li>
        <li>150 clan: people that maintain stable interpersonal relationships.</li>
        <li>500-2500 tribe: same language/dialect.</li>
      </ul></li>
      <li>Why?
      <ul>
        <li>Reciprocity is the currency of cooperation.</li>
      </ul></li>
    </ul></li>
    <li>Rules of cooperation:
    <ul>
      <li>Work groups should be responsible for its own fate.</li>
      <li>Rules and norms should match local conditions. People affected should create/adapt them.</li>
      <li>Peers will monitor each other.</li>
      <li>External authorities should respect local communities.</li>
    </ul></li>
  </ul></li>
</ul><h2><a name="ch-2"></a>Energized Workers</h2>
<ul>
  <li>Fixed mindset: you have a natural talent or you dont.</li>
  <li><a href="https://www.youtube.com/watch?v=C13JC_YP2Q8">Growth mindset</a>: with you work, you can learn/do anything.</li>
  <li>Expertise == challenge + coaching + progress + perseverance.</li>
  <li>Optimist develop software, pessimists run the data centers.</li>
  <li>Optimists:
  <ul>
    <li>Can do attitude.</li>
    <li>Promotion focus: focus on gains.</li>
    <li>Pursuing opportunities.</li>
  </ul></li>
  <li>Pessimist:
  <ul>
    <li>&ldquo;Is it safe?&rdquo;</li>
    <li>Prevention focus: focus on losses.</li>
    <li>Prevent failures.</li>
  </ul></li>
  <li>Managers should be coaches.</li>
  <li>Biggest motivator for knowledge workers on a day-to-day bases is making progress in meaningful work.</li>
  <li><a href="/2019/02/27/architecture-decisions-beligerent-contrarian-rule-of-three/#content">Dealing with cognitive biases</a>.</li>
  <li>We put too much emphasis on reducing errors and not enough on building expertise.</li>
  <li>Resilience: Chaos Engineering.</li>
</ul><h2><a name="ch-3"></a>Delighted Customers</h2>
<ul>
  <li>Do not build what the customer ask for.</li>
  <li>Start by deeply understanding the problem through direct experience.</li>
  <li>Do not separate design from implementation.
  <ul>
    <li>Design by objectives (Tom Gilb in Principles of Software Engineering Management):
    <ul>
      <li>Give high level measurable goals.</li>
      <li>Let the team (interacting with the customer) design the solution.</li>
    </ul></li>
    <li>Requirements docs are design.</li>
  </ul></li>
  <li>When product becomes a commodity, design creates a competitive space.</li>
  <li>How designers work?
  <ul>
    <li>Spend a lot of time watching people.</li>
    <li>Not alone, but with the whole team, so there are more perspectives.</li>
    <li>Multiple sketches to share with the team.</li>
    <li>Understand psychology.</li>
    <li>Challenge assumptions.</li>
    <li>Constant feedback.</li>
    <li>Welcome failed experiments.</li>
  </ul></li>
  <li>Key design/scientific planning questions:
  <ul>
    <li>What are the possibilities?</li>
    <li>What has to be true in order for a possibility to succeed?</li>
    <li>What experiments can we run to see if those things are true?</li>
  </ul></li>
  <li>Design toolbox:
  <ul>
    <li>Establish empathy:
    <ul>
      <li>Journey map.</li>
      <li>Adoption chain analytics.</li>
    </ul></li>
    <li>Generate possibilities:
    <ul>
      <li>Sample press release.</li>
      <li>Impact map.</li>
    </ul></li>
    <li>Run experiments:
    <ul>
      <li>Assumption testing.</li>
      <li>Rapid prototyping.</li>
      <li>Learning launch.</li>
    </ul></li>
  </ul></li>
</ul><h2><a name="ch-4"></a>Genuine Efficiency</h2>
<ul>
  <li>Efficiency == not more features but only right features.</li>
  <li>Development efficiency is ratio of effort expended to overall product performance.</li>
  <li>Flow efficiency, not resource efficiency.</li>
  <li>Expert roles is of a teacher, helping teams figure out the details themselves.</li>
  <li>Interdisciplinary teams, learning from each other, focusing on customers.</li>
  <li>Inverse estimation: Each feature has a time constraint determined by its value and market need.</li>
  <li>Features described as a high-level goal. Team decide details.</li>
  <li>Start ups: early months, only real progress is learning what creates value for customers.</li>
  <li>Architects and specialists as glue between teams.</li>
  <li>High speed goes hand in hand with serious discipline and excellent quality.</li>
  <li>Deliver fast: most important Lean principle. Other principles are &ldquo;forced&rdquo; by it.</li>
  <li>Incomplete product != low quality.
  <ul>
    <li>It is a valid concern that customers get a bad impression from an incomplete product.</li>
    <li>If product main selling point is the experience it delivers, delay launch until the experience is right.</li>
  </ul></li>
  <li>Build-Measure-Learn cycle.</li>
  <li>A feature was not complete until there was data showing the impact on key business metrics.</li>
  <li>How Spotify build products: Think it, Built it, Ship it, Tweak it. Page 119.</li>
</ul><h2><a name="ch-5"></a>Breakthrough Innovation</h2>
<ul>
  <li>Disruptive new business have a better change of success if they are formed as separated business units, rather than embedded in existing product lines.</li>
  <li>Focus on execution gives best solutions to the problems you are trying to solve, but it will not tell you if they are the right problems.</li>
  <li>Expect front-line people to understand and solve a customer&rsquo;s whole problem.</li>
  <li>Expect local managers to have the wisdom and give them the freedom to do the right thing.</li>
  <li>Wrong questions: &ldquo;How will Lean or Agile increase productivity?&rdquo;
  <ul>
    <li>The path to effective SW development is to develop what customers will love—and only those features.</li>
  </ul></li>
  <li>The way to achieve a software objective within time and budget is to develop <strong>less</strong> features.</li>
  <li>Path to long term survival:
  <ul>
    <li>Create variations.</li>
    <li>Select what succeeds.</li>
    <li>Repeat.</li>
  </ul></li>
  <li>If there are no failures, there is not enough variation/you are not trying hard enough.</li>
  <li><a name="learn-experiment"></a>Learn to experiment:
  <ul>
    <li>Place small bets.</li>
    <li>Tolerate failure, but make sure that is:
    <ul>
      <li>Survivable.</li>
      <li>Recognizable.</li>
      <li>Killed quickly.</li>
    </ul></li>
    <li>Scale quickly successes.</li>
  </ul></li>
  <li>Innovative companies are decentralized companies.</li>
  <li>Innovation requires different metrics/processes than core business.</li>
  <li>Centralization due to cost savings/pressure, but if this cost pressure is due to market conditions changing, the company should be looking at innovation.</li>
  <li>Decentralization balance:
  <ul>
    <li>Too much: fragmented product, complex communication.</li>
    <li>Too little: workers with no sight to costumers, which removes meaning from work.</li>
  </ul></li>
  <li>Innovation checklist:
  <ol>
    <li>Give product devs a clear line of sight to their customers:
    <ul>
      <li>Take care that Product Manager/Owner do not divorce developers from customers.
      <ul>
        <li>It confines creative power of devs to implementation issues.</li>
      </ul></li>
    </ul></li>
    <li>Interdisciplinary teams:
    <ul>
      <li>Build respect across disciplines. This is a huge task.</li>
      <li>Check out compensation system. Does it encourage teamwork?</li>
    </ul></li>
    <li>Disrupt yourself:
    <ul>
      <li>Find simpler, cheaper ways to solve customer problems.</li>
      <li>Be skeptical of:
      <ul>
        <li>High prices.</li>
        <li>Barriers to access content.</li>
        <li>Your approach to allocate resources.</li>
      </ul></li>
    </ul></li>
    <li>Change what you pay attention to:
    <ul>
      <li>Stop worrying about productivity.</li>
      <li>Create a process that encourages experiments.</li>
      <li>Decouple your architecture.</li>
      <li>Walk in the shoes of your customers.</li>
      <li>Articulate a high-level purpose.</li>
    </ul></li>
    <li>Develop support systems for innovation:
    <ul>
      <li>Training, time, &hellip;</li>
    </ul></li>
    <li>Live in the future</li>
  </ol></li>
</ul><h2><a name="epilogue"></a>Epilogue</h2>
<ul>
  <li>Stop thinking about SW development as a delivery process and start thinking of it as a problem solving process.</li>
  <li>Adam Smith Division of Labor theory:
  <ul>
    <li>Makes us believe that the most efficient way to get things done is to decompose work into its component parts and assign each component to a specialist.</li>
  </ul></li>
</ul>]]>
</description>
</item>
<item>
<title>
Authorization service handover talk  
</title>
<link>
https://danlebrero.com/2020/02/19/handover-clojure-authorization-service/
</link>
<guid>
https://danlebrero.com/2020/02/19/handover-clojure-authorization-service/
</guid>
<pubDate>
Wed, 19 Feb 2020 09:00:00 +0100
</pubDate>
<description>
<![CDATA[<p>This talk goes over the why, when, what and how of a new internal authorization service that we have built at Akvo.</p><p>It also contains some bits and pieces that I found interesting about the implementation: event sourcing, bad data, Postgres ltree, SpecMonstah, more bad data, dark launches, testing DSL, DB parallel tests, &hellip; Did I mention bad data already?</p><p>As all the code is <a href="https://github.com/akvo/akvo-authorization">open sourced</a>, I though that may find it useful as a real world examples of the above.</p><p>For a little bit of context, in the talk we mention:</p>
<ol>
  <li><a href="https://github.com/akvo/akvo-flow">&ldquo;Flow&rdquo;</a>: this is a Java/JS application for survey design and data collection. Runs on <a href="https://cloud.google.com/appengine">Google App Engine</a>, which uses <a href="https://cloud.google.com/datastore/">Google Datastore</a>. The &ldquo;legacy&rdquo; app.</li>
  <li><a href="https://github.com/akvo/akvo-unified-log">&ldquo;Unilog&rdquo;</a>: long story short a <a href="https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying">log</a> implementation of top of Postgres. And &ldquo;old&rdquo; Clojure app.</li>
  <li><a href="https://github.com/akvo/akvo-lumen">&ldquo;Lumen&rdquo;</a>: this is a Clojure/JS application to analyze and visualize data. Runs on Kubernetes + Postgres. The &ldquo;new&rdquo; kid.</li>
</ol><p>We are in the process of merging Lumen and Flow together. Maybe one of these years &hellip;.</p><p>You can find the slides <a href="https://docs.google.com/presentation/d/1zPgOhDhaTwY7qv2SxaYovG6NUs2EQOuLhm1swsQrPZM/edit#slide=id.p">here</a> and a table of content after the video that allows to jump to any of the bits that you may find interesting.</p><p>This is not a conference talk, do not expect it to be as polished. In fact I say &ldquo;cool&rdquo; like two hundred times. </p><p><em>Cool</em>! Let&rsquo;s get started!</p>
<style>
div#toc {
    height:200px;
    width:560px;
    overflow-x: hidden;
    overflow-y: scroll;
}
div#toc ul {
    margin-top: 0px;
    margin-bottom: 0px;
}    
</style><p><iframe id="thevideo" width="560" height="315" src="https://www.youtube.com/embed/N7sTkmBEpnM?enablejsapi=1&rel=0" frameborder="0" allowfullscreen></iframe></p>
<div id="toc">
<ul>
<li><a data-seek="0:11" href="#nowhere">What?</a>
<ul>
<li><a data-seek="0:25" href="#nowhere">Authorization business logic</a></li>
</ul></li>
<li><a data-seek="3:06" href="#nowhere">Why?</a>
<ul>
<li><a data-seek="5:29" href="#nowhere">Why a new service?</a>
<ul>
<li><a data-seek="5:37" href="#nowhere">Performance</a></li>
<li><a data-seek="6:36" href="#nowhere">Why not Keycloak?</a></li>
<li><a data-seek="7:56" href="#nowhere">Move away from Google Datastore</a></li>
</ul></li>
</ul></li>
<li><a data-seek="8:35" href="#nowhere">How?</a>
<ul>
<li><a data-seek="8:38" href="#nowhere">Unilog and high level architecture</a></li>
<li><a data-seek="10:21" href="#nowhere">Deployment architecture</a></li>
<li><a data-seek="14:23" href="#nowhere">PostgreSQL ltree</a></li>
</ul></li>
<li><a data-seek="15:37" href="#nowhere">Implementation</a>
<ul>
<li><a data-seek="15:44" href="#nowhere">Dealing with out of order messages</a></li>
<li><a data-seek="19:30" href="#nowhere">Huge database result sets, JDBC reducibles</a></li>
<li><a data-seek="20:08" href="#nowhere">Duct profiles: multiple process in one for development</a></li>
<li><a data-seek="21:05" href="#nowhere">Private Github to store secrets</a></li>
<li><a data-seek="22:27" href="#nowhere">Metrics dashboards</a></li>
</ul></li>
<li><a data-seek="22:50" href="#nowhere">Testing</a>
<ul>
<li><a data-seek="22:55" href="#nowhere">DSL</a></li>
<li><a data-seek="24:27" href="#nowhere">SpecMonstah: ease building DB test harness</a></li>
<li><a data-seek="27:53" href="#nowhere">eftest: parallel tests</a>
<ul>
<li><a data-seek="28:17" href="#nowhere">DB test data isolation</a></li>
</ul></li>
<li><a data-seek="30:47" href="#nowhere">Compare with slow implementation. Event Sourcing FTW!</a></li>
</ul></li>
<li><a data-seek="32:49" href="#nowhere">When?</a>
<ul>
<li><a data-seek="32:53" href="#nowhere">Dark Launch</a></li>
<li><a data-seek="33:58" href="#nowhere">Bad data</a></li>
</ul></li>
<li><a data-seek="41:00" href="#nowhere">Future</a>
<ul>
<li><a data-seek="41:00" href="#nowhere">MVP</a></li>
<li><a data-seek="42:27" href="#nowhere">Unilog lag</a></li>
</ul></li>
<li><a data-seek="43:15" href="#nowhere">Q&amp;A</a>
<ul>
<li><a data-seek="45:47" href="#nowhere">Data model difference between Flow and Authorization</a></li>
<li><a data-seek="48:20" href="#nowhere">How ltree helps with tree structure manipulation</a></li>
<li><a data-seek="51:32" href="#nowhere">How ltree helps with Authorization logic</a></li>
<li><a data-seek="55:29" href="#nowhere">Google Datastore, orphan data, referential integrity</a></li>
<li><a data-seek="56:00" href="#nowhere">Initial import to move to Event Sourcing</a></li>
<li><a data-seek="60:38" href="#nowhere">More about out of order messages</a></li>
</ul></li>
</ul>
</div><p><br/> <br/><br/>Let me know if you find it useful, if it is too specific or not specific enough.</p>
<script>
  var tag = document.createElement('script');
  tag.src = "https://www.youtube.com/iframe_api";
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  var player;
  function onYouTubeIframeAPIReady() {
    player = new YT.Player('thevideo', {});
  }
  
  window.onload = function() {
    var all = document.querySelectorAll('[data-seek]');
    all.forEach(function(l){
        l.onclick = function() {
            seekPoint = l.dataset.seek.split(':');
            console.log(seekPoint);
            secs = Number(seekPoint[0]) * 60 + Number(seekPoint[1]);
            console.log(secs);
            player.seekTo(secs);
            player.playVideo();
            return false;
        }
    });    
  }
</script>]]>
</description>
</item>
<item>
<title>
Book notes: The Unicorn Project
</title>
<link>
https://danlebrero.com/2020/02/05/the-unicorn-project-summary/
</link>
<guid>
https://danlebrero.com/2020/02/05/the-unicorn-project-summary/
</guid>
<pubDate>
Wed, 05 Feb 2020 09:15:00 +0100
</pubDate>
<description>
<![CDATA[<p>These are my notes on <a href="https://twitter.com/RealGeneKim">Gene Kim</a>&rsquo;s <a href="https://itrevolution.com/the-unicorn-project/">The Unicorn Project</a>. </p><p>Note that this is not your usual IT book, but a novel about it (or IT). Nonetheless there is a lot of practical advice, as Gene Kim is one of the authors of <a href="https://itrevolution.com/book/accelerate/">Accelerate</a> and <a href="https://itrevolution.com/book/the-devops-handbook/">The DevOps Handbook</a>. </p><p>Being a novel makes it a more enjoyable and easy read, one that even your pointy-haired boss could enjoy!</p><p>The Unicorn Project is a self-contained book, but related to <a href="https://itrevolution.com/book/the-phoenix-project/">The Phoenix Project</a>, which I would also be happy to recommend.</p><p><em>Tip</em>: Each chapter has a bunch of very interesting references!</p><p><em>Tip 2</em>: Gene Kim did three &ldquo;Ask Me Anything&rdquo; on the IT Revolution Book Club. You can watch them <a href="https://www.youtube.com/watch?v=ReROx9-68V8">here</a>, <a href="https://www.youtube.com/watch?v=wQktlXp_Y3g">here</a> and <a href="https://www.youtube.com/watch?v=vmzFLhapI2o">here</a>.</p><h1>Key Insights</h1><p>As Gene Kim is also the author of Accelerate, a lot of the key insights from Accelerate can be found in The Unicorn Project. See <a href="/2020/01/22/accelerate-high-performing-technology-orgs-summary/#content">my Accelerate notes</a> for completeness.</p>
<ul>
  <li>Is not small vs big, but fast vs slow.</li>
  <li>Developer productivity should be the concern of the most senior developers.</li>
  <li>To speak clearly, you have to think clearly. To think clearly, you have to write clearly.</li>
  <li>Employee engagement and customer satisfaction are the only things that matter. The rest will take care of itself.</li>
  <li>Five ideals:
  <ul>
    <li>Locality and simplicity.</li>
    <li>Focus, Flow and Joy.</li>
    <li>Improvement of Daily Work:
    <ul>
      <li>Elevate improvement of daily work over daily work itself.</li>
    </ul></li>
    <li>Psychological Safety:
    <ul>
      <li>Safety is a precondition of work.</li>
    </ul></li>
    <li>Customer Focus.</li>
  </ul></li>
  <li>People are trying to help. It is the process that is helpless. Reminds me of <a href="/2019/11/27/becoming-a-technical-leader-book-notes/#content">Gerry Weiberg&rsquo;s Becoming a technical leader</a>.</li>
  <li>When engineers think of &ldquo;the customer&rdquo; in the abstract instead as a real person, you rarely set the right outcomes.</li>
  <li>CEO keeps reminding of who the customers are and the vision/mission.</li>
  <li>Architecture is about enabling Focus, Flow, Joy and Fast feedback.</li>
  <li>Transformational Leader:
  <ul>
    <li>Expects excellence.</li>
    <li>Pursuit of perfection.</li>
    <li>Urgency to achieve mission.</li>
    <li>Dissatisfaction with status quo.</li>
    <li>Zeal for customers.</li>
  </ul></li>
  <li>Geoffrey Moore&rsquo;s <a href="#ch-16">Three Horizons</a>:
  <ul>
    <li>Horizon 1 - Cash-cows. Needs bureaucracy.</li>
    <li>Horizon 3 - Future growth ideas. Needs speed.</li>
  </ul></li>
  <li>Geoffrey Moore&rsquo;s <a href="#ch-17">Four Zones</a>:
  <ul>
    <li>Invest in Core, outsource Context.</li>
    <li>Rack funerals:</li>
  </ul></li>
</ul><p><img src="/images/blog/the-unicorn-project/rack-funerals.jpg" alt="Rack funerals" title="Rack funerals" /></p><p><span style="background-color: #ecf0f1"><small>Image from Gene Kim&rsquo;s presentation <a href="https://youtu.be/M6JGdF9XC7g?t=1846">The Unicorn Project And The Five Ideals</a>.</small></span></p><h1>TOC</h1>
<ul>
  <li><a href="#part-one">Part One: September 3-September 18</a>
  <ul>
    <li><a href="#ch-1">Chapter 1</a></li>
    <li><a href="#ch-2">Chapter 2</a></li>
    <li><a href="#ch-3">Chapter 3</a></li>
    <li><a href="#ch-4">Chapter 4</a></li>
    <li><a href="#ch-6">Chapter 6</a></li>
    <li><a href="#ch-7">Chapter 7</a></li>
  </ul></li>
  <li><a href="#part-two">Part Two: September 23-November 9</a>
  <ul>
    <li><a href="#ch-8">Chapter 8</a></li>
    <li><a href="#ch-11">Chapter 11</a></li>
    <li><a href="#ch-12">Chapter 12</a></li>
    <li><a href="#ch-13">Chapter 13</a></li>
  </ul></li>
  <li><a href="#part-three">Part Three: November 10-Present</a>
  <ul>
    <li><a href="#ch-15">Chapter 15</a></li>
    <li><a href="#ch-16">Chapter 16</a></li>
    <li><a href="#ch-17">Chapter 17</a></li>
    <li><a href="#ch-18">Chapter 18</a></li>
    <li><a href="#ch-19">Chapter 19</a></li>
    <li><a href="#epilogue">Epilogue</a></li>
  </ul></li>
</ul><h1><a name="part-one"></a>Part One: September 3-September 18</h1><h2><a name="ch-1"></a>Chapter 1</h2>
<ul>
  <li>Mistakes and entropy are a fact of live.</li>
  <li>Culture of fear (reference to Westrum org):
  <ul>
    <li>Kills innovation.</li>
    <li>People are careful on how they phrase things.</li>
    <li>Avoid &ldquo;forbidden words&rdquo;.</li>
  </ul></li>
  <li>The Phoenix Project building is silent. Immediate sign that there is something wrong with the development teams.</li>
</ul><h2><a name="ch-2"></a>Chapter 2</h2>
<ul>
  <li>Maxine, the hero, keeps a daily work diary:
  <ul>
    <li>What and how long work takes, and lessons learned.</li>
  </ul></li>
  <li>Time tracking systems are useless.</li>
  <li>When engineers think of “the customer” in the abstract instead as a real person, you rarely set the right outcomes.</li>
  <li>CEO keeps reminding of who the customers are and the vision/mission.</li>
  <li>Safety is a precondition of work.</li>
</ul><h2><a name="ch-3"></a>Chapter 3</h2>
<ul>
  <li>Busy != productive != effective.</li>
  <li>People are trying to help. It is the process that is helpless. Reminds me of <a href="/2019/11/27/becoming-a-technical-leader-book-notes/#content">Gerry Weiberg&rsquo;s Becoming a technical leader</a>.</li>
  <li>Small changes == more productive.</li>
  <li>Program state is the enemy.</li>
  <li>Change is a fact of live.</li>
  <li>Changes should be done easily, quickly, safely.</li>
  <li>Agility is never free.</li>
  <li>Focus, flow, joy. Fast feedback. Thanks to architecture.</li>
</ul><h2><a name="ch-4"></a>Chapter 4</h2>
<ul>
  <li>How can you create anything of value if you don&rsquo;t have feedback on how it is used?</li>
</ul><h2><a name="ch-6"></a>Chapter 6</h2>
<ul>
  <li>Too much information makes every thing slow down.</li>
  <li>Coordination, communication, approvals maybe more expensive than redundancy and duplication.</li>
</ul><h2><a name="ch-7"></a>Chapter 7</h2>
<ul>
  <li>Dev productivity as a main theme of the book.</li>
  <li>Complected. Sensei Rick Hickey.</li>
  <li>Dev productivity should be the concern of the most senior devs.</li>
  <li>Pay down technical debt as part of daily work.</li>
  <li>First ideal: Locality and simplicity.</li>
  <li>Second Ideal: Focus, Flow and Joy.</li>
  <li>Third Ideal: Improvement of Daily Work:
  <ul>
    <li>Elevate improvement of daily work over daily work itself.</li>
  </ul></li>
  <li>Forth Ideal: Psychological Safety:
  <ul>
    <li>Safe to talk about problems.</li>
    <li>Solving problems requires prevention, which requires honesty, which requires lack of fear.</li>
    <li>Ask &ldquo;what caused a problem&rdquo; instead of &ldquo;who&rdquo;.</li>
  </ul></li>
  <li>Fifth Ideal: Customer Focus</li>
  <li>Technology is too often a caste system ( Arch &gt; Dev &gt; QA &gt; Ops)</li>
</ul><h2><a name="ch-8"></a>Chapter 8</h2>
<ul>
  <li>Before: Leader roles was to design and decompose work and verify it was done by armies of interchangeable workers, who were paid to user their hands, not their heads.</li>
  <li>Now: Leaders should be guiding, enabling and removing obstacles.</li>
  <li>Toyota Andon cord: people are thanked for raising problems, so they can be solved and daily work improved.</li>
  <li>Servant Leadership != Transformational Leadership.</li>
  <li>Transformational Leadership:
  <ul>
    <li>Understand the org vision.</li>
    <li>Question how work is performed.</li>
    <li>Inspirational communication.</li>
    <li>Personal recognition.</li>
    <li>Supportive leadership.</li>
    <li>Characteristics:
    <ul>
      <li>Expects excellence.</li>
      <li>Pursuit of perfection.</li>
      <li>Urgency to achieve mission.</li>
      <li>Dissatisfaction with status quo.</li>
      <li>Zeal for customers.</li>
    </ul></li>
  </ul></li>
</ul><h2><a name="ch-11"></a>Chapter 11</h2>
<ul>
  <li>You build it, you run it</li>
</ul><h2><a name="ch-12"></a>Chapter 12</h2>
<ul>
  <li>Lead time of ideas: 2 years
  <ul>
    <li>Small features, rolled up to larger ones than then need to be approved and specced</li>
  </ul></li>
</ul><h2><a name="ch-13"></a>Chapter 13</h2>
<ul>
  <li>Blameless postmortems:
  <ul>
    <li>Rule: you cannot say &ldquo;I should have done&rdquo; or &ldquo;If I have known about that, I would have done Y&rdquo;.</li>
  </ul></li>
  <li>Disconnect between Product Development and front-line users.</li>
  <li>To speak clearly, you have to think clearly.</li>
  <li>To think clearly, you have to write clearly.</li>
</ul><h2><a name="ch-15"></a>Chapter 15</h2>
<ul>
  <li>Monitoring FTW!</li>
  <li>Graceful degradation is hard.</li>
  <li>Synthetic traffic for Load testing is very hard.</li>
  <li>Customer focus:
  <ul>
    <li>Improve customer&rsquo;s live.</li>
    <li>Create value for them.</li>
    <li>Whether they will pay for it
    <ul>
      <li>If not, we shouldn&rsquo;t be building it.</li>
    </ul></li>
  </ul></li>
  <li>Trust.</li>
</ul><h2><a name="ch-16"></a>Chapter 16</h2>
<ul>
  <li>Employee engagement and customer satisfaction are the only things that matter. The rest will take care of itself.</li>
  <li>Only one in three strategic ideas have a positive outcome. And only a third of those have a big enough impact.</li>
  <li>Goofrey Moore - <a href="https://medium.com/@frankdiana/competing-in-the-age-of-disruption-e2187d2ad9d8">Four Zones</a> and <a href="https://www.infoq.com/articles/visual-portfolio-management/">Three Horizons</a>:
  <ul>
    <li>Horizon 1 - Company’s cash-cow.</li>
    <li>Horizon 2 - High growth. Next cash-cows.</li>
    <li>Horizon 3 - Pool of ideas to explore. Need to find asap:
    <ul>
      <li>Market risks: does the idea solve a real customer need?</li>
      <li>Technical risk: Is it technically feasible?</li>
      <li>Business model risk: Is there a financially feasible engine of growth?</li>
    </ul></li>
  </ul></li>
  <li>Horizon 1 needs:
  <ul>
    <li>Consistency.</li>
    <li>Compliance.</li>
    <li>Bureaucracy.</li>
    <li>Rules.</li>
  </ul></li>
  <li>Horizon 3 needs:
  <ul>
    <li>Speed.</li>
    <li>Experimentation.</li>
    <li>Fast feedback.</li>
  </ul></li>
</ul><h2><a name="ch-17"></a>Chapter 17</h2>
<ul>
  <li>Moore’s <a href="https://medium.com/@frankdiana/competing-in-the-age-of-disruption-e2187d2ad9d8">Four Zones</a>. Core vs Context:
  <ul>
    <li>Core: what the customer is paying for.</li>
    <li>Context: everything else. What is needed for operate (cafeteria, HR, email, …).</li>
    <li>Context is a burden.</li>
    <li>Invest in Core, outsource Context.</li>
  </ul></li>
</ul><h2><a name="ch-18"></a>Chapter 18</h2>
<ul>
  <li>Blameless post-mortem even without an outage: they are the best opportunity to learn.</li>
</ul><h2><a name="ch-19"></a>Chapter 19</h2>
<ul>
  <li>Teaching Thursdays is 2 hours.</li>
  <li>Leaders must model the behaviours that they want.</li>
  <li>Adults hide the fact they are learning because they don’t want to be seen as incompetents.</li>
  <li>Event sourcing FTW!</li>
  <li><a href="https://youtu.be/M6JGdF9XC7g?t=1846">&ldquo;Rack funerals&rdquo;</a></li>
</ul><h2><a name="epilogue"></a>Epilogue</h2>
<ul>
  <li>Technology needs to be embedded in the business, not merely &ldquo;aligned with it.&rdquo;</li>
  <li>Small does not beat big. Fast beats slow. Fast and big win almost every time.</li>
</ul>]]>
</description>
</item>
<item>
<title>
Expectations for GOTO Oslo conference 
</title>
<link>
https://danlebrero.com/2020/01/29/goto-oslo-conference-expectations/
</link>
<guid>
https://danlebrero.com/2020/01/29/goto-oslo-conference-expectations/
</guid>
<pubDate>
Wed, 29 Jan 2020 10:00:00 +0100
</pubDate>
<description>
<![CDATA[<p>I am delighted and honoured to have been invited to talk at <a href="https://goto-oslo.com/2020/speakers/1298/daniel-lebrero-berna">GOTO Oslo</a> this March. </p><p>As the conference is on a ship(!!!), I am scared that will end up like:</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/vToi98-UmU8?rel=0" frameborder="0" allowfullscreen></iframe></p><p>The risks of preaching Clojure to the heathens <i class="far fa-grin-tongue-squint"></i>.</p><p>Hope to see you there!</p>]]>
</description>
</item>
<item>
<title>
Book notes: Accelerate, building and scaling high performing technology organizations
</title>
<link>
https://danlebrero.com/2020/01/22/accelerate-high-performing-technology-orgs-summary/
</link>
<guid>
https://danlebrero.com/2020/01/22/accelerate-high-performing-technology-orgs-summary/
</guid>
<pubDate>
Wed, 22 Jan 2020 09:00:00 +0100
</pubDate>
<description>
<![CDATA[<p>These are my notes on <a href="https://twitter.com/nicolefv">Nicole Forsgren</a>, <a href="https://twitter.com/jezhumble">Jez Humble</a> and <a href="https://twitter.com/RealGeneKim">Gene Kim</a>&rsquo;s <a href="https://itrevolution.com/book/accelerate/">Accelerate, building and scaling high performing technology organizations</a>. Note that there is an additional chapter on the <a href="https://itrevolution.com/book/accelerate/">book website</a>, under the &ldquo;BONUS MATERIAL&rdquo; section.</p><p>The findings of this book are based on the research done using the data from the <a href="https://cloud.google.com/devops/">State of DevOps survey</a> from 2014 to 2017. </p><p>It has been a great read, and a lot of the leadership advice is in line with <a href="/2019/11/27/becoming-a-technical-leader-book-notes/#content">Gerald Weinberg&rsquo;s &ldquo;Becoming a technical leader&rdquo;</a>.</p><p>In fact it has been such a nice read that my life as a CTO is going to start by trying to implement all the practices outlined in it.</p><h1>Key Insights</h1>
<ul>
  <li><strong>Quality == Speed</strong>. Throughput and stability move together.</li>
  <li>Software delivery performance impacts organization performance, including non commercial.</li>
  <li>Measure:
  <ul>
    <li>Performance:
    <ul>
      <li>Delivery lead time.</li>
      <li>Deployment frequency.</li>
    </ul></li>
    <li>Stability:
    <ul>
      <li>Time to restore service.</li>
      <li>Change fail rate.</li>
    </ul></li>
  </ul></li>
  <li>Deming: <em>Fear invites wrong figures</em>.</li>
  <li><a href="#westrum">Ron Westrum generative culture</a>.</li>
  <li>Good information: Answers what and when needs to be answered, in a way that can be effectively used.</li>
  <li>Change culture by first changing what people do, not how people think.</li>
  <li>Technical practices are vital. Not optional, not secondary.</li>
  <li>Gerald Weinberg: Quality is value to some person.</li>
  <li>Architecture&rsquo;s most important characteristic: <strong>loosely coupled</strong>, which means:
  <ul>
    <li>Most testing can be done without an integrated environment.</li>
    <li>Release independently of other apps it depends on.</li>
  </ul></li>
  <li>Architects should focus on engineers and outcomes, not tools or technology.</li>
  <li><a href="https://ruggedsoftware.org">The Rugged Manifesto</a>.</li>
  <li>Transformational Leaders:
  <ul>
    <li>Should change environment, not &ldquo;fix&rdquo; the person.</li>
    <li>People are an organization&rsquo;s greatest asset.</li>
    <li>Focus on followers identifying with the organization.</li>
  </ul></li>
  <li>Common causes for transformation program to fail:
  <ul>
    <li>Treat the transformation program as a project with an end date.</li>
    <li>Implement it top-down, without input from those affected.</li>
    <li>Not setting measurable business and organizational outcome for the transformation effort.</li>
  </ul></li>
</ul><h1>The capabilities</h1><p>Highly recommend to download the <a href="https://bit.ly/high-perf-behaviors-practices">OVERALL RESEARCH PROGRAM AND HIGH PERFORMANCE BEHAVIORS AND PRACTICES</a> as it contains all the practices and what their impact is, plus the table &ldquo;High-Performance Team, Management, and Leadership Behaviors and Practices&rdquo; by <a href="https://twitter.com/leanitcoach">Steve Bell</a> and Karen Whitley Bell.</p>
<ul>
  <li>Continuous Delivery capabilities:
  <ul>
    <li>Test Automation.</li>
    <li>Deployment Automation.</li>
    <li>Trunk-Based Development.</li>
    <li>Shift Left on Security.</li>
    <li>Continuous Integration.</li>
    <li>Continuous Delivery.</li>
    <li>Version Control.</li>
    <li>Test Data Management.</li>
  </ul></li>
  <li>Architecture Capabilities:
  <ul>
    <li>Loosely Coupled Architecture.</li>
    <li>Empowered Teams.</li>
  </ul></li>
  <li>Product and Process capabilities:
  <ul>
    <li>Small Batches.</li>
    <li>Make Flow of Work Visible.</li>
    <li>Customer Feedback.</li>
    <li>Team Experimentation.</li>
  </ul></li>
  <li>Lean Management and Monitoring capabilities:
  <ul>
    <li>Limit Work in Progress.</li>
    <li>Production Monitoring (to inform business decisions).</li>
    <li>Visualizing Work.</li>
    <li>Lightweight Change Approval.</li>
    <li>Proactive Notifications.</li>
  </ul></li>
  <li>Cultural capabilities:
  <ul>
    <li>Foster generative culture.</li>
    <li>Encourage learning.</li>
    <li>Collaboration amongst teams.</li>
    <li>Job Satisfaction.</li>
    <li>Support Transformational leadership.</li>
  </ul></li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#preface">Preface</a></li>
  <li><a href="#part-one">Part I: What We Found</a>
  <ul>
    <li><a href="#ch-1">1 - Accelerate</a></li>
    <li><a href="#ch-2">2 - Measuring Performance</a></li>
    <li><a href="#ch-3">3 - Measuring and Changing Culture</a></li>
    <li><a href="#ch-4">4 - Technical practices</a></li>
    <li><a href="#ch-5">5 - Architecture</a></li>
    <li><a href="#ch-6">6 - Integrating InfoSec into the Delivery Lifecycle</a></li>
    <li><a href="#ch-7">7 - Management practices</a></li>
    <li><a href="#ch-8">8 - Product Development</a></li>
    <li><a href="#ch-9">9 - Making Work Sustainable</a></li>
    <li><a href="#ch-10">10 - Employee Satisfaction, Identity and Engagement</a></li>
    <li><a href="#ch-11">11 - Leaders and Managers</a></li>
  </ul></li>
  <li><a href="#part-two">Part II: The Research</a></li>
  <li><a href="#part-three">Part III: Transformation</a>
  <ul>
    <li><a href="#ch-16">16 - High-Performance Leadership and Management</a></li>
  </ul></li>
  <li><a href="#bonus">Bonus Material - How to transform</a></li>
</ul><h1><a name="preface"></a>Preface</h1>
<ul>
  <li>24 capabilities to drive improvement.</li>
  <li>Research based on 23k Surveys, 2k organizations.</li>
  <li>Applicable to:
  <ul>
    <li>Orgs of any size (< 5 to > 10k).</li>
    <li>Greenfield and legacy.</li>
    <li>Any industry.</li>
  </ul></li>
  <li>Throughput and stability move together.</li>
  <li>Software development and delivery can be measured in a statistically meaningful way.</li>
  <li>Organization ability to make software positively impacts profitability and market share.</li>
  <li>Culture and technical practices matter. And they can be measured.</li>
</ul><h1><a name="part-one"></a>Part I: What We Found</h1><h2><a name="ch-1"></a>Chapter 1 - Accelerate</h2>
<ul>
  <li>Maturity models are not the appropriate tool to use or mindset to have.</li>
  <li>Capabilities model of measurement is essential</li>
</ul>
<table>
  <thead>
    <tr>
      <th>Maturity </th>
      <th>Capability </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>There is a fixed goal. <br/>You &ldquo;arrive&rdquo; </td>
      <td>You can always improve. <br/>Never done </td>
    </tr>
    <tr>
      <td>Lock-step. <br/>All orgs and all teams are treated the same </td>
      <td>Multidimensional.<br/> Dynamic.<br/> Team and Org context important</td>
    </tr>
    <tr>
      <td>Vanity metrics </td>
      <td>Outcome based metrics</td>
    </tr>
    <tr>
      <td>Static Levels </td>
      <td>Dynamic levels</td>
    </tr>
  </tbody>
</table>
<ul>
  <li>Focus on right capabilities.</li>
</ul><h2><a name="ch-2"></a>Chapter 2 - Measuring Performance</h2>
<ul>
  <li>Measuring performance in SW is hard:
  <ul>
    <li>Inventory is invisible</li>
    <li>Breakdown of work arbitrary</li>
    <li>Design and delivery done simultaneously</li>
    <li>Design will change as we implement</li>
  </ul></li>
  <li>Flaw on previous attempts:
  <ul>
    <li>Focus on <a href="https://medium.com/@kentbeck_7670/outcome-over-output-also-impact-and-effort-8f9eb0ce0dbb">outputs rather than outcomes</a>.</li>
    <li>Focus on individuals/local, rather than team/global.</li>
    <li>Examples: LoC, velocity, utilization</li>
  </ul></li>
  <li>Proposed:
  <ul>
    <li>Delivery lead time:
    <ul>
      <li>From code committed to running in production.</li>
    </ul></li>
    <li>Deployment frequency:
    <ul>
      <li>Proxy metric for batch size. More deploys, smaller batch size.</li>
    </ul></li>
    <li>Time to restore service.</li>
    <li>Change fail rate, changes that cause:
    <ul>
      <li>Outages.</li>
      <li>Hot fixes.</li>
      <li>Rollback.</li>
      <li>Fix-forward.</li>
      <li>Patches.</li>
    </ul></li>
  </ul></li>
  <li>Delivery lead time and deployment frequency measure Tempo/Performance/Throughput.</li>
  <li>MTTR and Change fail rate measure Stability/Reliability.</li>
  <li><a href="/2017/06/05/testing-or-monitoring-mtbf-mttr-make-your-choice/#content">MTTR better than MTBF</a> to measure reliability as <a href="/2017/08/03/stability-patterns-a-case-study-devoxx-pl-2017-video/#content">&ldquo;Failure is inevitable&rdquo;</a>.</li>
  <li>No trade off between improving performance and achieving stability/quality.</li>
  <li>SW delivery performance impacts organization performance, including non commercial.</li>
  <li>Learning culture must exist before starting measuring.</li>
  <li>Deming: <em>Fear invites wrong figures</em>.</li>
</ul><h2><a name="ch-3"></a>Chapter 3 - Measuring and Changing Culture</h2>
<ul>
  <li>Organization culture, three levels of culture:
  <ul>
    <li>Basic assumptions: Invisible, things that we just &ldquo;know&rdquo;.</li>
    <li>Values: more &ldquo;visible&rdquo;.</li>
    <li>Artifacts:
    <ul>
      <li>Mission statements.</li>
      <li>Technology.</li>
      <li>Formal procedures.</li>
      <li>Heroes.</li>
      <li>Rituals.</li>
    </ul></li>
  </ul></li>
  <li>Focus on second level.</li>
  <li><a name="westrum"></a>Ron Westrum, three types:</li>
</ul>
<table>
  <thead>
    <tr>
      <th>Pathological </th>
      <th>Bureaucratic</th>
      <th>Generative</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Power oriented </td>
      <td>Rule oriented </td>
      <td>Performance oriented</td>
    </tr>
    <tr>
      <td>Low cooperation </td>
      <td>Modest cooperation </td>
      <td>High cooperation</td>
    </tr>
    <tr>
      <td>Messengers &ldquo;shot&rdquo;</td>
      <td>Messengers neglected</td>
      <td>Messengers trained</td>
    </tr>
    <tr>
      <td>Responsibilities shirked</td>
      <td>Narrow responsibilities </td>
      <td>Risks are shared</td>
    </tr>
    <tr>
      <td>Bridging discouraged</td>
      <td>Bridging tolerated</td>
      <td>Bridging encouraged</td>
    </tr>
    <tr>
      <td>Failure leads to scapegoating </td>
      <td>Failure leads to justice</td>
      <td>Failure leads to inquiry</td>
    </tr>
    <tr>
      <td>Novelty crushed </td>
      <td>Novelty leads to problems</td>
      <td>Novelty implemented</td>
    </tr>
  </tbody>
</table>
<ul>
  <li>Good information flow is critical:
  <ul>
    <li>Answers what and when needs to be answered, in a way that can be effectively used.</li>
  </ul></li>
  <li>Org culture predicts performance outcomes.</li>
  <li>Bureaucracy is not bad. Ensures fairness.</li>
  <li>Good culture:
  <ul>
    <li>Trust and cooperation.</li>
    <li>Higher quality decision making.</li>
    <li>Easy to reverse bad decisions.</li>
    <li>Higher job satisfaction.</li>
  </ul></li>
  <li>Change culture by first changing what people do, not try to first change how people think (John Shook).</li>
</ul><h2><a name="ch-4"></a>Chapter 4 - Technical practices</h2>
<ul>
  <li>Technical practices are vital. Not optional, not secondary.</li>
  <li>Key principles of Continuous Delivery (CD):
  <ul>
    <li>Build quality in.</li>
    <li>Small batches.</li>
    <li>People solve problems, computers do repetitive tasks.</li>
    <li>Continuous improvement.</li>
    <li>Everyone is responsible.</li>
  </ul></li>
  <li>Foundations of Continuous Delivery:
  <ul>
    <li>Comprehensive configuration management: everything in VCS.</li>
    <li>Continuous Integration.</li>
    <li>Continuous testing.</li>
  </ul></li>
  <li>Jerry Weinberg: Quality is value to some person.</li>
  <li>CD brings higher quality:
  <ul>
    <li>Less rework or unplanned work.</li>
    <li>Less bugs</li>
  </ul></li>
  <li>Practices:
  <ul>
    <li>Version control: including system and app config.</li>
    <li>Test Automation:
    <ul>
      <li>Reliable tests.</li>
      <li>Writen by devs.</li>
      <li>TDD is important, but not mandatory.</li>
    </ul></li>
    <li>Test Data management.</li>
    <li>Trunk-Based development:
    <ul>
      <li>No branches older than one day.</li>
    </ul></li>
    <li>Shift left on Security.</li>
  </ul></li>
</ul><h2><a name="ch-5"></a>Chapter 5 - Architecture</h2>
<ul>
  <li>Most important characteristic: <strong>loosely coupled</strong>, which means:
  <ul>
    <li>Most testing can be done without an integrated environment.</li>
    <li>Release independently of other apps it depends on.</li>
  </ul></li>
  <li>Lower performers more likely to be integrating with custom SW developed by another company (or outsourced) or working on mainframe systems.</li>
  <li>Biggest contributor to CD:
  <ul>
    <li>Be able to do work without needing to talk with anybody outside the team. Aka, proper cross-functional teams.</li>
  </ul></li>
  <li>Read Steve Yegge&rsquo;s <a href="https://gist.github.com/kislayverma/d48b84db1ac5d737715e8319bd4dd368">&ldquo;Platform rant&rdquo;</a>.</li>
  <li>Additionally, loosely coupled architectures enable engineering organizations scaling.</li>
  <li>Teams that can chose their own tools are more performant, but standardize around architecture and configuration of infrastructure.</li>
  <li>Architects should focus on engineers and outcomes, not tools or technology.</li>
</ul><h2><a name="ch-6"></a>Chapter 6 - Integrating InfoSec into the Delivery Lifecycle</h2>
<ul>
  <li>Typical InfoSec ratio: 1 per 10 infra per 100 devs.</li>
  <li><a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project">OWASP Top 10</a>.</li>
  <li>Building security into SW improves delivery performance and security quality.</li>
  <li>Shift left on security:
  <ul>
    <li>Security experts involved earlier and through the whole dev/ops process.</li>
    <li>Security provides tools/libraries/processes that are secure.</li>
    <li>Security provides devs the means to build security in.</li>
  </ul></li>
  <li><a href="https://ruggedsoftware.org">The Rugged Manifesto</a>.</li>
</ul><h2><a name="ch-7"></a>Chapter 7 - Management practices</h2>
<ul>
  <li>Derived from the Lean movement</li>
  <li>Practices:
  <ul>
    <li>Limit WIP - not enough on its own.</li>
    <li>Visual management: Key quality and productivity metrics.</li>
    <li>Feedback from production: to make business decisions.</li>
    <li>Intrateam code reviews (which includes pair programming) are the best way of change approval.</li>
  </ul></li>
</ul><h2><a name="ch-8"></a>Chapter 8 - Product Development</h2>
<ul>
  <li>Eric Ries - The Lean Startup: Lightweight approach to explore new business models and product ideas.</li>
  <li>Lead Product Development:
  <ul>
    <li>Small batches:
    <ul>
      <li>Less than a week.</li>
      <li>MVP.</li>
    </ul></li>
    <li>Make Flow of work visible:
    <ul>
      <li>From Business to customers.</li>
      <li>Status of products and features.</li>
    </ul></li>
    <li>Customer feedback:
    <ul>
      <li>Satisfaction metrics.</li>
      <li>Actively seeking the feedback.</li>
      <li>Implementing the feedback.</li>
    </ul></li>
    <li>Team experimentation:
    <ul>
      <li>Without external approval.</li>
      <li>Team can change requirements as they learn.</li>
    </ul></li>
  </ul></li>
</ul><h2><a name="ch-9"></a>Chapter 9 - Making Work Sustainable</h2>
<ul>
  <li>Where code deployments are more painful, you will find the poorest organization performance.</li>
  <li>To reduce deployment pain, use same technical practices as to improve delivery speed and stability.</li>
  <li>Reduce burnout:
  <ul>
    <li>Environment emphasizes learning over blaming.</li>
    <li>Strong sense of purpose.</li>
    <li>Invest on employment development: time, space, resources.</li>
    <li>Remove obstacles.</li>
    <li>Authority to make decisions that they are affected by.</li>
  </ul></li>
  <li>Burnout risks:
  <ul>
    <li>Overwork.</li>
    <li>Lack of control.</li>
    <li>Insufficient rewards.</li>
    <li>Breakdown of community.</li>
    <li>Absence of fairness.</li>
    <li>Value conflicts.</li>
  </ul></li>
  <li>Leaders should change environment, not &ldquo;fix&rdquo; the person.</li>
  <li>Official vs Real organization values.</li>
</ul><h2><a name="ch-10"></a>Chapter 10 - Employee Satisfaction, Identity and Engagement</h2>
<ul>
  <li>Better employee Net Promoter Score (eNPS) == better business outcomes.</li>
  <li>eNPS:
  <ul>
    <li>&ldquo;How likely is it that you would recommend our org/team to a friend or colleague?&rdquo;</li>
    <li>9-10 -&gt; Promoter.</li>
    <li>7-8 -&gt; Passive.</li>
    <li>0-6 -&gt; Detractors.</li>
  </ul></li>
  <li>People are an organization&rsquo;s greatest asset.</li>
  <li>Diversity in gender/minorities achieve better outcomes.</li>
</ul><h2><a name="ch-11"></a>Chapter 11 - Leaders and Managers</h2>
<ul>
  <li>Leadership: inspiring and motivating those around you</li>
  <li>Essential for:
  <ul>
    <li>Establishing high-trust cultural norms.</li>
    <li>Support dev productivity.</li>
    <li>Support team experimentation and innovation.</li>
    <li>Work across org silos to achieve strategic aligment.</li>
  </ul></li>
  <li>Transformational Leaders:
  <ul>
    <li>Vision: where the org is going and where it should be in 5 years.</li>
    <li>Inspirational communication.</li>
    <li>Intellectual stimulation.</li>
    <li>Supportive leadership: cares about followers&rsquo; personal feelings and needs.</li>
    <li>Personal recognition.</li>
  </ul></li>
  <li>Transformational Leadership:
  <ul>
    <li>Appeal to followers&rsquo; values and sense of purpose.</li>
    <li>Focus on followers identifying with the organization.</li>
  </ul></li>
  <li>Culture of Learning:
  <ul>
    <li>Create a training budget and advocate to use it.</li>
    <li>Google 20% time.</li>
    <li>Safe to fail.</li>
    <li>Weekly lightning talks.</li>
    <li>Brown bag sessions.</li>
    <li>Demo days.</li>
    <li>Mini-conferences.</li>
  </ul></li>
</ul><h1><a name="part-two"></a>Part II: The Research</h1><p>Skipped this part.</p><h1><a name="part-three"></a>Part III: Transformation</h1><h2><a name="ch-16"></a>Chapter 16 - High-Performance Leadership and Management</h2>
<ul>
  <li>Spotify Model.</li>
  <li>External coaches to challenge assumptions.</li>
  <li>Squad stand-up -&gt; Tribe stand-up -&gt; Senior Leadership stand-up.</li>
  <li>Technical problems shared with Chapter, business problems with Tribe.</li>
  <li>&ldquo;Help me better understand the problems you&rsquo;re encountering&rdquo;, instead of &ldquo;Why isn&rsquo;t this getting done?&rdquo;</li>
  <li>Teams own their job. They can decide not to release.</li>
</ul><h2><a name="bonus"></a>Bonus Material - How to Transform</h2>
<ul>
  <li>Common causes for transformation to fail:
  <ul>
    <li>Treat the transformation program as a project with an end date.</li>
    <li>Implement it top-down, without feedback from those affected.</li>
    <li>Not setting measurable business and organizational outcome for the transformation effort.</li>
  </ul></li>
  <li>Executing Continuous Improvement:
  <ul>
    <li>From the <a href="https://www.amazon.com/Lean-Enterprise-Performance-Organizations-Innovate/dp/1449368425">Lean Enterprise book</a>.</li>
    <li>Four steps:
    <ul>
      <li>Three Planning steps:
      <ul>
        <li>Understand the direction or challenge.
        <ul>
          <li>Inspirational goal that seems impossible.</li>
        </ul></li>
        <li>Gasp current condition.</li>
        <li>Establish next target condition.</li>
      </ul></li>
      <li>One Execute:
      <ul>
        <li><strong>Iterate</strong> towards target condition:
        <ul>
          <li>Scientific approach: Plan, Do, Check, Act.</li>
          <li>Improvement Kata 5 daily questions:
          <ol>
            <li>What is the target condition?</li>
            <li>What is the actual condition now?</li>
            <li>What obstacles do you think are preventing you from reaching the target condition? Which one are you addressing now?</li>
            <li>What is your next step? What do you expect?</li>
            <li>When can we go and see what we have learnt from taking that step?</li>
          </ol></li>
        </ul></li>
      </ul></li>
    </ul></li>
  </ul></li>
  <li>Principles of Effective Org Change Management:
  <ol>
    <li>You are never done with improvement work.</li>
    <li>Leaders and team agree on measurable outcome. Teams discover how to achieve it.</li>
    <li>Achieve Large-Scale Change Iteratively and Incrementally.</li>
  </ol>
  <ul>
    <li>What works in an org does not need to work in others.</li>
  </ul></li>
</ul>]]>
</description>
</item>
<item>
<title>
Software development and LEGO blocks
</title>
<link>
https://danlebrero.com/2020/01/15/software-dev-and-lego-blocks/
</link>
<guid>
https://danlebrero.com/2020/01/15/software-dev-and-lego-blocks/
</guid>
<pubDate>
Wed, 15 Jan 2020 08:00:00 +0100
</pubDate>
<description>
<![CDATA[<p>As I hear for the nth time the &ldquo;Composable as LEGO blocks&rdquo; analogy in some software related talk, I cannot stop thinking about my childhood&rsquo;s experience with LEGO, which to be honest has not improved over the years:</p><p><img src="/images/blog/lego/sw-as-lego-blocks.jpg" alt="Software as LEGO blocks" title="Software and LEGO blocks" /></p><p>Once you try to assembly you very own toy, you end up with at best a pitiful monstrosity that barely looks as what you imagined &hellip; unless you have an infinite amount of pieces and a hell of a lot of time on your hands.</p><p>It happens that this is not a lot different from my experience building software, so maybe the LEGO analogy actually works:</p>
<blockquote><p>You never have the right tools, frameworks and/or people.</p><p>You never have enough time.</p><p>And you always end up with a monstrosity</p><p>that barely resembles what, in your imagination, </p><p>that beautiful design and architecture looked like.</p>
</blockquote><p>I have to confess that I have always been a Playmobil kid (or a Click-fan for those Spaniards old enough!).</p><p><img src="/images/blog/lego/playmobil.jpg" alt="Software and Playmobil" title="Software and Playmobil" /></p><p>Not being able to bend the elbow still sucks but, who cares? Playmobil FTW!</p>]]>
</description>
</item>
<item>
<title>
Should I introduce an API Gateway in my workplace?
</title>
<link>
https://danlebrero.com/2020/01/08/do-i-need-a-gateway-api-team-dynamics/
</link>
<guid>
https://danlebrero.com/2020/01/08/do-i-need-a-gateway-api-team-dynamics/
</guid>
<pubDate>
Wed, 08 Jan 2020 09:00:00 +0100
</pubDate>
<description>
<![CDATA[<p>A while long ago, a friend asked for some advice regarding introducing an API gateway (API GW) into his company. </p><p>As I was a little bit surprised about my own answer, I want to share it here.</p><h2>Context</h2><p>Paraphrasing the question:</p>
<blockquote><p>I am working in a company that has three different development teams. Each team is building their own services, which are exposed directly to our customers. There are lots of inconsistencies between the APIs exposed by the three services, which our customers have to deal with. Would you recommend us to introduce an API gateway?</p>
</blockquote><p>As we both have worked together, we had a shared understanding about what we meant by an API gateway. Given the broad and generic term that it has become, the main functionalities of our API gateway were:</p>
<ol>
  <li>One place to have all the common functionality required when exposing APIs externally: authentication, authorization, rate limiting, A/B testing and other routing requirements. Also it can take care of some caching, downstream service error handling and i18n.</li>
  <li>Make the heterogeneous internal services look homogeneous to external clients: naming conventions, concepts, url structure, versioning, timestamps, pagination, …</li>
  <li>Provide a more coarse-grained API.</li>
  <li>Keep backwards compatibility on external facing APIs, while internal services can evolve.</li>
</ol><p>And from an architecture point of view, the change would be from this:</p><p><img src="/images/blog/do-i-need-an-api-gw/before-gw-api.jpg" alt="Before API GW" title="Before API GW" /></p><p>To this:</p><p><img src="/images/blog/do-i-need-an-api-gw/after-gw-api.jpg" alt="After API GW" title="After API GW" /></p><h2>Pure technical answer</h2><p>Nobody would argue that having a homogeneous, coherent API that shields clients from possible internal API changes is very valuable. </p><p>Our clients will love it.</p><p>Our developer will love it.</p><p>But you need to think about the cost. </p><h2>What the cost is</h2><p>When we talk about cost, we usually put too much emphasis on the initial investment. </p><p>As I told my friend:</p>
<blockquote><p>I think the initial cost of building the API GW is not huge. You can build it over a weekend, or a team of four can do it over a couple of months.</p>
</blockquote><p>Jokes aside, that last sentence has a kernel of truth, which gives us a clue about the kind of cost we should be more wary of.</p><p>Keeping with the conversation:</p>
<blockquote><p>The issue that I see is the maintenance: who is going to own the API gateway? </p>
</blockquote><p>Because the most important thing on the architecture change is the change on team dynamics, from:</p><p><img src="/images/blog/do-i-need-an-api-gw/team-before-gw-api.jpg" alt="Before API GW team structure" title="Before API GW Team structure" /></p><p>To:</p><p><img src="/images/blog/do-i-need-an-api-gw/team-after-gw-api.jpg" alt="After API GW team structure" title="After API GW Team structure" /></p><p>With this new team setup, you have to start thinking about how the different teams will interact between each other: </p>
<ul>
  <li>How internal service changes will need to be implemented and rolled out?</li>
  <li>What information needs to be shared between the API team and the other teams?</li>
  <li>What meetings will be required?</li>
  <li>Who will decide on priorities?</li>
  <li>Where will some of the functionality will be implemented: API GW or internal services?</li>
  <li>Who can veto an API change?</li>
  <li>Who can veto an internal service change?</li>
  <li>How will support be handled?</li>
  <li>&hellip;</li>
</ul><p>This is not to say that the new architecture is worse, but that all these questions should be taken into consideration when deciding if an API Gateway should be introduced or not.</p><p>Of course, this new team setup is just one of the possible ones. There are plenty of others (none of which is wrong) that will give different answers to the questions above, like: </p><h4>Shared responsibility, no accountability</h4><p>Where all teams own the API gateway, but nobody takes accountability.</p><p><img src="/images/blog/do-i-need-an-api-gw/everybody-responsible-gw-api.jpg" alt="Everybody responsible for API GW team structure" title="Everybody is responsible" /></p><h4>The API Council</h4><p>Where all teams agree to meet monthly to agree on API rules, and that is the only agreement that is ever reached.</p><p><img src="/images/blog/do-i-need-an-api-gw/gw-api-council.jpg" alt="The API gateway council" title="The API gateway council" /></p><h4>The Architects Overlords</h4><p>Where all powerful beings dictate the API rules for mortals to implement.</p><p><img src="/images/blog/do-i-need-an-api-gw/architects-ivory-tower.jpg" alt="Architects overloads on their ivory tower" title="Architects overloads on their ivory tower" /></p><h4>The Ignored Embedded Architects</h4><p>Where architects work along side the development teams, and meet monthly to whine about how their wise advise is completely ignored.</p><p><img src="/images/blog/do-i-need-an-api-gw/embedded-architect.jpg" alt="Embedded Architects ignored by the team" title="Embedded Architects ignored by the team" /></p><h4>The All Powerful API Framework</h4><p>Where the Platforms team provides a mandatory API framework so that teams can run their own API-rules-compliant gateways, and where all teams do their best to avoid, circumvent and replace with battle tested Open Source alternatives. </p><p><img src="/images/blog/do-i-need-an-api-gw/shared-platform-framework.jpg" alt="Shared Platform API framework" title="Shared platform API framework" /></p><h2>A Team oriented answer</h2><p>So to answer the question <em>&ldquo;Should I introduce an API Gateway in my workplace?&rdquo;</em> the main concern, and what you should focus on, is not the technical aspect of it.</p><p>The important question to answer is:</p>
<blockquote><p>What are the team dynamics that you want for you company, given its current context?</p>
</blockquote><p>Conway&rsquo;s law at its best.</p>]]>
</description>
</item>
<item>
<title>
Apache Http Client and Asynchronous HTTP client timeouts explained in pictures
</title>
<link>
https://danlebrero.com/2019/12/11/apache-http-client-timeouts-config-production-asynchronous-http-client-pictures/
</link>
<guid>
https://danlebrero.com/2019/12/11/apache-http-client-timeouts-config-production-asynchronous-http-client-pictures/
</guid>
<pubDate>
Wed, 11 Dec 2019 09:00:00 +0100
</pubDate>
<description>
<![CDATA[<p>I recently had to introduce a colleague to the wonderful and exciting world of timeouts in <a href="http://hc.apache.org">Apache HttpClient</a>. As the usual explanation that &ldquo;the connection timeout is the maximum time to establish a connection to the server&rdquo; is not the most descriptive one, let&rsquo;s try to explain with a couple of pictures what each timeout actually means.</p><p>Even if we will be talking about Apache&rsquo;s HttpClient, the following explanation is useful for any TCP based communication, which includes most of the JDBC drivers.</p><p>As a reference, here are all the timeouts that you <strong>must</strong> configure if you want a healthy production service:</p>
<ul>
  <li>Connection Timeout</li>
  <li>Read Timeout</li>
</ul><p>If you are using microservices, you will also need to configure a connection pool and the following timeouts:</p>
<ul>
  <li>Connection Pool Timeout</li>
  <li>Connection Pool Time To Live (TTL)</li>
</ul><p>You will find <a href="https://www.baeldung.com/httpclient-timeout">here</a> how to configure these timeout outs in Java. In our examples we will use <a href="https://github.com/dakrone/clj-http">clj-http</a> which is a simple wrapper over Apache’s HttpClient. We will also compare how timeouts work in <a href="https://github.com/AsyncHttpClient/async-http-client">Asynchronous HTTP Client</a>.</p><p>All the code, including a docker compose environment to test the settings can be found at <a href="https://github.com/dlebrero/apache-httpclient-timeouts">https://github.com/dlebrero/apache-httpclient-timeouts</a>.</p><h2>Connection timeout</h2><p>Before your http client can start interchanging information with the server, a communication path (or road or pipe) between the two must be established.</p><p>This is done with a handshake:</p><p><img src="/images/blog/http-client-timeout-configuration/hello-hi.jpg" alt="phone handshake" title="Handshake, hello, hi!" /></p><p>After this interchange you and your partner can start a conversation, that is, exchange data.</p><p>In TCP terms, this is called the 3 way handshake:</p><p><img src="/images/blog/http-client-timeout-configuration/tcp-handshake.jpg" alt="TCP handshake" title="TCP Handshake" /></p><p>The connection timeout controls how long are you willing for this handshake to take.</p><p>Let&rsquo;s test it using a non-routable IP address:</p>
<pre><code class="clojure">;; Without connection timeout
(time
    (try
      (client/get &quot;http://10.255.255.1:22220/&quot;)
      (catch Exception e)))
&quot;Elapsed time: 75194.7148 msecs&quot;

;; With connection timeout
(time
    (try
      (client/get &quot;http://10.255.255.1:22220/&quot;
        {:connection-timeout 2000})
      (catch Exception e
        (log/info (.getClass e) &quot;:&quot; (.getMessage e)))))
&quot;Elapsed time: 2021.1883 msecs&quot;
INFO  a.http-client - java.net.SocketTimeoutException : connect timed out
</code></pre><p>Notice the different elapsed time, the exception printed and the message within the exception.</p><h2>Read timeout</h2><p>Once the connection is established, and you are happily talking with the server, you can specify how long you are willing to wait to hear back from the server, using the read timeout:</p><p><img src="/images/blog/http-client-timeout-configuration/read-timeout.jpg" alt="Apache Http Client read timeout" title="Apache Http Client Read timeout" /></p><p>Let’s test it, using this time around an Nginx server, with a <a href="https://github.com/Shopify/toxiproxy">Toxiproxy</a> in the middle to mess around with the response times:</p>
<pre><code class="clojure"><br/>;; With no socket timeout
(time
  (try
    (client/get &quot;http://local.toxiproxy:22220/&quot;)
    (catch Exception e (.printStackTrace e))))
&quot;Elapsed time: 240146.6273 msecs&quot;

;; Same url, with socket timeout
(time
    (try
      (client/get &quot;http://local.toxiproxy:22220/&quot;
        {:socket-timeout 2000})
      (catch Exception e
        (log/info (.getClass e) &quot;:&quot; (.getMessage e)))))
&quot;Elapsed time: 2017.7835 msecs&quot;
INFO  a.http-client - java.net.SocketTimeoutException : Read timed out
</code></pre><p>Note that the default socket timeout is system dependant. Notice the different elapsed time, the exception printed and the message within the exception.</p><p>The ToxiProxy configuration can be found <a href="https://github.com/dlebrero/apache-httpclient-timeouts/blob/master/src/apache_httpclient_timeouts/http_client.clj#L39">here</a>.</p><h2>Pub quiz</h2><p>With these two timeouts, you should easily score one point for your team on your next IT Pub Quiz Championship:</p>
<blockquote><p>If you configure your HTTP client with a 10 seconds connection timeout and a 1 second read timeout, how long is a thread going to get stuck after issuing an HTTP request, in the worst case scenario?</p>
</blockquote><p>You guess it right! Infinite! One point for your team!</p><p>Whoot? You did not answer infinite? It is soooo obvious (sarcasm).</p><p>Let’s again call one of your friends and ask him about Pi, but this time we are going to call one of those high precision smartass friends:</p><p><img src="/images/blog/http-client-timeout-configuration/read-timeout-forever.jpg" alt="Apache http client read timeout retry" title="Apache http client read timeout retry" /></p><p>What is going on? </p><p>If you read carefully the previous explanation about the read timeout or even better, the <a href="http://hc.apache.org/httpcomponents-client-4.5.x/httpclient/apidocs/org/apache/http/client/config/RequestConfig.html#getSocketTimeout()">javadoc about it</a> you will notice that the read timeout is reset each time we hear from the server, so if the response is too big, the connection is too slow, the server is choking, or anything between the client and the server is having trouble, your client thread will be there hanging for a very long time.</p><p>Let’s see it in action. First we configure Toxiproxy to be very very slow while proxying the Nginx response (~ 2 bytes per second):</p>
<pre><code class="clojure">(client/post &quot;http://local.toxiproxy:8474/proxies/proxied.nginx/toxics&quot;
    {:form-params {:attributes {:delay 1000000
                                :size_variation 1
                                :average_size 2}
                   :toxicity 1.0
                   :stream &quot;downstream&quot;
                   :type &quot;slicer&quot;}
     :content-type :json})
</code></pre><p>And now we make exactly the same request as before, with a <strong>two seconds</strong> timeout:</p>
<pre><code class="clojure">(time
    (try
      (client/get &quot;http://local.toxiproxy:22220/&quot;
        {:socket-timeout 2000})
      (catch Exception e
        (log/info (.getClass e) &quot;:&quot; (.getMessage e)))))
&quot;Elapsed time: 310611.8366 msecs&quot;
</code></pre><p>That is more than five minutes! And thankfully it is just 600 bytes. </p><p>Here is how the HttpClient logs look like, for just reading the first bytes of the header:</p><p><img src="/images/blog/http-client-timeout-configuration/slowww.gif" alt="Apache http client slow logs" title="Apache http client slow logs" /></p><p>That looks pretty slow. Of course, this will never ever happen to you (more sarcasm here).</p><p>We will see at the bottom how to avoid this issue.</p><h1>Connection Pool</h1><p>Before talking about what the connection pool timeout is, let&rsquo;s see what is the point about having a connection pool with an example.</p><p>Let’s say that there are two Stock Market traders with a special interest in Mordor Stocks (Symbol: M$). Both are watching the same news channel, but one is using a connection pool (the one on the right) while the other is not:</p><p><img src="/images/blog/http-client-timeout-configuration/connection-pool.jpg" alt="Why use a http client connection pool" title="Why use a http client connection pool" /></p><p>As you can see, the trader with the connection pool leaves the phone off the hook and the broker waiting for more orders. </p><p>When, quite unexpectedly, a one metre humanoid manages to travel <a href="http://lotrproject.com/timedistance/">2900 km</a> across several war zones and inhospitable areas, and deliver the only existing nuke to the only existing weak spot of Sauron, the trader can very quickly sell all of his Mordor Stocks, while the trader without the connection pool is doomed.</p><p>So if you are going to call the same server a lot, which is typical for microservices architectures, you will want to avoid the overhead of creating new connections to the server, as it can be quite an expensive operation (from a few millis to hundreds of millis).</p><p>This is especially true if you are using HTTPS. See <a href="https://hpbn.co/transport-layer-security-tls/#tls-handshake">the TLS handshake</a>.</p><h2>Connection pool timeout and TTL</h2><p>As much as connection pools are awesome, as with any other resource, you need to limit the maximum number of open connections that you want to maintain, which means that there are three possible scenarios when fetching a connection from the pool.</p><p><em>Side note: for a very good talk about how to size your connection pool see <a href="https://www.youtube.com/watch?v=m64SWl9bfvk">&ldquo;Stop Rate Limiting! Capacity Management Done Right&rdquo;</a> by <a href="https://twitter.com/jon_moore">Jon Moore</a>.</em></p><h3>Scenario 1. Free connections.</h3><p>Assuming a max connection pool of three, the first scenario is:</p><p><img src="/images/blog/http-client-timeout-configuration/connection-pool-new-connection.jpg" alt="HTTP Connection pool new connection" title="HTTP Connection pool new connection" /></p><p>So there is some phone available but on the hook. You will need to suffer the extra connection setup delay.</p><h3>Scenario 2. Connection pooled.</h3><p>The second scenario:</p><p><img src="/images/blog/http-client-timeout-configuration/connection-pool-connection-available.jpg" alt="HTTP Connection pool connection available" title="HTTP Connection pool connection available" /></p><p>There is a phone off the hook, ready to be used. In this scenario, there are another two cases:</p>
<ol>
  <li>The connection is fresh, created less than the configured TTL. You will NOT need to suffer the extra connection setup delay.</li>
  <li>The connection is stale, created more than the configured TTL. You will need to suffer the extra connection setup delay.</li>
</ol><p>Let&rsquo;s test it:</p>
<pre><code class="clojure">;; Create a new connection pool, with a TTL of one second:
(def cp (conn-manager/make-reusable-conn-manager
        {:timeout 1 ; in seconds. This is called TimeToLive in PoolingHttpClientConnectionManager
         }))
;; Make ten calls, two per second:
(dotimes [_ 10]
  (log/info &quot;Send Http request&quot;)
  (client/get &quot;http://local.nginx/&quot; {:connection-manager cp})
  (Thread/sleep 500))
</code></pre><p>Looking at the logs:</p>
<pre><code>16:56:24.905 INFO  - Send Http request
16:56:24.914 DEBUG - Connection established 172.24.0.4:51984&lt;-&gt;172.24.0.2:80
16:56:25.416 INFO  - Send Http request
16:56:25.926 INFO  - Send Http request
16:56:25.933 DEBUG - Connection established 172.24.0.4:51986&lt;-&gt;172.24.0.2:80
16:56:26.434 INFO  - Send Http request
16:56:26.942 INFO  - Send Http request
16:56:26.950 DEBUG - Connection established 172.24.0.4:51988&lt;-&gt;172.24.0.2:80
16:56:27.452 INFO  - Send Http request
16:56:27.960 INFO  - Send Http request
16:56:27.967 DEBUG - Connection established 172.24.0.4:51990&lt;-&gt;172.24.0.2:80
16:56:28.468 INFO  - Send Http request
</code></pre><p>As expected, we can make two requests before recreating the connection.</p><p>Same scenario but with a 20 seconds TTL:</p>
<pre><code>16:59:19.562 INFO  - Send Http request
16:59:19.570 DEBUG - Connection established 172.24.0.4:51998&lt;-&gt;172.24.0.2:80
16:59:20.073 INFO  - Send Http request
16:59:20.580 INFO  - Send Http request
16:59:21.086 INFO  - Send Http request
16:59:21.593 INFO  - Send Http request
16:59:22.100 INFO  - Send Http request
16:59:22.607 INFO  - Send Http request
16:59:23.114 INFO  - Send Http request
16:59:23.623 INFO  - Send Http request
16:59:24.134 INFO  - Send Http request
</code></pre><p>So the same connection is used for all requests.</p><p>But why do we need the TTL? Mostly because firewalls have this tendency on dropping long live connections (especially idle ones) without telling any of the involved parts, which causes the client to take a while to realize that the connection is no longer usable. </p><h3>Scenario 3. All connections in use.</h3><p>The last scenario:</p><p><img src="/images/blog/http-client-timeout-configuration/connection-pool-full.jpg" alt="HTTP Connection pool full" title="HTTP Connection pool full" /></p><p>All the phones are busy, so you will have to wait. How much you are willing to wait for a phone to become free is the connection pool timeout.</p><p>Note if a phone becomes available before the connection pool timeout, you are back to the second scenario. With some unlucky timing, you will also need to establish a new fresh connection.</p><p>Let&rsquo;s look at an example. First we make the Nginx very slow, taking up to <a href="https://github.com/dlebrero/apache-httpclient-timeouts/blob/master/src/apache_httpclient_timeouts/http_client.clj#L114">20 seconds to respond</a>.</p><p>Then we create a connection pool with a maximum of three connections and we send four HTTP requests:</p>
<pre><code class="clojure">  (def cp-3 (conn-manager/make-reusable-conn-manager
              {:timeout 100
               :threads 3           ;; Max connections in the pool.
               :default-per-route 3 ;; Max connections per route (~ max connection to a server)
               }))

  (dotimes [_ 4]
    (future
      (time
        (client/get &quot;http://local.toxiproxy:22220/&quot; {:connection-manager cp-3}))))

&quot;Elapsed time: 20017.1325 msecs&quot;
&quot;Elapsed time: 20016.9246 msecs&quot;
&quot;Elapsed time: 20020.9474 msecs&quot;
&quot;Elapsed time: 40024.5604 msecs&quot;
</code></pre><p>As you can see, the last request takes 40 seconds, 20 of which are spent waiting for a connection to be available.</p><p>Adding a one second connection pool timeout:</p>
<pre><code class="clojure">(dotimes [_ 4]
  (future
    (time
      (try
        (client/get &quot;http://local.toxiproxy:22220/&quot;
          {:connection-manager cp-3
           :connection-request-timeout 1000 ;; Connection pool timeout in millis
           })
        (catch Exception e
          (log/info (.getClass e) &quot;:&quot; (.getMessage e)))))))

&quot;Elapsed time: 1012.2696 msecs&quot;
&quot;2019-12-08 08:59:04.073 INFO  - org.apache.http.conn.ConnectionPoolTimeoutException : Timeout waiting for connection from pool&quot;
&quot;Elapsed time: 20014.1366 msecs&quot;
&quot;Elapsed time: 20015.3828 msecs&quot;
&quot;Elapsed time: 20015.962 msecs&quot;
</code></pre><p>The thread that is not able to get a connection from the pool gives up after one second, throwing a ConnectionPoolTimeoutException.</p><h1>Are we done yet?</h1><p>Unfortunately, even if connection timeout, read timeout, connection pool timeout and connection pool TTL are the most common things to tweak, you should also be aware of: </p>
<ul>
  <li>DNS resolution: it cannot be <a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6450279">explicitly configure</a> it in Java, system dependant. Good to also know how it is <a href="https://cr.openjdk.java.net/~iris/se/11/latestSpec/api/java.base/java/net/doc-files/net-properties.html">cached</a>.</li>
  <li>Hosts with multiple IPs: In case of a connection timeout, HTTP client will try to <a href="https://www.baeldung.com/httpclient-timeout#timeout-and-dns-round-robin---something-to-be-aware-of">each of them</a>.</li>
  <li><a href="https://stackoverflow.com/a/13088864">TIME_WAIT and SO_LINGER</a>: closing a connection is not immediate and under very high load it can cause issues.</li>
</ul><h1>All together!</h1><p>Putting all the timeouts together, we have:</p><p><img src="/images/blog/http-client-timeout-configuration/summary-all-http-timeouts.jpg" alt="All Apache HTTP client timeouts" title="All Apache HTTP client timeouts" /></p><p>With all these timeouts, it is quite a challenge to know how long a HTTP request is actually going to take, so if you have any SLA or are worried about the stability of your application, you cannot solely rely on setting the timeouts correctly. </p><p>If you want to setup just some simple timeout for the whole request, you should be using <a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works#Isolation">Hystrix Thread Isolation</a>, Apache HTTP Client&rsquo;s <a href="https://hc.apache.org/httpcomponents-client-4.5.x/tutorial/html/advanced.html">FutureRequestExecutionService</a> (never used this one myself) or maybe use a different HTTP client. </p><h1>Asynchronous HTTP Client</h1><p>A possible solution to all these timeouts juggling is to use <a href="https://github.com/AsyncHttpClient/async-http-client">Asynchronous HTTP Client</a>, which is based on Netty. You can see <a href="https://github.com/dlebrero/apache-httpclient-timeouts/blob/master/src/apache_httpclient_timeouts/async_http_client.clj">here</a> all the above scenarios but using the Asynchronous HTTP Client.</p><p>Some notable differences between both HTTP clients:</p>
<ol>
  <li>Asynchronous HTTP clients have their own thread pool to handle the response once it arrives.</li>
  <li>No connection pool timeout: if the pool is completely used, an exception is thrown. There is no waiting for a connection to be available. Interestedly, I usually configure my Apache HTTP connection pools to behave the same, as a full connection pool usually means that something is not going working and it is better to bail out early.</li>
  <li><a href="https://github.com/dlebrero/apache-httpclient-timeouts/blob/master/src/apache_httpclient_timeouts/async_http_client.clj#L122">Connection pool idle timeout</a>: as we mentioned before, we wanted a connection pool TTL mostly because idle connections. Asynchronous HTTP Client comes with an explicit idle timeout, on top of a TTL timeout.</li>
  <li>A new request timeout: a timeout to bound the amount of time it takes to do the DNS lookup, the connection and read the whole response. One single timeout that states how long you are willing to wait for the whole HTTP conversation to be done. Sweet.</li>
</ol><p>So the timeouts for the Asynchronous HTTP client look like:</p><p><img src="/images/blog/http-client-timeout-configuration/asynchronous-http-client.jpg" alt="Asynchronous HTTP client timeouts" title="Asynchronous HTTP client timeouts" /></p><p>You can see again all the same scenarios but using this new request timeout <a href="https://github.com/dlebrero/apache-httpclient-timeouts/blob/master/src/apache_httpclient_timeouts/async_http_client.clj#L177">here</a>, including the Pub Quiz one.</p><p>Reasoning about the worst case is a lot easier.</p><h1>Summary</h1><p>In summary, timeouts are annoyingly difficult to configure, if you want to have some control over the maximum time allocated for an HTTP request/response. Unless, you are using an Asynchronous HTTP Client (or probably other async clients). </p><p>Am I suggesting that you should not use Apache HTTP Client?</p><p>Well, it depends what functionality you are using. Apache HTTP Client is a very mature project with plenty of build-in functionality and hooks to customize it. It even has an <a href="https://hc.apache.org/httpcomponents-asyncclient-4.1.x/index.html">async module</a> and the newer 5.0 (beta) version comes with <a href="https://hc.apache.org/httpcomponents-client-5.0.x/examples-async.html">build-in async functionality</a>.</p><p>In our case, after this long explanation to my colleague, given our use cases, moving to Asynchronous HTTP Client was my suggestion.</p>]]>
</description>
</item>
<item>
<title>
Book notes: Becoming a Technical Leader
</title>
<link>
https://danlebrero.com/2019/11/27/becoming-a-technical-leader-book-notes/
</link>
<guid>
https://danlebrero.com/2019/11/27/becoming-a-technical-leader-book-notes/
</guid>
<pubDate>
Wed, 27 Nov 2019 00:00:00 +0100
</pubDate>
<description>
<![CDATA[<p>These are my notes on Gerald Weinberg&rsquo;s <a href="https://www.goodreads.com/book/show/714344.Becoming_a_Technical_Leader">Becoming a technical leader</a>. </p><p>This is the first book that I read about leadership, so even if I found it insightful, I do not have any other reference to compare against. </p><h1>Key Insights</h1>
<ul>
  <li>Leadership is a skill and as with any skill it can be learn.</li>
  <li>Leadership is not an instinct.</li>
  <li>Leadership is the process of creating an environment in which people become empowered.</li>
  <li>Organic leadership leads to the process, not the people.</li>
  <li>An environment must have <em>MOI</em>:
  <ul>
    <li>Motivation - why.</li>
    <li>Organisation - to move ideas to practice.</li>
    <li>Ideas or Innovation - seeds, vision.</li>
  </ul></li>
  <li>Motivational leadership is just one type of leadership.</li>
  <li>Technical leaders emphasise innovation. A problem-solving leadership style consist on:
  <ul>
    <li>Understanding the problem.</li>
    <li>Manage flow of ideas.</li>
    <li>Maintain quality.</li>
  </ul></li>
  <li>All problem-solving leadership leaders have faith that there is always a better way.</li>
  <li>Manager != Leader. Manager is an appointed leader.</li>
  <li>Best working groups, leadership comes from everybody.</li>
  <li>The paradox of the appointed leader:
  <ul>
    <li>We think the appointed leader is the essential part of an organisation, so</li>
    <li>When there is trouble, everybody turns to the appointed leader, so</li>
    <li>This increases the load on her, so she either:
    <ul>
      <li>Breaks, or</li>
      <li>If she does not break, she has been the most active during the crisis, so</li>
    </ul></li>
    <li>The paradox if reinforced, as she is seen as the essential part during the crisis.</li>
    <li>This is why appointed leaders are replaced when a team does not perform. This is a fallacy. Systems are not linear.</li>
  </ul></li>
  <li>Will I lose my technical skills if I become a leader?
  <ul>
    <li>Yes.</li>
  </ul></li>
  <li><a href="#ch-6">Obstacles for innovation</a>:
  <ul>
    <li>No-problem syndrome.</li>
    <li>Self-blindness.</li>
    <li>Single solution belief.</li>
  </ul></li>
  <li>Becoming a leader means shifting the focus from your ideas to ideas of others.</li>
  <li>People without vision cannot influence others.</li>
  <li>Find a vision: child-like, but not childish.</li>
  <li>Clear communication, tell:
  <ul>
    <li>What you perceive.</li>
    <li>How you feel about what you perceive.</li>
    <li>How you feel about the feeling.</li>
  </ul></li>
  <li>If you are a leader, the people are your work. There is no other work worth doing.</li>
  <li>Offer to help only if you would want to be helped in the same situation and do it in the way you would want to be helped.</li>
  <li>You cannot care for others if you don’t care for yourself.</li>
  <li>Everybody wants to feel useful.</li>
  <li><a href="#mature-patterns">Mature patterns of behaviour</a></li>
  <li><a href="#ch-17">Consensus in organizations</a></li>
  <li><a href="#ch-18">Obstacles for organizing</a>:
  <ul>
    <li>Not using people&rsquo;s judgement.</li>
    <li>The more precise your orders, the more frustration when they are not understood, and the less creativity for the one ordered.</li>
    <li>Doing the work yourself
    <ul>
      <li>A leaders job is not to solve a single problem, but to create an environment in which many problems will be solved, not just for today, but for the future.</li>
    </ul></li>
  </ul></li>
  <li>Everybody is doing their best, under the current circumstances. Hence if you think they there are not, it is because you don&rsquo;t understand the circumstances.</li>
  <li>The person at the top makes the rules, which is another way of saying it breaks the old rules.</li>
  <li>If you don&rsquo;t fail, you are not testing yourself thoroughly.</li>
  <li>Take responsibility for your own education.</li>
  <li>Make the most of your organisation&rsquo;s learning opportunities.</li>
  <li>Make time: Don’t redo work you have assigned to others. Allow if you must make them mistakes.</li>
  <li>Seeking support is a sign of strength, not weakness.</li>
  <li>Do not obsess to become a manager or leader. Ask yourself:
  <ul>
    <li>Why do I want to do this?</li>
    <li>What assets do I have to contribute?</li>
    <li>What liabilities do I bring?</li>
  </ul></li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#part-one">Part one: Definition</a>
  <ul>
    <li><a href="#ch-1">1 - What is Leadership, Anyway?</a></li>
    <li><a href="#ch-2">2 - Models of Leadership Style</a></li>
    <li><a href="#ch-3">3 - A Problem-Solving Style</a></li>
    <li><a href="#ch-4">4 - How Leaders Develop</a></li>
    <li><a href="#ch-5">5 - But I can&rsquo;t because …</a></li>
  </ul></li>
  <li><a href="#part-2">Part 2: Innovation</a>
  <ul>
    <li><a href="#ch-6">6 - Obstacles to Innovation</a></li>
    <li><a href="#ch-7">7 - Improve self-awareness</a></li>
    <li><a href="#ch-8">8 - Developing Idea Power</a></li>
    <li><a href="#ch-9">9 - Vision</a></li>
  </ul></li>
  <li><a href="#part-3">Part 3 - Motivation</a>
  <ul>
    <li><a href="#ch-10">10 - First Great Obstacle to Motivation - clear communication</a></li>
    <li><a href="#ch-11">11 - Second great obstacle to motivation - Putting task over people</a></li>
    <li><a href="#ch-12">12 - The Problem of Helping Others</a></li>
    <li><a href="#ch-13">13 - Learning to Be a Motivator</a></li>
    <li><a href="#ch-14">14 - Where Power Come From</a></li>
    <li><a href="#ch-15">15 - Power, Imperfection and Congruence</a></li>
  </ul></li>
  <li><a href="#part-4">Part 4 - Organization</a>
  <ul>
    <li><a href="#ch-16">16 - Gaining organisation power</a></li>
    <li><a href="#ch-17">17 - Effective organisation of problem-solving teams</a></li>
    <li><a href="#ch-18">18 - Obstacles to Effective Organising</a></li>
    <li><a href="#ch-19">19 - Learning to Be an Organiser</a></li>
  </ul></li>
  <li><a href="#part-5">Part 5 - Transformation</a>
  <ul>
    <li><a href="#ch-20">20 - How You Will Be Graded as a Leader</a></li>
    <li><a href="#ch-21">21 - Passing Your Own Leadership Tests</a></li>
    <li><a href="#ch-22">22 - A Personal Plan for Change</a></li>
    <li><a href="#ch-23">23 - Finding Time to Change</a></li>
    <li><a href="#ch-24">24 - Finding Support for Change</a></li>
  </ul></li>
  <li><a href="#epilogue">Epilogue</a></li>
</ul><h1><a name="part-one"></a>Part one: Definition</h1><h2><a name="ch-1"></a>Chapter 1 - What is Leadership, Anyway?</h2>
<ul>
  <li>Leadership is a skill and as with any skill it can be learn.</li>
  <li>Leadership is not an instinct.</li>
  <li>You maybe a reluctant leader, because leading is conceived as &ldquo;telling people what to do&rdquo;, which feels wrong.</li>
  <li>You are a leader if people comes to ask for advice, and you like that.</li>
  <li>Who is the leader of a team? You cannot ask the team or the observers of a team.</li>
  <li>Leadership means influence.</li>
  <li>Many model of leadership:
  <ul>
    <li>Linear:
    <ul>
      <li>one effect, one cause.</li>
      <li>Example: thread/reward.</li>
      <li>You feel stupid if it doesn&rsquo;t work.</li>
      <li>Person:
      <ul>
        <li>Place individual into categories.</li>
        <li>“Growth” == how well you fit into a category.</li>
      </ul></li>
      <li>Relationship:
      <ul>
        <li>Good for large scale.</li>
        <li>Your position == your authority.</li>
      </ul></li>
      <li>Change:
      <ul>
        <li>Expect change to be orderly, one thing at a time.</li>
      </ul></li>
    </ul></li>
    <li>Organic:
    <ul>
      <li>close to system thinking.</li>
      <li>One effect, hundreds of causes, including the passage of time.</li>
      <li>Good for complex situations.</li>
      <li>Bad if we become paralysed until we fully understand the problem.</li>
      <li>Person:
      <ul>
        <li>Are unique.</li>
        <li>Find common ground.</li>
        <li>Help find inner harmony.</li>
      </ul></li>
    </ul></li>
    <li>Relationship:
    <ul>
      <li>Everybody is equal.</li>
      <li>Everybody benefits of problem solving.</li>
      <li>Joy of discovery.</li>
    </ul></li>
    <li>Change:
    <ul>
      <li>Expect change to be messy, ambiguity.</li>
      <li>Change is an opportunity to grow.</li>
    </ul></li>
  </ul></li>
  <li>Definition of Leadership:
  <ul>
    <li>Is the process of creating an environment in which people become empowered.</li>
    <li>Organic leadership leads to the process, not the people.</li>
    <li>Organic model is important for innovation.</li>
  </ul></li>
</ul><h2><a name="ch-2"></a>Chapter 2 - Models of Leadership Style</h2>
<ul>
  <li>For change to happen, an environment must have <em>MOI</em>:
  <ul>
    <li>Motivation - why.</li>
    <li>Organisation - to move ideas to practice.</li>
    <li>Ideas or Innovation - seeds, vision.</li>
  </ul></li>
  <li>Leadership style is how much of the above you use.</li>
  <li>Examples:
  <ul>
    <li>Pure &ldquo;M&rdquo;: Politician able to sell any idea.</li>
    <li>Pure &ldquo;O&rdquo;: Supper efficient office manager, for last year problems.</li>
    <li>Pure &ldquo;I&rdquo;: Genius that cannot work with others neither can organise the work for his ideas.</li>
  </ul></li>
  <li>Technical leaders emphasise innovation. A problem-solving leadership style consist on:
  <ul>
    <li>Understanding the problem.</li>
    <li>Manage flow of ideas.</li>
    <li>Maintain quality.</li>
  </ul></li>
  <li>The above is accomplished with MOI strategies.</li>
  <li>To improve leadership, we ADD strategies, do not remove.</li>
  <li>All problem-solving leadership leaders have faith that there is always a better way.</li>
</ul><h2><a name="ch-3"></a>Chapter 3 - A Problem-Solving Style</h2>
<ul>
  <li>Understand the problem:
  <ul>
    <li>Read the spec.</li>
    <li>Encourage others to read the spec.</li>
    <li>Resolve arguments by referring back to the original spec.</li>
    <li>Seek clarification from customer.</li>
    <li>Refer back to the spec after some work has been done.</li>
  </ul></li>
  <li>Manage flow of ideas:
  <ul>
    <li>Contribute with a clever idea.</li>
    <li>Encourage copying of useful idea.</li>
    <li>Elaborate on an idea that a teammate contributed.</li>
    <li>Drop one&rsquo;s idea in favour of an idea the team want to develop.</li>
    <li>Refuse to let an idea drop until everybody understands it.</li>
    <li>Resist time pressure and take time to listen when other people explain their ideas.</li>
    <li>Test ideas contributed by other people (outside teams or company).</li>
    <li>Withhold quick criticism of teammates ideas, in order to keep ideas flowing.</li>
    <li>Criticise an idea, not the person behind the idea.</li>
    <li>Test your own ideas before offering them.</li>
    <li>When time and labor are running short, stop working in new ideas and just pitch in.</li>
    <li>Encourage the team to drop ideas that succeeded earlier, but cannot be extended to the new situation.</li>
    <li>Revive a dropped idea later, when it has value for other part of the problem or different context.</li>
  </ul></li>
  <li>Control quality:
  <ul>
    <li>Measure quality as the project proceeds.</li>
    <li>Design tools and processes to measure quality as you build a solution.</li>
    <li>Measure the speed of implementation. Compare it to the schedule and be prepared to change the solution procedure.</li>
    <li>Step back from the project to refresh your perspective and assess its viability.</li>
    <li>Check ideas with the customer before implementing them.</li>
    <li>Restore morale when an idea collapses.</li>
  </ul></li>
</ul><h2><a name="ch-4"></a>Chapter 4 - How Leaders Develop</h2>
<ul>
  <li>Practice makes perfect.</li>
  <li>Learning is like:</li>
</ul><p><img src="/images/blog/becoming-technical-leader/learning-curve.jpg" alt="Learning curve" title="Learning curve" /></p>
<ul>
  <li>Huge jumps in productivity.</li>
  <li>Ravine before breakthrough.</li>
  <li>Plateau with little improvement.</li>
  <li>How do you know there is something after the ravine?</li>
  <li>Metacycle: learning to learn.</li>
</ul><h2><a name="ch-5"></a>Chapter 5 - But I can&rsquo;t because …</h2>
<ul>
  <li>I am not a manager
  <ul>
    <li>Manager != Leader.</li>
    <li>Manager is an appointed leader.</li>
    <li>We tend to forget things that do not work, things that do not fit our models.</li>
    <li>Best working groups, leadership comes from everybody.</li>
    <li>The paradox of the appointed leader:
    <ul>
      <li>We think the appointed leader is the essential part of an organisation, so</li>
      <li>When there is trouble, everybody turns to the appointed leader, so</li>
      <li>This increases the load on her, so she either:
      <ul>
        <li>Breaks, or</li>
        <li>If she does not break, she has been the most active during the crisis, so</li>
      </ul></li>
      <li>The paradox if reinforced, as she is seen as the essential part during the crisis.</li>
    </ul></li>
    <li>This is why appointed leaders are replaced when a team does not perform. This is a fallacy. Systems are not linear.</li>
  </ul></li>
  <li>I am not the leader type
  <ul>
    <li>Motivational leadership is just one type of leadership.</li>
    <li>Problem-solving leadership is more appropriate for me.</li>
  </ul></li>
  <li>I will lose my technical skills
  <ul>
    <li>Yes you will.</li>
  </ul></li>
  <li>I am in danger of growing
  <ul>
    <li>Yes.</li>
    <li>But you can chose when.</li>
    <li>Again, manager != leader != boss.</li>
  </ul></li>
  <li>I don’t want that much power
  <ul>
    <li>What BS is the author talking about?</li>
  </ul></li>
</ul><h1><a name="part-2"></a>Part 2: Innovation</h1><h2><a name="ch-6"></a>Chapter 6 - Obstacles to Innovation</h2>
<ul>
  <li>Self-blindness:
  <ul>
    <li>The only way we can see ourselves is through other people, so</li>
    <li>Find somebody to watch over you and give you honest feedback. Keep it mutual.</li>
  </ul></li>
  <li>No-problem syndrome:
  <ul>
    <li>What:
    <ul>
      <li>Finding a solution before understanding the problem.</li>
      <li>You know the answer to all problems.</li>
    </ul></li>
    <li>Test to find out:
    <ul>
      <li>Ask the problem solver to repeat back the problem to be solved.</li>
      <li>If she replies with a solution, then she has the problem solver syndrome.</li>
    </ul></li>
  </ul></li>
  <li>Single solution belief:
  <ul>
    <li>Just one solution.</li>
  </ul></li>
</ul><h2><a name="ch-7"></a>Chapter 7 - Improve self-awareness</h2>
<ul>
  <li>Test if you want to change: start writing a personal journey for the next 3 months.</li>
  <li>When? Whenever fits you.</li>
  <li>What? About yourself.
  <ul>
    <li>Maybe follow: facts, feelings, findings.</li>
    <li>Maybe: work ideas and fixed bugs.</li>
  </ul></li>
</ul><h2><a name="ch-8"></a>Chapter 8 - Developing Idea Power</h2>
<ul>
  <li>You must believe that any real problem has one more solution, which nobody has found yet.</li>
  <li>New ideas:
  <ul>
    <li>Every mistake is a new idea.</li>
    <li>Steal ideas:
    <ul>
      <li>Plagiarising.</li>
      <li>Research.</li>
      <li>Talks to others to be able to do this!</li>
    </ul></li>
    <li>Misunderstand stolen ideas.</li>
    <li>Copulation:
    <ul>
      <li>Mix two ideas into a better one.</li>
      <li>Coupling of ideas.</li>
      <li>Best way to solve arguments between two parties.</li>
    </ul></li>
  </ul></li>
  <li>Error, theft and copulation: all things that we learn not to do since school.</li>
  <li>Relation with 3 obstacles to innovations:
  <ul>
    <li>Error == self-awareness: we do not error.</li>
    <li>Theft == no-problem syndrome: we are so clever that we do not need others ideas.</li>
    <li>Copulation == single-solution belief: if there is only one solution, there is no point on mixing.</li>
  </ul></li>
</ul><h2><a name="ch-9"></a>Chapter 9 - Vision</h2>
<ul>
  <li>Becoming a leader means shifting the focus from your ideas to ideas of others.</li>
  <li>Success can lead to failure.</li>
  <li>People become leaders because the way they react to failure:
  <ul>
    <li>Not only overcome adversity, but turn it to their advantage.</li>
  </ul></li>
  <li>How? Special kind of vision, one that combines:
  <ul>
    <li>&ldquo;Ordinary&rdquo; mission in life.</li>
    <li>And personalising the vision.</li>
  </ul></li>
  <li>In other words, something worth doing, but must have a unique part that only I can contribute.</li>
  <li>People without vision cannot influence others.</li>
  <li>Find a vision: child-like, but not childish .</li>
</ul><h1><a name="part-3"></a>Part 3 - Motivation</h1><h2><a name="ch-10"></a>Chapter 10 - First Great Obstacle to Motivation - clear communication</h2>
<ul>
  <li>Inability to see yourself as others see you.</li>
  <li>Top problem solvers tend to believe that they had success without other people help. When they become leaders, they act more like a chief surgeon than an athletic coach. Basically, they think teammates cannot solve problems</li>
  <li>Testing question: Are you willing to appear fooling in front of other peoples?</li>
  <li>An Satir’s interaction model:</li>
</ul><p><img src="/images/blog/becoming-technical-leader/interaction-model.jpg" alt="Interaction model" title="Interaction model" /></p>
<ul>
  <li>Inner me steps:
  <ul>
    <li>Sensory input.</li>
    <li>Interpretation.</li>
    <li>Feelings.</li>
    <li>Feeling about feelings.</li>
    <li>Defense.</li>
    <li>Rules for commenting.</li>
    <li>Outcome.</li>
  </ul></li>
  <li>This is just the receiving part, the sending part goes through something similar, so the opportunity of misunderstanding is big.</li>
  <li>Reasons why communications go awry:
  <ul>
    <li>Perception.</li>
    <li>Wrong time.</li>
    <li>Wrong place.</li>
    <li>Wrong person.</li>
    <li>Self-worth.</li>
  </ul></li>
  <li>Satir says that 90% of communications are incongruent.</li>
  <li>Incongruent comms are deadly for motivation.</li>
  <li>Clear communication, tell:
  <ul>
    <li>What you perceive.</li>
    <li>How you feel about what you perceive.</li>
    <li>How you feel about the feeling.</li>
  </ul></li>
  <li>By telling all of these, you may look as a fool, that why the testing question.</li>
</ul><h2><a name="ch-11"></a>Chapter 11 - Second great obstacle to motivation - Putting task over people</h2>
<ul>
  <li>Pretend/Think that there is a conflict between people and a tasks. (Conflict == that you have to chose one over the other).</li>
  <li>People and tasks are indivisible. They cannot be separated.</li>
  <li>Every task derives from people.</li>
  <li>Lessons of task vs people oriented leaders:
  <ul>
    <li>When survivals is concerned, there is no choice but to put people first.</li>
    <li>If the job is not highly technical, the leader need not to be competent, but can lead by fear.</li>
    <li>People with strong technical background can convert any task into a technical task, thus avoiding work they don&rsquo;t want to do.</li>
    <li>Leaders who don’t care about people don’t have anyone to lead, unless their followers don’t have a choice.</li>
    <li>No amount of caring for people will hold your audience if you have nothing to offer.</li>
    <li>Task-oriented leaders tend to overestimate their own accomplishments.</li>
    <li>Very little work we do is really so important that it justifies sacrificing the future possibilities of the people doing the work.</li>
    <li>When the work is complex, no leader can be absolutely sure that plans won’t &ldquo;gang aft agley&rdquo;.</li>
    <li>To be a successful problem-solving leader, you must keep everybody’s humanness at the forefront.</li>
    <li>If you are a leader, the people are your work. There is no other work worth doing.</li>
  </ul></li>
</ul><h2><a name="ch-12"></a>Chapter 12 - The Problem of Helping Others</h2>
<ul>
  <li>You cannot help if people don&rsquo;t want to be helped.</li>
  <li>Start by agreeing what is the problem.</li>
  <li>You can stop helping if it doesn&rsquo;t work.</li>
  <li>In every offer to help, the helper expect to get something, even if he is not conscious.</li>
  <li>No matter how strange it may look, most people are actually trying to be helpful.</li>
  <li><p>Golden rule regarding help:</p>
  <blockquote>Offer to help only if you would want to be helped in the same situation and do it in the way you would want to be helped
  </blockquote></li>
  <li>If you don&rsquo;t care about people whom you lead, you will never succeed as they leader.</li>
  <li>You cannot care for others if you don&rsquo;t care for yourself.</li>
</ul><h2><a name="ch-13"></a>Chapter 13 - Learning to Be a Motivator</h2>
<ul>
  <li>Chapter about self-esteem: each of us have survival rules.</li>
  <li>Survival rules do not allow to be effective leader.</li>
  <li>We can change survival rules to guidelines.</li>
  <li>We also have meta-rules (rules about our survival rules) that govern how we can change our survival rules.</li>
  <li>So when your leadership is not working, maybe you need to find if there is a survival rule interfering.</li>
</ul><h2><a name="ch-14"></a>Chapter 14 - Where Power Come From</h2>
<ul>
  <li>You don’t &ldquo;possess&rdquo; power. Power is a relationship.</li>
  <li>Example: Technical expertise is &ldquo;power&rdquo; in a team of junior people, while not so much in a team of senior.</li>
  <li>You need to understand what you want power for.</li>
  <li>When changing role, your old power will banish and a new one will emerge. This is because your relationship with others has changed.</li>
  <li>Personal power: when you have a clear understanding of what you really want.</li>
</ul><h2><a name="ch-15"></a>Chapter 15 - Power, Imperfection and Congruence</h2>
<ul>
  <li>Everybody wants to feel useful.</li>
  <li>Mechanical problems: one that seem complex but turns out to be solved by a technical solution with no emotional or psychological turmoil.</li>
  <li>Some mechanical problems are hard to handle because of the reaction to the event.</li>
  <li><a name="mature-patterns"></a>List of mature patterns of behaviour, to help fixing a problem:
  <ul>
    <li>Be clear when dealing with others.</li>
    <li>Be aware of your own thoughts and feelings.</li>
    <li>Be able to see and hear what is outside yourself.</li>
    <li>Behave towards other people as separate from yourself and unique.</li>
    <li>Treat differentness as an opportunity to learn and explore rather than a threat or signal for conflict.</li>
    <li>Deal with persons and situations in their context, in terms of how it is rather how you wish it were or expect it to be.</li>
    <li>Accept responsibility for what you feel, think, hear and see, rather than denying it or attributing it to others.</li>
    <li>Have open techniques for giving, receiving and checking meaning with others.</li>
  </ul></li>
  <li>These are all social and communication skills.</li>
  <li>Be congruent.</li>
  <li>Be open with others about what you perceive, how you feel and be open to learn.</li>
</ul><h1><a name="part-4"></a>Part 4 - Organization</h1><h2><a name="ch-16"></a>Chapter 16 - Gaining organisation power</h2>
<ul>
  <li>Organisation power: to obtain resources (money, training, office space, tools) for your team.</li>
  <li>Power conversion: convert other kinds of power into organisational power.</li>
</ul><h2><a name="ch-17"></a>Chapter 17 - Effective organisation of problem-solving teams</h2>
<ul>
  <li>Possible organisations:
  <ul>
    <li>Individual: no org, everybody works on its own.</li>
    <li>Voting: Vote without previous discussion.</li>
    <li>Strong leader: one person makes all decisions, privately consulting the team.</li>
    <li>Consensus: everybody agrees after the discussion:
    <ul>
      <li>Everybody agrees in principle.</li>
      <li>Everybody backs up the decision with logic and facts.</li>
      <li>Avoid changing your mind only to avoid conflict.</li>
      <li>Avoid techniques to reduce conflict (like voting, averaging, …)</li>
      <li>Facts and only facts.</li>
      <li>Consider other opinions helpful, as long as they are supported by facts and logic.</li>
      <li>Do not withhold information just to be nice.</li>
      <li>Can use intuition, but make it clear that is intuition.</li>
    </ul></li>
    <li>Voting:
    <ul>
      <li>Better than individual.</li>
      <li>Require less time.</li>
      <li>No information exchange.</li>
      <li>Better than consensus, if consensus breaks down.</li>
      <li>Better than strong leader, if leader is bad.</li>
    </ul></li>
    <li>Strong leader:
    <ul>
      <li>Depends a lot on the leadership style and knowledge of the leader.</li>
    </ul></li>
    <li>Consensus:
    <ul>
      <li>At first, time consuming and frustrating.</li>
      <li>Usually highest quality decisions.</li>
      <li>Can be harmful if consensus process breaks down.</li>
      <li>Whole team feels responsible for the decision, so more productive.</li>
    </ul></li>
    <li>Best one?
    <ul>
      <li>Depends on the organisation context.</li>
      <li>Remember that organisation context can change.</li>
      <li>To check if it is working, see if the organisation is providing an environment for people to understand the problem, manage the flow of ideas and maintain quality (== problem-solving org).</li>
    </ul></li>
  </ul></li>
</ul><h2><a name="ch-18"></a>Chapter 18 - Obstacles to Effective Organising</h2>
<ul>
  <li>First Obstacle: Believe that you just have two choices: order or be ordered.</li>
  <li>Second Obstacle: Think that people can take and interpret orders as computer.
  <ul>
    <li>People have judgement and you want them to use it.</li>
    <li>Communication is never perfect.</li>
    <li>The more precise your orders, the more frustration when they are not understood, and the less creativity for the one ordered.</li>
  </ul></li>
  <li>Third: doing the work yourself.
  <ul>
    <li>A leaders job is not to solve a single problem, but to create an environment in which many problems will be solved, not just for today, but for the future.</li>
  </ul></li>
  <li>Forth: Reward ineffective organising:
  <ul>
    <li>Reward heroics.</li>
    <li>Organizing is not about solving “crisis”/problems, but avoiding them.</li>
  </ul></li>
  <li>Giving and taking orders are means to an end, not an end in themselves.</li>
</ul><h2><a name="ch-19"></a>Chapter 19 - Learning to Be an Organiser</h2>
<ul>
  <li>Practice: at work and outside work.</li>
  <li>Observe how people organise and experiment (introduce little changes to observe what happens).</li>
  <li>Look for incongruences:
  <ul>
    <li>What things are vs the way they look. Example:
    <ul>
      <li>org chart vs real org.</li>
      <li>Official channels vs informal channels.</li>
    </ul></li>
    <li>(Seed model) Everybody is doing their best, under the current circumstances. Hence if you think they there are not, it is because you don’t understand the circumstances.</li>
  </ul></li>
  <li>Look for cross wires:
  <ul>
    <li>If everybody is motivated, and</li>
    <li>If everybody is agrees on the problem</li>
    <li>Then look for a mistake/misunderstanding in the organisation.</li>
  </ul></li>
  <li>Legitimize differences:
  <ul>
    <li>Sometimes the cross wires happen because orgs do not account for people being different.</li>
    <li>Look at the Myers-Briggs model. Read “Please understand me”.</li>
  </ul></li>
  <li>Use yourself as a model of the team.
  <ul>
    <li>You can see your own internal conflicts as a model of people conflicts.</li>
    <li>For example, conflict of wanting to finish now vs wanting to do a perfect job.</li>
  </ul></li>
</ul><h1><a name="part-5"></a>Part 5 - Transformation</h1><h2><a name="ch-20"></a>Chapter 20 - How You Will Be Graded as a Leader</h2>
<ul>
  <li>Grading is multiplicative. If you have a 80% in tech and 60% people’s skill your score is 0.8 * 0.6 = 0.48.</li>
  <li>This is because as a leader, people expects a lot more.</li>
  <li>To make things even harder, as a technical leader, you are going to be graded in more dimensions.</li>
  <li>Improving an are with the least grade has more impact.
  <ul>
    <li>From the previous example, if we can improve 10 points:
    <ul>
      <li>(0.8+0.1) * 0.6 = 0.8 * 0.6 + 0.1 * 0.6 = 0.54</li>
      <li>0.8 * (0.6+0.1) = 0.8 * 0.6 + 0.1 * 0.8 = 0.56</li>
    </ul></li>
  </ul></li>
  <li>Until some trust is build, tech leaders are scored by the minimum of the grades.
  <ul>
    <li>Try to delay the area that you are weak at.</li>
    <li>You don’t need to answer any question immediately.</li>
  </ul></li>
</ul><h2><a name="ch-21"></a>Chapter 21 - Passing Your Own Leadership Tests</h2>
<ul>
  <li>The person at the top makes the rules, which is another way of saying it breaks the old rules.</li>
  <li>A leadership trait is withstand testing, because you are going to be tested all the time.</li>
  <li>To pass a leadership test, you either use:
  <ul>
    <li>Motivation, also called personality style.</li>
    <li>Organisation, also called planning style.</li>
  </ul></li>
  <li>Tech people are usually better at the planning style.</li>
  <li>Paradox: to avoid your weakest style, you have to strengthen it.</li>
  <li>Both style are important.</li>
  <li>If you don’t fail, you are not testing yourself thoroughly.</li>
  <li>If you are not testing yourself thoroughly, you will learn little.</li>
  <li>If you learn little, you can be good but not exceptional. You cannot jump to your next plateau.</li>
</ul><h2><a name="ch-22"></a>Chapter 22 - A Personal Plan for Change</h2>
<ul>
  <li>When trying something new:
  <ul>
    <li>We are in a special state of alertness.</li>
    <li>When we stop paying attention, we go back to the old, safe behaviour.</li>
  </ul></li>
  <li>A series of small, ordinary changes can put you on the brink of a large and extraordinary one. You have to have the courage to take the plunge.</li>
  <li>You need a plan.</li>
  <li>Take responsibility for your own education.</li>
  <li>Make the most of your organisation’s learning opportunities.</li>
  <li>Learn your learning style.</li>
</ul><h2><a name="ch-23"></a>Chapter 23 - Finding Time to Change</h2>
<ul>
  <li>Make time:
  <ul>
    <li>Don’t redo work you have assigned to others. Allow if you must make them mistakes.</li>
    <li>Avoid trivial technical arguments to prove your technical superiority.</li>
    <li>Choose your own priorities and don’t wait for a crisis to organise your activities.</li>
    <li>Avoid administration.</li>
    <li>Pay attention to what you do when there is nothing to do.</li>
    <li>Listen to what other people has already learned.</li>
    <li>Do two things at once:
    <ul>
      <li>Find activities where you get multiple benefits.</li>
      <li>Kill two birds with one stone.</li>
    </ul></li>
  </ul></li>
</ul><h2><a name="ch-24"></a>Chapter 24 - Finding Support for Change</h2>
<ul>
  <li>Seeking support is a sign of strength, not weakness.</li>
  <li>Nurture relationships for:
  <ul>
    <li>Technical support.</li>
    <li>Services you cannot perform (like criticism of your own writing).</li>
    <li>Growth: people that give you things you didn’t know you did want to know.</li>
    <li>Recovery, emotional and spiritual support.</li>
  </ul></li>
  <li>There are three types of supporters:
  <ul>
    <li>Conservatives: they don’t want you to change.</li>
    <li>Radicals: they want you to change.</li>
    <li>Friends: “Do whatever you really want to do”.</li>
  </ul></li>
</ul><h1><a name="epilogue"></a>Epilogue</h1>
<ul>
  <li>Do not obsess to become a manager or leader.</li>
  <li>Whenever you want to do something, ask yourself:
  <ul>
    <li>Why do I want to do this?</li>
    <li>What assets do I have to contribute?</li>
    <li>What liabilities do I bring?</li>
  </ul></li>
</ul>]]>
</description>
</item>
<item>
<title>
Java with a Clojure mindset
</title>
<link>
https://danlebrero.com/2019/03/06/java-with-a-clojure-mindset/
</link>
<guid>
https://danlebrero.com/2019/03/06/java-with-a-clojure-mindset/
</guid>
<pubDate>
Wed, 06 Mar 2019 09:00:00 +0100
</pubDate>
<description>
<![CDATA[<p>In this talk, using a real application as an example, we will learn how to build and design Java applications that follow Clojure&rsquo;s functional principles using just core Java, without any libraries, lambdas, streams or weird syntax; and we will see what benefits those functional principles can bring.</p><p>A teaser first:</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/5iDL_lVcXM4" frameborder="0" allowfullscreen></iframe></p><p>Here are the slides in <a href="/slides/java-with-a-Clojure-mindset.key">keynote format</a>, <a href="/slides/java-with-a-clojure-mindset.pptx">ppt format (untested!)</a> and <a href="https://www.slideshare.net/DanielLebrero2/java-with-a-clojure-mindset">SlideShare (somehow broken!)</a>.</p><p>And the video:</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/u2CT3o09JhU" frameborder="0" allowfullscreen></iframe></p><p>Feedback and questions welcomed!</p>
<hr/><h1>Transcript</h1><p>Lets start with a quizz. Who can tell me what is this?</p><p><img src="/images/blog/java-with-a-clojure-mindset/001-alien.jpg" alt="alien" title="Alien" /></p><p>This is how Clojure looks like the first time that you see it.</p><p>And I want to point out 3 important things in this picture. </p><p>First, it is very ugly, some people would say that it is even disgusting.</p><p>Second, there are a lot of things that make no sense at all. For example, why would you want to keep a bug in your mouth?</p><p><img src="/images/blog/java-with-a-clojure-mindset/004-alien.jpg" alt="alien" title="Alien" /></p><p>Or what the hell is that and what it is doing there?</p><p><img src="/images/blog/java-with-a-clojure-mindset/005-alien.jpg" alt="alien" title="Alien" /></p><p>But last, and most importantly, it is alien. And when we look at that picture, we are looking at it from our human point of view, from our Java perspective.</p><p>So maybe we are not being fair, and with enough time, </p><p><img src="/images/blog/java-with-a-clojure-mindset/006-hypotoad.gif" alt="hypotoad" title="hypotoad" /></p><p>and the help of the hypotoad, maybe that picture would look like this:</p><p><img src="/images/blog/java-with-a-clojure-mindset/007-alien.jpg" alt="alien" title="alien" /></p><p>because with understanding, it will come a change on perspective, that will allow us to make a more fair judgement. </p><p>And I know what you are thinking, Wonderwoman is not technically an alien and if we are talking about Clojure, the picture is missing </p><p><img src="/images/blog/java-with-a-clojure-mindset/008-alien.jpg" alt="alien" title="alien" /></p><p>some parenthesis. </p><p>But still, if we spend sometime studying these aliens, maybe we will find some superpowers that we can use in our day to day job as Java developers.</p><h1>Clojure</h1><p>So what is Clojure? Clojure is a Functional, Hosted, Dynamic and strongly typed, lisp for the JVM.</p><p><img src="/images/blog/java-with-a-clojure-mindset/010-clojure.jpg" alt="clojure" title="Clojure" /></p><p>So what we are going to do in this session is, using a real world application as an example, see how Clojure affected the way that we built, the way we designed this Java application, how Clojure infected our Java code.</p><p>To give a little bit more context, when I got involved with this application, </p><p><img src="/images/blog/java-with-a-clojure-mindset/011-wikus.jpg" alt="wikus" title="Wikus" /></p><p>I had already been a Java developer for 12 years, and a Clojure one for 3, so when I got involved I had reached Wikus Stage 2 on my journey, on my transformation, to a full blown alien mind.</p><p>The application that we are going to be talking about, is one of this bonus systems that you find in some betting industries. </p><p><img src="/images/blog/java-with-a-clojure-mindset/012-bonus.jpg" alt="bonus" title="Bonus" /></p><p>Those of the kind of “if you put some money in your account, we will give you double that amount for free” or “if you join us now, we will give you a 1000 euros free cash!”. </p><p>Now nobody is going to give you any free cash, so if you read the T&amp;C, to be eligible to withdraw that “free” cash, to be able to get that cash and put it in your pocket, you had to first play or bet, a number of times in the system, or do a number of activities.</p><p>Also, in our particular case, and I am not sure if this is common, the client had a limited amount of time to place all these bets.</p><p>So removing all the marketing fluff, what our application had to do was something like this: </p>
<blockquote><p>add some amount of money to the client account, if they had sign up for the bonus and they had made loads and loads of bets, within some timeframe. </p>
</blockquote><p>So from an implementation point of view, what the system had to do is know which bonus where available, which clients had sign up for one of those bonus, and then keep track of the interesting activities of those clients, which in our case would be making a bet and placing a deposit.</p><h1>Functional vs OO</h1><p>So lets start with the first of the differences: Functional vs Object Oriented.</p><p>Of the many principles, concepts and techniques that are usually associated with FP, I just want to focus on one that, in my personal experience, has made the biggest impact on the way that I design applications. And I think it is specially important because it is easy to translate, to use it most languages.</p><h2>Pure Functions</h2><p>This is the concept of pure functions.</p><p>Pure functions are pieces of code that for a given input, they are always always always going to return the same result. Always. So same input, same output.</p><p>And why are pure functions so important? Pure functions have multiple benefits, but the key one is that pure functions are easier to reason about, because all the code within a pure function just depends on the input parameters. So the context that you need to keep on your head to understand a pure functions is small.</p><p>Pure functions are like physic laws, </p><p><img src="/images/blog/java-with-a-clojure-mindset/013-laws.2.gif" alt="laws" title="Laws" /></p><p>because you know how a pure functions is going to work and you can rely on it working the same every single time.</p><p>And as pure functions are easier to understand, it also means that they are easier to change. </p><p>And change is what we, developers, do for a living. </p>
<blockquote><p>Programmers are constantly in maintenance mode. <cite>The Pragmatic Programmer</cite></p>
</blockquote><p>We very rarely write a new piece of code. Most of the time, we are just making changes on existing systems. Even if you created your project 15 minutes ago, you are already in the business if changing existing code. </p><h2>Side effects</h2><p>And when talking about pure functions, we have to talk about its evil twin, side effects.</p><p>Side effects is what makes your code hard to understand, because suddenly, to understand a piece of code, it is not enough to look at that code. Now you also need to understand all its dependencies, and all the libraries that are being used, and all the possible states in the database, and all the possible states of the network, and all the possible things that multiple threads could be doing at the same time.</p><p>The context that you need to keep in your head is huge.</p><p>Once you have side effects, </p><p><img src="/images/blog/java-with-a-clojure-mindset/014-side-effects.gif" alt="side effects" title="Side effects" /></p><p>you are not sure what is going to happen when you make a change.</p><p>Well, that was a bit side effect. And this happens to us all the time. You make a small, and what you think is an innocuous change, on one side of your application and then suddenly a completely unrelated feature in the other side breaks without you ever noticing.</p><p>So for me, a key insight on functional programming, is that side effects are the enemy. </p><p><img src="/images/blog/java-with-a-clojure-mindset/015-side-effects-enemy.jpg" alt="015-side-effects-enemy" title="Side effects enemy" /></p><p>So functional programming is about fighting and controlling side effects.</p><p>There are basically two kinds of side effects:</p><p><img src="/images/blog/java-with-a-clojure-mindset/016-side-effects-types.jpg" alt="Side effect types" title="Side effects types" /></p>
<ol>
  <li>Those side effects that change the state of your application</li>
  <li>And then we have IO side effects. Of the IO side effects, I want to distinguish the Input side effects, sometimes called co-effects from the output side effects, called simply effects.</li>
</ol><h3>State</h3><p>So let&rsquo;s start by talking about how we can fight state.</p><p>In the case of the bonus system, our application has to keep track of the state of each client and its progress on the bonus campaign. </p><p>To do that you can image that the application kept a map, with the client id as the key and some kind of ClientBonus object as the value. This ClientBonus object itself could have maybe Client object and a bonus object. Also, it will also have to keep track of the deposits made, so it could have a DepositList, which will contain a bunch of Deposit objects, and each of these deposits objects could contain even more objects. In a similar way, it would need to keep track of the bets done by the client.</p><p>So these would be our object graph, and we would have one of these graphs per client.</p><p>Now when it came to state management, I would traditionally made each object responsible for its own state change. So the Map would get its own little machinery, its own little piece of code to manage its internal state and to make sure that if several threads try to manipulate or read the map, they will see a consistent state.</p><p><img src="/images/blog/java-with-a-clojure-mindset/017-state-management-in-object-oriented.gif" alt="State management in Object Oriented" title="State management in OO" /></p><p>In a similar way, the ClientBonus object would also be responsible to manipulate its own state internal state and to provide a consistent view of it, and the same for each and every object. </p><p>Now, from a complexity point of view, what does it mean that each object gets its own machinery to control its state? Each of those little machines are possible side effects that you have to take into account whenever you make a change to your code. You not only you have to think about the business logic that you have to write, you also have to thinking about any timing issues due to concurrent access to the objects.</p><p>So the code is mixing in the same place business rules and concurrency rules.</p><p>So what Clojure teach us is that, to simplify this, what you want to do is separate application logic, your business logic, from any state management, so you don’t need to think about both at the same time.</p><p>So how we do this? First by making everything immutable, everything is a value, even that map holding all of our ClientBonus objects. Now that everything is immutable, when writing your application logic, you do not need to think about timing, you do not care about what other threads are doing at the same time, because none of them can change to your object graph. So this frees your mind, this makes writing your application logic a lot simpler.</p><p>For the state management part, Clojure comes with a construct or a class, called Atom, which is basically the same as a Java AtomicReference, but with a little bit more functionality. </p>
<blockquote><p>atom =~ j.u.c.a.AtomicReference</p>
</blockquote><p>Lets see how an atom works.</p><p>An atom holds a reference to the whole immutable value, to the whole state, and your job as a developer is to write a function, that takes the current state as a parameter, and it produces the new state, and the atom machinery will make sure that the transition from one state to the next is done in an atomic way.</p><p>To understand it better, lets see what happens if two threads try to modify that state at the same time.</p><p><img src="/images/blog/java-with-a-clojure-mindset/018-state-management-atom.gif" alt="State management Atom" title="State management in Atom" /></p><p>Both threads will get the initial state and will start calculating the next state. Lets say that thread-1 finishes before thread-2. At this point thread-1 tries to change the state of the atom, to the new green value. To do that it tells the atom to do an atomic compare and swap operation. As the value used to calculate the green state is still the white value, the atom changes it state to the green value.</p><p>Now thread-2 finishes, when it tries to change the state of the atom, the compare and swap operation fails, because the atom is not longer pointing to the white state. So the thread-2 has to start again, but this time with the green value.</p><p>All this machinery about retrying and detecting conflicts is provided by the atom, so you as a developer only have to write a pure function.</p><p>Now to make sure that we all in the same page, I want to point out two things.</p><p>The first one is that the only valid values of the atom during the time were the white, green and red ones. Nobody ever saw the blue value.</p><p>The other thing is that if for example there was another thread, thread-3, that at time 0 read the current state of the atom and it keeps a reference to it for some time, as time moved, from t0 to t1 and t2, the thread-3 will still see the initial state, the white state. Because the value is immutable, nobody can touch it, which means that thread-3 can potentially be working with a stale value.</p><p>Now you may be wondering, wow, if I have to create a whole new graph every time that I want to change anything, isn&rsquo;t all this immutability going to be extremely slow, extremely expensive? And in practice it is actually slower, but not as much as you would expect. </p><p>Lets say that you have this state, </p><p><img src="/images/blog/java-with-a-clojure-mindset/019-object-graph.jpg" alt="Object graph" title="Object graph" /></p><p>and to calculate the new state, you need to change some field in that bet object over there. Of course, you cannot change anything, so you create a new bet object. As the bet belongs to a BetList, and again everything is immutable, it also means that you have to create a new BetList, which also means that you have to create a new ClientBonus, and a new bucket on the hashmap.</p><p><img src="/images/blog/java-with-a-clojure-mindset/020-structural-sharing.jpg" alt="Structural sharing" title="Structural sharing" /></p><p>Those 4 things are what it is different between the green and the white state. So to build the green state you just need to create 4 new objects and you can reuse all the others, and you can do this because those objects are all immutable, and we know that it is safe to share immutable objects. This technique is call structural sharing.</p><p>Now, this is still slower that mutating one field in the Bet object, but the cost is still very cheap, specially if we compare it with the benefits of this approach.</p>
<blockquote><p>Is this thread safe? <cite>Every Java developer, every day.</cite></p>
</blockquote><p>Have you ever ask yourself this question? With immutability and atoms, you still ask this question, but the rules to answer it are a lot simpler as they don’t involve the Java Memory Model and the “happens-before” semantics.</p><p><img src="/images/blog/java-with-a-clojure-mindset/021-thread-safe.jpg" alt="Thread safe rules" title="Thread safe rules" /></p><p>The first rule is that the state within an atom is always consistent, as everything is immutable, it is not possible to see half-baked states. This already removes a lot of the complexity in your code.</p><p>The second rule is that the function to calculate the new state must be pure, as it maybe run multiple times. </p><p>As we saw in the example with Thread-3, any decision that you make outside this pure function could be done with stale data or be subject of a race condition.</p><p>From this third rule, it should also be obvious that if you code has to look at two atoms to make some decision, the decision is not atomic.</p><p>So how all of this affected our Java code?</p><p>The first, obvious things, is that all the domain classes are immutable, so all the fields, including any map or list.</p>
<pre><code class="Java">public class ClientBonus {

    private final Client client;
    private final Bonus bonus;
    private final DepositList deposits;

…
</code></pre><p>Now for the state management part, we actually did not use an AtomicReference to store the whole map with all the ClientBonus.</p><p>In our case, as what one client does, do not affect the outcome of another&rsquo;s client bonus, our application logic just really needs the ClientBonus to be consistent, it doesn&rsquo;t need a consistent view of all current ClientBonuses. </p><p>So what we did was to actually use a ConcurrentHashMap to hold the state, and then each value will get its own little machinery to advance time.</p><p><img src="/images/blog/java-with-a-clojure-mindset/022-concurrent-hashmap.jpg" alt="Concurrent HashMap" title="Concurrent hashmap" /></p><p>That machinery is provided by the compute family of methods of the ConcurrentMap, which basically provide the same semantics as Clojure’s atom, but on a per key level.</p>
<pre><code class="Java">public interface ConcurrentMap&lt;…&gt; extends Map&lt;…&gt; {

V compute(K key, BiFunction&lt;…&gt; remappingFunction) 
V computeIfAbsent(K key, Function&lt;…&gt; mappingFunction) 
V computeIfPresent(K key, BiFunction&lt;…&gt; remappingFunction) 
…
}
</code></pre><p>So this is how the class that hold the state would look like. </p>
<pre><code class="Java">public class TheStateHolder {
    private final Map&lt;Long, ClientBonus&gt; state = new ConcurrentHashMap&lt;&gt;();
    public ClientBonus nextState(Long client, Bet bet) {
        return state.computeIfPresent(
                client,
                (k, currentState) -&gt; currentState.nextState(bet));
    }
</code></pre><p>It contains the ConcurrentHashMap, and every time that the application gets new data, it just calculates the new state in an atomic way.</p><p>In our case, we decided that the ClientBonus itself should be the one that calculates the new state, </p>
<pre><code class="Java">public class ClientBonus {
...
    public ClientBonus nextState(Bet bet) {
        ...
    }
…
</code></pre><p>so that nextState function must be a pure function.</p><p>So this way we managed to separate state management from application logic.</p><h3>Effects</h3><p>So now that we know how to fight State, let&rsquo;s look at what we can do with effects. </p><p>Effects are actions that our application has to do in order to change the state of the external world.</p><p>In our case, those effects were things like sending a notification to the user about the progress of the bonus, or paying the price into the client’s account.</p><p>Clojure, the same as Java, is not a pure language like Haskel, so it actually does not provide any special tools to deal with IO. So lets see how we can handle effects.</p><p>Typically, in our applications, we would have something like this. Some kind of <em>service</em> object that depends on some interface and then at runtime we inject some dependencies. </p><p><img src="/images/blog/java-with-a-clojure-mindset/023-service-design.jpg" alt="Service design" title="Service design" /></p><p>If you think about what this kind of service looks like, you will notice that is it takes care of two things: it decides which side effects our applications has to do, plus it has to execute those side effects and deal with any possible errors or exceptions raised by doing the effects. So when you write the code for the service, you have to keep in mind both things.</p><p>So if we want to follow a more functional approach, we want to separate those two things, so we can work on them independently. On one hand, we want to decide what effects need to be performed, and in the other hand we have to deal with the messy and ugly details of interacting with the external world.</p><p>To decide what effects need to be performed, in our business logic, we can instead of calculating the next state, we can also calculate the effects. With this, calculating the effects to be performed becomes part of our pure business logic, becomes part of our pure function. </p>
<pre><code class="Java">public class ClientBonus {
...
    public Pair&lt;ClientBonus,Effects&gt; next(Bet bet) {
        ...
    }
…
</code></pre><p>Note that this also means that our effects become explicit first-class concepts in our application.</p><p><img src="/images/blog/java-with-a-clojure-mindset/024-notify-class.jpg" alt="Notify class" title="Notify class" /></p><p>This would be an example of a class representing the effect of notifying a client about the progress of a bonus.</p><p>Now, even if another part of the system is going to be executing this effect and dealing with errors, our business logic can still decide on how the effects and the errors are going to be handle.</p><p>For example, in our business logic, we could be wrapping this effect in a Ignore error policy, while in other cases, maybe it could decide that the correct policy is to stop the JVM. </p><p><img src="/images/blog/java-with-a-clojure-mindset/025-notify-wrapped.jpg" alt="Wrapped in policy" title="Notify wrapped in policy" /></p><p>Apart from the error policy, the application logic can also decide if the effects must be run sequentially, so if one fails, the rest will to be not executed.</p><p><img src="/images/blog/java-with-a-clojure-mindset/026-sequential-execution.jpg" alt="Sequential execution" title="Sequential execution" /></p><p>or that maybe the effects are independent, so that an error in one should not affect the others, which also could mean that the effects can be executed in parallel.</p><p>For our bonus application, we decide to not build any of these flexibility in the effects, as we thought it was not necessary, and instead we went to have a very rigid, very static, way of defining the effects, and encode in the type system what were the valid and possible chain of effects. </p><p>But now that we have a description of what side effects must be run, we still need to execute them, we still need to run them, so some piece of code needs to go and interpret this description of the chain of effects. </p><p>In our case, as the structure of this description was very rigid, we opted to just let each effect know how to run itself.</p>
<pre><code class="Java">public interface Effect {
    void run(AllDependencies dependencies);
}
</code></pre><p>Note that it is here were we pass all the dependencies required to execute those side effects, things like the http or JMS clients. </p><p>Passing that AllDependencies object around has the benefit that it makes very obvious which methods are impure, because to be able to perform any side effect, the method would need to declare that dependencies object as a parameter.</p><p>It has the drawback that sometimes it is a little bit cumbersome to pass it around, and that the AllDependencies class is quite ugly, as it has to hold, and make accessible, a lot of dependencies. That AllDependencies class feel almost like your Spring Context.</p><p>So this is how our code would look like:</p>
<pre><code class="Java">Pair&lt;ClientBonus, Effects&gt; pair = theStateHolder.nextState(bet);
pair.effects.run(dependencies);
</code></pre><p>We calculate the next state and the effects to perform, and then we will perform those effects.</p><p>But the question is, is this thread safe? </p><p>With the rules that we saw before regarding atoms, it is obvious that it is not, because one of the rules was that anything that happens outside that pure function that calculates the new state, could be subject of a race condition.</p><p>And were is the race condition here?</p><p>So let&rsquo;s say that two threads come and calculate the new state and the effects to perform. </p><p><img src="/images/blog/java-with-a-clojure-mindset/028-race-condition.jpg" alt="Race condition" title="Race condition" /></p><p>The atom takes care that those two threads make a decision that is atomic, consistent and isolated. So far, so good.</p><p>But now that we are outside the atom mechanism, we are subject to possible race conditions, so it could be that the thread-2 performs its side effects before thread-1. </p><p><img src="/images/blog/java-with-a-clojure-mindset/029-race-condition-2.jpg" alt="Race condition" title="Race condition" /></p><p>And this may, or may not, be acceptable, depending on your business requirements.</p><p>So, atoms do not make all race conditions go away, but they should make it a lot more obvious of when they could happen.</p><p>If in your application this kind of race condition is not acceptable, a possible option could be to use an Agent. </p><p>Clojure Agents are basically like an atom, but it gives you the additional guarantee of being single threaded. If you are familiar with actors, they are a little bit like actors, in their concurrency model.</p><p>For our bonus application, this kind of race condition was not acceptable, but we decided to not use Agents, and stick with atoms, why?</p><p>Well, we were running multiple instances of the bonus service, so we are now in the realm of distributed system programming. </p><p>As the side-effects that our application needed to perform, could not be done in an atomic way, the distributed system theory tell you that you must chose between at-least-once or at-most-once semantics.</p><p>In our case, we look at each effect and for each one, we decided what was more appropriate. For those that were at-least-once, we did no coordination, nothing. </p><p>For the ones that required at-most-once semantics, we used a relational database as the coordination mechanism, as the DB provides ACID guarantees. </p><p><img src="/images/blog/java-with-a-clojure-mindset/030-race-condition-effects.gif" alt="Race condition DB fix" title="Race condition DB fix" /></p><p>So before doing one an effect that required at-most-one semantics, the application will check with the DB, so that if there was a race between several instances to perform the same effect, only one will get the go ahead and execute it.</p><p>Note that it was still our pure functions, the ones calculating the effects, </p><p><img src="/images/blog/java-with-a-clojure-mindset/031-wrap-at-most-once.jpg" alt="At most once" title="At most once" /></p><p>the ones that would decide when and which effects needed at-least-once or at-most-once semantics, and we did by wrapping the effects in a “at-most-once” policy.</p><h3>Co-Effects</h3><p>The last type of side effect are the co-effects. Co-effects are the inputs, the data, that our application needs to make their decisions. </p><p>For our bonus application, we basically needed 4 pieces of information: which clients have sign up for which bonus, the bets and deposit made by the client, and as the client has a limited amount of time to achieve the bonus, we also need to know what time it is.</p><p>As I hinted before, we kept all of our state in memory, and we were able to do this because the input source of the client events, was Kafka. If you are not familiar with Kafka, you can think about it like an immutable message queue, that remembers all the message go through it. </p><p>So that when the bonus application started, it will ask Kafka for all the messages in the last couple of months, and recalculate the current state from all those events. Also, each event would be timestamped, so the application will use the event time as the current time in its logic. </p><p>This is basically Event sourcing. At its heart, Event Sourcing and functional programming share a lot in common. </p><p><img src="/images/blog/java-with-a-clojure-mindset/033-event-sourcing.jpg" alt="Event sourcing" title="Event sourcing" /></p><p>Event sourcing and functional programming go hand in hand.</p><h3>Benefits</h3><p>So this is how the whole thing looks like if you put everything together</p>
<pre><code class="Java">public class KafkaConsumer {
    private AllDependencies allDependencies;
    private TheStateHolder theStateHolder;
    
    public void run() {
        while (!stop) {
            Bet bet = readNext();
            Effects effects = theStateHolder.event(bet);
            effects.run(allDependencies);
        }
    }
…
}
</code></pre><p>These are two dependencies that will be injected by your dependency injection framework of choice. </p><p>The object with all the dependencies required to do effects, and the state of the application.</p><p>Here we are using the Kafka polling api, so the KafkaConsumer will be a Thread that will be reading new events from the Kafka topic.</p><p>Then ask our state to advance time, update the state and to return the effects that we need to execute.</p><p>And last we ask the effects to execute themselves.</p><p>By following this approach, some interesting things happen to our code:</p><p><img src="/images/blog/java-with-a-clojure-mindset/034-benefits.jpg" alt="Benefits" title="Benefits" /></p><p>First, our business objects had 0 getters or setters.</p><p>Also, our business logic was cleaner, because it will have no locks or synchronised methods, no try/catch blocks and no logging, because all of these will be done in a different part of the system. This removed a lot of noise from out business logic.</p><p>Also, there were no mocks in our unit tests, as both the inputs and outputs of our business logic where all plain values, so our unit tests were simpler. To test the side effects, all the impure parts of the codebase, we decide to use a small number of full-stack or integration tests.</p><p>And last, because we did not have to mock anything, we did not had any useless interfaces in the codebase. By useless interface, I mean those interfaces that just have one production implementation. </p><h3>Functional core, Imperative shell</h3><p>Now this style of design or architecture is called functional core, imperative shell. </p><p><img src="/images/blog/java-with-a-clojure-mindset/035-functional-core.jpg" alt="Functional core, imperative shell" title="Functional core, imperative shell" /></p><p>The functional core is where all of our pure functions live, it is devoid of side-effects. The functional core is where we try to make as many decisions as possible, as it is easier to test and to change.</p><p>The imperative shell is where all the side effects live, all the ugly code about error handling, state and IO. We try to devoid the imperative shell from any conditionals, from any decisions.</p><p>And the aim is to try to make the functional core as big as possible, while we make the imperative shell as thin as possible.</p><p>As there are other architectures that have the same circular shape, I want to make something very clear.</p><p><img src="/images/blog/java-with-a-clojure-mindset/036-not-functional.jpg" alt="Not so funtional" title="Not so functional" /></p><p>If you have some code like this, where your core class depends on some interface also in your core package, and then you inject the actual implementation at runtime, this piece of code in ClientBonus is not functional. You functional core cannot dependent on any piece of code that could do a side-effect, not even on an indirect way.</p><p>Now I am not saying that you shouldn&rsquo;t do that, I am just pointing out that when you do this, all this code belongs to the imperative shell, so you do not have the benefits of your functional core.</p><h1>Dynamic (vs Static) typing</h1><p>Lets talk about the next big difference. Clojure is a dynamic language, while Java is a static one.</p><p>This is how a typical Clojure program looks like:</p>
<pre><code class="Java">clientBonus = Map.of(
        &quot;client&quot;, Map.of(&quot;id&quot;, &quot;123233&quot;),
        &quot;deposits&quot;,
        List.of(
                Map.of(&quot;amount&quot;, 3,
                            &quot;type&quot;, &quot;CASH&quot;),
                Map.of(&quot;amount&quot;, 234,
                            &quot;type&quot;, &quot;CARD&quot;)));

((List) clientBonus.get(&quot;deposits&quot;))
        .stream()
        .collect(
                Collectors.summarizingInt(
                        m -&gt; (int) ((Map) m).get(&quot;amount&quot;)));
</code></pre><p>First, our domain objects are just a bunch of maps and list. And then our business logic consists on manipulating those maps and lists.</p><p>I am not sure what do you think about this, but for my Java sensibility, </p><p><img src="/images/blog/java-with-a-clojure-mindset/001-alien.jpg" alt="alien" title="Alien" /></p><p>this is just hell, this code is the exact definition of unmaintainable code. If anybody in my team wrote that piece of code, I would demand for a very very good explanation of why are they doing it.</p><p>So in our bonus application, we decided to not do this at all, so we did not bring Clojure’s dynamic typing, and just use the Java type system.</p><p>But when you are writing Clojure code, surprisingly, this dynamic typing is less of an issue, and I think it is because the Clojure core api is tailor to work with this dynamic data structures, so is a lot less hassle than with the Java API.</p><p>But once you have write enough Clojure code, your mind starts to dysfunction, and then when you come back to Java, you start to have really weird thoughts. </p><p>So when you type this class, </p>
<pre><code class="Java">public class Bet {    
    private String id;   
    private int amount;
    private long timestamp;
}
</code></pre><p>you start to wonder, well, what is the value of creating a new class? What do I get out of this instead of using a plain map? </p><p>And you notice that the first thing that you get is an almost useless toString method, you also get a broken equals and hashCode implementation. That is really annoying, but at least we have Lombok.</p><p>But what do you lose? Suddenly, you lose all the functionality that comes with maps, all of it, but what is worse, all the code that you have that works with maps, that understands maps, will not work with this new class. You have no code in the Java core API that can work, that can do anything, with this class. Except maybe for the reflection API. </p><p>What is more, how many libraries are you going to find in Github that work with this new class? None.</p><p>It is at this point when you start to understand what Alan Perlis meant with </p>
<blockquote><p>It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures. <cite>Alan Perlis</cite></p>
</blockquote><p>Each new class is a new data structure, that comes with zero functionality, that is completely isolated from any other code. This hampering the reusability of your code.</p><p>But what if we just leave our Bet objects as plain data? </p>
<pre><code class="Clojure">{:type :bet
 :id &quot;client1&quot;
 :amount 23
 :timestamp 123312321323}
</code></pre><p>You have a sensible toString, the one that you see there. </p><p>You also get a proper equals and hashCode for free.</p><p>But what is more important, you can still use all the core functionality that comes with your programming language, so you don’t start from scratch, you can reuse a lot of code. and you will find Github libraries that work with this code.</p><p>The Clojure community has embraced idea this idea of using plain data to represent as many things as possible. </p><p>For example, you can use plain data to represent an http request, so what your http servers have to do is work with this map as an input</p>
<pre><code class="Clojure">{:request-method :get 
 :uri            &quot;/foobaz&quot;
 :query-params   {&quot;somekey&quot; &quot;somevalue&quot;}
 :headers        {&quot;accept-encoding&quot; &quot;gzip, deflate&quot; 
                  &quot;connection&quot; &quot;close&quot;}
 :body           nil
 :scheme         :http 
 :content-length 0
 :server-port    8080
 :server-name    &quot;localhost&quot;}
</code></pre><p>and just generate another map as an output. And you will do this by using the same core api. </p>
<pre><code class="Clojure">{:status  200  
 :headers {&quot;Content-Type&quot; &quot;text/html&quot;} 
 :body    &quot;Hello World&quot;}
</code></pre><p>Think how much easier your test would become.</p><p>But also, you can represent other things as plain data.</p><p>Sql queries:</p>
<pre><code class="Clojure">{:select [:id :client :amount]
 :from   [:transactions]
 :where  [:= :client &quot;a&quot;]}
</code></pre><p>and the database result sets:</p>
<pre><code class="Clojure">[{:id 1 :client 32 :amount 3} 
 {:id 2 :client 87 :amount 7} 
 {:id 3 :client 32 :amount 4} 
 {:id 4 :client 40 :amount 6}]
</code></pre><p>HTML and CSS:</p>
<pre><code class="Clojure">[:html     
 [:body         
  [:p &quot;Count: 4&quot;]
  [:p &quot;Total: 20&quot;]]]
</code></pre><p>Configuration:</p>
<pre><code class="Clojure">{:web-server          {:listen 8080} 
 :db-config           {:host     &quot;xxxx&quot;                        
                       :user     &quot;xxxx&quot;                        
                       :password &quot;xxxx&quot;} 
 :http-defaults       {:connection-timeout 10000                      
                       :request-timeout    10000                       
                       :max-connections    2000} 
 :user-service        {:url &quot;http://user-service&quot;                       
                       :connection-timeout 1000}}
</code></pre><p>Even data about your data, your metadata:</p>
<pre><code class="Clojure">{:id        :string  
 :name      :string  
 :deposits  [{:id        :string               
              :amount    :int               
              :timestamp :long}]}
</code></pre><p>So by embracing this idea of using plain data, you end up using the same core API to write </p>
<ol>
  <li>your business logic</li>
  <li>your infrastructure code</li>
  <li>your configuration</li>
  <li>your metadata.</li>
</ol><p>Just one API that you need to learn and master.</p><p>So dynamic typing in Clojure is not as bad as you would expect, as it is brings a big chunk of benefits.</p><h1>Dynamic (vs Static) development</h1><p>But types is just one of the dynamic vs static differences between Clojure and Java. Clojure provides a dynamic development experience. What does this mean? In Clojure, the first thing that you do when you have to develop a new feature is to start your application, and then what you do is just keep changing that running application, until you are done, without ever stopping it.</p><p>You do this by using a REPL.</p><p>Of course Java now has something call a REPL, but </p><p><img src="/images/blog/java-with-a-clojure-mindset/037-repl.jpg" alt="Java vs Clojure REPL" title="Java vs Clojure REPL" /></p><p>just because they both have the same name, it doesn&rsquo;t mean that they are the same.</p><p>With a proper REPL, you never build or start your application, you grow the application from inside, one tiny bit at a time. </p><p>A proper REPL gives you the same feeling, the same ergonomics, as a Unix Shell.</p><p>A proper REPL is like having a debugger all the time attached to you running JVM.</p><p>A proper REPL is the missing piece on your test-driven-development workflow.</p><p><a href="https://danlebrero.com/repl">This talk</a> is my best attempt to explain what a REPL is, but I think that a REPL is one of this very very alien things, that you really need to experience it, because it is very hard to understand or imagine.</p><p>A proper REPL is the thing that I miss the most when working with Java.</p><h1>Lisp (vs Fortan)</h1><p>Ok, last section of the talk.</p><p>For our bonus project we obviously did not use the Clojure syntax, because if I did, I wouldn’t be here giving this talk. </p><p>But for all of you that run away screaming whenever you see some Lisp, I have some good news for you.</p><p>The first thing is that, like other modern JVM languages, in Clojure you don’t have to type semicolons! This, I think we all agree, is a huge improvement over Java. </p><p>In fact, this feature is so awesome, it is such a huge productivity boost, that Clojure goes even further, and in Clojure, commas are optional! Think about all those millions and millions of commas that you have typed.</p><p><img src="/images/blog/java-with-a-clojure-mindset/039-no-more.jpg" alt="No more commas" title="No more commas" /></p><p>Imagine if you could get all that time back, I would be at least 20 years younger.</p><p>But I know what you are thinking</p><p><img src="/images/blog/java-with-a-clojure-mindset/040-what-about-parenthesis.jpg" alt="What about parenthesis" title="What about parenthesis" /></p><p>what about all those parenthesis that Lisps is infamous for? Well, even here I have good news for you.</p>
<pre><code class="Java">.filter(removeCsvHeaders(firstHeader))
.map(splitCsvString())
.map(convertCsvToMap(csvHeaders))
.map(convertToJson(eventCreator))
</code></pre>
<pre><code class="Clojure">(filter not-header?)
(map parse-csv-line)
(map (partial zipmap headers))
(map -&gt;event)
</code></pre><p>Those are two pieces of code from one of my teams. When we were learning Apache Spark, we happen to write basically the same application both in Clojure and Java. This is the main logic of the application, and as you can see they are the same, but there is an important difference. </p><p>Let’s count parenthesis. 1, 2, 3 … The Java version has 16 parenthesis. And how many does the Clojure one has? 10. So the Clojure version has 40% less parenthesis.</p><p>But not only that, the Clojure version of the application, had one tenth of the code. </p><p><img src="/images/blog/java-with-a-clojure-mindset/041-java-apps-more-parens.jpg" alt="Java more parens" title="Java more parens" /></p><p>One tenth, imagine if you could delete 90% of your code.</p><p>Ok, enough of silly jokes. Let&rsquo;s look at why Lisp people are so in love with their parenthesis. For this, I am very sorry, but I am going to have to show you some more Clojure code.</p>
<pre><code class="Java">List.of(
        new Symbol(&quot;defn&quot;),
        new Symbol(&quot;plus-one&quot;),
        List.of(
                new Symbol(&quot;a&quot;),
                new Symbol(&quot;b&quot;)),
        Map.of(
                new Keyword(&quot;time&quot;), List.of(new Symbol(&quot;System/currentTimeMillis&quot;)),
                new Keyword(&quot;result&quot;), List.of(
                        new Symbol(&quot;+&quot;),
                        new Symbol(&quot;a&quot;),
                        new Symbol(&quot;b&quot;),
                        new Long(1))));
</code></pre><p>This is a typical Clojure program. We are defining a function that takes two parameters and returns a map with the sum of those parameters, plus one.</p><p>Ok, maybe Clojure is a little bit less verbose than this, but this is essentially what you are doing when you write, when you type Clojure. What is this? Your code are just lists and maps, this is what we mean when we say that in Lisp, code is data, because look at this, it is actual data.</p><p>And because it is data, we can manipulate it, we can generate it, we can analyse it, with exactly the same tools, the same api, that we use for our Business logic, our infrastructure code, our configuration.</p><p>Metaprogramming, so writing programs that write programs, becomes a matter of working with lists and maps. This is very simple, yet extremely powerful.</p><p>This is why Lispers love their parenthesis so much. </p><h1>Summary</h1><p>So in summary &hellip;</p><p><img src="/images/blog/java-with-a-clojure-mindset/035-functional-core.jpg" alt="Functional core, imperative shell" title="Functional core, imperative shell" /></p><p>Try to write as many pure functions as possible, they will make your application easier to understand and easier to change.</p><p><img src="/images/blog/java-with-a-clojure-mindset/042-types-balance.jpg" alt="Type balance" title="Type balance" /></p><p>After using Clojure, I see the dynamic vs static typing as a trade off. It is true that in Clojure I miss some of the refactoring capabilities that I get with a good Java IDE, and that I sometimes waste time chasing some misspelt word, but Clojure’s focus on data, somehow, makes the trade off a fair one.</p><p><img src="/images/blog/java-with-a-clojure-mindset/043-development-balance.jpg" alt="Development experience balance" title="Development experience balance" /></p><p>But after enjoying Clojure’s dynamic development experience, this is something I would never ever want to let go.</p><p><img src="/images/blog/java-with-a-clojure-mindset/044-parens-scare.jpg" alt="Parens are scary" title="Parens are scary" /></p><p>And please do not be scared about parenthesis. The same way you would not write Java without an IDE, you will not write Clojure without one. And the IDE is going to take care of all those scary parenthesis. And remember that there is a very good and powerful reason for them.</p><p>I want to finish with another quote by Alan Perlis: </p>
<blockquote><p>A Language that doesn’t affect the way you think about programming, is not worth knowing.</p>
</blockquote><p>Clojure has been, for me, one of those languages. Immutability by default, functional programming, dynamic typing and the repl, Lisp syntax and macros, everything as simple data.</p><p>All those things have been big lessons for me. They have change the way I approach problems, they have change the way I build applications, they have change the way I design systems.</p><p>But none of those has been Clojure’s most important lesson.</p><p>The key insight, the most profound lesson on my journey learning Clojure, has been that I have been how close minded I have always been to different ideas, just because of the fact that they were different to what I was used to.</p><p>If any of you had told me 5 or 6 years ago to learn a dynamic lisp, I would had say “no way, I am not going to waste my time”. And yet, here I am, preaching about Clojure. </p><p>Clojure has open my mind to be curious about different ideas, even those that initially may seem disgusting.</p><p>So I want to encourage everybody to learn this year, or next year, a new language, and it doesn&rsquo;t need to be Clojure, </p><p><img src="/images/blog/java-with-a-clojure-mindset/045-languages.jpg" alt="Languages" title="Languages" /></p><p>but pick something completely different to what you are used to, something that makes you uneasy, something completely alien.</p><p>I am sure that on that journey, you will learn something that you will want to bring to your day to day job.</p><p>And in the worst case, </p><p><img src="/images/blog/java-with-a-clojure-mindset/046-weird.jpg" alt="Weird" title="Weird" /></p><p>it will just make you weirder and harder to relate to.</p><p>Thanks a lot for you time.</p><p>But before you leave, please have a quick look at this video:</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/MSFvEK8asY8" frameborder="0" allowfullscreen></iframe></p>]]>
</description>
</item>
<item>
<title>
Architecture decisions: the belligerent contrarian and the rule of three
</title>
<link>
https://danlebrero.com/2019/02/27/architecture-decisions-beligerent-contrarian-rule-of-three/
</link>
<guid>
https://danlebrero.com/2019/02/27/architecture-decisions-beligerent-contrarian-rule-of-three/
</guid>
<pubDate>
Wed, 27 Feb 2019 00:00:00 +0100
</pubDate>
<description>
<![CDATA[<p>Here are a couple of simple rules that have helped me a great deal on my years as a software architect.</p><h1>The rule of three</h1><p>The first rule is that, when you have to make any decision, there must always be at least three possible alternatives in consideration. </p><p>To find this third option, we will need to look at the problem from unusual and novel angles, or bring back options that were discarded because we thought they were obviously wrong.</p><p>This is basically a way of enforcing brainstorming, but using a clear rule and not calling it brainstorming, which in my experience somehow helps.</p><h1>The rule of three</h1><p>The second rule of three is that there must be at least three people involved in the decision.</p><p>It is very unlikely that all three people will have the same background and bias, so the alternatives will be looking at from more diverse points of view.</p><h1>The belligerent contrarian</h1><p>Having three options and three people in the room is useless if everybody has the same preferred option. There must be at least one person that disagreed with the group and have a good reason to prefer a different option.</p><p>If there is no such person, then there is not going to be a real debate about which option is the most adequate, as we all will be biased to make sure that our preferred option looks the best. Having to defend our position will make it very obvious if we have solid reasons to make that choice.</p><p>Unfortunately, a lot of times there is no such person, which means that you must be willing to defend one other option, even if you think is not the best one. </p><p>This means that you have to make sure that you are the last one on expressing your opinion, so that if the rest of the group all choose an option, you can pick another one.</p><p>But it also means that you have to have a deep understanding of the weaknesses and shortcomings of the preferred option, plus the benefits or possible benefits of the other options. This is an excellent exercise to look with honesty at your own choices and to make sure that the group understands the trade-offs.</p><p>Being the belligerent contrarian is not a comfortable position as a lot of times you are going to be defending a position that looks silly or that is obviously wrong, which means that you have to be comfortable with your status within the company and the people in the meeting. This role is not suitable for junior architects or if your ego doesn&rsquo;t allow you to be wrong.</p><p>If you decide to play this role, it is important to not say <a href="https://en.wikipedia.org/wiki/Devil's_advocate">&ldquo;I am playing Devil’s advocate&rdquo;</a> as if you do so, people will not take your position seriously. If it makes you feel more comfortable, you can say so after the decision has been made.</p><h1>The rule of three</h1><p>And as we are talking about the rule of three, I cannot pass the opportunity to mention a design level rule of three: there is no duplication until you have three copies of the same code or logic.</p><p>The third time that you write the same piece of logic is when you can evaluate if it is worth moving that piece of code to a common library or class. </p><p>Until you have three samples, you cannot be sure that the common code will actually be common enough.</p>
<hr/><p>It is surprising how many times the new third option turns up to be the one implemented, either because we find a better alternative or because we get over our biases.</p><p>Playing the belligerent contrarian, or devil’s advocate, is sometimes fun, sometimes annoying, sometimes distressing, but at the end, having a good debate about the options means that the team ends up moving with more confidence on the decision made, and it is more aware of the possible pitfalls.</p>]]>
</description>
</item>
<item>
<title>
Other reasons for TDD: Baby steps, ROI, Evil Manager Syndrome and Watching the watchmen
</title>
<link>
https://danlebrero.com/2019/02/18/other-reasons-for-test-driven-development-baby-steps-roi-evil-manager-watching-the-watchmen/
</link>
<guid>
https://danlebrero.com/2019/02/18/other-reasons-for-test-driven-development-baby-steps-roi-evil-manager-watching-the-watchmen/
</guid>
<pubDate>
Mon, 18 Feb 2019 00:00:00 +0100
</pubDate>
<description>
<![CDATA[<p>Perhaps the world does not need another “X reasons for TDD”, but I find most people miss these four very important reasons for following a test-first approach:</p>
<ol>
  <li>Baby steps</li>
  <li>ROI</li>
  <li>Evil Manager Syndrome</li>
  <li>Watching the watchmen</li>
</ol><h2>Baby steps</h2><p>The TDD (Test-driven Development) workflow encourages you to make progress in small baby steps. With this workflow, you feel like a small meerkat that every few steps stands up to check its environment.</p><p>Maybe not the fastest way to reach your destination but, without a doubt, the safest. But as we do not run the risk of being eaten, what does it mean for us to be safer? </p><p>After each small change, we check that no bug was introduced. And if a bug is introduced, it is obvious when and where the bug was introduced: in the last tiny step. </p><p>Finding the bug becomes trivial. And bugs are the second worst time wasters in software development:</p>
<ol>
  <li>First, you spend time writing it.</li>
  <li>Then somebody has to review the bug.</li>
  <li>Then you have to release it to production.</li>
  <li>Your client has to report it.</li>
  <li>You triage the impact.</li>
  <li>Your manager has to prioritize it.</li>
  <li>You have to fill up some JIRA issue.</li>
  <li>You explain it to your QA.</li>
  <li>You have to debug the code, code that by now is probably completely alien to you as probably it has been days or weeks since you wrote it.</li>
  <li>Then you fix it.</li>
  <li>Somebody reviews the fix.</li>
  <li>And at last, you release the fix to production.</li>
</ol><p>So, paradoxically, doing baby steps and being safer can also mean going faster, depending on how many bugs you write.</p><p>This principle is in fact exactly the same as the <a href="https://continuousdelivery.com/principles/#work-in-small-batches">“Small batches” principle</a> in Continuous Delivery.</p><p><em>Moral:</em> if you don&rsquo;t write bugs, do not waste your time writing tests.</p><h3>How small should the baby steps be?</h3><p>As small as possible, but its lower limit it going to depend on how fast your test suite is:</p><p><img src="/images/blog/why-tdd/changes-between-runs.jpg" alt="Changes between runs" title="Changes between runs" /></p><p>Even if you try to be very disciplined about running your tests after every small change, if your test suite is slow, you will end up making your change batch size bigger, just to avoid the pain of waiting. </p><p>Hence, if you want to influence how often the tests are run, you need to make sure that they run very fast.</p><h2>Return on Investment (ROI)</h2><p>A test suite is an investment and, as with any investment, you want to have a high positive return on investment (ROI). ROI can be calculated as:</p><p><em>ROI = (Gain from Investment - Cost of Investment) / Cost of Investment</em></p><p>The costs of a test suite are pretty obvious: time to build and maintain it. There is also the ongoing cost of running it (another reason why faster test suites are better).</p><p>There are several benefits to a test suite, but we can sum them all up as time saved while making changes.</p><p>So the ROI of a test suite can be calculated as:</p><p><em>ROI = (time saved - time spent) / time spent</em></p><p>If we plot the ROI (in red) with a test-last approach when building a new feature, we can imagine something like:</p><p><img src="/images/blog/why-tdd/roi-test-last.jpg" alt="ROI test last" title="ROI test last" /></p><p>If you never ever touch that part of the codebase again, the tests are the worst of your investments, as it will not start to pay off until you start making changes again in that particular area of the codebase. </p><p>Let’s compare it with a test-first approach:</p><p><img src="/images/blog/why-tdd/roi-test-first.jpg" alt="ROI test first" title="ROI test first" /></p><p>Tests start to pay off immediately, as you are actively changing the codebase covered by those tests. </p><p><em>Moral:</em> <strong>if</strong> you write a test, write it first. Note the highlighted <strong>if</strong> in the previous statement.</p><h2>Evil Manager Syndrome</h2><p>&ldquo;I’m not given time to write tests&rdquo; is probably one of our favorites excuses when we are questioned about why our code coverage is less than ideal. It is not your fault, it is your evil manager’s fault:</p><p>&nbsp;&nbsp;&nbsp;Manager: “We have to deliver yesterday!”<br/> &nbsp;&nbsp;&nbsp;Team: “But we haven’t finished yet!!”<br/> &nbsp;&nbsp;&nbsp;Manager: “Let cut some corners!!!”<br/> &nbsp;&nbsp;&nbsp;Team: “Let&rsquo;s skip writing the tests until we have time!!!!”<br/> &nbsp;&nbsp;&nbsp;Manager: “Awesome! You are a fantastic team!!!!!”<br/></p><p>And this is how typically the spiral to the crying rewrite starts:</p><p><img src="/images/blog/why-tdd/spiral-to-crying-rewrite.jpg" alt="Spiral to the crying rewrite" title="Spiral to the crying rewrite" /></p>
<ol>
  <li>As you have little tests, you cannot refactor.</li>
  <li>As you cannot refactor, your codebase starts to accumulate garbage.</li>
  <li>The more garbage in your codebase, the longer features take to be implemented.</li>
  <li>The longer features take to be implemented, the more time pressure there is.</li>
  <li>The more time pressure, the fewer tests.</li>
</ol><p>And this completes the downward spiral that always ends up with us, developers, crying for a complete rewrite.</p><p>Let’s see the same situation but when doing test-first:</p><p>&nbsp;&nbsp;&nbsp;Manager: “We have to deliver yesterday!”<br/> &nbsp;&nbsp;&nbsp;Team: “But we haven’t finished yet!!”<br/> &nbsp;&nbsp;&nbsp;Manager: “Let cut some corners!!!”<br/> &nbsp;&nbsp;&nbsp;Team: “What features can we cut?!?!?!”<br/> &nbsp;&nbsp;&nbsp;Manager: “Cutting features??? Do not write any tests!!!!!”<br/> &nbsp;&nbsp;&nbsp;Team: “We already wrote them!!!!!!”<br/> &nbsp;&nbsp;&nbsp;Manager: “Bastards!!!!!!!”<br/></p><p>And then follows a long conversation about what features to trim, which your manager hates. Welcome to agile.</p><h2>Watching the watchman</h2><p>Seeing a test fail is the test that tests if the test tests what is supposed to test.</p><p>Or in simpler words, how do you know that your test doesn&rsquo;t have any bugs? Who watches your watchmen?</p><p>If you write a test first and you see it fail, there is a strong indication that there is some piece of production code, some logic, that is not there.</p><p>If you write the test and you never see it fail, you don’t know if it is because you’ve ready implemented a feature, or because you forgot on an assert in your test or the setup code is not correct.</p><p><img src="/images/blog/why-tdd/watchmen.jpg" alt="watchmen" title="Watching your tests" /></p><p>Moral: Writing your tests first keeps the watchmen honest.</p><h2>Test-first all the things?</h2><p>But no matter how many reasons you have, when you present this test-first approach, most of the time you get the ominous answer: “How can I write the tests first if I don’t know what I am going to build?”</p><p>And as any experienced TDD developer will tell you, that is BS &hellip; but <a href="/2020/09/16/where-test-driven-development-falls-short-find-a-good-repl/#content">not always</a>.</p>
<hr/><p>More about efficiency:</p>
<ol>
  <li><a href="/2017/08/01/efficient-developer-disable-notifications/#content">Disable notifications</a></li>
  <li><a href="/2017/08/02/efficient-developer-master-your-ide/#content">Master your IDE</a></li>
  <li><a href="/2017/08/03/efficient-developer-write-programs-for-yourself/#content">Write programs for yourself</a></li>
  <li><a href="/2017/09/01/a-docker-compose-environment/#content">Why to Docker Compose a calm environment</a></li>
  <li><a href="/2018/04/30/did-you-read-my-email/#content">Did you read my email?</a></li>
  <li><a href="/2018/07/02/efficient-developer-rest-and-sleep/#content">Go and have a rest</a></li>
  <li><a href="/2018/07/04/habits-of-efficient-developers-wearedevelopers-2018-video/#content">The conference talk</a></li>
  <li>Other reasons for TDD: Baby steps, ROI, Evil Manager Syndrome and Watching the watchmen (you are here)</li>
  <li><a href="/2020/09/16/where-test-driven-development-falls-short-find-a-good-repl/#content">Where TDD falls short, find yourself a good REPL</a></li>
</ol>]]>
</description>
</item>
<item>
<title>
Kodsnack podcast: The immediate feedback loop 
</title>
<link>
https://danlebrero.com/2019/01/10/kodsnack-clojure-repl-feedback-loop-automation/
</link>
<guid>
https://danlebrero.com/2019/01/10/kodsnack-clojure-repl-feedback-loop-automation/
</guid>
<pubDate>
Thu, 10 Jan 2019 09:00:00 +0100
</pubDate>
<description>
<![CDATA[<p>I was at the KodSnack podcast talking about how I got into Clojure, feedback loops, the REPL and building your own tools: <a href="https://kodsnack.se/294/">https://kodsnack.se/294/</a></p><p>Enjoy!</p>]]>
</description>
</item>
<item>
<title>
If I ever write a book ...
</title>
<link>
https://danlebrero.com/2018/12/17/if-i-ever-write-a-book/
</link>
<guid>
https://danlebrero.com/2018/12/17/if-i-ever-write-a-book/
</guid>
<pubDate>
Mon, 17 Dec 2018 00:00:00 +0100
</pubDate>
<description>
<![CDATA[<p>Autobiography. No other Spaniards will be harmed during its production, maybe.</p>]]>
</description>
</item>
<item>
<title>
RocksDB range queries in KafkaStream: dealing with big results 
</title>
<link>
https://danlebrero.com/2018/12/17/big-results-in-kafka-streams-range-query-rocksdb/
</link>
<guid>
https://danlebrero.com/2018/12/17/big-results-in-kafka-streams-range-query-rocksdb/
</guid>
<pubDate>
Mon, 17 Dec 2018 09:25:00 +0100
</pubDate>
<description>
<![CDATA[<p>There was an interesting question on the <a href="https://confluentcommunity.slack.com/archives/C48AHTCUQ/p1538999729000100">Confluence Slack channel</a>, paraphrasing:</p><p><em>Hi,</em></p><p><em>I created a Kafka Streams app &hellip; where external processes put a command message on an &ldquo;input.cmd&rdquo; topic with a pending status, the app process it and put an updated command message on the same &ldquo;input.cmd&rdquo; topic with a new status indicating if it was processed with or without errors.</em></p><p><em>Now I need to create a stream app that will receive a file containing <strong>lots of commands</strong> (~100k), send each command to the existing process, read the result of the processing (the updated command) and produce a new file with the result of each line.</em></p><p><em>Is there a good way to do this without incurring in saving very big objects in the DataStore?</em></p><p><em>My problem is that I am collecting the completed messages and keeping them in the Store, but am struggling to make an efficient algorithm that would not use too much memory since the messages can come back in any order and from many files (lots of files might be still under processing).</em></p><p>Note that the issue here is not that the Kafka messages are too big (<a href="https://stackoverflow.com/questions/21020347/how-can-i-send-large-messages-with-kafka-over-15mb">&gt;1mb</a>), but that the consuming application has to collect hundreds of thousands of small messages to produce the result.</p><p>A naive approach would mean storing in our KafkaStreams application an state object like:</p>
<pre><code class="clojure">{:file &quot;a file&quot;
 :partial-results [{:line 1      :result &quot;result1&quot;}
                   {:line 110202 :result &quot;result21&quot;}
                   {:line 329323 :result &quot;result32&quot;}
                   {:line 132423 :result &quot;result412&quot;}
                   {:line 62     :result &quot;result14234&quot;}
                   {:line 33     :result &quot;result1121132321&quot;}
                   ,,, ;; Hundred of thousands more here
                   ]}
</code></pre><p>You can imagine how expensive would be to deserialize, update and serialize back the state once we have 100k lines in that array, every time a new line is processed. The object could even end up not fitting in the JVM heap.</p><h2>External storage</h2><p>The developer that asked the question has a very reasonable solution:</p><p><em>The solution I am implementing is to use Cassandra (we already use it) to keep the file ordered. Every completed message that arrive, I put the corresponding result line in this table.</em></p><p>So we use the capabilities of another storage database to store and later retrieve the results in the correct order. </p><p>This is probably fine, if you have Cassandra running, but what if you do not, or if you prefer to have less moving parts in your application?</p><h1>RocksDB range queries</h1><p>It happens that KafkaStream&rsquo;s state store provides a <a href="https://kafka.apache.org/20/javadoc/org/apache/kafka/streams/state/ReadOnlyKeyValueStore.html#range-K-K-">range query</a>, that returns all the objects stored in a StateStore between two keys. </p><p>Let&rsquo;s see how we can use this API to implement an efficient way to store and retrieve big results. </p><h2>The architecture</h2><p><img src="/images/blog/kafka-big-results-rocksdb-range-query.jpg" alt="kafka rocksdb big result" title="kafka rocksdb big result" /></p><p>The <a href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/Sequencer.html">splitter process</a> reads the very big file with those 100k of commands and puts each command in some <code>pending</code> topic. Once the splitter has finished pushing all the pending commands, it will know how many lines/commands the file had, and it will push this total lines to our <a href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/Aggregator.html">aggregator&rsquo;s</a> input topic. The aggregator will use this number to know when it has received all the processed commands.</p><p>Note that the splitter will use no key when pushing to the <code>pending</code> topic so that the commands are evenly distributed to all partitions (<a href="https://cwiki.apache.org/confluence/display/KAFKA/FAQ#FAQ-Whyisdatanotevenlydistributedamongpartitionswhenapartitioningkeyisnotspecified?">more or less</a>), but then, all the processed commands for a given file must end up in the same <code>to.aggregate</code> partition so that they end up being consumed by the same aggregator process. We will use the name of the file as the key, assuming is unique enough.</p><p>Given that the splitter does not know before hand the number of lines in the file, and that the commands will be processed in a semi-random order, our aggregator input could look like:</p>
<table>
  <thead>
    <tr>
      <th>Key </th>
      <th>Line Number </th>
      <th>Partial Result </th>
      <th>Total Lines </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>file1 </td>
      <td>2 </td>
      <td>SecondLine </td>
      <td> </td>
    </tr>
    <tr>
      <td>file1 </td>
      <td>3 </td>
      <td>LastLine </td>
      <td> </td>
    </tr>
    <tr>
      <td>file1 </td>
      <td> </td>
      <td> </td>
      <td>3</td>
    </tr>
    <tr>
      <td>file1 </td>
      <td>1 </td>
      <td>FirstLine </td>
      <td> </td>
    </tr>
  </tbody>
</table><p>Notice that in this case, our aggregator receives two lines before it knows that there should be a total of three, and that it receives line 1 the last.</p><h2>The state</h2><p>Instead of just storing one piece of state on the aggregator with all the partial results on it, what we are going to do is move the partial results out of it. </p><p>To do that, we will store each partial result with a key like:</p>
<pre><code class="clojure">(defn line-key [file-name line-number]
  (format &quot;%s-part-%019d&quot; file-name line-number))
</code></pre><p>So the result for the first line will be stored with a key like <code>thefilename-part-00000000001</code>. </p><p>This way, once we know that our aggregator app has received all the partial results for a file, we can use the StateStore <code>range</code> query to retrieve all partial results by using the range <code>thefilename-part-00000000001</code> to <code>thefilename-part-00000xxxxxxx</code>, being <code>xxxxxx</code> the total number of lines. In code:</p>
<pre><code class="clojure">(defn all-results-received [store file-id total-lines]
  (log/info &quot;Writing file &quot; file-id &quot;total records&quot; total-lines)
  (with-open [all-records (.range store (line-key file-id 0) (line-key file-id total-lines))
              writer (io/writer file-id)]
    (doseq [^KeyValue record (iterator-seq all-records)]
      (.write writer (str (.key record) &quot;-&gt;&quot; (.value record) &quot;\n&quot;))))
  (log/info &quot;Deleting&quot;)
  (let [all-keys (map
                   (fn [i] (KeyValue. (line-key file-id i) nil))
                   (range 1 (inc total-lines)))]
    (doseq [keys-batch (partition-all 1000 all-keys)]
      (.putAll store keys-batch)))
  (.delete store file-id))
</code></pre><p>Remember that the iterator returned by RocksDB is lazy, so we do not need to realize the whole result in memory.</p><p>To know if we have received all the partial results, we just need to keep a count of how many we have seen so far, and compare that number with the total number of lines in the file:</p>
<pre><code class="clojure">(defn check-if-all-results-received [store file-id records-so-far total-lines]
  (when (= records-so-far total-lines)
    (all-results-received store file-id total-lines)
    {:finish file-id}))
  
(defn get-so-far [store file-id]
  (or (.get store file-id) {:so-far 0}))
  
(defn line-processed [store file-id {:keys [line-number partial-result]}]
  (let [{:keys [total-lines so-far]} (get-so-far store file-id)
        records-so-far (inc so-far)] ;; Increment counter
    (.put store (line-key file-id line-number) partial-result) ;; store partial result
    (.put store file-id {:total-lines total-lines :so-far records-so-far}) ;; store counter so far
    (check-if-all-results-received store file-id records-so-far total-lines)))

(defn total-lines-msg-arrived [store file-id total-lines]
  (let [{:keys [so-far]} (get-so-far store file-id)]
    (.put store file-id {:total-lines total-lines :so-far so-far}) ;; store total results
    (check-if-all-results-received store file-id so-far total-lines)))
</code></pre><p>Note that this counter must be exact, so KafkaStream&rsquo;s default <code>at-least-once</code> semantics is not good enough in this case, we will need to configure the <code>exactly-once</code> semantics. </p><p>If this becomes a performance bottleneck, we can go back to <code>at-least-once</code> semantics and deal with any possible double count by doing a read-repair: when writing the final result file, if the number of records returned by the <code>range</code> is different from the expected total, discard the generated file and set the <code>so-far</code> counter to the correct number (the number of results returned by the <code>range</code> query).</p><h2>A big but</h2><p>Unfortunately, there is a major <em>but</em> on the <a href="https://kafka.apache.org/20/javadoc/org/apache/kafka/streams/state/ReadOnlyKeyValueStore.html#range-K-K-">range query</a> documentation:</p>
<blockquote><p>Get an iterator over a given range of keys. &hellip; <strong>No ordering guarantees are provided</strong>.</p>
</blockquote><p>With no ordering guarantees, it means that we would need to sort the results in memory, which maybe ok, depending if the whole result fits in memory or not.</p><h4>Angering your architect</h4><p>If we dig a little bit on the source code of the <a href="https://github.com/apache/kafka/blob/2.0/streams/src/main/java/org/apache/kafka/streams/state/internals/RocksDBStore.java#L512">RocksDB range implementation</a> we find the following comment: </p>
<blockquote><p>RocksDB&rsquo;s JNI interface does not expose getters/setters that allow the comparator to be pluggable, and the default is lexicographic, so it&rsquo;s safe to just force lexicographic comparator here for now.</p>
</blockquote><p>So the actual implementation returns the results in lexicographical order, which means that it will return the partial results already ordered by line number, which is what we are looking for. </p><p>This means that, if we accept the trade-off of depending on some implementation detail, we can avoid the restriction that the result must be ordered in memory.</p><h4>Pissing off your architect</h4><p>But probably we are not using just a plain <a href="https://github.com/apache/kafka/blob/2.0/streams/src/main/java/org/apache/kafka/streams/state/internals/RocksDBStore.java#L67">RocksDbStore</a>, but one wrapped by a <a href="https://github.com/apache/kafka/blob/2.0/streams/src/main/java/org/apache/kafka/streams/state/internals/CachingKeyValueStore.java#L38">CachingKeyValueStore</a>.</p><p>We could configure KafkaStreams to not use the cache, but given that we are already relying on some implementation detail &hellip; we see that the CachingKeyValueStore <a href="https://github.com/apache/kafka/blob/2.0/streams/src/main/java/org/apache/kafka/streams/state/internals/CachingKeyValueStore.java#L193">range implementation</a> returns a <a href="https://github.com/apache/kafka/blob/2.0/streams/src/main/java/org/apache/kafka/streams/state/internals/MergedSortedCacheKeyValueBytesStoreIterator.java#27">MergedSortedCacheKeyValueBytesStoreIterator</a>, which its <a href="https://github.com/apache/kafka/blob/2.0/streams/src/main/java/org/apache/kafka/streams/state/internals/AbstractMergedSortedCacheStoreIterator.java#L73">next() implementation</a> looks like:</p>
<pre><code class="Java">    public KeyValue&lt;K, V&gt; next() {
        // Simplified code
        final Bytes nextCacheKey = cacheIterator.peekNextKey();
        final KS nextStoreKey = storeIterator.peekNextKey();
        //
        final int comparison = compare(nextCacheKey, nextStoreKey);
        if (comparison &gt; 0) {
            return nextStoreValue(nextStoreKey);
        } else if (comparison &lt; 0) {
            return nextCacheValue(nextCacheKey);
        } else {
            storeIterator.next();
            return nextCacheValue(nextCacheKey);
        }
    }
</code></pre><p>So the merge expects the keys of both the cache and the actual store (the RocksDB one) to be ordered in the same way, as it is comparing them and advancing either of the iterators depending on an order. </p><p>We could conclude that, given that the RocksDB iterator uses a lexicographical order, the cache must use the same order, but, just in case, let&rsquo;s looks at the MergedSortedCacheKeyValueBytesStoreIterator <a href="https://github.com/apache/kafka/blob/2.0/streams/src/main/java/org/apache/kafka/streams/state/internals/MergedSortedCacheKeyValueBytesStoreIterator.java#L57">compare method</a>:</p>
<pre><code class="Java">    public int compare(final Bytes cacheKey, final Bytes storeKey) {
        return cacheKey.compareTo(storeKey);
    }
</code></pre><p>The cacheKey and the storeKey are <a href="https://github.com/apache/kafka/blob/2.0/clients/src/main/java/org/apache/kafka/common/utils/Bytes.java#L26">org.apache.kafka.common.utils.Bytes</a>, which have a <a href="https://github.com/apache/kafka/blob/2.0/clients/src/main/java/org/apache/kafka/common/utils/Bytes.java#L94">compareTo implementation</a> like:</p>
<pre><code class="Java">public int compareTo(Bytes that) {
        return BYTES_LEXICO_COMPARATOR.compare(this.bytes, that.bytes);
    }
</code></pre><p>So the CachingKeyValueStore also takes care of returning the range results in the order that we need! </p><p>If we do not mind relying on these <em>little</em> implementation details, we can rely on KafkaStreams state stores <code>range</code> queries to be able to work in an efficient way with any huge results, even those that do not fit in memory, plus we remove the the need to use any external storage, with the consequent improvement on the simplicity and availability of our application.</p><p>We all good! (Your architect may disagree about this statement and with any enthusiasm associated with it)</p>
<hr/><p>All the code can be found <a href="https://github.com/dlebrero/kafka-streams-big-results">here</a>, including a Docker Compose file that will run Kafka, Zookeeper plus three instances of this service, so you can play around with it. The details of how to build and run it are in the repository.</p>]]>
</description>
</item>
<item>
<title>
REPL driven development: immediate feedback for you backend code
</title>
<link>
https://danlebrero.com/2018/11/26/repl-driven-development-immediate-feedback-for-you-backend/
</link>
<guid>
https://danlebrero.com/2018/11/26/repl-driven-development-immediate-feedback-for-you-backend/
</guid>
<pubDate>
Mon, 26 Nov 2018 08:30:00 +0100
</pubDate>
<description>
<![CDATA[<p>In this talk I explain the motivations for using a REPL, and where and how it can be used. The talk is mostly a live demo.</p><p>Here are the slides in <a href="/slides/repl-driven-development-geecon-2018.key">keynote format</a>, <a href="/slides/repl-driven-development-geecon-2018.pptx">ppt format (untested!)</a> and <a href="https://www.slideshare.net/DanielLebrero2/habits-ofefficientdevelopers">SlideShare (somehow broken!)</a>.</p><p>And the video:</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/ZkJX9ciI5aM" frameborder="0" allowfullscreen></iframe></p><p>Feedback and questions welcomed!</p>
<hr/><h1>Transcript</h1><p>Hello everybody I am Daniel Lebrero, thanks for coming and we are here today to talk about REPL driven development. </p><p>But before we get started I have a confession to make. </p><p><img src="/images/blog/repl-driven-development/001-confession.jpeg" alt="Confession" title="Consession" /></p><p>On my very very first job as a developer, I got to work with three technologies that made a profound and lasting impact on my career as a developer. </p><p>Those three technologies were Netscape, Internet Explorer 4 and Internet Explorer 5. </p><p>Thanks to those three technologies I decided to become back-end developer avoiding in any kind of front-end work for a lot of years. And I have been very happy Java developer, living in a world of XML and JSON.</p><p>But on a recent project, I got to work again with a front-end team, and I have to confess that since that day, since that project, I&rsquo;m actually very very jealous of the front-end developers, up to the point that I&rsquo;m contemplating the possibility of becoming one of them.</p><p>You may wonder, wow isn&rsquo;t that crazy? </p><p>Maybe the JavaScript that these developers were using was somehow different from the JavaScript I that I have to learn and suffer 20 years ago?</p><p><img src="/images/blog/repl-driven-development/002-js-the-good-parts.jpeg" alt="Javacript the good parts" title="Javascript the good parts" /></p><p>You know, Javascript is evolving, but that is heart it&rsquo;s still the same JavaScript.</p><p>Maybe they have fixed all those incompatibilities between browsers that used to drive me crazy? </p><p>Doesn&rsquo;t seem so, seems that they are there, and now with all the phones and tablets is even worse.</p><p>To really understand why I&rsquo;m so jealous of the front-end developers let&rsquo;s look at a picture of myself doing some front-end work.</p><p><img src="/images/blog/repl-driven-development/004-css.gif" alt="CSS" title="CSS" /></p><p>That&rsquo;s me trying to get a two column layout working on Internet Explorer and Opera; and, as you can see, I&rsquo;m not very good at it, and as much as I try and I try and I try, the result is always the same: it&rsquo;s just a big pile of crap.</p><p>But even if CSS doesn&rsquo;t make any sense at all, there is something really nice, there&rsquo;s something really powerful, on that picture. So let&rsquo;s look at it again.</p><p>Focus on Mr. Griffin&rsquo;s workflow. </p><p>See how he pulls the string in one direction and he sees straight away, without any kind of delay what&rsquo;s the result on the blind. And he doesn&rsquo;t like it, he just pulls the string in a different direction. And he keeps doing that until he&rsquo;s done.</p><p>Is this immediate feedback what I&rsquo;m really missing on my day-to-day job as a back-end developer.</p><h1>Immediate feedback</h1><p>We know from agile, scrum and lean that feedback loops are very important, but why is this immediate feedback so important for us?</p><p>Because without this immediate feedback it&rsquo;s very difficult to get into the flow or the zone.</p><p><img src="/images/blog/repl-driven-development/005-the-flow.jpeg" alt="The Flow" title="the flow" /></p><p>The Flow is that state where you feel like Neo when he comes to realize that he&rsquo;s the Chosen One. </p><p>When you are in the flow, you are so focused, that the real world disappears and is replaced with your code, it&rsquo;s design, and the data flowing through it.</p><p>When you are in the flow no problem is difficult enough, no bug can hide from you, and your solutions are clean, simple and elegant.</p><p><img src="/images/blog/repl-driven-development/006-productivity.jpeg" alt="productivity" title="productivity" /></p><p>When you are in the flow is when you are your most productive, and it&rsquo;s not that you just produce more, what you produce is of better quality.</p><p><img src="/images/blog/repl-driven-development/007-joy.jpeg" alt="joy" title="joy" /></p><p>But this productivity is just a nice side effect of being in the flow. What we are really looking for is that feeling of joy, that feeling of achievement, that feeling of creating something beautiful. </p><p>And is this feeling why I am, after 20 years, still a software developer.</p><p>But we all know it, you are there in the flow completely focus doing all your tips and tricks, and then</p><p><img src="/images/blog/repl-driven-development/008-losing-focus.gif" alt="losing focus" title="losing focus" /></p><p>sounds familiar? That&rsquo;s how little it takes to push you out of the flow.</p><p>And we backend developers, we are experts at these kinds of interruptions.</p><p><img src="/images/blog/repl-driven-development/009-compiling.jpeg" alt="compiling" title="compiling" /> <span style="background-color: #ecf0f1"><small>Image attribution: <a href="https://www.xkcd.com/303/">https://www.xkcd.com/303/</a>.</small></span></p><p>We do them all the time, and we think they&rsquo;re unavoidable, we even have comics about it. </p><p>But probably we have a laugh at it because we, maybe, don&rsquo;t know what&rsquo;s the cost of one interruption, of getting out of the flow.</p><p>There are a couple of studies that they tried to quantify what&rsquo;s that cost is</p><p><img src="/images/blog/repl-driven-development/010-interruption-cost.jpeg" alt="interruption cost" title="interruption cost" /></p><p>it seems that, every time that you are interrupted, you waste between ten and fifteen minutes to get back the context of the tasks that you were doing. </p><p>So it takes you 15 minutes to start coding again, and the worrying thing is that if you look at what usability expert say </p><p><img src="/images/blog/repl-driven-development/011-interrumption-limit.jpeg" alt="interruption limit" title="interruption limit" /></p><p>if you want to keep your train of thought, interruptions cannot be longer than one second. And if your interruptions are longer than 10 seconds it&rsquo;s quite probable that you will end up playing with your phone, or checking the news, or looking at your social media.</p><p>And who here is able to build, compile, start the runtime in in one second or less?</p><p>While preparing this presentation, as a test, I created a new Tomcat application using the company&rsquo;s archetype, completely new, and I just timed how long it took the project to build, and start. The project had one controller with nothing, and one test doing nothing. </p><p>Who wants to give a guess of how long it took for the Tomcat to start an empty application? In my case it was 30 seconds, so it&rsquo;s 30 seconds a long time or is 30 seconds at reasonable amount of time? </p><p>So let&rsquo;s think for 30 seconds about 30 seconds. Okay, are you ready?</p><p>(30 seconds pause)</p><p>Those were 30 seconds, and I don&rsquo;t know how I felt for you, but for me, standing up here in front of all of you, those were very long 30 seconds, and we do this all the time. </p><p>And this is not going to get any better, right? As we add more tests, more code, this is just going to get worse and worse and worse.</p><p>But we know this, so probably, if you want to keep yourself productive, you are already following the advice of that very wise man: </p>
<blockquote><p>Do not run Tomcat. Embrace TDD <cite>Dan Lebrero</cite></p>
</blockquote><p>so what you do is: you don&rsquo;t run your application. What you do instead, you rely on a good unit test suite to know if you are making progress and to know if you didn&rsquo;t break anything. </p><p>And remember that a good test suit it has to run in 10 seconds or less, if you don&rsquo;t want to lose focus.</p><p>If you have been doing TDD long enough, you probably know that TDD has some shortcomings, so let&rsquo;s look at them.</p><p>Who can tell me what mocks, stubs, fakes and spies have in common? </p><p>What are mocks? Mocks are just lies.</p><p>What are fakes? They are all just lies, right? </p><p><img src="/images/blog/repl-driven-development/012-lies.jpeg" alt="mocks are lies" title="mocks are lies" /></p><p>They are lies that we create to keep our test suite really fast, to keep our workflow sane, but they&rsquo;re just lies.</p><p>They&rsquo;re not the real thing. Now, I think we cannot avoid them, but what we really want is credible lies.</p><p><img src="/images/blog/repl-driven-development/013-credible-lies.jpeg" alt="credible lies" title="credible lies" /></p><p>We want to create our mocks that they behave as the real thing. But how can you do that? </p><p>To be able to mock the real thing, you really really need to understand how the real world works. And how do you do that? </p><p>Well, if you are talking with the database the only way that I know is going and poking at the database, looking which tables are there, which columns, what are the possible range of ranges of values in those columns.</p><p>If you need to integrate with a third-party HTTP restful endpoint, the only way that I know is going there and poking at that thing. </p><p>And TDD doesn&rsquo;t give us any kind of tool to be able to go and understand how the real world works, so we can go and do our mocking.</p><p>I have been doing TDD for 16-17 years now, and one thing that I&rsquo;m learned is that, no matter how many tests you have, what&rsquo;s your code coverage is</p><p><img src="/images/blog/repl-driven-development/014-dancing-bugs.gif" alt="dancing bugs" title="dancing bugs" /></p><p>they are always, always, some bugs. </p><p>You start the thing, maybe your configuration is not there or is not correct. Maybe your Spring wiring is not exactly the same as your unit testing. </p><p>So it&rsquo;s always a situation that you&rsquo;re going to have, and TDD again doesn&rsquo;t give you anything when it breaks. </p><h1>So what do we want for our workflow?</h1>
<ol>
  <li>We want to write code and get immediate feedback.</li>
  <li>We don&rsquo;t want to be sitting there waiting for the builds and the deploy to happen.</li>
  <li>We want tools to understand the real world,</li>
  <li>So we can have an easy way of creating faithful lies.</li>
  <li>And we don&rsquo;t want any surprises when the application is started.</li>
</ol><p>And what kind of tool we can use to get all of those things? You&rsquo;re not going to be surprised, a REPL it&rsquo;s a possible tool.</p><p>REPL stands for read, eval, print loop, and we have all probably used a REPL, usually in the form of a command-line interface. </p><p><img src="/images/blog/repl-driven-development/015-terminal.gif" alt="terminal" title="terminal" /></p><p>So the console what is doing here? Is reading your command, then it evaluates, it runs it and then, it prints the result and then it loops so it goes back to reading to allow you to put another command.</p><p>Basically, a REPL is the same thing, with the only difference that, instead of writing Unix commands, what we are going to be doing is writing small pieces of code, that are going to be run in our program.</p><p>So, we&rsquo;re going to do a demo, and what the demo is going to do is:</p><p><img src="/images/blog/repl-driven-development/016-repl-setup.gif" alt="repl setup" title="repl setup" /></p><p>We are going to use Maven to start Tomcat, the Tomcat is going to start our application, our war, and inside the war what we are going to do is start a REPL inside our application. </p><p>Now because typing things in that really small screen is really cumbersome, the REPL, instead of reading from the standard input, what is going to do is going to be listening to a socket, and then from our favorite IDE, we&rsquo;re just going to connect to that socket, and we&rsquo;re going to be writing code where we always write code in your IDE. We&rsquo;ll use a shortcut to send code to the application. The code will run inside the application, and then we will get back the results, that will be printed on the bottom window. </p><p>Okay, I&rsquo;m going to do the demo in Clojure. </p><p><img src="/images/blog/repl-driven-development/017-clojure-lisp.jpeg" alt="Clojure" title="Clojure" /></p><p>Clojure is, right now, my favorite language. Clojure is a lisp for the JVM and the point of the presentation is not about Clojure, so I don&rsquo;t expect anybody to understand any of the code, and I&rsquo;m not going to explain any of the code, so the only thing that I want you to do is focus on the workflow, on how, with a REPL, we do all the task and I want for you to compare it with how would you do it at work. </p><p>Now, one of the reasons to have a REPL, it&rsquo;s to be able to learn the language. A REPL is a tool that it makes it a lot easier to learn a language, because it&rsquo;s easier to play with it, so I&rsquo;m going to add another item tp the list that is to learn a language.</p><h1>Demo</h1><p>(Demo start min 12:25, <a href="#enddemo">skip it</a>)</p><p>So the very first thing that we are going to do, is to start the application. So this is the first thing that if you have a good REPL, before even writing or thinking about what you&rsquo;re going to write, the very very first thing that you do is start the application. </p><p>This is usually the slowest bit of all the workflow and usually takes around 30 seconds or so. Now, this is something that you will do once a day, or maybe once a week, or once a month. It dependents on how often you need to change projects. You will try to keep it running all the time.</p><p>So what we are going to build is a small restful application that what it&rsquo;s going go to the database, is going to get some transactions for a user, and it&rsquo;s going to do some kind of summary, and it&rsquo;s going to expose that on an HTTP endpoint.</p><h4>Basic workflow with REPL</h4><p>So we&rsquo;re going to learn just a tiny tiny bit of Clojure, but this is so you get used to what I&rsquo;m going to be doing all the time. </p><p>So in Clojure everything is a list, it&rsquo;s a Lisp. </p><p>So the first thing on the list is the function that you want to call, and then zero or more parameters. </p><p><img src="/images/blog/repl-driven-development/repl-001.gif" alt="repl basic" title="repl basic" /></p><p>I&rsquo;m going to hit the magic shortcut and I&rsquo;m going to send this particular piece of code, to the Tomcat, and the Tomcat is going to return me the response. So you see down here what I sent and got a three back. </p><p>Questions? Clear? Because I&rsquo;m going to be doing it all the time.</p><p>So let&rsquo;s say that you want to learn a little bit more about the plus function: what happens if you pass three parameters to the plus function? You just write the code, you run it, and you see that the Clojure allows you to do that. What happens if you just pass one parameter to the plus function? It also works. What happens if you pass no parameters? It returns zero. What happens if you pass a very long value? Seems to work. Let&rsquo;s go for a longer value: it throws an arithmetic exception.</p><p>So what we are doing here is just trying to understand how the plus function works. And how we are doing it? We make small changes, we write small programs, and we run each of them, and we see straightaway what&rsquo;s the result. </p><p>The same way we are doing it with the plus function, that is part of the core language, you could be doing it with absolutely any library that you want to explore. </p><p>This is enough Clojure. </p><h4>Testing configuration at REPL</h4><p>So now we are going to build the application for real. Again, we are going to go to database, and for a given client, we are going to get a list of all his transactions, and we are going to do something very simple to summarize all those transactions.</p><p>The first thing that I want to do it&rsquo;s just connect to database, just check that our configuration to the database is correct. And to do that, we just try to run <code>select one from dual</code>. </p><p><img src="/images/blog/repl-driven-development/repl-002.gif" alt="repl jdbc" title="repl jdbc" /></p><p>And if you know Java, this is telling you there is no suitable driver for Postgres, so if I go to my pom, we see here that I forgot to uncomment it. And the usual thing that you will do is uncomment the dependencies and restart the JVM to see if works.</p><p>But instead of that, the JVM is able to load code from anywhere and it&rsquo;s able to do it at runtime, so we just tell the JVM to please go to Maven, download all dependencies for the Postgres driver and just install it. And then we just try it again.</p><p>It seems that we get another exception, but this one is different, the database does not exist. And this is because I make a little typo, we fix it, give it another try, and now we are connected to the database.</p><p>So what are we doing? we&rsquo;re basically testing our configuration. I don&rsquo;t know how you do it, but for me is usually very painful because when you have to test things like configuration, you have to be constantly restarting the JVM, to see if it works, if it find the configuration files, if it doesn&rsquo;t find them, if you put the credentials correctly or not, but here we are able to do it in an interactive way. </p><h4>Exploring a database</h4><p>Now we are going to explore the real world. Lets say that we know the database that the data, but we don&rsquo;t know what&rsquo;s inside the database, so what I usually will do it open something like Oracle SQLDeveloper, and then I would put the credentials, and then I will start navigating, and look in the UI to see what is in there.</p><p>But instead of that, what we are going to do is, using the JDBC metadata API, from the Tomcat, we are just going to query the database, searching for all the tables that start with &ldquo;transac&rdquo;. We see here that Postgres is returning us three objects, three maps. Instead of printing it like this, because its a little bit difficult to read, and because we are on the JVM, we are just going to write a function so we print it in a more tablely way, so it is a little bit easier to read.</p><p>So we have here a table called transaction, probably the table that we want to use, and what we are going to do is to query the database, it returns a bunch of results, and here we&rsquo;ll see there is a currency, there is an amount, there&rsquo;s some timestamp, an ID, client ID, so we get an example of the data that is in it.</p><p>Now we realize that there are two currencies, so probably if you want to summarize this thing properly, we need some kind of foreign exchange. So we go to our architect, and we ask him to we have this problem, I have euros in one side, pounds in the another one, what do we do? He say, well, we have a restful endpoint somewhere that you can hit, and it will give you the forex exchange. So he give us the URL, and we are just going to poke a this restful.</p><h4>HTTP client code, one bit at a time</h4><p>So if I run this, I&rsquo;m making now the HTTP request. This is failing somehow, so what we&rsquo;re going to do, we need have a look at what&rsquo;s the error. It is a 400 and if we look at the body it says something like the date is missing. </p><p>So lets add it to our request parameters, try it again, we see now at the body contains some JSON. We are in the good path, so let&rsquo;s just extract the body, that looks good, and let&rsquo;s parse the JSON, and that&rsquo;s it. </p><p>Look at what we are doing, look at the flow, we write one little piece of code, and we run it immediately, and we see the result, and we do it for each and every small step. </p><p>Now we probably want to check, do we have data that is old? Seems that we have data. What about data that is very very old? Since that we don&rsquo;t have data before 1970. What happens if for some reason we ask for data in the future? We have data in the future, that&rsquo;s very interesting feature. And what happens if we pass a string? We get an error saying that the date should be a long.</p><p>So we&rsquo;re exploring how the thing works, and now, for example, we know how errors look like, so now we can go and build our logic around handling errors. </p><h4>Generating code for Stored Procs</h4><p>Now when you are building this, your team lead comes in and says: well, there is already some Stored Proc in the database that is going to do all this logic for you so don&rsquo;t pay attention to architects. They don&rsquo;t know anything. </p><p>So what are you going to do, is exactly the same thing as before, we&rsquo;re going to ask the database through the JDBC API, which stored procs we have, that contains the word &ldquo;trans&rdquo;. And we see that we have a &ldquo;transcations_in_gbp&rdquo;. So lets have a look again at what that stored proc is about. So we see that it returns a cursor and it requires the client ID.</p><p>So now that we know what they stored proc expects and what it requires, what we could do is write our code, but you know that JDBC client code is just hell, but what we are doing here at the end of the day is just printing this thing as a table, but why do we need to print it as a table? We can also print it as a piece of code.</p>
<pre><code class="clojure">(def-proc transactions-in-gbp
 &quot;transactions_in_gbp&quot;
 [:return Types/OTHER :return-value]
 [:in Types/BIGINT :clientid])
</code></pre><p>So I printed it as a piece of code, copied it, paste it in our file, and now we can give it a try. Does it work? Seems to work. What happens if I pass a client that doesn&rsquo;t exist? No value. What happens if I pass nil value? What happens if I pass a string? Exception.</p><h4>Why not SQL developer or Postman? Why a REPL for exploration?</h4><p>So we&rsquo;re just poking around to understand how things work, but you maybe wonder, well why is this any better than using oracle SQL developer, right? This is a SQL specific tool. </p><p>What is this piece of code that we just generated? This is our first piece of production code. This is production code. If you were using SQL Developer, we would know what to do, but now we&rsquo;ll have to go on type the code to be able to call the database, and that code you will need to test it, because you don&rsquo;t really know if it works or not. </p><p>But how likely it is that this stored proc, when we deploy it, when we run it in the application, it fails? That it doesn&rsquo;t work? If you think about it, every time that we evaluate, every time that we send a piece of code to the REPL, we are sending it inside the Tomcat, so basically what we are doing is deploying the piece of code into the Tomcat, so it&rsquo;s very very unlikely that this code doesn&rsquo;t work. </p><p>I haven&rsquo;t explained it but, where are we making these changes? The file we are editing is not a special place, this is a project file. Once we are finished with the work, what we will do is just commit this file as it is. We do not have to copy this code into another place. This is production code, this is in the correct place.</p><p>Another reason what you would want to use a REPL instead of SQL Developer or Postman, is &hellip; How many people know how to do a for loop? Everybody knows how to do a for loop. How many people know how to do a for loop in Postman? I have been told that it is possible. We do for loops all day long, right? If you have a REPL you have a whole language, your production language, it is not that different language, is your production language, to do everything. </p><p>The same way, because we are in the JVM, what happens if, for some reason, for your investigation, you needed to get data from the database and somehow correlated it the HTTP service? Well, if you are using Postman and SQL Developer, you need to export the resulting to CSV in both tools, and maybe create some Bash script &hellip; but again, we are on the JVM, so you could just write in a little piece of code to do that for us, because the JVM has libraries for absolutely everything.</p><p>We can get more fancy, and if we really really need it, we can also do graphs. We got plenty of graphing libraries in the JVM, so again, we have all the tools of the JVM at our disposal to understand how the real world works.</p><p><img src="/images/blog/repl-driven-development/repl-004.gif" alt="repl graph" title="repl graph" /></p><h4>TDD and a REPL</h4><p>So let&rsquo;s say that we have finished this exploration phase to understand how the real world works, and now we want to switch to our TDD workflow. So the first thing that we&rsquo;ll do is to write a test, this is a test, and if you see, it&rsquo;s saying that it&rsquo;s failing, but that&rsquo;s because we didn&rsquo;t provide it with any data, any mock data. </p><p>We could go here and type of all the mock data, but if you think about it, we are already calling DB, so one option is just to copy the results from that DB call into our test setup. </p><p>How likely is that this data that we are using in our tests it has a typo? Or it&rsquo;s not the right type? That came from the database, so out of our exploration work, we are able to get pieces of data and use them straight away in our tests.</p><p>Ok, so lets say that your business manager says that we don&rsquo;t want for our summary function to take into account records with type 101. So, if you are doing TDD, the first thing that you will do is change the expectation. You write the test, you see it fail, now you want to make it green, so we&rsquo;ll go to the code, we&rsquo;ll remove the types 101, run it again, and it&rsquo;s green. Cool, so we have implemented what we were asked for.</p><p>Now the business manager changes his mind: well, you know, we don&rsquo;t want to count numbers, because they look very bad, so the summary should be 23. You run your test again, and now you go to your production file, and you make a change&hellip; But this switching between files is a little bit annoying. </p><p>So we can tell the REPL to keep track of all the changes that we&rsquo;re making in the project, and run the test as soon as we save the file. So we save the file now, it&rsquo;s running the test automatically without me having to do anything. </p><p>And the nice thing about it is that, it&rsquo;s not just running all the tests. If I go to a file that has no tests, see what he says here? Well it didn&rsquo;t run any tests because this file doesn&rsquo;t have any tests at all. So it&rsquo;s not just going to run all the tests, all your test suite, it is just going to run the test that could be affected by the change that you made. </p><h4>Wiring your controllers</h4><p>Now that we&rsquo;re happy with our business logic, the only bit that we are missing is to create a REST endpoint to expose this function to the external world. </p><p>This particular service is using Swagger. Everybody familiar with Swagger? Swagger is a standard way of defining your endpoints as JSON, so then you consume that defition with out tools. In this case, the one that consumes that JSON definition is a Swagger UI, which just draws the API endpoints, and it allows you to easily make HTTP calls, and play with the endpoints. </p><p>Lets add our new endpoint, and we&rsquo;re going to just copy the previous one, we call it total, and let&rsquo;s see if that works. Refresh the browser, and we see now the total is here, this is our new endpoint. Instead of &ldquo;who&rdquo;, we will require a client of type long, and we need to wire our dependencies, lets call the database, and let&rsquo;s give it a try. Total twenty three.</p><p><img src="/images/blog/repl-driven-development/repl-005.gif" alt="repl wiring" title="repl wiring" /></p><p>Okay, I personally don&rsquo;t put or try to put any kind of logic on my controllers so I usually don&rsquo;t test them, and what we have done here is just test that the wiring actually works. </p><p>Let&rsquo;s say that apart from the total, you want to return the client. We could go and check it here, but this, again, changing from one tool to another to do your testing is getting annoying. And the JVM, I&rsquo;m pretty sure, that&rsquo;s able to do HTTP calls, so we write a little piece of code that is going to make an HTTP call straight away, so now if we change the client to account, see, it changed automatically. And we don&rsquo;t need to change to another tool, and we see that the changes appear, and we can check it. </p><p>This feedback loop it&rsquo;s immediate.</p><h4>State</h4><p>Now that we have all this automatic refreshing of code, what happens with the application state? Here we have a piece of state that we&rsquo;re going to use to count how many HTTP requests this service has done. </p><p>In our new endpoint we&rsquo;re just going to return that counter with the number of requests: 1, 2, 3, &hellip; we have now 12. Now we are going to change this so what happens when it refresh my changes? The counter, that piece of state, has gone back to 0.</p><p>What&rsquo;s happening? When the code is refresh, we are losing that state. That may be something that you want to, but sometimes it&rsquo;s a little bit annoying, for example, when you have some caching and you&rsquo;re testing the caching. Loading the caching from database takes forever, losing the state of the cache is really really annoying. It just slows you down, so what we can tell the REPL is, for this particular piece of state, I don&rsquo;t want you to destroy it when there&rsquo;s a change. </p><p>So we can selectively decide which piece of states we want to keep, but it&rsquo;s not just that. </p><p>Because we are really inside the JVM, we can go and we can inspect the state, any state that you have in your application, you can go and poke at it. This is like having a debugger connected to the JVM. </p><p>And the same way that you can inspect it, you could go and just change it.</p><p>But sometimes, even state that you think that you don&rsquo;t want to get rid of, you may want to get rid of it. So there is a way of telling the REPL to get rid of everything, even the things that you told it not to get rid of.</p><p>And the same way we&rsquo;re inspecting the state, we can also pick up any state that is going through your application and capture it, and inspect it later.</p><p><a name="enddemo"></a></p><h2>Some REPL benefits</h2><p>So what do we got from our REPL?</p>
<ol>
  <li>Perfect tool to learn a programming language and its libraries.</li>
  <li>Write code with immediate feedback.</li>
  <li>No build or deploy. Live change our running application without restarting it.</li>
  <li>Tools to understand the real world: all the JVM libraries.</li>
  <li>Easy way of creating faithful lies for our tests.</li>
  <li>Fewer surprises when starting the application.</li>
  <li>Add new libraries to a running application.</li>
  <li>Run automatically unit test affected by a change.</li>
  <li>Inspect and manage state.</li>
  <li>Stay on the comfort of your favourite IDE.</li>
</ol><h2>A REPL in staging and production?</h2><p>If you think about it, the REPL is listening to a socket, and things that are listening to a socket means that you don&rsquo;t really need to run a them locally. </p><p>So what will happen if we leave this REPL with the socket open in our staging and production environments? And then, from our IDE, we connect it to the staging or production environments? </p><p>How many times you have had a bug reported and you think: &ldquo;If I could just look the state of this particular object in staging, I will know straightaway what was the issue, and I will be able to fix it straightaway&rdquo;.</p><p>Or how you many times you have thought: &ldquo;If I could just add one log line here, I will know what&rsquo;s happening&rdquo;, and then you make that change to your logging, you deploy again and you realize: &ldquo;oh, it wasn&rsquo;t exactly this the log line that I wanted, I really need a different log line&rdquo;. </p><p>With a REPL we are able to make all these changes immediately, in whatever environment you want.</p><p>But who would be so crazy to want to have this kind of power in production? It&rsquo;s just too dangerous right? </p>
<blockquote><p>In May of 1999, we were able to debug and fix a race condition that had not shown up during ground testing. Debugging a program running on a $100M piece of hardware that is 100 million km away is an interesting experience. Having a read-eval-print-loop running on the spacecraft proved invaluable in finding and fixing the problem. <cite>Ron Garret NASA Jet Propulsion Lab Engineer</cite></p>
</blockquote><p>So I&rsquo;m going to state that if the NASA have this power in production, probably we can also use it. You have to be extremely careful, but why not?</p><p>So to do all the things that we said a REPL gives your, I&rsquo;m going to add two more:</p>
<ol>
  <li>Debug staging and production environments</li>
  <li>Control spacecrafts</li>
</ol><h2>More REPLs</h2><p>(yet another 30 seconds pause) oh sorry, its just 30 seconds. Don&rsquo;t worry, just the second time in one hour &hellip; </p><p>Remember why we want a REPL: you do it for your joy, and you do it for the company&rsquo;s productivity.</p><p>As I said, this is not exclusive to Clojure, here are other videos for similar things in different languages and environments. But each REPL is going to have different capabilities, they&rsquo;re not all equal.</p>
<ul>
  <li>Javascript: <a href="https://vimeo.com/123513496">https://vimeo.com/123513496</a></li>
  <li>ClojureScript: <a href="https://www.youtube.com/watch?v=KZjFVdU8VLI">https://www.youtube.com/watch?v=KZjFVdU8VLI</a></li>
  <li>Elm: <a href="http://debug.elm-lang.org/">http://debug.elm-lang.org/</a></li>
  <li>Groovy: <a href="https://www.youtube.com/watch?v=bTRUC78X87g">https://www.youtube.com/watch?v=bTRUC78X87g</a></li>
  <li>Python: <a href="https://www.youtube.com/watch?v=EwI-e3WlTew">https://www.youtube.com/watch?v=EwI-e3WlTew</a></li>
  <li>iOS: <a href="https://www.youtube.com/watch?v=Ci4uviG8S0o">https://www.youtube.com/watch?v=Ci4uviG8S0o</a></li>
  <li>Android: <a href="https://www.youtube.com/watch?v=mVXTcAEKgF8">https://www.youtube.com/watch?v=mVXTcAEKgF8</a></li>
  <li>Unity: <a href="https://www.youtube.com/watch?v=tJr_TD1BtF0">https://www.youtube.com/watch?v=tJr_TD1BtF0</a></li>
  <li>Music: <a href="https://www.youtube.com/watch?v=yY1FSsUV-8c">https://www.youtube.com/watch?v=yY1FSsUV-8c</a></li>
</ul><p>What about the JAVA REPL? </p><p><img src="/images/blog/repl-driven-development/018-java9repl.gif" alt="Java 9 REPL" title="Java 9 REPL" /></p><p>This is me when I read that Java was going to get a REPL, and then what that REPL was going to get. </p><p>Of all the list of things that you saw that a REPL can give you, the aim of the Java REPL is to make easy to learn the language, nothing more, but even this, it&rsquo;s funny because the language is not exactly the same in the REPL as in Java as it has different semantics, different syntax, while in more powerful REPLs you get the whole language, there is no difference.</p><h2>References</h2>
<ul>
  <li>The code: <a href="https://github.com/dlebrero/repl-driven-development-talk">https://github.com/dlebrero/repl-driven-development-talk</a></li>
  <li>Bret Victor: Inventing by principle <a href="https://vimeo.com/36579366">https://vimeo.com/36579366</a></li>
  <li>Ron Garret: The Remote Agent Experiment: Debugging Code from 60 Million Miles Away <a href="https://www.youtube.com/watch?v=_gZK0tW8EhQ">https://www.youtube.com/watch?v=_gZK0tW8EhQ</a></li>
  <li>Jakob Nielsen – Usability Engineering: <a href="https://www.nngroup.com/books/usability-engineering/">https://www.nngroup.com/books/usability-engineering/</a></li>
</ul><p>Thank you!</p>]]>
</description>
</item>
<item>
<title>
How to do a Java/JVM heap dump in Kubernetes
</title>
<link>
https://danlebrero.com/2018/11/20/how-to-do-java-jvm-heapdump-in-kubernetes/
</link>
<guid>
https://danlebrero.com/2018/11/20/how-to-do-java-jvm-heapdump-in-kubernetes/
</guid>
<pubDate>
Tue, 20 Nov 2018 00:30:00 +0100
</pubDate>
<description>
<![CDATA[<p>Kubernetes is so awesome that one of our JVM containers has been periodically running out of memory for more than a year, and we just recently realized about it.</p><p>Once we realized about the issue, we obviously wanted to find out what was going on, but we could not replicate it locally. </p><p>Also, the issue happened so sporadically, that we could not just jump to the ill container and perform a <code>jmap</code>. Before we had any time, Kubernetes had already killed and restarted the container, which also meant that it had wiped out any heap dump that the JVM could have done with the <code>-XX:+HeapDumpOnOutOfMemoryError</code> flag.</p><p>After a lot of head scratching, we found that the solution was quite simple, but not obvious, if you are just starting with Kubernetes:</p>
<pre><code class="yaml      ">apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: your-app
spec:
  replicas: 1
  template:
    metadata:
      labels:
        test: heapdump
    spec:
      containers:
      - name: a-jvm-container
        image: openjdk:11.0.1-jdk-slim-sid
        command: [&quot;java&quot;, &quot;-XX:+HeapDumpOnOutOfMemoryError&quot;, &quot;-XX:HeapDumpPath=/dumps/oom.bin&quot;, &quot;-jar&quot;, &quot;yourapp.jar&quot;]
        volumeMounts:
        - name: heap-dumps
          mountPath: /dumps
      volumes:
      - name: heap-dumps
        emptyDir: {}
</code></pre><p>So what we are doing is adding an <a href="https://kubernetes.io/docs/concepts/storage/volumes/#emptydir">empty dir</a> volume to the container, and configuring the JVM to do the heap dumps to that directory.</p><p>The first part of the puzzle is that, when Kubernetes is killing your container because it is not responding to the health check, Kubernetes will just restart the container, but will <strong>not</strong> reschedule the pod, so it will not move it to another node.</p><p>The other part of the puzzle is that an <em>empty dir</em> volume is not deleted until the pod is moved to another node.</p><p>Putting both things together means that, after the container is restarted, the new container will mount the same <em>empty dir</em>, which will contain the heap dump from the previous run. So you can <code>kubectl cp</code> those files at any time after the event.</p><h4>OOM on startup</h4><p>If the OutOfMemory error is happening during start up, you probably are not going to be able to copy the dump before the container is restarted.</p><p>In this case, the little trick is to add a very simple and tiny sidecar to your pod, and mount in that sidecar the same <em>empty dir</em>, so you can access the heap dumps through the sidecar container, instead of the main container.</p><p>Remember in this case to set the <code>-XX:HeapDumpPath</code> option to generate an unique file name.</p><h4>Shipping the heap dump out of Kubernetes</h4><p>If you don&rsquo;t want to, or cannot, access the Kubernetes pod directly, you can always ship the heap dumps out of Kubernetes. </p><p>In our case, credits to <a href="https://perdomo.me">Ivan Perdomo</a> for the work, we did it by adding a sidecar that will also mount that <em>empty dir</em> volume, and it will listen with <code>inotify</code> to changes in that directory. On closing of the heap dump file, it will start the process of copying the file to a Google Storage bucket:</p>
<pre><code>apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: your-app
spec:
  replicas: 1
  template:
    metadata:
      labels:
        test: heapdump
    spec:
      containers:
      - name: a-jvm-container
        image: openjdk:11.0.1-jdk-slim-sid
        command: [&quot;java&quot;, &quot;-XX:+HeapDumpOnOutOfMemoryError&quot;, &quot;-XX:HeapDumpPath=/dumps/oom.bin&quot;, &quot;-jar&quot;, &quot;yourapp.jar&quot;]
        volumeMounts:
        - name: heap-dumps
          mountPath: /dumps
      - name: ship-heap-dump
        image: google/cloud-sdk:206.0.0-alpine
        command: [&quot;/bin/sh&quot;, &quot;-c&quot;]
        args:
        - |
          apk add --no-cache inotify-tools &amp;&amp;
          gcloud auth activate-service-account --key-file=/secrets/jvm-debug.json &amp;&amp;
          inotifywait -m /dumps -e close_write | while read path action file; do gsutil cp &quot;$path$file&quot; &quot;gs://heap-dump/$file&quot;; done;
        volumeMounts:
        - name: heap-dumps
          mountPath: /dumps
      volumes:
      - name: heap-dumps
        emptyDir: {}
</code></pre><p>As it trip us in our happy Kubernetes journey, maybe it will makes yours easier.</p>]]>
</description>
</item>
<item>
<title>
How to convince your company to use Clojure
</title>
<link>
https://danlebrero.com/2018/10/16/how-to-convince-your-company-to-use-clojure/
</link>
<guid>
https://danlebrero.com/2018/10/16/how-to-convince-your-company-to-use-clojure/
</guid>
<pubDate>
Tue, 16 Oct 2018 00:30:00 +0200
</pubDate>
<description>
<![CDATA[<p>You have found Clojure and fall in love with it. </p><p>As any good Clojurian, you eagerly to try convert your colleagues, by showing them the power of immutability, the REPL, macros, core.async, protocols, multi-methods, &hellip;</p><p>But they seem to be blind.</p><p>You have also tried to appeal to their aesthetic sense, the beauty of simplicity or just their good heart.</p><p>But none of that works. </p><p>Desperate, you have invoked Rich Hickey&rsquo;s name three times, and shout &ldquo;Complected! Complected! Complected!&rdquo; every time your teammate creates a new class.</p><p>But still no luck.</p><p>But don&rsquo;t give up, here is the definitive video that will convert any sceptic to Clojure:</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/MSFvEK8asY8" frameborder="0" allowfullscreen></iframe></p><p>The video should be watched in repeat mode for 48 uninterrupted hours.</p><p>Happy Clojuring! </p>]]>
</description>
</item>
<item>
<title>
In KafkaStreams, when to choose between a KTable or a KStream?
</title>
<link>
https://danlebrero.com/2018/10/08/when-to-choose-ktable-or-kstream-in-kafka-streams/
</link>
<guid>
https://danlebrero.com/2018/10/08/when-to-choose-ktable-or-kstream-in-kafka-streams/
</guid>
<pubDate>
Mon, 08 Oct 2018 20:25:00 +0200
</pubDate>
<description>
<![CDATA[<p>If you are starting with KafkaStreams, or with streaming applications in general, sometimes is hard to come up with appropriate solutions to applications that you would previously consider trivial to implement. But it is just a matter of getting used to the new APIs and concepts, and seeing a bunch of examples. </p><p>I recently got this email inquiry (feel free to send me others!) about how KafkaStreams could be used:</p><p><em>I&rsquo;ve a sensor data coming out of device and it has latitude/longitude along with other information. The device serial number is the key.</em></p><p><em>My requirement is to calculate distance between 2 consecutive messages for the device.</em></p><p><em>I&rsquo;ve a kafka topic and each message in the topic has lat/lon and event timestamp. For example:</em></p>
<table>
  <thead>
    <tr>
      <th>Device </th>
      <th>GpsDateTime </th>
      <th>Latitude </th>
      <th>Longitude </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>xyz </td>
      <td>2016-11-30 22:38:36 </td>
      <td>32.685757 </td>
      <td>-96.735942</td>
    </tr>
    <tr>
      <td>xyz </td>
      <td>2016-11-30 22:39:07 </td>
      <td>32.687347 </td>
      <td>-96.732841</td>
    </tr>
    <tr>
      <td>xyz </td>
      <td>2016-11-30 22:39:37 </td>
      <td>32.68805 </td>
      <td>-96.729726</td>
    </tr>
  </tbody>
</table><p><em>I would like to create a new KStream on the above topic and enrich it with distance.</em></p>
<table>
  <thead>
    <tr>
      <th>Device </th>
      <th>GpsDateTime </th>
      <th>Latitude </th>
      <th>Longitude </th>
      <th>Distance</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>xyz </td>
      <td>2016-11-30 22:38:36 </td>
      <td>32.685757 </td>
      <td>-96.735942 </td>
      <td>0</td>
    </tr>
    <tr>
      <td>xyz </td>
      <td>2016-11-30 22:39:07 </td>
      <td>32.687347 </td>
      <td>-96.732841 </td>
      <td>0.340</td>
    </tr>
    <tr>
      <td>xyz </td>
      <td>2016-11-30 22:39:37 </td>
      <td>32.68805 </td>
      <td>-96.729726 </td>
      <td>0.302</td>
    </tr>
  </tbody>
</table><p><em>What would be the best approach to refer the previous message lat/lon for a device?</em></p><p>As we are talking about keeping some state, the first thing that pops in our minds is that we must use a KTable, because we have drilled in our heads that state requires a DB. As we have always read that a KafkaStreams KTable is the streaming equivalent to a DB table, it seems natural to reach for a KTable for any problem in our streaming applications that requires some state to be maintained.</p><p>A possible solution for the above application would be:</p>
<pre><code class="clojure">(defn create-kafka-stream-topology-ktable []
  (let [^StreamsBuilder builder (StreamsBuilder.)
        _ (-&gt; builder
              (.stream device-data-topic)
              (.groupByKey)
              (.aggregate (initializer [])
                          (aggregator [k new-point [previous _]]
                            [new-point previous]))
              (.toStream)
              (.mapValues (value-mapper [current previous]
                            (if previous
                              (assoc current :dist (distance current previous))
                              (assoc current :dist 0))))
              (.to &quot;points-with-distance&quot;))]
    builder))
</code></pre><p>So we use a KTable to generate pairs of &lt;current-value,previous-value&gt; and then we just transform those two values into one, adding the distance between both values to the current-value.</p><p>Running this streaming application seems to work:</p>
<pre><code class="clojure">device-gsp-coords    : xyz , {:lat 32.685757, :lon -96.735942, :time 2016-11-30 22:38:36 }
points-with-distance : xyz , {:lat 32.685757, :lon -96.735942, :time 2016-11-30 22:38:36, :dist 0}
device-gsp-coords    : xyz , {:lat 32.687347, :lon -96.732841, :time 2016-11-30 22:39:07 }
points-with-distance : xyz , {:lat 32.687347, :lon -96.732841, :time 2016-11-30 22:39:07, :dist 0.340}
device-gsp-coords    : xyz , {:lat 32.68805,  :lon -96.729726, :time 2016-11-30 22:39:37 }
points-with-distance : xyz , {:lat 32.68805,  :lon -96.729726, :time 2016-11-30 22:39:37, :dist 0.302}
</code></pre><p>But what happens if we get a lot of messages for a given device in a short period of time?</p>
<pre><code class="clojure">device-gsp-coords    : xyz1 , {:lat 32.685757, :lon -96.735942, :time 2016-11-30 22:38:36, :ts 1538755525616}
device-gsp-coords    : xyz1 , {:lat 32.687347, :lon -96.732841, :time 2016-11-30 22:39:07, :ts 1538755525618}
device-gsp-coords    : xyz1 , {:lat 32.68805,  :lon -96.729726, :time 2016-11-30 22:39:37, :ts 1538755525620}
points-with-distance : xyz1 , {:lat 32.685757, :lon -96.735942, :time 2016-11-30 22:38:36, :ts 1538755525616, :dist 0}
points-with-distance : xyz1 , {:lat 32.68805,  :lon -96.729726, :time 2016-11-30 22:39:37, :ts 1538755525620, :dist 0.302}
</code></pre><p>It looks like that the middle value (the one with distance 0.340) has disappeared, but notice that the distance calculation of the last message is exactly the same previously.</p><p>Reading the documentation of the <a href="https://docs.confluent.io/current/streams/javadocs/org/apache/kafka/streams/kstream/KGroupedStream.html#aggregate-org.apache.kafka.streams.kstream.Initializer-org.apache.kafka.streams.kstream.Aggregator-">KStream#aggregate method</a> it becomes clear what happens:</p>
<blockquote><p>Not all updates might get sent downstream, as an internal cache is used to deduplicate consecutive updates to the same key. The rate of propagated updates depends on your input data rate, the number of distinct keys, the number of parallel running Kafka Streams instances, and the configuration parameters for cache size, and commit interval. </p>
</blockquote><p>Note that this scenario can happen not just then device sends a lot of information in a short time, but will also happen if your application has a lot of catch up work to do, like when starting for the very first time.</p><h2>But, why?</h2><p>If you were to query a row in a traditional DB table at two different times, would you know how many times the row had changed between those two times? Would you be able to retrieve all those intermediate values? No. </p><p>KTables are again equivalent to DB tables, and as in these, using a KTable means that you just care about the latest state of the row/entity, which means that any previous states can be safely thrown away. Not in vain a KTable is backed up by a compacted topic.</p><p>So this becomes an excellent test to know if it is appropriate to use a KTable:</p>
<blockquote><p>If you deleted all states but the last, would your application still be correct?</p>
</blockquote><p>In the above example, we see that we actually care about each position. If the requirement was to know the total distance traveled since the start of time, then a KTable would be appropriate.</p><p>It is important to note that being able to throw away intermediate state is also an optimization, as thousands of input messages can end up producing just a handful of output messages, improving the processing time, and avoiding a lot of IO and compaction work.</p><h2>A stateful KStream solution</h2><p>In KafkaStreams, stateful transformations are not exclusive of KTables, we also found them in KStreams and in the Processor API (remember that KTables and KStreams are build on top of the Processor API).</p><p>Using the <a href="https://docs.confluent.io/current/streams/javadocs/org/apache/kafka/streams/kstream/KStream.html#transformValues-org.apache.kafka.streams.kstream.ValueTransformerWithKeySupplier-java.lang.String...-">KStream#transformValues method</a> we end up with:</p>
<pre><code class="clojure">(defn create-kafka-stream-topology-kstream []
  (let [^StreamsBuilder builder (StreamsBuilder.)
        state-name &quot;last-device-state&quot;
        store (Stores/keyValueStoreBuilder
                (Stores/persistentKeyValueStore state-name)
                (EdnSerde.)
                (EdnSerde.))
        _ (-&gt; builder
              (.addStateStore store)
              (.stream device-data-topic)
              (.transformValues (value-transformer-with-store
                                  state-name
                                  (fn [store key current]
                                    (let [previous (.get store key)]
                                      (.put store key current)
                                      (if-not previous
                                        (assoc current :dist 0)
                                        (assoc current :dist (distance current previous))))))
                                (into-array [state-name]))
              (.to &quot;points-with-distance&quot;))]
    builder))
</code></pre><p>So we manually create a state store and then we use it to store/retrieve the previous value when doing the computation. </p><p>Pretty simple and neat.</p><p>All the code can be found <a href="https://github.com/dlebrero/kafka-consecutive-values">here</a>, including a Docker Compose file that will run Kafka, Zookeeper plus three instances of this service, so you can play around with it. The details of how to build and run it are in the repository.</p>]]>
</description>
</item>
<item>
<title>
Kubernetes explained in pictures: StatefulSets, Persistent Volumes and Headless Services
</title>
<link>
https://danlebrero.com/2018/07/22/kubernetes-explained-in-pictures-stateful-sets-persistent-volume-headless-service/
</link>
<guid>
https://danlebrero.com/2018/07/22/kubernetes-explained-in-pictures-stateful-sets-persistent-volume-headless-service/
</guid>
<pubDate>
Sun, 22 Jul 2018 00:00:00 +0200
</pubDate>
<description>
<![CDATA[<p>This is the third part on a series of posts where we explain Kubernetes concepts using a Theme park analogy.</p><p>On the <a href="/2018/07/09/kubernetes-explained-in-pictures-the-theme-park-analogy/#content">first post</a> we covered the basics of a Kubernetes cluster.</p><p>On the <a href="/2018/07/16/kubernetes-explained-in-pictures-the-theme-park-analogy/#content">second post</a> we talked about scaling, affinities and taints.</p><p>On this post, we will talk StatefulSets, Persistent Volumes and Headless Services.</p><h2>The cloakroom and the cloakroom service</h2><p>To improve the KubePark&rsquo;s experience, you decide to provide a free of charge cloakroom service. You use the same fun ride template to inform your crew to build one cloakroom in the park, you add a new wayfinder colour for it, and visitors happily start using it.</p><p>Complains about lost clothes don&rsquo;t get long to start. Investigating what is going on, it doesn&rsquo;t take you long to realize what is going on when you see your maintenance crew replacing the faulty cloakroom:</p><p><img src="/images/blog/kubernetes-explained/kubernetes-stateful-set-maintenance.jpg" alt="kubernetes stateful set maintenance" title="Kubernetes stateful set maintenance" /></p><p>Maybe the idea of <a href="/2018/07/09/kubernetes-explained-in-pictures-the-theme-park-analogy/#maintenance">burning everything to the ground</a> was not without its flaws. </p><p>Similarly, when the parcel with the cloakroom becomes unavailable, either due to some flood or because your control crew is reducing the number of rented parcels, all the clothes in that cloakroom are left behind. More lost clothes!</p><p>This is obviously not good publicity for KubePark, and your landlord doesn&rsquo;t waste time offering his self storage service <strong>(k8s <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/persistent-volumes">persistent volume</a>)</strong>, built in a nuclear shelter, as a solution. </p><p><img src="/images/blog/kubernetes-explained/kubernetes-persistent-volume.jpg" alt="kubernetes stateful set maintenance" title="Kubernetes persistent volume" /></p><p>The only thing that you will need to do is specify in the cloakroom&rsquo;s plan how many storage units must be rented and your control crew will take of doing all the paperwork <strong>(k8s <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/">dynamic persistent volume claim</a>)</strong>. </p><p>As the self storage is outside the park, the cloakroom&rsquo;s crew will run to the storage unit to leave and retrieve the visitors&rsquo; items, making the whole service slower, but at least the items will not get lost. </p><p>Problem solved! At least for a short while …</p><h2>Scaling your cloakroom service</h2><p>As KubePark gets more popular, the queue to leave the clothes starts to be unbearable. You panic: there is just one key per storage unit and the key cannot be duplicated. Increasing the number of cloakrooms will not reduce the queue! </p><p>Each cloakroom must have its own storage unit, but this brings a whole new set of problems.</p><p><img src="/images/blog/kubernetes-explained/kubernetes-stateful-set-wrong-instance.jpg" alt="kubernetes stateful set headless service missing" title="Kubernetes stateful set wrong instance" /></p><p>First, visitors will need redeem the cloakroom&rsquo;s receipt in exactly the same cloakroom that they received the receipt from. </p><p>Second, if a cloakroom must be moved or replaced for maintenance, the replacement must keep the same name and storage unit key as the cloakroom that it replaced:</p>
<ul>
  <li>The same name so that from the visitors point of view is the same cloakroom.</li>
  <li>The same storage unit because if not, the storage unit would be empty and items stored in the previous storage unit inaccessible.</li>
</ul><p>This is so complex that it deserves its own attraction-like template <strong>(k8s <a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/">statefulsets</a>, note that StatefulSets also come with some additional ordering guarantees)</strong>. </p><p>Third, remember that the coloured wayfinder takes visitors to any attraction that matches a tag, but here the visitor must go to the receipt&rsquo;s cloakroom, so coloured wayfinder is of no use. Even if more cumbersome for visitors, you end up installing a sign posts <strong>(k8s <a href="https://kubernetes.io/docs/concepts/services-networking/service/#headless-services">headless service</a>)</strong> with the name and direction of the cloakrooms, so that the visitor can find by herself the appropriate cloakroom.</p><p>Now KubePark can have hundreds of cloakrooms. A dream come true.</p><p><img src="/images/blog/kubernetes-explained/kubernetes-stateful-set-final.jpg" alt="kubernetes stateful set headless service" title="Kubernetes stateful set headless service" /></p><h2>Is that all?</h2><p>Almost! There are still some additional concepts to be aware of, but I don&rsquo;t feel they need a KubePark analogy:</p>
<ol>
  <li>Namespaces, like the usual file system folders.</li>
  <li>DaemonSets, run a pod in each and every parcel, current or future.</li>
  <li>Secrets and Config Maps, equivalent to configuration files.</li>
  <li>Jobs, one-off tasks.</li>
  <li>CronJobs, a job with a cron.</li>
  <li>Priorities, to decide what attractions are more important when scheduling or running out of resources.</li>
  <li>Init Containers, to prepare the ground for a pod.</li>
  <li>Replication Controllers, obsolete, replaced by Replica Set.</li>
  <li>Replica Set, you can consider it an implementation detail of Deployments.</li>
  <li><a href="https://kubernetes.io/docs/concepts/workloads/pods/disruptions/">Disruptions and rolling update</a>, how many pods can be down at the same time?</li>
  <li>Kubelet/Scheduler/Master Controller/API server: <a href="https://jvns.ca/blog/2017/06/04/learning-about-kubernetes/">k8s internals</a>.</li>
</ol><p>And of course, there are still a myriad of details on each of the concepts that you will need to be aware of, but I hope that you are a little bit less lost in the Kubernetes world.</p><p>Enjoy your Kubernetes ride!</p>]]>
</description>
</item>
<item>
<title>
Kubernetes explained: the theme park analogy: auto scaling, taints and affinities
</title>
<link>
https://danlebrero.com/2018/07/16/kubernetes-explained-in-pictures-the-theme-park-analogy/
</link>
<guid>
https://danlebrero.com/2018/07/16/kubernetes-explained-in-pictures-the-theme-park-analogy/
</guid>
<pubDate>
Mon, 16 Jul 2018 00:00:00 +0200
</pubDate>
<description>
<![CDATA[<p>In the <a href="/2018/07/09/kubernetes-explained-in-pictures-the-theme-park-analogy/#content">previous post</a> we covered quite a bit of ground explaining the Kubernetes concepts using a theme park analogy: containers, pods, deployments, containerPorts, cpu and memory resources, probes, services, ingresses, labels, nodes and node pool. </p><p>On this post, we will continue with the theme park analogy talking about auto scaling, taints and affinities. </p><p>You can also read the next post about <a href="/2018/07/22/kubernetes-explained-in-pictures-stateful-sets-persistent-volume-headless-service/#content">Kubernetes StatefulSets</a>.</p><h2>Success!</h2><p>As it couldn&rsquo;t be otherwise, KubePark is a big success. People flood to the gates, eager to enjoy the KubePark experience, but there are just too many people: queues start to grow and grumpy visitors leave ugly reviews in popular websites.</p><p><img src="/images/blog/kubernetes-explained/queues-to-the-parks-main-roller-coaster-big.jpg" alt="big queues" title="Big queues ahead" /></p><p><span style="background-color: #ecf0f1"><small>Image attribution: <a href="http://www.thethemeparkguy.com/">http://www.thethemeparkguy.com/</a>.</small></span></p><p>You keep the queues in check by first increasing the number of attractions in your fun ride plans, and then by also increasing the number of rented parcels when the parcels become full.</p><p>If having to fiddle everyday with the fun ride plans and parcel contracts was not bad enough, you very soon notice that the 1909 Carousel is extremely popular in the mornings but hardly used in the evenings, while the Roller Coaster is the opposite, and let&rsquo;s not talk about those wild 4am Conga Lines! Also, the number of visitor on the weekends is orders of magnitude bigger than on workdays. </p><p>You are just wasting a ton of money and time.</p><p>To solve the issue, you devise an additional set of instructions (one per attraction) for your control crew, so that if the average usage of all clones of an attraction is high, the control crew will install more of those attractions, removing them when the usage is low <strong>(k8s <a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/">pod horizontal autoscaling</a>)</strong>. The usage can be measured in different ways, but you decide that the power consumption <strong>(k8s, CPU usage)</strong> is a good enough proxy to know how busy an attraction is.</p><p>On top of that, a new clause is added to the rental agreement with your landlord that will allow your control crew to rent additional parcels without your consent (up to a maximum). This way, during the weekends the park can grow, and shrink on workdays <strong>(k8s <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-autoscaler">cluster autoscaler</a>)</strong>.</p><p>From now on, KubePark will always run with the minimum required resources, and with little additional effort on your side.</p><h2>More attractions!</h2><p>Now that KubePark is running smoothly, it is time to offer a wider range of attractions. </p><p>A market study suggests that an ice rink and a ski slope will be the next big things. </p><p>As they require snow and cold weather, you sign a new rental contract <strong>(k8s <a href="/2018/07/09/kubernetes-explained-in-pictures-the-theme-park-analogy/#node-pool">node pool</a>)</strong> to provide you with parcels in the arctic, of size 500x200 with 250kW power, and you tag them as “plains” and “arctic weather”.</p><p>On the fun ride template, you add a new optional section: <em>Must-have and nice-to-have parcel tags</em>, and both the ice rink and ski slope fun ride plans include the “must-have arctic weather”. The control crew will make sure that those attractions are always installed on parcels with arctic weather <strong>(k8s <a href="https://kubernetes.io/docs/concepts/configuration/assign-pod-node">node affinity</a>)</strong>.</p><p>Note attractions with no parcel requirements could be installed in the arctic parcels. Most of the time you are ok with this, the 1909 carousel looks even more beautiful with the snow. But some some special cases, like those extremely expensive zero-gravity parcels, you want to keep all attractions out, except for the ones designed explicitly for them <strong>(k8s <a href="https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/">taints and tolerances</a>)</strong>.</p><h2>Trouble ahead</h2><p>With the snowy parcels in mind, you start to spring new attractions: Igloo Overnights, The Penguin Race, Polar Bear Sightseeing, Naked-Man Ice Fishing Competition&hellip; but on the rush to have all these new attractions, you neglect a very important detail and calamity strikes, badly hurting KubePark’s reputation. </p><p>The following picture goes viral, but be warned, you mind find it very disturbing:</p><p><img src="/images/blog/kubernetes-explained/kubernetes-explained-pod-affinity.jpg" alt="kubernetes affinities" title="Kubernetes node affinities" /></p><p><span style="background-color: #ecf0f1"><small>Image attribution: <a href="http://26anibestiario.kukuxumusu.com/resultados-animals/#" title="Lick">Lick</a> by <a href="http://www.kukuxumusu.com/">Kukuxumusu</a>.</small></span></p><p>By chance, a Polar Bear Sightseeing attraction was installed next to a Penguin Race. Not a nice spectacle. </p><p>To ensure that it doesn&rsquo;t happen again, the Penguin Race is tagged as <em>yummy snacks</em> and a new option is added to the attraction’s template so that you can specify that the Polar Bear Sightseeing must not be in the same parcel as attractions with the tag <em>yummy snacks</em>.</p><p>Foreseeing possible future uses, you decide to also add the options to specify <em>must-have-attraction-with-tag-X-in-the-same-parcel</em>, <em>nice-to-have-attraction-with-tag-X-in-the-same-parcel</em> and <em>nice-to-NOT-have-attraction-with-tag-X-in-the-same-parcel</em> <strong>(k8s <a href="https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity-beta-feature">pod affinity and anti-affinity</a>)</strong>. </p><p>Your control crew will need to hire, at the very least, a <a href="https://en.wikipedia.org/wiki/Classic_Tetris_World_Championship">Tetris World Champion</a>. </p><h2>Is that all?</h2><p>You wish again! </p><p>We can read about Replication, Daemon and Stateful sets, Persistent Volumes, Jobs and Cron Jobs, Secrets, Config Maps in the <a href="/2018/07/22/kubernetes-explained-in-pictures-stateful-sets-persistent-volume-headless-service/#content">next post</a>.</p>]]>
</description>
</item>
<item>
<title>
Kubernetes explained in pictures: the theme park analogy
</title>
<link>
https://danlebrero.com/2018/07/09/kubernetes-explained-in-pictures-the-theme-park-analogy/
</link>
<guid>
https://danlebrero.com/2018/07/09/kubernetes-explained-in-pictures-the-theme-park-analogy/
</guid>
<pubDate>
Mon, 09 Jul 2018 00:00:00 +0200
</pubDate>
<description>
<![CDATA[<p>Kubernetes (k8s from now on) comes with its own set of abstractions, its own lingo, but with a little bit of imagination we can correlate those abstractions with more familiar concepts.</p><p>I was hoping for the sausage factory analogy to work, but unfortunately k8s is more than sausages, so we will have to settle for a theme park analogy. </p><p>The following is based on <a href="https://cloud.google.com/kubernetes-engine/">Google Kubernetes Engine</a>; some of the concepts may work slightly different in other providers or if you run k8s yourself.</p><h2>Who are you</h2><p>You are Kubenelius Fizzbuzz, a newly graduated MBA, with the speciality on Boxes Of All Sizes and you are about to embark on your greatest idea: KubePark Theme World.</p><h2>The fun ride plans</h2><p>To start KubePark, you need to plan its fun rides. You decide that, for each attraction, you will just need to fill in a template like this <strong>(k8s <a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/">deployment</a>)</strong>:</p><p><img src="/images/blog/kubernetes-explained/kubernetes-deployment.jpg" alt="kubernetes deployment" title="Kubernetes deployment" /></p><p>Here you say that KubePark will have three 1909 carousels. </p><p>A 1909 carousel is composed of two parts: a classic carousel plus a candy floss booth. Each part <strong>(k8s <a href="https://www.docker.com/what-container">container</a>)</strong> will be delivered by drone in a huge box, completely assembled and ready to roll once unboxed.</p><p>Each attraction will be surrounded by a fence, isolating it from other attractions, so that a problem in one attraction is not spread to other attractions. But the parts of the attraction form an inseparable whole <strong>(k8s <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/">pod</a>)</strong>, so there are no barriers or firewalls that could impede the communication or movement between the parts, ruining the enjoyment of visitors <strong>(k8s except if you want to <a href="https://www.mirantis.com/blog/multi-container-pods-and-container-communication-in-kubernetes/">share files</a> which requires a little bit of configuration)</strong>.</p><p>Having a fence means that you need to plan where the doors <strong>(k8s <a href="https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/">containerPort</a>)</strong> for visitors should be. In the case of the 1909 carousel, visitors will come through the candy floss booth: a carousel ride is always more fun while enjoying a big fluffy sugar cloud.</p><p>The template also specifies the size <strong>(k8s memory)</strong> and power <strong>(k8s CPU)</strong> requirements <strong>(k8s <a href="http://www.noqcks.io/notes/2018/02/03/understanding-kubernetes-resources/">resources</a>)</strong>, and tags <strong>(k8s <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/">labels</a>)</strong> the 1909 carousel as a carousel, kid friendly and classic attraction. We will see later how you will use all this information.</p><p><a name="maintenance"></a>In the reverse of the template, not shown above, you write down the maintenance instructions <strong>(k8s <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/">probes</a>)</strong> for each part. Your crew will periodically follow those instructions to know if any of the parts needs replacement. If it does, the maintenance crew will burn the faulty part to the ground and drones will bring another huge box with the replacement. So no fiddling around to try to fix anything, but just a plain simple replacement of the whole booth or carousel. During the replacement the attraction will be closed to visitors, even if some parts are still in a working state: the 1909 carousel experience must have candy floss and must include a carousel ride, both things are inseparable.</p><h2><a name="node-pool"></a>The land</h2><p>With the fun rides planned, it is time to build the park. </p><p>You sign a rent contract <strong>(k8s <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/node-pools">node pool</a>)</strong> with a landlord:</p><p><img src="/images/blog/kubernetes-explained/kubernetes-node-pool.jpg" alt="kubernetes node pool" title="Kubernetes node pool" /></p><p>The contract is for two parcels of land <strong>(k8s <a href="https://kubernetes.io/docs/concepts/architecture/nodes/">nodes</a>)</strong>, each one with the specified size <strong>(k8s memory)</strong> and power generator <strong>(k8s CPU)</strong>. Note that the contract is not for two particular parcels, but for any two parcels with those characteristics, it will be the landlord’s job to find them. With the modern means of passenger transportation, they don’t even need to be adjacent.</p><p>The landlord also takes care of securing the access to the parcel, by installing barbed wired around each parcel.</p><p>You also tick the free disaster insurance <strong>(k8s <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/node-auto-repair">auto repair</a>)</strong> box: if a parcel becomes unusable, the landlord will replace it for another one with exactly the same characteristics. It will be the landlord’s sole responsibility to find out and decide if the parcel is unusable, and to replace it.</p><p>Lastly, any parcel provided by the contract will be tagged <strong>(k8s <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/">labels again</a>)</strong> as plains with Mediterranean weather. We will see later how we use this information.</p><h2>Building KubePark</h2><p>You already worked hard enough, so you delegate the details of the park’s construction to your control crew. The crew will make sure that the exact number and type of attractions that you specified in your plans are always working. </p><p>In a gesture of unexpected generosity, your landlord offers an air traffic control tower <strong>(k8s <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture#master">cluster master</a>)</strong> to accommodate the control crew, and to take care of any maintenance and improvement work that the tower may need. One less thing to care about!</p><p>From the tower’s privileged position and with your fun ride plans in hand, your crew will decide on which parcels to build each attraction, making sure that the parcel’s available room and spare power can accommodate those required <strong>(k8s <a href="https://cromleylabs.com/post/k8s-resource-limits-requests-qos/">resource quality of service</a>)</strong> by an attraction.</p><p>An attraction will always get the minimum power <strong>(k8s CPU)</strong> required, will never get more than the maximum power (as it will short circuit and burn otherwise), and will just get additional power (over the minimum) if there is spare in the parcel. If there is none spare, the attraction will just move more sluggishly.</p><p>The Conga Dancing Party Line has a minimum and maximum size <strong>(k8s memory)</strong>. It will always get the minimum size specified, but if gets longer than the maximum size, it will be shutdown. Everybody knows that a too long a Conga always ends up in wild riots! It will get additional space (over the minimum) if there is spare in the parcel, but if there is none, an attraction that is over its minimum space will be shutdown. It is up to the traffic control tower to decide which one, which could be the Conga Dancing Party Line itself or another.</p><p>As there is plenty of room and power, the team has no problem creating all the attractions that you planned. The park is almost ready!</p><h2>KubePark opening</h2><p>To help visitors reach the attraction you decide that it&rsquo;s easiest for them to use a coloured path wayfinder <strong>(k8s <a href="https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport">nodePort service</a>)</strong> like:</p><p><img src="/images/blog/kubernetes-explained/kubernetes-nodeport-service.jpg" alt="kubernetes nodeport service" title="Kubernetes node port service" /></p><p><span style="background-color: #ecf0f1"><small>Image attribution: <a href="https://commons.wikimedia.org/wiki/File:Cmglee_London_Victoria_station_floor_lines.jpg" title="London Victoria station floor lines">London Victoria station floor lines</a> by <a href="https://commons.wikimedia.org/wiki/User:Cmglee">Cmglee</a>.</small></span></p><p>Here you have decided to create a blue lane that will take visitors to the attractions that you tagged as “classic” and a green lane that will take them to the attractions that you tagged as “roller coaster”. You can be as specific or generic as you need, and can combine multiple tags if necessary.</p><p>This wayfinder is not just for visitors, your internal crew could also use it, and you could even create paths visible to just your crew <strong>(k8s <a href="https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types">clusterIP service</a>)</strong>, for example to find the crew’s canteen.</p><p>As the parcels are completely surrounded by barbed wire, you need to somehow let the visitors to come into the park. One option would be to take one of the coloured paths all the way to the barbed wire and make a hole in it <strong>(k8s <a href="https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer">loadBalancer service</a>)</strong>, but this would mean that you will need to somehow secure each and every coloured path. </p><p>So instead you opt to have some admission gates <strong>(k8s <a href="https://kubernetes.io/docs/concepts/services-networking/ingress/">ingress</a>)</strong>. Your landlord provides some standard gates, so that your crew do not need to maintain them, neither do they require space or power from your parcels. The landlord will also take care of building an overpass from the gates to the parcels. Maybe in the future you will opt for more specialized admission gates <strong>(k8s like <a href="https://docs.traefik.io/user-guide/kubernetes/">Traefik</a>)</strong>.</p><p>You give the admission gates’ crew some simple instructions: </p>
<ol>
  <li>Visitors with kids younger than six, should use the red lane.</li>
  <li>Visitors with just teenagers, should use the green lane.</li>
  <li>&hellip;</li>
</ol><h2>Up and running!!!</h2><p>And with this, your park is ready to roll:</p><p><img src="/images/blog/kubernetes-explained/kubernetes-explained-in-pictures.jpg" alt="kubernetes as a picture" title="Kubernetes explained in pictures" /></p><h2>Is that all?</h2><p>You wish! </p><p>You can read more about Kubernetes <a href="/2018/07/16/kubernetes-explained-in-pictures-the-theme-park-analogy/#content">scaling, taints and affinities</a> and <a href="/2018/07/22/kubernetes-explained-in-pictures-stateful-sets-persistent-volume-headless-service/#content">StatefulSets, Persistent Volumes and Headless Services</a>!</p>]]>
</description>
</item>
<item>
<title>
Habits of efficient developers - WeAreDevelopers 2018
</title>
<link>
https://danlebrero.com/2018/07/04/habits-of-efficient-developers-wearedevelopers-2018-video/
</link>
<guid>
https://danlebrero.com/2018/07/04/habits-of-efficient-developers-wearedevelopers-2018-video/
</guid>
<pubDate>
Wed, 04 Jul 2018 00:00:00 +0200
</pubDate>
<description>
<![CDATA[<p>The video of my WeAreDevelopers talk on &ldquo;Habits of efficient developers&rdquo; is online. This is what you can expect:</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/6GmSEVkz1dU" frameborder="0" allowfullscreen></iframe></p><p>Slides are <a href="/2018/05/17/habits-of-efficient-developers/#content">here</a> and the full video:</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/9-cyC6O81Bk" frameborder="0" allowfullscreen></iframe></p><p>Feedback and questions welcomed!</p>
<hr/><h1>Transcript</h1><p>Hello everybody, my name is Daniel I work for a company called Akvo and we are here today to talk about efficient developers.</p><p>So the first thing that I want to do is define what we mean by efficient.</p><p><img src="/images/blog/habits-of-efficient-developers/habits-of-efficient-developers.002.jpeg" alt="Efficient definition" title="Efficient definition" /></p><p>To be efficient means achieving maximum productivity without wasting resources, and in our case as developers that resource is usually time, which means to be efficient is to do things fast.</p><p>But this definition is missing one key element for us that we can see in this quote by Peter Drucker:</p><p><img src="/images/blog/habits-of-efficient-developers/habits-of-efficient-developers.003.jpeg" alt="Peter Drucker Efficient vs Effective" title="Peter Drucker Efficient vs Effective" /></p><p>So to be efficient is not that we have to be very very fast, it&rsquo;s that the things we do, we have to do them in a proper way, so the decisions that we take today don&rsquo;t slow us down in the future.</p><p>Now that we have this quote here you maybe wonder: well what is more important to be efficient or to be effective?</p><p>Obviously doesn&rsquo;t make any sense to go really really fast if you end up in the wrong place, but equally if we know where we want to go but we never reach that place it doesn&rsquo;t make sense either.</p><p>In fact there is some synergy between the two: if you are efficient it means that you spend less, time takes you less time to do things, which means that you have more time in your hands to stop, look around and make sure that you&rsquo;re going in the right direction.</p><p>So to be efficient allows you to be more effective. </p><p>Now, in this talk we are just going to focus on what it takes, what it makes us efficient.</p><h1>1. Focus</h1><p>And we&rsquo;re going to start talking about focus. </p><p>There are plenty of studies that try to quantify what is the cost of an interruption for us developers, and it seems that the cost is around ten or fifteen minutes. So every time that somebody comes and interrupts you it take us between ten and fifteen minutes to reload the context of the tasks that we were doing to be able to be productive.</p><p>So it paramount to be efficient to minimize the number of interruptions that we get, so we have long periods of time where we can focus on the task at hand.</p><p>There are basically two types of interruptions: the ones that you control and the ones that other people control the ones that you control.</p><p>This one, email notifications, is probably the worst offender. </p><p><img src="/images/blog/habits-of-efficient-developers/popup.jpg" alt="Focus email popup" title="Focus, email popup" /></p><p>If you think that that little pop-up doesn&rsquo;t nothing for your concentration, the truth is that for your brain it looks more something like this:</p><p><img src="/images/blog/habits-of-efficient-developers/habits-of-efficient-developers.006.gif" alt="Focus alert" title="Focus, alert" /></p><p>You cannot just stop looking at it. Millions of years of evolution have made our brains really sensible to any unexpected movement, mostly because the fear of being eaten. </p><p>So when that little pop-up shows up on your screen you have to focus on it. You don&rsquo;t have an option.</p><h2>1a. Disable ALL notifications</h2><p>So efficient developers the first thing that they do they disable all notifications.</p><p>Not just email notifications, but absolutely all notifications. In fact you don&rsquo;t even want to see that little number with the number of unread notifications on your screen, because as soon as that little number changes, your brain is going to pick up the change and you&rsquo;re going to start thinking about who could send my an email or what do I need to read. </p><p>So you can always deal with emails whenever you want, whenever you have the time. Nobody should expect that you&rsquo;d reply immediately to their emails. There are other means of of communication that are more appropriate if something is really really urgent. </p><p>Emails are asynchronous and it&rsquo;s more efficient to deal with them in batches. </p><p>The only notification that you want to say is the one that tells you that you broke the build. </p><p>And please never be one of these guys:</p><p><img src="/images/blog/habits-of-efficient-developers/habits-of-efficient-developers.010.jpeg" alt="Focus, email send" title="Focus, email sent" /></p><p>That they type an email and they want to tell you just to make sure that you received an email this is really really annoying. </p><p>And this brings us to the other types of interruptions: the ones that you don&rsquo;t control.</p><p>What can you do with somebody comes to your desk and interrupt your flow? I know three possible options. </p><p>The first one is to wear some headphones. Really, really big, so when somebody comes you pretend that you didn&rsquo;t see him and you hope that he will just walk away.</p><p>The second option is that you have a very good team, somebody like this guy:</p><p><img src="/images/blog/habits-of-efficient-developers/habits-of-efficient-developers.011.gif" alt="Focus, tackle" title="Focus, tackle" /></p><p>Somebody that is able to tackle any interruption before it reaches the team.</p><h2>1b. Pair Programming</h2><p>The third option is to do Pair Programming. </p><p>If you are doing pair programming, when somebody comes to interrupt you, what should happen is that one of the two developers in the pair stands up, walk away a couple of meters and deal with the interruption, and when he&rsquo;s done he goes back to the other pair, and that other guy, that was able to keep focus, works like a really fast cache to get him into a productive state a lot faster.</p><p>The additional benefit of pair programming is that, because you have another developer looking at what you are doing all the time, you are not going to check the news or your phone or your email as often, so that peer pressure is just going to cause you to be more efficient.</p><h2>1c. Rest</h2><p><img src="/images/blog/habits-of-efficient-developers/efficient-sleep-rest.jpg" alt="Focus, sleep" title="Focus, sleep" /></p><p>I don&rsquo;t think I need to explain this, right? We all know it, and I don&rsquo;t like to sound like your mom when she tells you to eat your greens. </p><p>So let&rsquo;s move to the next one.</p><h2>1d. One thing at a time</h2><p>Efficient developers just do one thing at a time and the reason is exactly the same why we hate interruptions: because of the context switches.</p><p><img src="/images/blog/habits-of-efficient-developers/multitask.jpg" alt="Focus, several things" title="Focus, several things" /></p><p><span style="background-color: #ecf0f1"><small>Image attribution: <a href="https://www.targetprocess.com/articles/speed-in-software-development/" title="The Ivory Tower">https://www.targetprocess.com/articles/speed-in-software-development/</a>.</small></span></p><p>Here we see that doing the blue task after finishing the green task, it just takes less time.</p><p>In fact it is not just that it takes less time, when you try to do multiple things at the same time, the quality of your work usually suffers. </p><p>We all know that the definition of multitasking is:</p><p><img src="/images/blog/habits-of-efficient-developers/habits-of-efficient-developers.017.jpeg" alt="Focus, multitask" title="Focus, multitask" /></p><p>Just screwing several things at the same time, so you should always focus on one thing, finish it and then you move to the next task.</p><h1>2. Master IDE</h1><p>You, me, we are all going to spend thousands upon thousands of hours in front of your IDE. It&rsquo;s one of our main tools, so you really need to know it inside out because any efficiency that you gain in your IDE is going to be multiplied but those are thousands of hours that you are going to spend front of it. </p><h2>2a and 2b. Functionality and shorcuts</h2><p>Basically need to know two things: its functionality and its shortcuts. </p><p>Now just because you are sitting already in front of it for six hours a day it doesn&rsquo;t mean that you are going to master it. </p><p>To master your IDE you have to make a conscious and deliberate effort to learn it, to find what functionality you don&rsquo;t know about it.</p><p>You can read the release notes, you can follow blogs or YouTube channels of people using it or you can just do pair programming.</p><h2>2c. Pair Programming</h2><p>When you do pair programming, each of your partners is going to show you how they use the IDE and it&rsquo;s going to show you functionality that you didn&rsquo;t know about, or it&rsquo;s going to show you more efficients ways of doing some tasks. Also you can teach him your tips and tricks, so you make the whole team more efficient. </p><h1>3. No menial work</h1><p>I&rsquo;m always surprised about the amount of manual work that we, developers, can put up with. And I found it very paradoxical, given that we are paid to automate others people&rsquo;s job. </p><p>Manual work is not just slower to do, but it&rsquo;s dull, boring and error prone. So I&rsquo;ll always wonder well why we keep doing it. </p><p>I think one of the main reason is that we sometimes forget that: </p><p><img src="/images/blog/habits-of-efficient-developers/habits-of-efficient-developers.022.jpeg" alt="Menial work, we are devs" title="We are devs" /></p><p>And as developers, we have this very rare and powerful skill that allow us to create an army of minions that will do as we say, they will not complain about it, they never get tired and they do it really really fast. </p><p>And I think we don&rsquo;t use this skill often enough. </p><p>Sometimes, it maybe because we just end up with this kind of minions:</p><p><img src="/images/blog/habits-of-efficient-developers/habits-of-efficient-developers.023.gif" alt="Menial work, minions" title="minions" /></p><p>But that&rsquo;s a different talk.</p><p>Just to make sure that this sinks I&rsquo;m going to repeat it again:</p><p><img src="/images/blog/habits-of-efficient-developers/habits-of-efficient-developers.025.jpeg" alt="Menial work, you are a dev" title="you are a dev" /></p><p>You don&rsquo;t do things that a computer, that your computer, can do for you.</p><h2>3a. Write programs (for yourself)</h2><p>So efficient developers before starting any task they always think: well, can I write a program to do the task? or at least to help me to do the task? </p><p>And I&rsquo;m not just talking about automating some work that can take you hours, I&rsquo;m also talking about automating tasks that can take you five seconds, but you do several times a day. </p><p>And I am so talking about writing programs for one of tasks that you&rsquo;re never going to do again. First, because maybe is more efficient, you can do it faster, but  second because, I hope that, writing programs is fun. At least it is fun for me, more fun at least than doing things manually.</p><p>To write simple programs there is nothing like old good Bash Shell. </p><p>I have been a developer for eighteen years and during those 18 years I have changed operating systems, I have changed programming languages, I have changed IDEs, I have changed my mind up about all kinds of ideas and practices. </p><p>The only thing that has been constant during those 18 years has been Bash so I want to show a little demo about what bash can do for you</p><p>(Failed Demo from min 10:00 to 14:00)</p><p>It doesn&rsquo;t matter! </p><p>So I&rsquo;m going to then move to the next thing that is, whenever you are writing a program you should always time limit the amount of time that you are expected to use on it, this is a good example, right? because if I keep going I will spend the next 25 minutes just trying to get it working. </p><p>So whenever you are trying to write a program or automate a task, the first thing that you should do it&rsquo;s time limit it. And if after that time limit you are not able to finish it, just move on and do things manually. </p><p>Now, even if you think that that&rsquo;s a waste of time, I tried to for five minutes to get this thing working and I didn&rsquo;t get it, well, the truth is that you have learned a little bit. That&rsquo;s not wasted time. That&rsquo;s invested time on you, learning and getting better. </p><p><img src="/images/blog/habits-of-efficient-developers/automate-time.jpg" alt="Menial work, write programs, time" title="write programs, time" /></p><p><span style="background-color: #ecf0f1"><small>Image attribution: <a href="https://xkcd.com/1205/">https://xkcd.com/1205/</a>.</small></span></p><p>This is a nice table from a XKCD that tells you how much time you can expend to automate some tasks. So have a look at that.</p><h2>3b. Avoid GUIs</h2><p>And if we are talking about writing programs, what you should always do it&rsquo;s avoid graphical user interfaces. Why? Because you cannot put a UI inside a for loop. UIs don&rsquo;t compose. They just live in their little world.</p><p>Now, I&rsquo;m not saying that you should never use them, because they are extremely useful when you are getting started, when you are learning something new, but once you are past that phase of beginner you will actually want to do more complex stuff and UIs just constrain what you can do.</p><h2>3c. Automated testing</h2><p>And if we&rsquo;re talking about avoiding UIs, the first UI that you want to avoid is your own applications&rsquo; UI. </p><p>There is nothing less efficient than starting application, clicking things around, and filling up forms to know if your feature, the new feature, is working or if you broke anything.</p><p>A part of making this more efficient, automated test also the give us the confidence to refactor and change code because it&rsquo;s going to catch bugs.</p><p>And bugs are the worst time waste of all. First, you need to write that the bug, then somebody has to review the bug then you need to put the bug into production, and then by the time some user notice the bug, you have gone through this massive context which, because you probably wrote the bug several weeks ago and so, even if you wrote the code that has debug, that code is already alien for you, and you have to dig into it, and then you need to fix it, you need to go review it, you need to explain it to your boss, you need to fill some JIRA issues, and then you need to go again through all the release process.</p><p>So bugs are just a big waste of time. </p><p>But worse than a bug it&rsquo;s having the same bug twice, right? so whenever you go and fix a bug, the first thing that you should do is write a test to prove that you are able to reproduce the bug, you see it fail and then you fix it.</p><h2>3d. Repeatable Development Environment</h2><p>And the last thing that you want to avoid to do manually is setting up the development environment, right? This is not going to make you just more efficient but the whole team more efficient. </p><p>This is how the instructions for any project that I joined look like from my point of view. </p><p><img src="/images/blog/habits-of-efficient-developers/ikea.jpg" alt="ikea instructions" title="ikea instructions" /></p><p><span style="background-color: #ecf0f1"><small>Image attribution: <a href="https://www.flickr.com/photos/jackbetty/4427395256">https://www.flickr.com/photos/jackbetty/4427395256</a>.</small></span></p><p>And the only thing clear about them is that they&rsquo;re not going to work. Maybe they are missing some step, or they&rsquo;re not precise enough, or maybe I will make some silly mistake when I try to follow them, and the result is always the same, two, three, four days of wasted time.</p><p>What you want to achieve its instructions as close as possible to this:</p>
<blockquote><p>docker-compose up</p>
</blockquote><p>Just one command. And that one command should bring all the tools, and configure them, to be able to build, run and test your application. </p><p>If you need a database, it should install the database and configure it, and seed it with some data.</p><p>If you need any build tool, maven, NPM, whatever, it will download the correct version of maven and install it, and configure any SDK that you need.</p><p>As you can see my tool of choice right now to do this it&rsquo;s Docker Compose, which is part of the Docker suite. </p><p>If you are not familiar with it, this an example:</p><p><img src="/images/blog/habits-of-efficient-developers/habits-of-efficient-developers.034.jpeg" alt="docker compose example" title="docker compose example" /></p><p>Here we are see that our development environment needs three containers: a Postgres DB, a Redis DB and our own application.</p><p>This has multiple benefits. </p><p>First thing it takes use minutes for somebody new to get started, but also if something stops working on your development environment you can just easily just wipe the whole thing and start again. If there any change on the development environment, you know, its share immediately with the whole team. And the instructions never get out of date.</p><p>Also because Docker is running things in isolated environments, it means that if two projects that you&rsquo;re working on they use completely different versions of a database or a JDK, well they&rsquo;re going to be completely isolated, so it doesn&rsquo;t bother one and the other. </p><p>And also because it&rsquo;s so easy to make changes, it allows you, it encourage you, to experiment. If you want to try a new JDK or SDK or a new version of the database, just make the changes, started it and if you don&rsquo;t like it, you just completely wipe the whole environment. </p><h1>4. Fast Feedback</h1><p>And the last section that we are going to talk about is feedback.</p><p>It doesn&rsquo;t matter what you are working on, you should always try to find the shortest and tightest feedback loop possible.</p><p>Feedback is what its telling us if we are going in the right direction. </p><p>Feedback make us at the same time more efficient and more effective.</p><p>You want feedback often and early, to make sure that you don&rsquo;t wander on the wrong path for too long, with the consequent waste of time and energy. </p><h2>4a. Test-Driven Development</h2><p>If we talked about the benefits of automated test, yeah, we save time, it catches bugs, allow us to the factor, when is the best moment to write tests?</p><p>Well my opinion is before you start doing any coding. </p><p>If you&rsquo;re not familiar with the TDD workflow it&rsquo;s basically this:</p><p><img src="/images/blog/habits-of-efficient-developers/habits-of-efficient-developers.037.jpeg" alt="TDD cycle" title="TDD cycle" /></p><p>I&rsquo;m going to go really fast through it. </p><p>You first write one test, and only one test, you run it you see it fail, you see it fail and then just write enough code to make that test pass, and then you refactor, you clean up, your code, running the test just to make sure that you didn&rsquo;t break anything.</p><p>There are least four reasons why you want to use the this workflow:</p><p>The first one is the fast feedback that gives you. As you are building the new feature to know that your code is doing what you expected it to do. </p><p>The second reason is that, if you truly believe that automated test saves you time, you want that benefit as soon as possible, as you are developing the new feature. </p><p>The third reason is organizational. I have hears too many times the phrase &ldquo;I don&rsquo;t have time to write tests&rdquo; or &ldquo;I&rsquo;m not given the time to write tests&rdquo;, and for me just actually means that, well, &ldquo;I always write my code, I finish my feature, and once I finish my feature, is when I do try my test, and if there is any time pressure, well, you know, I&rsquo;m not going to, I don&rsquo;t get time to write those tests&rdquo;. </p><p>And because you don&rsquo;t write tests, it means that you don&rsquo;t refactor your code, because to refactor code you need a very good automated test suite, and because you don&rsquo;t refactor code, it means that your code starts to accumulate garbage, and because your code starts to accumulate garbage, it takes you more time to actually build new features, and because it takes you more time to build features, you get more time pressure, and you have more time pressure so you have less time to write test, closing a vicious circle cycle that always end up with the same: with us, developers, crying for our rewrite.</p><p>And the four reason why you want to write your test first it&rsquo;s a mechanical reason: </p>
<blockquote><p>Seeing a test fail is the test that test if the test tests what is supposed to test</p>
</blockquote><p>Or in simple words, how do you know that your test doesn&rsquo;t have any bug? </p><p>If you write a test and you see it red, there is a strong indication that there is some piece of production code, some logic, that is not there. </p><p>If you write the test and you never see it red you don&rsquo;t know if it is because you&rsquo;ve ready implemented a feature, or because you forgot on an assert in your test, or the setup code is not correct.</p><p>Now when you present this idea to a lot of people they always come up with this phrase:</p><p><img src="/images/blog/habits-of-efficient-developers/habits-of-efficient-developers.039.jpeg" alt="what to test" title="not sure what I am going to test" /></p><p>I can&rsquo;t write a test first because I don&rsquo;t know what I&rsquo;m going to build. </p><p>And this can mean different things. </p><p><img src="/images/blog/habits-of-efficient-developers/habits-of-efficient-developers.041.jpeg" alt="business" title="business" /></p><p>It can mean that you don&rsquo;t understand what business is asking you to do. And in this case it&rsquo;s true you cannot write any test, but you cannot write any production code either. What you have to do is go back to business and ask for clarification. What do you want to do? </p><p><img src="/images/blog/habits-of-efficient-developers/habits-of-efficient-developers.043.jpeg" alt="business ok" title="business ok" /></p><p>The other case is that you actually understand business, and you&rsquo;re too actually understand the logic that you need to build, but you don&rsquo;t know if you are going to write one class, or ten classes, or if you are going to put an if statement or a switch or a factory factory factory. </p><p>You don&rsquo;t know what you&rsquo;re going to do, but you know, understand, the logic, and you know, understand, the mechanics of the side effects. So you know which database you are going to use, you have use it ten thousand times already, you know the table, you know everything. </p><p>In all these cases you can actually run a test first.</p><p><img src="/images/blog/habits-of-efficient-developers/habits-of-efficient-developers.045.jpeg" alt="side effects" title="side effects" /></p><p>But it&rsquo;s true that sometimes we actually don&rsquo;t know how to do the side effects that we are asked for. We, for example, may know that logic for your new application, functionality it needs to call some restful endpoint, to get some forex exchange, and you have never used it, and you don&rsquo;t know the end point, and you don&rsquo;t know what you need to give to it, and you don&rsquo;t know what it&rsquo;s going to give you back. Or maybe you need to consume some messages from a message queue, and you have never done that, so you don&rsquo;t know which libraries to use, you don&rsquo;t know how they work. </p><p>In all those cases you don&rsquo;t really know what you don&rsquo;t really know what are going to do.</p><p>There is always this face of exploration that we have in our job that we used to fill up those gaps, to convert unknown side-effects into known side-effects</p><p><img src="/images/blog/habits-of-efficient-developers/habits-of-efficient-developers.046.jpeg" alt="understanding side effects" title="understanding side effects" /></p><p>And that&rsquo;s something that TDD doesn&rsquo;t help you with.</p><p>What you want to do it is, first, read the documentation to see if you are able to fill those gaps, and the second thing you want is to write a lot of little programs, to test, to play around with that technology. </p><p>For this the best tool that I know it&rsquo;s a REPL.</p><h2>4b. REPL</h2><p>REPL stands for read eval print loop and it&rsquo;s just basically a fancy way of saying that you have like a command line interface inside your application.</p><p>Instead of trying to explain it, let&rsquo;s see it in action, if it works this time. </p><p>(Demo from 25:00 to 29:30)</p><h2>4c. Code reviews</h2><p>The last thing that we are going to talk about it&rsquo;s code reviews. </p><p>Code reviews tell us if the design of the code that we are doing, if it fits the application.</p><p>It allows one of your your teammates to tell you if you have any bugs, and it also we can use it to share knowledge, right? It&rsquo;s a way of sharing knowledge. </p><p>So efficient developers want their code to be code review. </p><p>Now there is something very true behind code reviews. </p><p><img src="/images/blog/habits-of-efficient-developers/code-review.jpg" alt="big code review" title="big code review" /></p><p>When we are presented with this huge massive changes, I don&rsquo;t know what your reaction but my reaction is something like &ldquo;oh my god&rdquo;.</p><p>But when we get small changes, we are able to give useful feedback to the author of the change, because we are able to understand the change. </p><p>Also, even if you are very disciplined developer and you go through that really painful review process, in my experience what does it happen when you go and tell the author like, well you know, I think your design is just shit, no, no, no, your sorry you could improve your design, or we could use a different library that will save us some time, or some resources, or whatever. </p><p>What usually happens its the author say like, yeah, I think you are right, but you know, I have already spent like several days or weeks working on this, and the end of the sprint is tomorrow, so even if I think you&rsquo;re right, I don&rsquo;t think I&rsquo;m going to have time to do your change, what you&rsquo;re suggesting, because it&rsquo;s going to take me several more days to do it. Also, you know, it&rsquo;s already working. So let&rsquo;s do something different, let&rsquo;s just commit the change as it is, and we are going to ask the product owner to create a refactoring story. I&rsquo;m sure he will be delighted to put it on top of the priority queue. </p><p>And we all know that those things never happen, so you end up again with worse code that, leads to this lower implemented feature, with blah blah blah&hellip;</p><p>So efficient developers, they don&rsquo;t want just code reviews they want small and early code reviews</p><h2>4c. Continuous code reviews</h2><p>So what they actually want is continuous code reviews. </p><p>This practice consists on getting one of your teammates to sit just beside you, and as you are implementing the feature, this developer sitting beside you, is going to suggest improvements on your code, it&rsquo;s going to be catching bugs that you are doing, and for the reviewer the changes are really, really, small. Ss you type them, he see those those changes, and for you, as the author, you can get feedback even before you start writing any code. </p><p>Additionally if for whatever reason you are not able to finish the feature, this other developer it&rsquo;s able to pick that feature without any effort, because he has been behind each of your decisions, so you avoid those knowledge silos within the team. </p><p>Also, this this other developer can work as your personal StackOverflow, because maybe he has already found that similar issue and he already knows how to fix it. And sometimes you don&rsquo;t even need to ask the question because he sees what you are doing. </p><p>Some people call also this <em>Pair programming</em>.</p><p>So that&rsquo;s all that I have, very briefly:</p><p><img src="/images/blog/habits-of-efficient-developers/habits-of-efficient-developers.053.jpeg" alt="summary" title="summary" /></p><p>Focus master, your IDE, your tools, avoid manual work, and find yourself the fastest feedback loop possible.</p><p>And last words:</p>
<blockquote><p>you should always find time to stop, </p><p>reflect on how you are working, and </p><p>never ever stop learning</p>
</blockquote><p>Thank you very much.</p>
<hr/><p>More about efficiency:</p>
<ol>
  <li><a href="/2017/08/01/efficient-developer-disable-notifications/#content">Disable notifications</a></li>
  <li><a href="/2017/08/02/efficient-developer-master-your-ide/#content">Master your IDE</a></li>
  <li><a href="/2017/08/03/efficient-developer-write-programs-for-yourself/#content">Write programs for yourself</a></li>
  <li><a href="/2017/09/01/a-docker-compose-environment/#content">Why to Docker Compose a calm environment</a></li>
  <li><a href="/2018/04/30/did-you-read-my-email/#content">Did you read my email?</a></li>
  <li><a href="/2018/07/02/efficient-developer-rest-and-sleep/#content">Go and have a rest</a></li>
  <li>The conference talk (you are here)</li>
  <li><a href="/2019/02/18/other-reasons-for-test-driven-development-baby-steps-roi-evil-manager-watching-the-watchmen/#content">Other reasons for TDD: Baby steps, ROI, Evil Manager Syndrome and Watching the watchmen</a></li>
  <li><a href="/2020/09/16/where-test-driven-development-falls-short-find-a-good-repl/#content">Where TDD falls short, find yourself a good REPL</a></li>
</ol>]]>
</description>
</item>
<item>
<title>
A more efficient developer: Go and have a rest
</title>
<link>
https://danlebrero.com/2018/07/02/efficient-developer-rest-and-sleep/
</link>
<guid>
https://danlebrero.com/2018/07/02/efficient-developer-rest-and-sleep/
</guid>
<pubDate>
Mon, 02 Jul 2018 00:00:00 +0200
</pubDate>
<description>
<![CDATA[<p>You know it, I know it, everybody knows it.</p>
<hr/><p>More about efficiency:</p>
<ol>
  <li><a href="/2017/08/01/efficient-developer-disable-notifications/#content">Disable notifications</a></li>
  <li><a href="/2017/08/02/efficient-developer-master-your-ide/#content">Master your IDE</a></li>
  <li><a href="/2017/08/03/efficient-developer-write-programs-for-yourself/#content">Write programs for yourself</a></li>
  <li><a href="/2017/09/01/a-docker-compose-environment/#content">Why to Docker Compose a calm environment</a></li>
  <li><a href="/2018/04/30/did-you-read-my-email/#content">Did you read my email?</a></li>
  <li>Go and have a rest (you are here)</li>
  <li><a href="/2018/07/04/habits-of-efficient-developers-wearedevelopers-2018-video/#content">The conference talk</a></li>
  <li><a href="/2019/02/18/other-reasons-for-test-driven-development-baby-steps-roi-evil-manager-watching-the-watchmen/#content">Other reasons for TDD: Baby steps, ROI, Evil Manager Syndrome and Watching the watchmen</a></li>
  <li><a href="/2020/09/16/where-test-driven-development-falls-short-find-a-good-repl/#content">Where TDD falls short, find yourself a good REPL</a></li>
</ol>]]>
</description>
</item>
<item>
<title>
Per user rate limiting with OpenID connect and Istio in Kubernetes
</title>
<link>
https://danlebrero.com/2018/05/31/per-user-rate-limiting-with-istio-openid-connect-in-kubernetes/
</link>
<guid>
https://danlebrero.com/2018/05/31/per-user-rate-limiting-with-istio-openid-connect-in-kubernetes/
</guid>
<pubDate>
Thu, 31 May 2018 00:00:00 +0200
</pubDate>
<description>
<![CDATA[<p><em>This article originally appeared on <a href="https://akvo.org/blog/per-user-rate-limiting-with-openid-connect-and-istio-in-kubernetes/">Akvo&rsquo;s blog</a></em></p><p>To make sure that each of our partners is able to use <a href="https://github.com/akvo/akvo-flow-api/wiki/Akvo-Flow-REST-API">Akvo’s API</a>, we need to ensure that nobody is able to abuse it. We want to ensure that each partner has access to a fair share of the servers’ resources.</p><p>In the case of HTTP APIs, this usually means limiting the rate at which partners can make requests. A system that performs rate limiting needs to:</p>
<ul>
  <li>Identify who is making the HTTP request.</li>
  <li>Count how many requests each user has made.</li>
  <li>Reject any user request once that user has depleted their allotment.</li>
</ul><p>There are plenty of open source products and libraries out there that you can choose from, but we decided to give <a href="https://istio.io/">Istio</a> a try.</p><p>For such a task, Istio is a little bit heavy-handed. However, since Istio is a <a href="http://philcalcado.com/2017/08/03/pattern_service_mesh.html">service mesh</a>, it also provides routing, load balancing, blue/green deployment, canary releases, traffic forking, circuit breakers, timeouts, network fault injection and telemetry. What’s more, it also offers <a href="https://istio.io/docs/concepts/security/mutual-tls.html">internal TLS encryption</a> and <a href="https://istio.io/docs/concepts/security/rbac.html">Role-Based access control</a>, which is very important for us given our commitment to the <a href="https://akvo.org/blog/gdpr-becoming-compliant/">upcoming GDPR legislation</a>.</p><h2>Identifying the user</h2><p>Akvo’s API already uses the <a href="https://github.com/akvo/akvo-flow-api/wiki/Authentication">OpenID connect standard</a> and Istio comes with a handy <a href="https://github.com/istio/proxy/tree/master/src/envoy/http/jwt_auth">JWT-auth filter</a>, so we just need to configure the filter to point to our OpenID provider:</p>
<pre><code class="yaml">apiVersion: config.istio.io/v1alpha2
kind: EndUserAuthenticationPolicySpec
metadata:
  name: flow-api-auth-policy
  namespace: default
spec:
  jwts:
    - issuer: https://kc.akvotest.org/auth/realms/akvo
      jwks_uri: https://kc.akvotest.org/auth/realms/akvo/protocol/openid-connect/certs
</code></pre><p>And then we need to tell Istio to apply the authentication spec to our backend service:</p>
<pre><code class="yaml">apiVersion: config.istio.io/v1alpha2
kind: EndUserAuthenticationPolicySpecBinding
metadata:
  name: flow-api-auth-policy-binding
  namespace: default
spec:
  policies:
    - name: flow-api-auth-policy
      namespace: default
  services:
    - name: flow-api
      namespace: default
</code></pre><p>With this, if there is a JWT access token present in the request, Istio will validate it and will add the principal to the request, but if there is no token, the requests will still go through.</p><h2>Enforcing a user</h2><p>Given that any access to the API must be done with an access token, we can add a policy rule to enforce it. To configure a policy we will need:</p><p>A handler, which in this particular case is a <a href="https://archive.istio.io/v0.6/docs/reference/config/adapters/denier">Denier adapter</a> that will return a 401:</p>
<pre><code class="yaml">apiVersion: &quot;config.istio.io/v1alpha2&quot;
kind: denier
metadata:
  name: flow-api-handler
  namespace: default
spec:
  status:
    code: 16
    message: You are not authorized to access the service
</code></pre><p>An instance, which in this case is a <a href="https://archive.istio.io/v0.6/docs/reference/config/template/checknothing">Check Nothing</a> template as the handler requires no data:</p>
<pre><code class="yaml">apiVersion: &quot;config.istio.io/v1alpha2&quot;
kind: rule
metadata:
  name: flow-api-deny
  namespace: default
spec:
  match: destination.labels[&quot;run&quot;] == &quot;flow-api&quot; &amp;&amp; (request.auth.principal|&quot;unauthorized&quot;) == &quot;unauthorized&quot;
  actions:
  - handler: flow-api-handler.denier.default
    instances: [flow-api-denyrequest.checknothing.default]
</code></pre><p>See the <a href="https://archive.istio.io/v0.6/docs/concepts/policy-and-control/mixer-config">Istio documentation</a> if you are not familiar with the handler, instance or rule concepts.</p><h2>Counting usage</h2><p>First, we need to define what we want to count:</p>
<pre><code class="yaml">apiVersion: config.istio.io/v1alpha2
kind: quota
metadata:
  name: requestcount
  namespace: istio-system
spec:
  dimensions:
    destination: destination.labels[&quot;run&quot;] | destination.service | &quot;unknown&quot;
    user: request.auth.principal|&quot;unauthorized&quot;
</code></pre><p>We are using two dimensions, the user and the destination service so that we can have different limits for different backend services.</p><p>To do the actual counting:</p>
<pre><code class="yaml">apiVersion: config.istio.io/v1alpha2
kind: QuotaSpec
metadata:
  name: flow-api-quota
  namespace: default
spec:
  rules:
    - quotas:
        - quota: requestcount.quota.istio-system
          charge: 1
</code></pre><p>Istio rate limiting gives you the flexibility to &ldquo;charge&rdquo; more for requests that could be more expensive to execute, but in our case, we’ve decided to treat all the requests the same.</p><p>And last, we need to wire the counting with the backend service:</p>
<pre><code class="yaml">apiVersion: config.istio.io/v1alpha2
kind: QuotaSpecBinding
metadata:
  name: flow-api-quota-binding
  namespace: default
spec:
  quotaSpecs:
    - name: flow-api-quota
      namespace: default
  services:
    - name: flow-api
      namespace: default
</code></pre><h2>Enforcing usage quotas</h2><p>Now that we know who you are and how to count, we need to define what is a reasonable usage. We do this through a <a href="https://archive.istio.io/v0.6/docs/reference/config/adapters/memquota">Memory Quota adapter</a>:</p>
<pre><code class="yaml">apiVersion: config.istio.io/v1alpha2
kind: memquota
metadata:
  name: handler
  namespace: istio-system
spec:
  quotas:
  - name: requestcount.quota.istio-system
    maxAmount: 60
    validDuration: 10s
    overrides:
    - dimensions:
        destination: flow-api
      maxAmount: 20
      validDuration: 10s
</code></pre><p>So we allow up to ten requests per second for each user, except if the requests go to the Flow API, in which case we allow up to two requests per second.</p><p>Note that in production you will want to use a <a href="https://archive.istio.io/v0.6/docs/reference/config/adapters/redisquota">Redis Quota</a> instead of a Memory Quota, as the Memory Quota is ephemeral and local to the Mixer instance.</p><p>Finally, we create a policy rule to wire up the quota with the counters: </p>
<pre><code class="yaml">apiVersion: config.istio.io/v1alpha2
kind: rule
metadata:
  name: quota
  namespace: istio-system
spec:
  actions:
  - handler: handler.memquota
    instances:
    - requestcount.quota
</code></pre><h2>Testing</h2><p>Now, we can check that everything is working as expected and that no user is able to abuse the system. For the testing, we changed the quota to one request every three seconds. Here is the result:</p><p><iframe src="https://player.vimeo.com/video/260455239?title=0&byline=0&portrait=0" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></p><p>You can find a version of the test script <a href="https://github.com/akvo/akvo-platform/blob/issue-57/rate-limit-istio/istio/simple-check.sh">here</a> and all the code above <a href="https://github.com/akvo/akvo-platform/tree/b17ed526fa48d22e7ef7a2f37195302119309dca/istio/k8s">here</a>. </p><h2>Are we done?</h2><p>Istio allows us to ensure that all of our partners get a fair share of the resources, with a little bit of configuration and without having to modify or change any of our existing code, which is a big plus.</p><p>But rate limiting is just one part of making Akvo’s platforms more stable. Istio also comes with a lot more goodies to add to that stability, and to make it more secure, which for sure we will investigate in the near future.</p>]]>
</description>
</item>
<item>
<title>
Habits of efficient developers - slides
</title>
<link>
https://danlebrero.com/2018/05/17/habits-of-efficient-developers/
</link>
<guid>
https://danlebrero.com/2018/05/17/habits-of-efficient-developers/
</guid>
<pubDate>
Thu, 17 May 2018 00:00:00 +0200
</pubDate>
<description>
<![CDATA[<p>I was honored to talk this year at <a href="https://www.wearedevelopers.com/congress/">WeAreDevelopers 2018</a> about &ldquo;Habits of efficient developers&rdquo;.</p><p>Here are the slides in <a href="/slides/habits-of-efficient-developers.key">keynote format</a>, <a href="/slides/habits-of-efficient-developers.pptx">ppt format (untested!)</a> and <a href="https://www.slideshare.net/DanielLebrero2/habits-ofefficientdevelopers">SlideShare (quite broken!)</a>.</p>]]>
</description>
</item>
<item>
<title>
Did you read my email?
</title>
<link>
https://danlebrero.com/2018/04/30/did-you-read-my-email/
</link>
<guid>
https://danlebrero.com/2018/04/30/did-you-read-my-email/
</guid>
<pubDate>
Mon, 30 Apr 2018 00:00:00 +0200
</pubDate>
<description>
<![CDATA[<p>Dedicated with all my fondness to that good friend at <a href="https://www.ig.com">IG</a> that used to do this and never realized how extremely annoying it was.</p><p>Part of my upcoming conference talk &ldquo;Habits of efficient developers&rdquo; at <a href="https://www.wearedevelopers.com/congress/">WeAreDevelopers 2018</a>.</p>
<hr/><p>More about efficiency:</p>
<ol>
  <li><a href="/2017/08/01/efficient-developer-disable-notifications/#content">Disable notifications</a></li>
  <li><a href="/2017/08/02/efficient-developer-master-your-ide/#content">Master your IDE</a></li>
  <li><a href="/2017/08/03/efficient-developer-write-programs-for-yourself/#content">Write programs for yourself</a></li>
  <li><a href="/2017/09/01/a-docker-compose-environment/#content">Why to Docker Compose a calm environment</a></li>
  <li>Did you read my email? (you are here)</li>
  <li><a href="/2018/07/02/efficient-developer-rest-and-sleep/#content">Go and have a rest</a></li>
  <li><a href="/2018/07/04/habits-of-efficient-developers-wearedevelopers-2018-video/#content">The conference talk</a></li>
  <li><a href="/2019/02/18/other-reasons-for-test-driven-development-baby-steps-roi-evil-manager-watching-the-watchmen/#content">Other reasons for TDD: Baby steps, ROI, Evil Manager Syndrome and Watching the watchmen</a></li>
  <li><a href="/2020/09/16/where-test-driven-development-falls-short-find-a-good-repl/#content">Where TDD falls short, find yourself a good REPL</a></li>
</ol>]]>
</description>
</item>
<item>
<title>
Kafka, GDPR and Event Sourcing
</title>
<link>
https://danlebrero.com/2018/04/11/kafka-gdpr-event-sourcing/
</link>
<guid>
https://danlebrero.com/2018/04/11/kafka-gdpr-event-sourcing/
</guid>
<pubDate>
Wed, 11 Apr 2018 09:35:00 +0200
</pubDate>
<description>
<![CDATA[<p>You probably already know that the EU has approved this nice piece of legislation called GDPR (<a href="https://en.wikipedia.org/wiki/General_Data_Protection_Regulation">General Data Protection Regulation</a>) that gives us back some control over our personal data.</p><p>From a technical point of view, if you have bought into Event Sourcing and Kafka, it is of special interest GDPR’s &ldquo;right to erasure&rdquo; (aka. forget everything that you know about me), as it is at odds with the idea of an immutable event log that does not forget anything. </p><p>To handle GDPR in an event sourced architecture, here are the most interesting options:</p>
<ol>
  <li><p>Removing data from projections might be good enough. A suggestion from <a href="https://twitter.com/michieltcs">Michiel Rook&rsquo;s</a> <a href="https://www.michielrook.nl/2017/11/event-sourcing-gdpr-follow-up/">blog</a> is that maybe is enough to remove the data from the projections/read models, and there is no need to touch the data in the event store. If this option is within the law, the &ldquo;right to erasure&rdquo; becomes just another event that projections need to handle. A perfect fit for Event Sourcing.</p></li>
  <li><p>Deleting/updating Kafka messages: <a href="https://twitter.com/benstopford">Ben Stopford</a> <a href="https://www.confluent.io/blog/handling-gdpr-log-forget/">reminds us</a> that in Kafka you can &ldquo;delete&rdquo; and &ldquo;update&rdquo; messages if you are using a compacted topic, which means that to comply with the &ldquo;right to erasure&rdquo;, we need to find all the events for a user and for each send a new message with the same key (the event id) and a null (or updated) payload. </p><p>The main concern with this approach is that the event store is no longer immutable, so it will be very tempting to use the same loophole in other non-GDPR situations. </p></li>
  <li><p>Encryption: Another suggestion from <a href="https://www.michielrook.nl/2017/11/forget-me-please-event-sourcing-gdpr/">Michiel’s blog</a> is to encrypt all the messages for a particular user with a key, and when the user want to exercise its &ldquo;right to erasure&rdquo;, we just need to forget the encryption key.</p><p>The issue with this approach in the key management. In Michiel’s words: &ldquo;storing, finding and retrieving the right encryption key &hellip; becomes especially interesting at scale&rdquo;. And because it is interesting, let&rsquo;s dive into a possible solution.</p></li>
</ol><h2>Highly available, highly scalable RESTful KeyManagement service</h2><p>Synchronous HTTPS? Seriously?</p><h2>The Kafka way</h2><p>Assuming that you are already storing your data in Kafka, and given that Kafka is able to handle data at scale, why not use Kafka itself to store and retrieve the encryption keys?</p><p>Let’s start with a picture of how our architecture could look like:</p><p><img src="/images/blog/kafka-gdpr/kakfa-gdpr-encryption-architecture.png" alt="Kafka GDPR encryption architecture" title="Kafka GDPR encryption architecture" /></p><p>Your <code>Event Producer</code> is your regular service that pushes unencrypted data to some <code>To-Encrypt</code> topic.</p><p>To comply with GDPR, this topic will have some reasonably short time-based retention policy, so that Kafka deletes the data after that time, but remember that the retention period should be longer than your expected downtime of the <code>Encryptor</code> service, as if the <code>Encryptor</code> service is down for longer, Kafka may delete the data before it is encrypted and safely stored in the <code>Encrypted-Data</code> topic.</p><p>The <code>Encryptor</code> service will take care of encrypting any message and generating new encryption keys for new users. It leverages Kafka Streams state management to keep a local copy of the encryption keys for the partitions that each instance owns, so that looking up an encryption key will be at most a disk seek.</p><p>This application also has to react to the user exercising his right to be forgotten by deleting the local copy of the encryption key from its state, and by deleting the encryption key from the <code>Encryption-keys</code> topic.</p><p>The <code>Encrypted-Data</code> topic will be where the events are stored forever, with no retention policies. This is your event log.</p><p>The <code>Encryption-Keys</code> topic will be a compacted topic. When it is time to forget the user, the <code>Encryptor</code> service will just send a tombstone to override the user’s encryption key, so it is lost forever and nobody will be able to decrypt its data again.</p><p>To decrypt the data, the <code>Event Consumer</code> will basically will need to do a join of the <code>Encrypted-data</code> topic with the <code>Encryption-Keys</code> topic. Again, we will rely on Kafka Streams state management to keep a local copy of the encryption keys. </p><p>Similar to the <code>Encryptor</code>, the <code>Event Consumer</code> will need to react appropriately when the user request to be forgotten, both by deleting the local encryption key and any other state associated with that user. </p><p>This architecture looks fabulous from this ivory tower. </p><p><a href="https://www.pedabe-concept.de" title="The Ivory Tower"><img src="/images/blog/kafka-gdpr/kafka-ivory-tower.jpg" alt="ivory tower" /></a><br/><span style="background-color: #ecf0f1"><small>Image attribution: <a href="https://www.pedabe-concept.de" title="The Ivory Tower">The Ivory Tower</a> by <a href="https://www.pedabe-concept.de">Peter Bartels</a>.</small></span></p><h3>Implementation details</h3><p>If you want to get your hands dirty, the implementation details are <a href="/2018/04/11/kafka-gdpr-event-sourcing-implentation/#content">here</a>. </p><h2><a name="conclusions"></a>Conclusions</h2><p>In summary, we comply with GDPR because our <code>to-encrypt</code> topic has a short time-based retention policy, our encryption keys are in a compacted topic and our event log is encrypted with a per-user encryption key. </p><p>Also, our applications have to handle a new &ldquo;forget me&rdquo; event type and erase any PII data that they may store.</p><p>As we saw, the implementation is not rocket science, but it raises some more challenges:</p>
<ol>
  <li>Do we encrypt the whole message or just a subset? If it is just a subset, how do we handle schemas? If not a subset, we lose all the data, even the non-PII one.</li>
  <li>Can we reuse the same encryptor for multiple topics? If so, topics must be copartition. If not, we will need to separate the key generation from the encryptors, so the encryption keys can be repartition.</li>
  <li>Even if the decryption is transparent to the consumer, it still needs to handle the &ldquo;forget me&rdquo; special case.</li>
  <li>You will need to choose an encryption algorithm that is fast enough and secure enough. Can you afford an additional 1 or 10 milliseconds processing time to each message? In theory, if the consumer is up to date, it can always consume directly from the to-encrypt topic.</li>
  <li>A comment in <a href="https://www.michielrook.nl/2017/11/event-sourcing-gdpr-follow-up/#comment-16405">Michiel blog</a> points out that forgetting the key is not enough. Every few years, we also need to <a href="https://www.keylength.com/en/">update encryption algorithms</a>, which means we need to encrypt everything again.</li>
</ol><p>So it seems possible to use encryption to handle event sourcing data in Kafka, but is it better than the other options? For sure it is worse than removing data from projections, if this is an option at all. But, is it better than just using a compacted topic to store the event log as Ben Stopford suggests? </p><p>Well, how much do you value immutability? That much?!?! That little?!?!</p>]]>
</description>
</item>
<item>
<title>
Kafka, GDPR and Event Sourcing - Implementation details
</title>
<link>
https://danlebrero.com/2018/04/11/kafka-gdpr-event-sourcing-implentation/
</link>
<guid>
https://danlebrero.com/2018/04/11/kafka-gdpr-event-sourcing-implentation/
</guid>
<pubDate>
Wed, 11 Apr 2018 09:45:00 +0200
</pubDate>
<description>
<![CDATA[<p>This post contains the implementation details of <a href="/2018/04/11/kafka-gdpr-event-sourcing#content">this other post</a> about a possible architecture for Kafka, GDPR and Event Sourcing. Please read that other post for context and conclusions.</p><p>The proof of concept (PoC) uses Kafka Streams API and all code, including a docker-compose environment to test it, is <a href="https://github.com/dlebrero/kafka-gdpr-event-sourcing">here</a>. </p><h2>Event producer</h2><p>Nothing interesting.</p><h2>Encryptor</h2><p>The encryptor job is pretty easy: the first time that it sees a key, it needs to generate a new encryption key, store it and push it to the <code>encryption-keys</code> topic for other consumer. In code:</p>
<pre><code class="clojure">(defn get-or-create-encryption-key [^KeyValueStore store ^ProcessorContext ctx k]
 (if-let [encryption-key (.get store k)]
   encryption-key
   (let [new-encryption-key (generate-encryption-key)]
     (.put store k new-encryption-key)
     (.forward ctx k new-encryption-key &quot;encryption-keys&quot;)
     new-encryption-key)))
</code></pre><p>This means that we are storing the key twice: once in the store changelog and once in the <code>encryption-keys</code> topic. This is ok as we dont want to couple the implementation details of the encryptor (what we store in the changelog) with what the consumers need. For example, if we decided to use an asymmetric algorithm, the store will have the private key while the <code>encryption-keys</code> topic would have the public one.</p><p>After we have the encryption key, in the PoC we just encrypt the whole value of the message and forward it to the encrypted Kafka topic, but during the implementation it raised the question about whether it would be more appropriate to encrypt just the PII data within the message. Some possible options:</p>
<ol>
  <li>The value to have two fields: PII and non-PII. If the encryption key is deleted, the PII field will be deserialized to null.</li>
  <li>Have PII events and non-PII events, in the same or different topics, depending if ordering between them is important or not.</li>
  <li>When the user exercises the right of erasure, before deleting the encryption key, push a event with the non-PII data that we want to retain.</li>
</ol><p>The second option seems the simplest one.</p><p>The Encryptor also listen to the GDPR messages and when the user exercises the right to erasure, we store a tombstone both in the local store and in the <code>encryption-keys</code> topic: </p>
<pre><code class="clojure">(defn handle-gdpr [^KeyValueStore store ^ProcessorContext ctx k _]
 (.put store k common/tombstone)
 (.forward ctx k common/tombstone))
</code></pre><p>We will explain in the Event Consumer why a tombstone and not just delete the record.</p><p>Another decision that we need to make is what to do if the encryptor gets a message after the user has exercised the right to erase: </p>
<ol>
  <li>Create a new key for all the new messages, so new messages will be readable. In this case, we don&rsquo;t need to store a tombstone in the local store.</li>
  <li>Ignore the message, basically deleting it.</li>
  <li>Create a new key just for the event, and never store the key, effectively creating an unreadable event.</li>
</ol><p>It will depend on a business decision, but either the first or last options seem like the most sensible ones.</p><h3>Reusable Encryptor</h3><p>Ideally, we don&rsquo;t want to change the Encryptor every time there is a new topic that needs to be encrypted.</p><p>While KafkaStreams allows to subscribe to a set of topics based on a regular expression, and it will subscribe to newly created topics that match that expression, there is no obvious way to publish a message to an arbitrary topic. </p><p>Maybe the correct way is to provide a <a href="https://github.com/apache/kafka/blob/b8f8ce4146af4fbc7ae40380f1ff251b05bd8773/streams/src/main/java/org/apache/kafka/streams/KafkaClientSupplier.java#L27">KafkaClientSupplier</a> to the <a href="https://github.com/apache/kafka/blob/b8f8ce4146af4fbc7ae40380f1ff251b05bd8773/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java#L546">KafkaStreams</a>, so that both our code and the KafkaStreams code use the same Kafka producer, but we decided to do what a <a href="https://github.com/apache/kafka/blob/3bedcce01b9d3e8ba0516fa33eb59d57817ce27e/streams/src/main/java/org/apache/kafka/streams/processor/internals/SinkNode.java#L79">SinkNode</a> does:</p>
<pre><code class="clojure">(defn send [^ProcessorContext ctx k v]
 (let [rc ^RecordCollector (.recordCollector ^RecordCollector$Supplier ctx)]
        (.send rc
            (encrypted-topic-name (.topic ctx))
            k v (.timestamp ctx)
            (-&gt; ctx .keySerde .serializer)
            (-&gt; ctx .valueSerde .serializer)
            nil))))
</code></pre><p>Never a good idea to use an internal api, but good enough for the PoC.</p><p>But even if this solves the problem of sending messages to an arbitrary topic, there is a bigger problem: to be able to reuse the Encryptor, all input topics must be copartition (aka. must have the same number of partitions). </p><p>If the topics do not have the same number of partitions, then two messages for the same user in different topics can end up in different instances of the Encryptor service, which means that each instance will generate an encryption key and push it to the <code>encryption-keys</code> topic, one overwriting the other, making some messages unreadable.</p><p>If the topics have the same number of partitions, then the <a href="https://github.com/apache/kafka/blob/4a274bc9fd2ac3714788af0429fde8945a48636f/clients/src/main/java/org/apache/kafka/clients/consumer/RangeAssignor.java#L29">default partition assignor</a> will distribute the partitions between the Encryptor instances so that partition 1 for <strong>all topics</strong> is consumed by one consumer, partition 2 for all topics is consumed by another consumer, etc… This way all message for a given user end up in the same instance, even from different topics. </p><p>As copartitioning all topics is unlikely to be desirable, we probably need to split the Encryptor in two: one app to generate the encryption keys and another one to do the actual encryption. Something like:</p><p><img src="/images/blog/kafka-gdpr/kafka-gdpr-split.png" alt="Kafka GDPR encryption architecture reuse" title="Kafka GDPR encryption architecture - reuse" /></p><p>This way, the encryption app can repartition the encryption keys if required.</p><h2>Event Consumer</h2><p>The event consumer has to join the events from the <code>encrypted-data</code> topic (a KStream) with the <code>encryption-keys</code> (a KTable). </p><p>Unfortunately, even if Kafka Streams tries to give you <a href="https://docs.confluent.io/3.0.0/streams/architecture.html#streams-architecture-flow-control">some control</a> over the order on which messages are processed, some testing showed that if there are a lot of events in the <code>encrypted-data</code> topic, the first batch of events will all come from this topic and none from the <code>encryption-keys</code> topic, which means that none of the events was decrypted because none of the encryption keys was known at that time.</p><p>So we ended up building our own join-like topology, that will remember which events are missing the encryption key and will process those events once the encryption key shows up. </p><p>For this topology, processing the encrypted data is pretty simple:</p>
<pre><code class="clojure">(defn encrypted-data-msg [^KeyValueStore missing-store
                         ^KeyValueStore encryption-keys-store
                         ^ProcessorContext ctx
                         k
                         encrypted-item]
 (if-let [encryption-key (.get encryption-keys-store k)]
   (.forward ctx k [encryption-key encrypted-item])
   (.put missing-store (lexicographic-ordered-key k (.partition ctx) (.offset ctx)) encrypted-item))
</code></pre><p>So if the encryption key is known, we forward the encryption key and the encrypted value pair to the next step, the actual decryption.</p><p>If the encryption key is not known yet, we store the event. But when the encryption key arrives, we will want the order of events to remain intact, hence we need to somehow remember the arrival order. There are two possible options:</p>
<ol>
  <li>Store as key the user, and as value a list of events.</li>
  <li>Store as key the user + event offset, and as value the event.</li>
</ol><p>In the PoC we chose the second option, as there could be an unbounded amount of events for a user, so we would need an unbounded amount of memory to deserialize them for processing or updating.</p><p>Lets see how we use it when the encryption key arrives:</p>
<pre><code class="clojure">(defn encryption-key-msg [^KeyValueStore missing-store
                         ^KeyValueStore encryption-keys-store
                         ^ProcessorContext ctx
                         k
                         encryption-key]
 (.put encryption-keys-store k encryption-key)
 (with-open [encrypted-items (.range missing-store
                                 (lexicographic-ordered-key k 0 0)
                                 (lexicographic-ordered-key k Integer/MAX_VALUE Integer/MAX_VALUE))]
   (doseq [^KeyValue encrypted-item (iterator-seq encrypted-items)]
     (.delete missing-store (.key encrypted-item))
     (when-not (common/tombstone? encryption-key)
       (.forward ctx k [encryption-key (.value encrypted-item)])))
   (when (common/tombstone? encryption-key)
     (.forward ctx k [encryption-key nil]))))
</code></pre><p>Notice that we are using the <a href="https://github.com/apache/kafka/blob/39d5cdcccfc0f7d7893188bb22580da0c842a993/streams/src/main/java/org/apache/kafka/streams/state/ReadOnlyKeyValueStore.java#L51">range method</a>, that even if it doesn&rsquo;t guarantee an order, the actual RocksDB implementation does. Another implementation detail that we should not depend on.</p><p>Even if this implementation guarantees the order of events for a given user, notice that it doesn&rsquo;t guarantee any order between users, so it is possible that during decryption there is some reordering of some messages. To guarantee the order of all messages, we would need to store every message after the first one missing the encryption key, even for those that we already know the encryption key.</p><p>Last, we prefer a tombstone in the <code>encrypted-keys</code> topic, over just deleting the encryption key, so that the consumer can clean up any events for that user. If we did not store a tombstone, the consumers could store events in their local store forever.</p><p>Back to <a href="/2018/04/11/kafka-gdpr-event-sourcing#conclusions">Kafka, GDPR and Event Sourcing</a>.</p>]]>
</description>
</item>
<item>
<title>
Kafka, distributed coordination and the actor model
</title>
<link>
https://danlebrero.com/2018/04/09/kafka-distributed-coordination-actor-model/
</link>
<guid>
https://danlebrero.com/2018/04/09/kafka-distributed-coordination-actor-model/
</guid>
<pubDate>
Mon, 09 Apr 2018 10:00:00 +0200
</pubDate>
<description>
<![CDATA[<p>It seems that this <a href="/2017/01/05/proof-of-concept-using-kafkastreams-and-ktables/#content">blog post</a> did not properly explain what it meant to replace Zookeeper with Kafka as the coordination mechanism for a cluster of services.</p><p>In the example, we had several instances of a service and they had to agree about which one would send an email to which clients, so they had to somehow coordinate amongst themselves to agree on who would do the work and for what subset of clients.</p><p>The blog post explains that KTables are conceptually equivalent to a database table, and some people understood that KTables were the mechanism used to do the coordination, by querying/updating the KTable state to signal or lock a record.</p><p>But this is far from what I meant.</p><h2>Kafka as coordinator</h2><p>KTables are built on top of Kafka and they do not provide any additional coordination mechanism other than what Kafka already provides: a <strong>leader election</strong> mechanism.</p><p>Let’s go back to basics to understand what we mean:</p>
<ol>
  <li>A Kafka topic is divided into one or more partitions.</li>
  <li>By <a href="https://kafka.apache.org/documentation/#design_loadbalancing">default</a>, messages with the same key go to the same partition.</li>
  <li>Within a <a href="http://kafka.apache.org/documentation.html#intro_consumers">Consumer Group</a>, Kafka will make sure that only one consumer receives all the messages for a particular partition.</li>
</ol><p>In a picture: </p><p><img src="/images/blog/kafka-actors/kafka-partitions.png" alt="kafka topic partitioning" title="Kafka partition distribution" /></p><p>In our case, if all trading positions for a given client are keyed by the client id, then all messages will end up in the same partition, which means that they all will end up consumed by one and only one of the service’s instances, which is the same as saying that the instance owns or is the “leader” for that particular client.</p><h2>Actors, agents and distributed data grids</h2><p>Furthermore, the Kafka consumer within an instance is single-threaded, which means that we have one and just one thread that owns a client, so that thread can make local reasonings about the state of the client without having to coordinate with other threads or service instances.</p><p>This is exactly the same concurrency write model as <a href="https://en.wikipedia.org/wiki/Actor_model">Erlang actors</a> or <a href="https://clojure.org/reference/agents">Clojure agents</a>: </p><p><img src="/images/blog/kafka-actors/kafka-actor-model.png" alt="kafka actor model" title="Actor model" /></p><p>Basically, some state updated by a single thread/process, which reads actions from a queue (well, in Erlang <a href="http://www.dalnefre.com/wp/2011/10/erlang-style-mailboxes/">it is not a simple queue</a>). </p><p>The beauty behind this model is that it is simpler to reason about state changes, as there is always one thread manipulating the state, so your code doesn&rsquo;t need to worry about synchronization or concurrent access to the data.</p><p>Additionally, as Kafka distributes the partitions between consumers, it is distributing the state of all these actors amongst the instances of your service cluster, so that each instance has to deal with just a subset of the data, much similar to what a data grid provides.</p><p>To update some data in a data grid you can follow the read-update-save pattern, but most data grids provide a <a href="https://docs.oracle.com/cd/E14526_01/coh.350/e14509/transactionslocks.htm#COHDG116">performance</a> <a href="http://docs.hazelcast.org/docs/3.9.2/manual/html-single/index.html#data-affinity">optimization</a> were you can send the operation to the data, as it is less chatty and the grid can optimize any locks required access the data. This optimized pattern is what Kafka Stream applications must follow.</p><p>Note that KafkaStream applications provide a different read model than actors, agent or data grids: you either push the state to another Kafka topic for any party interested or you have to build your own API to expose that state.</p><p>So you can think of Kafka Stream as a distributed agent model with built-in durability, and Kafka’s scalability, fault tolerance, partitioning and transactional model.</p><h2>Example: deduplication of requests</h2><p>Lets see a practical example from <a href="http://disq.us/p/1p5usrq">this comment</a>: </p><p><em>I want multiple clients to be able to put messages in a &ldquo;run request&rdquo; topic. If I&rsquo;m already running when I receive the request, I don&rsquo;t want to do anything. If I&rsquo;m not running, I want to initiate (send a message) to a &ldquo;run command&rdquo; topic. I believe that a KTable that holds the running state is the answer. I can&rsquo;t figure out what the kafka streams processor would look like for this as it reads and writes to the &ldquo;run command&rdquo; KTable.</em></p><p>As we said before, because KTables are build on asynchronous message passing, we cannot expect several clients to agree on the state of a <em>run command</em> and change it transactionally. Instead, we need Kafka to designate a leader for a particular <em>run command</em>, so that leader can make the decision about which one of the client commands to run.</p><p>The first thing that we need to do is create a key that is the same for all the commands that we want to deduplicate, but different from other <em>run commands</em>. This key will identify the leader/actor.</p><p>Then all clients send their version of the run command with that same key, so that all commands end up in the same Kafka partition. </p><p>As there will only be one consumer for that particular partition, that consumer is effectively the leader of all the keys (or <em>run commands</em>) that end up in that partition. That consumer will just act on the first <em>run command</em>, update its state and ignore the rest of commands.</p><p>In code:</p>
<pre><code class="clojure">(defn run-first-command [^KeyValueStore store ctx k v]
 (if (.putIfAbsent store k true)
   (println &quot;Ignoring command&quot; v &quot;for key&quot; k)
   (println &quot;Running command&quot; v &quot;for key&quot; k)))

(defn create-kafka-stream-topology []
 (let [^KStreamBuilder builder (KStreamBuilder.)
       store (-&gt; (Stores/create &quot;run-command-state&quot;)
                 .withStringKeys
                 (.withValues (EdnSerde.))
                 .persistent
                 .enableCaching
                 .build)
       builder (-&gt; builder
                   (.addSource &quot;raw-data&quot; (into-array [&quot;raw-data&quot;]))
                   (.addProcessor &quot;run-command-processor&quot;
                                  (processor run-first-command &quot;run-command-state&quot;)
                                  (into-array [&quot;raw-data&quot;]))
                   (.addStateStore store (into-array [&quot;run-command-processor&quot;])))]
   builder))
</code></pre><p>You can find the complete code <a href="https://github.com/dlebrero/kafka-dedup">here</a>.</p><p>Some notes:</p>
<ol>
  <li>Kafka Streams is just a library, so the <em>run command</em> app can run in the same process as the clients if we consider it more appropriate.</li>
  <li>If you are more used to the actor model, this is equivalent to several processes sending each a <em>run command</em> message to an actor. The <em>run command</em> key would be the identifier of the actor.</li>
  <li>Kafka Streams will store the state of the <em>run command</em> actor/leader in Kafka.</li>
  <li>If you require exactly-once semantics, Kafka Streams will <a href="https://www.confluent.io/blog/exactly-once-semantics-are-possible-heres-how-apache-kafka-does-it/">take care of it</a> if the side effect of your <em>run command</em> is sending a message to another Kafka topic. For other kinds of side effects, your application needs to be <a href="https://medium.com/@jaykreps/exactly-once-support-in-apache-kafka-55e1fdd0a35f">carefully designed</a>.</li>
  <li>Just because you can do it, it doesn&rsquo;t mean that this kind of solution is the best one for your particular context. Maybe Redis <a href="https://redis.io/commands/setnx">put-if-absent</a> is more appropriate for this case.</li>
</ol><h2>Summary</h2><p>I hope this clarifies how to use Kafka Streams to design your applications. </p><p>Even if Kafka just provides a leader election mechanism, it is a powerful one.</p><p>First, it makes reasoning about state a lot simpler because there is always just one thread manipulating the state, hence you don’t need to worry about synchronization or distributed locks. Kafka Streams makes persisting that state a breeze.</p><p>Second, it provides a sharding mechanism. As each partition will be owned by just one instance, Kafka is effectively distributing the data across your service instances, so each just has to handle a subset of it.</p><p>And all on top of the other Kafka’s niceties. </p>]]>
</description>
</item>
<item>
<title>
Production data never lies
</title>
<link>
https://danlebrero.com/2018/03/20/production-data-never-lies/
</link>
<guid>
https://danlebrero.com/2018/03/20/production-data-never-lies/
</guid>
<pubDate>
Tue, 20 Mar 2018 00:00:00 +0100
</pubDate>
<description>
<![CDATA[<p><em>This article originally appeared on <a href="https://akvo.org/blog/production-data-never-lies/">Akvo&rsquo;s blog</a></em></p><p>The Akvo engineering team has bought into the idea of an <a href="https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying">immutable data log</a> as the backbone of our architecture, which we hope will make it easier to integrate Akvo systems and build new functionalities. More importantly, it will treat data as a first-class citizen; as the valuable thing that it really is.</p><h2>Automatic schema generation</h2><p>One of the first tasks is to move all the data in <a href="https://akvo.org/products/akvoflow/#overview">Akvo Flow</a> from its current storage, Google Cloud Datastore, to the immutable data log, which in our case is <a href="https://kafka.apache.org/">Kafka</a>. </p><p>Given the value of data, as well as the fact that we expect Akvo to be around for many years to come and know that our software is going to evolve, we want to enforce some degree of quality on the data. So instead of chucking <a href="https://www.reddit.com/r/javascript/comments/10st04/what_is_a_json_blob/">JSON blobs</a> into Kafka, we&rsquo;ve decided to use the <a href="https://www.confluent.io/blog/schema-registry-kafka-stream-processing-yes-virginia-you-really-need-one/">Confluent Schema Registry</a>.</p><p>The Schema Registry will ensure that any data added to Kafka will comply with a schema, and that as data evolves, new schemas will remain compatible with old schemas, so that old data can always be read. As the Schema Registry only supports <a href="https://avro.apache.org/">Avro schemas</a>, we need to generate one schema for each of the existing classes in Akvo Flow before we can start the migration. </p><p>Thankfully, the Java Avro library comes with the ReflectData utility that is able to generate an Avro schema from a Java class, so we don&rsquo;t need to do this chore by hand. </p><p>If we try it on one of Akvo Flow&rsquo;s classes <a href="https://github.com/akvo/akvo-flow/blob/79d5cebe7e985e93ed7c3a732d8360869bfc651b/GAE/src/com/gallatinsystems/surveyal/app/web/SurveyalRestServlet.java">SurveyedLocale</a>, ReflectData generates the following:</p>
<pre><code class="json">{
  &quot;type&quot;: &quot;record&quot;,
  &quot;name&quot;: &quot;SurveyedLocale&quot;,
  &quot;namespace&quot;: &quot;com.gallatinsystems.surveyal.domain&quot;,
  &quot;fields&quot;: [
    {
      &quot;name&quot;: &quot;systemIdentifier&quot;,
      &quot;type&quot;: &quot;string&quot;
    },
    ...
    {
      &quot;name&quot;: &quot;surveyalValues&quot;,
      &quot;type&quot;: {
        &quot;type&quot;: &quot;array&quot;,
        &quot;items&quot;: {
          &quot;type&quot;: &quot;record&quot;,
          &quot;name&quot;: &quot;SurveyalValue&quot;,
          &quot;fields&quot;: [
            ...
            {
              &quot;name&quot;: &quot;stringValueText&quot;,
              &quot;type&quot;: {
                &quot;type&quot;: &quot;record&quot;,
                &quot;name&quot;: &quot;Text&quot;,
                &quot;namespace&quot;: &quot;com.google.appengine.api.datastore&quot;,
                &quot;fields&quot;: [
                  {
                    &quot;name&quot;: &quot;value&quot;,
                    &quot;type&quot;: &quot;string&quot;
                  }
                ]
              }
            }
          ]
        },
        &quot;java-class&quot;: &quot;java.util.List&quot;
      }
    },
    ...
    {
      &quot;name&quot;: &quot;key&quot;,
      &quot;type&quot;: &quot;com.google.appengine.api.datastore.Key&quot;
    },
    {
      &quot;name&quot;: &quot;ancestorIds&quot;,
      &quot;type&quot;: {
        &quot;type&quot;: &quot;array&quot;,
        &quot;items&quot;: &quot;long&quot;,
        &quot;java-class&quot;: &quot;java.util.List&quot;
      }
    }
  ]
}
</code></pre><p>You can find the full schema on <a href="https://gist.github.com/dlebrero/f7c2bda8477112f5a8bb2f7d3ad91f62#file-reflectdata-json">Github</a>.</p><p>This is a good starting point, and we could further improve it by making Avro somehow honour the <a href="https://github.com/akvo/akvo-flow/blob/4fb17f24c758a595427a6109b1ce7609163544b0/GAE/src/com/gallatinsystems/surveyal/domain/SurveyedLocale.java#L71">fields marked as @NotPersistent</a>, so they are not included in the final schema. </p><p>But, and this is a big but, there is no hint about which fields are mandatory and which ones are optional, neither is there a clue about what values are valid for those strings, longs and doubles.</p><p>We could dig into the code to find the validation rules, but even if we did that for every single one of the classes, Google Cloud Datastore doesn&rsquo;t enforce any schema, so even if this class is the current view of the data, those rules may have changed over the years, and we don&rsquo;t really know what is in the datastore. </p><p>Alternatively, you could ask around and hope that somebody has been around for years and has a prodigious memory, plus that there has never been any bug that allowed for invalid data to reach the datastore, plus that any business changes were reflected with flawless data migrations.</p><h2>A data-driven approach</h2><p>But there is a more obvious source of truth: the actual production data. Why not generate the Avro schemas directly from what the production data tell us? At the end of the day, that is what we need to support and contains examples of all possible values that are actually used. </p><p>To help us with this task, we decided to use <a href="https://github.com/stathissideris/spec-provider">Spec-Provider</a>, which is a Clojure library that, when given a list of objects, will generate a <a href="https://clojure.org/about/spec">Clojure Spec</a>. If you are unfamiliar with Clojure Spec, you can think about it as a schema DSL on steroids. </p><p>But Clojure Spec is not relevant to this discussion, as Spec-Provider has two distinct phases: one to generate statistics about the data types and another to generate the Clojure Specs given those statistics. We&rsquo;ll use just the first step and do the transformation to Avro ourselves.</p><p>So after pulling all the data from Google Cloud Datastore and transforming the <a href="https://cloud.google.com/appengine/docs/standard/java/javadoc/com/google/appengine/api/datastore/Entity">Entities</a> to <a href="https://github.com/akvo/akvo-flow-initial-kafka-import/blob/0291f923f08c2b3df4a8467aa9a74e4c772fd7d7/src/gae_to_kafka_initial_import/gae_entity.clj">Clojure maps</a>, Spec-Provider provides us with the following stats:</p>
<pre><code class="clojure">{:pred-map        {map? {:max-length   27,
                          :min-length   21,
                          :sample-count 463417}}
 :sample-count    463417
 :map             {:keys  {:ambiguous   {:distinct-values #{false}, 
                                         :pred-map        {boolean? {:sample-count 463417}},
                                         :sample-count    463417},
                           :ancestorIds {:distinct-values #{nil},
                                         :pred-map        {nil? {:sample-count 440212}},
                                         :sample-count    440212},
                           :countryCode {:distinct-values           #{nil
                                                                      &quot;RU&quot;
                                                                      &quot;MN&quot;
                                                                      &quot;UG&quot;},
                                         :hit-distinct-values-limit true,
                                         :pred-map                  {string? {:max-length   2,
                                                                              :min-length   2,
                                                                              :sample-count 165067},
                                                                     nil?    {:sample-count 298350}},
                                         :sample-count              463417},
                           ...
                          }
                   }
}
</code></pre><p>You can find the full stats on <a href="https://gist.github.com/dlebrero/f7c2bda8477112f5a8bb2f7d3ad91f62#file-stats-edn">Github</a>.</p><p>The first few lines tell us that all entities are maps that have between 21 and 27 fields. They also tell us that we sampled almost 500k entities. The way Spec-Provider works, you can add as many entities as you want without the risk of running out of memory. Then the Spec-Provider stats lists all fields with their type, a subset of the possible values, min and max length for strings and lists. </p><p>With a <a href="https://github.com/akvo/akvo-flow-initial-kafka-import/blob/0021a6eef6804bd28a957aa8ed1e0a27331c4b14/src/gae_to_kafka_initial_import/avro_schema.clj">little bit of code</a>, we can transform those statistics into an Avro schema:</p>
<pre><code class="clojure">{:type &quot;record&quot;,
 :name &quot;SurveyedLocale&quot;,
 :fields ({:name &quot;ambiguous&quot;, :type &quot;boolean&quot;, :doc &quot;It is always &#39;&lt;false&gt;&#39;. &quot;}
           {:name &quot;ancestorIds&quot;, :type &quot;null&quot;, :doc &quot;Always nil&quot;}
           {:name &quot;countryCode&quot;, :type (&quot;null&quot; &quot;string&quot;), :doc &quot;Examples: &lt;RU&gt;, &lt;MN&gt;, &lt;TD&gt;. Size [2,2]. Nil 64.38%&quot;}
           {:name &quot;surveyInstanceContrib&quot;,
            :type (&quot;null&quot;
                    {:type &quot;array&quot;,
                     :items {:type &quot;long&quot;, :doc &quot;Examples: &lt;1520050&gt;, &lt;2310465&gt;, &lt;1840061&gt;. Range [1520050,2043500042]. &quot;}}),
            :doc &quot;Size [1,88]. Nil 3.33%&quot;}
           ...
           ),
 :doc &quot;Size [21,27]. &quot;,
 :namespace &quot;org.akvo.flow&quot;}
</code></pre><p>You can find the full schema on <a href="https://gist.github.com/dlebrero/f7c2bda8477112f5a8bb2f7d3ad91f62#file-final-schema-edn">Github</a>.</p><p>Looking at this schema, we see some pretty interesting stuff:</p>
<ul>
  <li>The “ambiguous” field is always false. Not a very useful flag.</li>
  <li>There are 11 fields that are always null. Why do we need them?</li>
  <li>Of the 27 fields, 22 fields that can be null. This reminds me of Rich Hickey’s last rant on the <a href="https://www.youtube.com/watch?v=2V1FtfBDsLU&feature=youtu.be&t=49m57s">Maybe type</a>.</li>
  <li>The “localeType” field is null on 0.003% of the entities. You can guess the answer if you asked the team if this field was mandatory.</li>
  <li>CountryCode is always a two letter string.</li>
  <li>The display name can be the empty string.</li>
  <li>The surveyInstanceContrib array can have up to 88 items.</li>
  <li>The latitude/longitude coordinates have invalid data as the range is [-1307822.0,698259771924] or maybe the data is not from this planet.</li>
  <li>We don’t need to handle @NotPersistent fields.</li>
  <li>There are some real examples in the doc, which can come pretty handy.</li>
  <li>This information and the schemas give us a much better starting point than the one before.</li>
</ul><p>This information and the schemas give us a much better starting point than the one before.</p><h2>What’s next?</h2><p>Of course, this approach is not exclusively to produce Avro schemas. You can also produce other kinds of schemas, like <a href="https://developers.google.com/protocol-buffers/">Protocol Buffers</a>, or maybe even directly generate your classes. </p><p>The Avro type system is not very rich. The best we can do with all the extra information is to put it in a doc, but we could supplement it by generating some code to make those additional checks.</p><p>In the case of Akvo Flow, we have dozens of entities, with dozens of fields each. With the stats at hand, we can easily create a list of suspicious fields: either fields with a tiny percentage of nulls (like the 0.003% one), which probably denote a bug or data corruption, or fields with a huge percentage of nulls, which probably denote an unused feature that we might remove.</p><p>To be able to use this approach, you need a big enough dataset, and even then, it might not be representative of the future data. For us, more than five years of data and several million rows gives us more confidence than digging around the code, asking the experts or making assumptions.</p><p>Maybe you don’t like what it tells you, but production data never lies.</p>]]>
</description>
</item>
<item>
<title>
Easing open source contributions with Docker
</title>
<link>
https://danlebrero.com/2018/02/13/easing-open-source-software-development-with-docker/
</link>
<guid>
https://danlebrero.com/2018/02/13/easing-open-source-software-development-with-docker/
</guid>
<pubDate>
Tue, 13 Feb 2018 00:00:00 +0100
</pubDate>
<description>
<![CDATA[<p><em>This article originally appeared on <a href="https://akvo.org/blog/easing-open-source-contributions/">Akvo&rsquo;s blog</a></em></p><p>At <a href="https://akvo.org">Akvo</a>, we believe that open source software provides <a href="https://akvo.org/blog/open-data-content-and-software-at-akvo/">substantial benefits</a> for organisations in the international development sector. Nowadays, we expect a high quality and rich feature set from any software that we use. </p><p>Thanks to open source software, relatively small organisations and development teams are able to build sophisticated and feature-rich applications by virtue of gluing together pre-existing open source software components in unique or specific ways. </p><p>To be able to reuse all those pieces is awesome, as it is a lot less complex to assemble existing components than it is to create them from scratch.</p><p>But that assembly can become a beast from your worst IKEA nightmare:</p><p><img src="/images/blog/akvo-docker/ikea-instructions.png" alt="ikea instructions" title="Software is like IKEA" /></p><p>If you had to follow these instructions once in a lifetime, it probably wouldn’t be too bad. But software developers have to follow those instructions regularly, as we need to recreate, rebuild and reassemble our applications whenever we need to add new components, update versions of those components, or build new features.</p><p>Due to the nature of software, the changes that developers need to make (or the pieces that we need to reassemble) are sometimes drastic. An analogy would be like making that basic IKEA desk into a motorised adjustable standing desk. </p><p>Much like any other set of instructions, there is always something that doesn’t work. Maybe you missed a step, lost a component or didn’t have all the tools required. Maybe the instructions were wrong, misleading, ambiguous or you were reading them upside down. </p><p>The result of any of these issues is the same: a <strong>big waste of time</strong>.</p><h2>The problem with instructions</h2><p>For many years, the IT industry has tried to ease this pain by providing more accurate sets of instructions, but those instructions are still written, read and interpreted by humans, and we all know that human communication is messy and far from accurate. </p><p>At Akvo, we want to make it easy for anybody to contribute to our open source software. For that reason, we have decided to invest in making our open source applications as simple as possible to assemble, not by improving on the assembly instructions, but by <strong>completely eliminating them</strong>.</p><h2>Making a fresh start</h2><p>As human communication is imperfect, we had to look for another tool; one that would eliminate any ambiguity. And there is nothing like a computer to follow instructions in a very literal way. </p><p>Even a perfect set of instructions blindly followed by a machine is not enough. Computers have a tendency to accumulate entropy, so even two computers of the same brand, bought at the same shop at the same time, after some weeks of use, can behave differently. Maybe I configured my locale to Klingon while you installed Antivirus-X. That difference is enough to cause the assembly instructions to fail.</p><p>So apart from some machine-readable instructions, we need a way of making sure that we always have a fresh start. If every developer starts from the same point, the instructions will always arrive at exactly the same result. And here is where software virtualisation technology shines, as it has the capability to create virtual computers inside the developer’s computer. In a nutshell, virtualisation provides a very easy way of creating a new empty cosmos that we can use as the starting point for our set of instructions.</p><h2>The Docker Platform</h2><p>We have chosen the <a href="https://www.docker.com">Docker Platform</a> as the virtualisation technology to allow us to achieve our goal of having a repeatable and machine-readable set of instructions, and therefore a consistent starting point.</p><p>The two tools of the Docker Platform that we use are Docker and Docker Compose. Below is an example of a file you’d give to Docker to create a computer:</p>
<pre><code class="dockerfile">FROM openjdk:8-jre-alpine
 
COPY target/akvo-flow-maps.jar /app/akvo-flow-maps.jar
COPY maybe-import-and-java-jar.sh /app/maybe-import-and-java-jar.sh
RUN chmod 777 /app/maybe-import-and-java-jar.sh
 
CMD ./maybe-import-and-java-jar.sh
</code></pre><p>The most interesting bit here is the first “FROM” line, which tells Docker what our desired starting point is. Thanks again to the open source community, there are thousands of starting points to choose from at DockerHub, which makes it a lot easier to bootstrap our custom virtual computers. The rest of the lines are the set of instructions to follow from that starting point.</p><p>Where Docker allows us to create virtual computers, Docker Compose allows us to create virtual cosmos, where a set of computers will live, isolated from other cosmos. Here’s an example:</p>
<pre><code class="yaml">services:
  postgres:
   build: 
     dockerfile: Dockerfile-postgres
   expose:
     - 5432
 
  flow-maps:
    build:
     dockerfile: Dockerfile-dev
    ports:
      - &quot;47480:47480&quot;
      - &quot;3000:3000&quot;
 
  redis:
     image: redis:3.2.9
</code></pre><p>The first thing to notice is that the starting point for Docker Compose is always the void, the nothing, la nada. After that, we specify which computers should exist in that universe, in this case, a Postgres database, a Redis database and the Akvo Flow Maps application. Those computers are created using the Docker files that we just explained.</p><h2>Results</h2><p>So what is the result of applying this technology to <a href="https://akvo.org/products/akvo-lumen/#overview">Akvo Lumen</a>, Akvo’s data visualisation and analysis tool? By applying this technology, contributing to Lumen goes from this… to this:</p><p><img src="/images/blog/akvo-docker/lumen-open-source.gif" alt="The results" title="from to results" /></p><p>Two tools, git and docker, and two commands, make it extremely easy to build and assemble a working Akvo Lumen development environment. Besides easing the open source contribution process, by removing the onerous task of setting up a working environment, we find two additional benefits of using this technology:</p>
<ol>
  <li><strong>It encourages innovation</strong>. As it is extremely easy to “start from scratch”, we are free to experiment with new components, without fear of breaking things or ending up in an unrecoverable situation.</li>
  <li><strong>It reduces wasted time</strong>. Whenever we have a new team member, new components are added to the project, switching between different projects or just something stops working, we have two commands to get back to a known and valid starting point.</li>
</ol><p>Want better instructions? <strong>Strive for no instructions</strong>.</p>]]>
</description>
</item>
<item>
<title>
How to Docker Compose a developer environment: an open source example
</title>
<link>
https://danlebrero.com/2017/09/25/how-do-docker-compose-development-environement/
</link>
<guid>
https://danlebrero.com/2017/09/25/how-do-docker-compose-development-environement/
</guid>
<pubDate>
Mon, 25 Sep 2017 13:35:00 +0200
</pubDate>
<description>
<![CDATA[<p>As we mentioned in a <a href="/2017/09/01/a-docker-compose-environment/#content">previous blog post</a>, you should strive to have a simple and repeatable way of setting up a dev environment for your project.</p><p>In this blog post we are going to go into details of an example from one of the open source projects at <a href="http://akvo.org">Akvo</a>.</p><p>IMHO, having a painless way of setting up a dev environment is one of the key aspects to remove some of the friction for contributors to open source projects.</p><h2>Akvo Lumen Architecture</h2><p>The project that we are going to look at is called <a href="https://github.com/akvo/akvo-lumen">Akvo Lumen</a>, which is an <a href="http://akvo.org/products/akvo-lumen/">“easy to use data mashup, analysis and publishing platform”</a>.</p><p>Akvo Lumen is a Javascript single page application (SPA) with a Clojure backend, as follows:</p><p><img src="/images/blog/docker-compose/prod-setup.jpg" alt="Akvo Lumen architecture" title="Akvo Lumen production architecture" /></p>
<ul>
  <li><a href="http://www.keycloak.org">Keycloak</a> is an open source single sign on application. It is shared with other Akvo products.</li>
  <li><a href="https://www.nginx.com">Nginx</a> serves the SPA and proxies the request to the Backend.</li>
  <li>The Backend is the backend &hellip;</li>
</ul><h2>Before docker compose</h2><p>The instructions to setup the dev environment were what we can call the “classic” ones: install Postgres, run this init script, download this build tool, run this command &hellip;</p><p>But in this particular case they were split into three files: <a href="https://github.com/akvo/akvo-lumen/tree/21882586987927bc496e94c76e3faf6cbf965085/keycloak">keycloak</a>, <a href="https://github.com/akvo/akvo-lumen/tree/21882586987927bc496e94c76e3faf6cbf965085/backend">backend</a> and <a href="https://github.com/akvo/akvo-lumen/tree/21882586987927bc496e94c76e3faf6cbf965085/client">SPA</a>.</p><p>Personally, while following the instructions, I did not realized that I had to run KeyCloak locally and one of the npm dependencies would not compile in my developer box. I still do not know why. I don&rsquo;t really want to know.</p><p>Of course, there is a better way.</p><h2>Instructions after docker compose</h2><p>The new instructions after docker compose are <a href="https://github.com/akvo/akvo-lumen/blob/d0c535166a8f276242d4de48f869c5d4ae931859/README.dev.md">here</a>, which can be summarized as:</p>
<pre><code class="sh">sudo sh -c &#39;echo &quot;127.0.0.1 t1.lumen.localhost t2.lumen.localhost auth.lumen.localhost&quot; &gt;&gt; /etc/hosts&#39;
docker-compose up -d &amp;&amp; docker-compose logs -f --tail=10
</code></pre><p>The first step is required because Lumen is a multi tenant product and the tenant is based on the host.</p><p>The second step is basically the same as <em>docker-compose up</em>, but without docker-compose holding your console hostage.</p><p>Interestingly, note the absence of any <em>npm install</em> or <em>mvn install</em> from the instructions.</p><p>After that, we will be running:</p><p><img src="/images/blog/docker-compose/dev-docker-compose.jpg" alt="Akvo Lumen developer docker compose setup" title="Developer environment setup with Docker Compose" /></p><h2>The docker compose file</h2><p>The whole docker compose file can be found at <a href="https://github.com/akvo/akvo-lumen/blob/develop/docker-compose.yml">here</a>.</p><h3>Postgres and Keycloak</h3><p>Let’s start by looking at the Postgres image: </p>
<pre><code class="yaml">postgres:
  build: postgres
  ports:
   - &quot;5432:5432&quot;
</code></pre><p>Strictly speaking, we do not need to expose the Postgres port, but it is useful during development to be able to inspect the DB tables with some UI tool.</p><p>The <a href="https://github.com/akvo/akvo-lumen/blob/f72db9d8efe4900f8f8b3a42d5d89f4eded4b50e/postgres/Dockerfile">Dockerfile</a> is extremely simple:</p>
<pre><code class="dockerfile">FROM postgres:9.5
ADD ./provision  /docker-entrypoint-initdb.d/
</code></pre><p>Following the instructions of the <a href="https://hub.docker.com/_/postgres/">Postgres official image</a>, we copy our <a href="https://github.com/akvo/akvo-lumen/blob/f72db9d8efe4900f8f8b3a42d5d89f4eded4b50e/postgres/provision/setup.sh">initial setup scripts</a> and they will be run the first time the container starts.</p><p>The scripts just creates a bunch of empty databases. It will be the Lumen Backend the one that creates the required tables and reference data as part of the DB migration logic.</p><p>The <a href="https://github.com/akvo/akvo-lumen/blob/f72db9d8efe4900f8f8b3a42d5d89f4eded4b50e/keycloak/Dockerfile">Keycloak image</a> is very similar, but setups the initial set of users, passwords and credentials in a <a href="https://github.com/akvo/akvo-lumen/blob/f72db9d8efe4900f8f8b3a42d5d89f4eded4b50e/keycloak/akvo.json">Keycloaky way</a>.</p><h3>Lumen Backend</h3><p>The Lumen Backend is a Clojure service. Its docker compose configuration looks like:</p>
<pre><code class="yaml">backend:
 build:
   context: ./backend
   dockerfile: Dockerfile-dev
 volumes:
    - ./backend:/app
    - ~/.m2:/root/.m2
    - ~/.lein:/root/.lein
 links:
    - keycloak:auth.lumen.localhost
 ports:
    - &quot;47480:47480&quot;
</code></pre><p>The first interesting point is that it uses a <a href="https://github.com/akvo/akvo-lumen/blob/e0881e38cc1c4bf77692cbaa611427af3db288ab/backend/Dockerfile-dev">different Dockerfile</a> than <a href="https://github.com/akvo/akvo-lumen/blob/e0881e38cc1c4bf77692cbaa611427af3db288ab/backend/Dockerfile">the production one</a>. </p><p>During development, we need our build tools, <a href="https://leiningen.org/">Lein</a> in our case, plus we want the fast feedback cycle that a <a href="http://vvvvalvalval.github.io/posts/what-makes-a-good-repl.html">good REPL provides</a>, while in production we just want a fast start up time.</p><p>Note that because our build tools come as part of the Docker image, everybody in the team will be running exactly the same version of Lein, on exactly the same JVM and OS. Other projects could use different Lein versions, or different tools, but containers isolate one project from the others.</p><p>We do not want to be rebuilding and restarting our Backend Docker image every time we make a change in our source files, so the first line of “volumes” <em>(- ./backend:/app)</em> makes the source code available to the Docker container: any change in the source files will be immediately visible inside the container. </p><p>The second volume that we mount is the local maven repository <em>(- ~/.m2:/root/.m2)</em>. This somehow pollutes your developer box, as deleting the Docker container will not get rid of the downloaded dependencies, but in theory your local maven repository is just a cache, so you can delete it without repercussions whenever it gets too big.</p><p>If you don’t want to pollute your developer box at all, you can make <a href="http://bitjudo.com/blog/2014/03/13/building-efficient-dockerfiles-node-dot-js/">use of layers</a> and download the dependencies just when there is a change in the project file.</p><p>The last volume <em>(- ~/.lein:/root/.lein)</em> makes the <a href="https://jakemccrary.com/blog/2015/01/11/overview-of-my-leiningen-profiles-dot-clj/">Lein global profiles</a> available to the container. Use with care as you want to avoid any “it works on my machine” issues.</p><p>Even if the Keycloak container is accessible by the Backend using the hostname “keycloak”, we need the link <em>(- keycloak:auth.lumen.localhost)</em> due to JWT validation requiring the single sign-on host to be the same one for the client (the browser) and the backend. </p><p>Last, we make the REPL port available so you can connect to it with your favourite IDE. You will need to explicitly configure the lein <em>:repl-options</em> to listen to that port and to allow connections from <a href="https://github.com/akvo/akvo-lumen/blob/e0881e38cc1c4bf77692cbaa611427af3db288ab/backend/project.clj#L74">any host</a></p><h3>Lumen Client</h3><p>The Lumen Client image is a Nginx that servers the SPA and proxies other requests to the backend.</p>
<pre><code class="yaml">client:
 build:
   context: ./client
   dockerfile: Dockerfile-dev
 volumes:
    - ./client:/lumen
 ports:
    - &quot;3030:3030&quot;
</code></pre><p>Again, for development we prioritize a fast feedback cycle, so the Docker images between <a href="https://github.com/akvo/akvo-lumen/blob/e0881e38cc1c4bf77692cbaa611427af3db288ab/client/Dockerfile">production</a> and <a href="https://github.com/akvo/akvo-lumen/blob/e0881e38cc1c4bf77692cbaa611427af3db288ab/client/Dockerfile-dev">development</a> are different.</p><p>In this case, we have replaced Nginx with a <a href="https://github.com/webpack/webpack-dev-server">webpack Dev Server</a> which will recompile the SPA and do a <a href="https://github.com/akvo/akvo-lumen/blob/e0881e38cc1c4bf77692cbaa611427af3db288ab/client/webpack.config.js">hot code reload</a> on your browser whenever we make a change on our source code. The mounted volume is to make the source code accessible inside the container.</p><p>The exposed port is just the main application entrypoint.</p><h2>Running tests and other build tasks</h2><p>As you don&rsquo;t need to install any npm, lein or maven in your local box, to run any tasks provided by those tools, you just need to run them from within the Docker container.</p><p>For example, to run the Backend tests:</p>
<pre><code class="sh">docker-compose exec backend lein test
</code></pre><p>Or if you are going to run several commands, you can always start a bash shell:</p>
<pre><code class="sh">docker-compose exec backend bash
</code></pre><p><em>Tip:</em> if you want to preserve the bash history, just add another volume to the Docker Compose file that mounts the home directory.</p><h2>A note on startup dependencies</h2><p>Docker Compose provides very <a href="https://docs.docker.com/compose/startup-order/">little help</a> to ensure the startup order of the containers. </p><p>It is up to you to make sure that the dependant container waits long enough for the dependency to be ready, usually by polling with some maximum time limit.</p><p>For this project, the Backend depends both on Keycloak and Postgres, but the Backend consistently takes longer than both to startup, so we are ignoring the issue for now.</p><p>Examples in other projects on how to deal with the startup dependency issue:</p>
<ol>
  <li>Checking that a <a href="https://github.com/akvo/akvo-maps/blob/4aaaea55230b3eb7f704ecee73d89db115ccc3fa/end-to-end-tests/test/windshaft_test/core_test.clj#L11">DB is ready by querying the last table created for some data</a></li>
  <li>Checking that <a href="https://github.com/dlebrero/kafka-streams-and-ktable-example/blob/master/our-service/src/our_service/util.clj#L41">Kafka is ready by listing the topics and finding the last created one</a></li>
</ol><h2>An environment upgrade</h2><p>It happens that one of the new features in Akvo Lumen is to provide some interactive maps.</p><p>This means that the project now needs:</p>
<ol>
  <li><a href="http://postgis.net/">PostGis</a> extension installed on Postgres.</li>
  <li>A <a href="https://github.com/akvo/akvo-maps/tree/develop">Windshaft</a> node.js server.</li>
  <li>A <a href="https://redis.io/">Redis</a> DB.</li>
</ol><p>Which now that we have Docker Compose can be done with:</p>
<pre><code class="diff">--- a/postgres/Dockerfile
+++ b/postgres/Dockerfile
-FROM postgres:9.5
+FROM mdillon/postgis:9.6 

--- a/postgres/provision/helpers/create-extensions.sql
+++ b/postgres/provision/helpers/create-extensions.sql
+CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA public;

--- a/docker-compose.yml
+++ b/docker-compose.yml
+ redis:
+   image: redis:3.2.9
+ windshaft:
+   image: akvo/akvo-maps:2469ae0cb95ba090412f042fdfa8c7038273fe0e
+   environment:
+     - NODE_ENV=development
+   volumes:
+      - ./windshaft/config/dev:/config
</code></pre><p>And one <em>docker-compose down; docker-compose up &ndash;build</em> later, the whole team is enjoying the new setup.</p><p>Isn’t that beautiful?</p>]]>
</description>
</item>
<item>
<title>
Swagger Search: Finding an endpoint in your microservice primordial soup 
</title>
<link>
https://danlebrero.com/2017/09/18/swagger-search-finding-endpoints-in-microservices/
</link>
<guid>
https://danlebrero.com/2017/09/18/swagger-search-finding-endpoints-in-microservices/
</guid>
<pubDate>
Mon, 18 Sep 2017 13:35:00 +0200
</pubDate>
<description>
<![CDATA[<p><a href="http://labs.ig.com/">IG</a> started its service-oriented architecture journey back in 2009. </p><p>The first proof of concept consisted of three services, deployed independently from the existing monolith: a big fat J2EE Enterprise Server. </p><p>We loved the freedom from the monolith so much, that during these years the service landscape at IG has been growing organically, boasting now more than 250 services, with tens of hundreds of endpoints.</p><p>Perfect services with clear boundaries were born, but due to time pressures, laziness, or other unfortunate practicalities, these perfect babies grew into bloated teenagers, accruing functionality marginally related to them.</p><p>But then, by virtue of some kind of asexual reproduction, the fat services were split into a new set of perfect services, condemned to repeat the errors of their parents.</p><h2>Do we have …?</h2><p>The evolving nature of a microservice architecture is a strength, but it comes with a lot of different challenges, one of which can be summarized in the following question:</p>
<blockquote><p>Do we have an endpoint that provides XXX functionality?</p>
</blockquote><p>To document what was available, we ended up using a service registry, to know which services were available, and Swagger, to know what each service provided.</p><p>So the workflow to find a candidate endpoint would be:</p>
<ol>
  <li>Go to the service registry.</li>
  <li>Grep for a name that seemed logical. Failing that, scan the list of all service names.</li>
  <li>Find the Swagger doc url for the service.</li>
  <li>Scan the available endpoints for something suitable.</li>
</ol><p>If no service or endpoint was found, we would fall back to the “ask around the office” methodology.</p><p>This workflow was at first mildly annoying, but as we distilled our existing services, more and more of them would have suspiciously similar names, making the process more onerous.</p><h2>Swagger Search</h2><p>To ease that pain, IG’s Clojure Club rolled up their sleeves and built Swagger Search: a service that collects all the Swagger documents from all the services and presents a user interface that allows you to find endpoints in your microservice architecture.</p><p>This is what it looks like:</p><p><img src="/images/blog/swagger-search/list-of-services.jpg" alt="List services" title="List all services found by the service discovery" /></p><p><img src="/images/blog/swagger-search/search-endpoints.jpg" alt="Search for endpoints" title="Search results" /></p><p>The service allows searching through the endpoint documentation, URL, HTTP method, its parameters, their types, or any fields in the request or response bodies.</p><p>What do we mean by type and fields? If you have the following endpoint:</p>
<pre><code class="json">&quot;post&quot;: {
 &quot;description&quot;: &quot;Adds a new moderator for the chat.&quot;,
 &quot;parameters&quot;: [
   {
     &quot;in&quot;: &quot;body&quot;,
     &quot;name&quot;: &quot;body&quot;,
     &quot;schema&quot;: {
       &quot;$ref&quot;: &quot;#/definitions/LiveChatModerator&quot;
     }
   }
 ],
 }
...
&quot;LiveChatModerator&quot;: {
 &quot;properties&quot;: {
   &quot;id&quot;: {
     &quot;description&quot;: &quot;...&quot;,
     &quot;type&quot;: &quot;string&quot;
   },
   &quot;snippet&quot;: {
     &quot;$ref&quot;: &quot;#/definitions/LiveChatModeratorSnippet&quot;,
     &quot;description&quot;: &quot;....&quot;
   }
 },
 &quot;type&quot;: &quot;object&quot;
},
&quot;LiveChatModeratorSnippet&quot;: {
 &quot;properties&quot;: {
   &quot;liveChatId&quot;: {
     &quot;description&quot;: &quot;...&quot;,
     &quot;type&quot;: &quot;string&quot;
   },
   &quot;moderatorDetails&quot;: {
     &quot;$ref&quot;: &quot;#/definitions/ChannelProfileDetails&quot;,
     &quot;description&quot;: &quot;...&quot;
   }
 },
 &quot;type&quot;: &quot;object&quot;
}
...
</code></pre><p>The endpoint will show in queries for the types LiveChatModerator, LiveChatModeratorSnippet and ChannelProfileDetails, and in queries for id, snippet, liveChatId or moderatorDetails.</p><p>Swagger Search has built-in support for <a href="https://www.consul.io/">Consul</a> and <a href="https://github.com/coreos/etcd">Etcd</a>, but you can plug your own service discovery mechanism.</p><p>It comes in three different flavors: as a <a href="https://hub.docker.com/r/danlebrero/swagger-search/">docker container</a>, as an <a href="https://github.com/IG-Group/swagger-search/releases">executable jar</a>, or as a <a href="https://clojars.org/ig/swagger-search">library</a>.</p><p>IG has open sourced the project under the Apache 2 license. You can find <a href="https://github.com/IG-Group/swagger-search">the source and instructions at Github</a>.</p><p>Hope you also find it useful.</p><h2>Acknowledgements</h2><p>Thanks a lot to all the member of IG’s Clojure Club and special thanks to all those graduates that were forced by their demonic overlords to contribute to the project. You did a great job and you taught me that Clojure can be learned in less than a month. </p><p>Thanks also to <a href="https://apis.guru/">APIs.guru</a> for providing all those Swagger APIs that helped enormously during testing. </p><p>And of course, thanks to everybody behind <a href="https://swagger.io">Swagger</a>. It is an awesome tool.</p><p>Kudos to everyone, but especially my best friend <a href="https://twitter.com/rmorschel">Robert Morschel</a> who taught me everything, who reviews this blog and who keeps adding random and funny statements with the hope that one will slip through.</p>]]>
</description>
</item>
<item>
<title>
Why to Docker Compose a calm environment
</title>
<link>
https://danlebrero.com/2017/09/01/a-docker-compose-environment/
</link>
<guid>
https://danlebrero.com/2017/09/01/a-docker-compose-environment/
</guid>
<pubDate>
Fri, 01 Sep 2017 00:00:00 +0200
</pubDate>
<description>
<![CDATA[<p>The joys of a new job. </p><p>You get there on your first day and after the introductions, you are given your first task: to get the project up and running on your dev box.</p><p>The task comes with a link to the wiki, which has THE instructions:</p>
<ol>
  <li>Download X</li>
  <li>Install Y</li>
  <li>Run “./build &ndash;special-flag”</li>
  <li>Copy Z to W</li>
  <li>Make sure foo but not bar</li>
  <li>&hellip;</li>
</ol><p>You know how it is going to end. And just in case you had any doubts, your new boss just confirms it: </p><p>“It’s probably a bit out of date, so can you please update it if you find any issues?”</p><p>Two days later, you emerge triumphant, proud of your achievement, and with a smile on your face: Your updated instructions are so accurate that the next person joining will be forever thankful.</p><h2>Or maybe not</h2><p>The instructions on the wiki seem like a good enough solution, given that each member of the team needs to pass the ordeal just once &hellip; except when:</p>
<ol>
  <li>You get a new and shiny dev box.</li>
  <li>Your dev box dies.</li>
  <li>You move to another project.</li>
  <li>Six month latter, you go back to the original project. Nothing works anymore.</li>
  <li>A new feature requires Zookeeper, and everybody to configure a local Zookeeper cluster!</li>
  <li>Your operating system is upgraded and “insert-your-fav-database-here” doesn&rsquo;t want to start anymore. Welcome to DLL hell.</li>
  <li>That old project that your team still maintains needs Maven 2.1.1 but the current project requires &gt; 3.3, and requires Postgres 7.1 but the new one requires at least 9.5 with PostPic and OpenFTS extensions.</li>
  <li>Polyglot Microservices company! Install maven, gradle, npm, yarn, node, make, go, ruby, rake, lein, sbt, rebar, cassandra, mongodb, redis, postgresql, couchbase…</li>
</ol><p>But sometimes, some component, for some unknown reason, somehow stops working, and it won&rsquo;t ever start again.</p><h2>Enter Docker Compose</h2><p>Docker Compose is a tool which allows one to define a multi-container system using one file, and to run them in Docker, creating a private network to isolate the system.</p><p>A Docker Compose file that will start a Postgres and a Redis is as simple as: </p>
<pre><code class="yaml">version: &quot;3&quot;
services:
  postgres:
    image: postgres:9.5
    volumens: 
      - ./db-provision:/docker-entrypoint-initdb.d/
    ports: 
      - 5432:5432
  redis:
    image: redis:3.2.9
</code></pre><p>You can configure the container for your project and Docker Compose will be able to create a new environment, mapping some of the ports and files between the internal containers and your dev box.</p><p>Something like:</p><p><img src="/images/blog/dev-setup-diagram.jpg" alt="Docker Compose Dev Setup Architecture" title="Docker Compose Dev Setup Architecture" /></p><p>Using Docker Compose to set up and run our local development environment gives us: </p>
<table>
  <tbody>
    <tr>
      <td>One command to set up and start the system </td>
      <td><em>docker-compose up</em> </td>
    </tr>
    <tr>
      <td>One command to upgrade or add new components </td>
      <td><em>docker-compose up --build</em> </td>
    </tr>
    <tr>
      <td>One command to stop the system</td>
      <td><em>docker-compose stop</em></td>
    </tr>
    <tr>
      <td>One command to clean up any trace of the system</td>
      <td><em>docker-compose down --remove-orphans --rmi all</em></td>
    </tr>
    <tr>
      <td>A precise and repeatable process</td>
      <td>The Docker Compose file will be executed by a machine, so there is no room for imprecision. <br/>Just make sure that you use an immutable version of the image.</td>
    </tr>
    <tr>
      <td>A process that never gets out of date</td>
      <td>As the team will use the Docker Compose everyday for their development, and any change in the system must be done within the Docker files, there is no opportunity for the instructions to get stale.</td>
    </tr>
    <tr>
      <td>A process that can be version controlled</td>
      <td>The Docker files are plain text, they will be collocated with the rest of the project source code, they will be peer reviewed and changes can be rolled back, diffed, &hellip;</td>
    </tr>
    <tr>
      <td>A process that allows for experimentation</td>
      <td>As it is easy to destroy and recreate systems, and as the Docker files can be rolled back, there is no risk on trying new versions of components or fiddling around with the configuration.</td>
    </tr>
    <tr>
      <td>A way of running more than version of the same project or more than one project at the same time</td>
      <td>Unfortunately, this is probably requires some manual fiddling to remap some of the ports exposed in the Docker Compose file, but at least all the ports are in just one file.<br/> After that is a simple: <em>docker-compose -p my-project-one up -d; docker-compose -p my-project-again up</em></td>
    </tr>
  </tbody>
</table><h2>A production-like environment or not?</h2><p>When talking about Docker, one of the benefits usually mentioned is that it allows one to run a production-like environment anywhere.</p><p>Indeed this is a big benefit. Your CI server should run its tests against a production-like version, and you should be able to run such a version locally, but for the day to day development experience, you want a setup that allows for a fast feedback cycle.</p><p>For example, you don’t want to minimize your JavaScript files for each and every change that you make and you probably want some sort of auto refresh.</p><p>Fast feedback is just more important.</p><p>This development environment should include any build tools that your project requires, so your setup instructions should not have any “install maven/npm” step. Those tools should come within a Docker container. This way, everybody  in the team will be using the same tool version in the same operative system version.</p><h2>Conclusion</h2><p>Even if you don’t use Docker in production, it is well worth using it just to make setting up or upgrading a dev environment an uneventful process. </p><p>This process should be as close to “docker-compose up” as possible. Nothing more.</p><p>Don’t treat your dev box as some big global mutable variable. Use Docker Compose to treat it as a nice immutable one.</p><p>You have <a href="/2017/09/25/how-do-docker-compose-development-environement/#content">here a detailed example</a> of how to Docker Compose a local developer environment.</p>
<hr/><p>More about efficiency:</p>
<ol>
  <li><a href="/2017/08/01/efficient-developer-disable-notifications/#content">Disable notifications</a></li>
  <li><a href="/2017/08/02/efficient-developer-master-your-ide/#content">Master your IDE</a></li>
  <li><a href="/2017/08/03/efficient-developer-write-programs-for-yourself/#content">Write programs for yourself</a></li>
  <li>Why to Docker Compose a calm environment (you are here)</li>
  <li><a href="/2018/04/30/did-you-read-my-email/#content">Did you read my email?</a></li>
  <li><a href="/2018/07/02/efficient-developer-rest-and-sleep/#content">Go and have a rest</a></li>
  <li><a href="/2018/07/04/habits-of-efficient-developers-wearedevelopers-2018-video/#content">The conference talk</a></li>
  <li><a href="/2019/02/18/other-reasons-for-test-driven-development-baby-steps-roi-evil-manager-watching-the-watchmen/#content">Other reasons for TDD: Baby steps, ROI, Evil Manager Syndrome and Watching the watchmen</a></li>
  <li><a href="/2020/09/16/where-test-driven-development-falls-short-find-a-good-repl/#content">Where TDD falls short, find yourself a good REPL</a></li>
</ol>]]>
</description>
</item>
<item>
<title>
Applying stability patterns: a case study - Devoxx PL 2017
</title>
<link>
https://danlebrero.com/2017/08/03/stability-patterns-a-case-study-devoxx-pl-2017-video/
</link>
<guid>
https://danlebrero.com/2017/08/03/stability-patterns-a-case-study-devoxx-pl-2017-video/
</guid>
<pubDate>
Thu, 03 Aug 2017 11:00:00 +0200
</pubDate>
<description>
<![CDATA[<p>The video of my Devoxx PL 2017 talk on &ldquo;Applying stability patterns: a case study&rdquo; is online.</p><p>In the talk I explain how we applied, or did not, each of the stability patterns described in the <em>Release It!</em> book by Michael Nygard, plus I explain which outages we had after applying, or misapplying, the patterns. </p><p>Slides in <a href="/slides/stability_patterns_devoxx_pl_2017.key">Keynote format</a></p><p>Feedback and questions welcomed!</p><p><iframe width="560" height="315" src="https://www.youtube.com/embed/dSgls1cn1io" frameborder="0" allowfullscreen></iframe></p>]]>
</description>
</item>
<item>
<title>
A more efficient developer: write programs for yourself
</title>
<link>
https://danlebrero.com/2017/08/03/efficient-developer-write-programs-for-yourself/
</link>
<guid>
https://danlebrero.com/2017/08/03/efficient-developer-write-programs-for-yourself/
</guid>
<pubDate>
Thu, 03 Aug 2017 00:00:00 +0200
</pubDate>
<description>
<![CDATA[<p>It saddens, and surprises me the amount of manual work that we developers put up with. It is paradoxical that we are paid to automate other people’s work, yet fail do so the same with our own.</p><p>I am not just talking about automating tasks that can take you hours or days to do. A five second task that is repeated often enough may well be worth automating. </p><p>Automation saves time, enables repeatability, avoids mental overhead, and <a href="/2017/04/06/documenting-your-architecture-wireshark-plantuml-and-a-repl/#content">can be rewarding</a>.</p><h2>One off tasks</h2><p>Your attitude before starting any task, no matter how small, should be: can I write a program to do this? </p><p>A word of caution, though: set a time limit for the task, as you can really get lost down the rabbit hole. Once that time limit has elapsed, you have to be willing to let it go and do the task manually. This requires a surprising amount of discipline.</p><h2>Beware the GUI</h2><p>GUIs, like the Sirens, lure you with an easy first time experience, but then enslave you in their own isolated world, away from other programs.</p><p>You want to use tools that compose. You want to use programs that you can glue together with other programs. Programs that can be inside a for loop. </p><p>GUIs do not compose. Free yourself.</p><h2>Automation Tools</h2><p>For quick and easy things, there is nothing like a good old Bash shell. It is the only tool that has remained constantly useful in my 17 years of working experience.</p><p>For more complex tasks, just use whatever your production programming language is. It probably has tons of libraries available which you are already very proficient with.</p><p>Or maybe you could use that “forbidden” language, the one that you actually love, thus making the task doubly enjoyable.</p><p>Remember that <strong>you are a developer</strong>. So develop. Write programs. Free yourself.</p>
<hr/><p>More about efficiency:</p>
<ol>
  <li><a href="/2017/08/01/efficient-developer-disable-notifications/#content">Disable notifications</a></li>
  <li><a href="/2017/08/02/efficient-developer-master-your-ide/#content">Master your IDE</a></li>
  <li>Write programs for yourself (you are here)</li>
  <li><a href="/2017/09/01/a-docker-compose-environment/#content">Why to Docker Compose a calm environment</a></li>
  <li><a href="/2018/04/30/did-you-read-my-email/#content">Did you read my email?</a></li>
  <li><a href="/2018/07/02/efficient-developer-rest-and-sleep/#content">Go and have a rest</a></li>
  <li><a href="/2018/07/04/habits-of-efficient-developers-wearedevelopers-2018-video/#content">The conference talk</a></li>
  <li><a href="/2019/02/18/other-reasons-for-test-driven-development-baby-steps-roi-evil-manager-watching-the-watchmen/#content">Other reasons for TDD: Baby steps, ROI, Evil Manager Syndrome and Watching the watchmen</a></li>
  <li><a href="/2020/09/16/where-test-driven-development-falls-short-find-a-good-repl/#content">Where TDD falls short, find yourself a good REPL</a></li>
</ol>]]>
</description>
</item>
<item>
<title>
A more efficient developer: master your IDE
</title>
<link>
https://danlebrero.com/2017/08/02/efficient-developer-master-your-ide/
</link>
<guid>
https://danlebrero.com/2017/08/02/efficient-developer-master-your-ide/
</guid>
<pubDate>
Wed, 02 Aug 2017 00:00:00 +0200
</pubDate>
<description>
<![CDATA[<p>As a developer, you are going to spend thousands of hours working with your IDE or editor of choice. It is your main tool, you need to know how to get the most out of it.</p><p>Using your IDE 8 hours a day is not enough, you need to make a conscious and deliberate effort to master it. As a wise man once said:</p>
<blockquote><p><a href="https://youtu.be/SMCsXl9SGgY?t=1m17s">Wax on, Wax off</a> <cite>Master Miyagi, The Karate Kid.</cite></p>
</blockquote><p>You must learn:</p>
<ol>
  <li>The shortcuts for all the functionality that you regularly use. You should rarely need to use your mouse.</li>
  <li>Its features: read the release notes, watch online tutorials or follow some expert that blogs about it.</li>
</ol><p>If you happen to use Intellij IDEA, the Key Promoter plugin will help to learn the shortcuts and JetBrains provides a ton of online material. Follow their <a href="https://blog.jetbrains.com/idea/">blog</a> and <a href="https://www.youtube.com/user/intellijideavideo">youtube channel</a>. </p><p>But the most effective way of learning your IDE is to do pair programming. As part of your daily job, each of your partners will teach you different features, and you will have the chance to teach them to others, creating a nice cross-pollination effect.</p><p>And you can always ask your partner to slap you every time that you reach for the mouse. A win-win situation.</p>
<hr/><p>More about efficiency:</p>
<ol>
  <li><a href="/2017/08/01/efficient-developer-disable-notifications/#content">Disable notifications</a></li>
  <li>Master your IDE (you are here)</li>
  <li><a href="/2017/08/03/efficient-developer-write-programs-for-yourself/#content">Write programs for yourself</a></li>
  <li><a href="/2017/09/01/a-docker-compose-environment/#content">Why to Docker Compose a calm environment</a></li>
  <li><a href="/2018/04/30/did-you-read-my-email/#content">Did you read my email?</a></li>
  <li><a href="/2018/07/02/efficient-developer-rest-and-sleep/#content">Go and have a rest</a></li>
  <li><a href="/2018/07/04/habits-of-efficient-developers-wearedevelopers-2018-video/#content">The conference talk</a></li>
  <li><a href="/2019/02/18/other-reasons-for-test-driven-development-baby-steps-roi-evil-manager-watching-the-watchmen/#content">Other reasons for TDD: Baby steps, ROI, Evil Manager Syndrome and Watching the watchmen</a></li>
  <li><a href="/2020/09/16/where-test-driven-development-falls-short-find-a-good-repl/#content">Where TDD falls short, find yourself a good REPL</a></li>
</ol>]]>
</description>
</item>
</channel>
</rss>
