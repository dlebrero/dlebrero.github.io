<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="https://danlebrero.com" rel="self" type="application/rss+xml"/><title>Daniel Lebrero Berna Blog</title><link>https://danlebrero.com</link><language>en</language><lastBuildDate>Wed, 24 Jan 2024 00:00:00 +0100</lastBuildDate><pubDate>Wed, 24 Jan 2024 00:00:00 +0100</pubDate><description>Daniel Lebrero blog</description><generator>clj-rss</generator><item><title>Book notes: The Staff Engineer's Path: A Guide for Individual Contributors Navigating Growth and Change</title><link>https://danlebrero.com/2024/01/24/the-staff-engineers-path-summary/</link><guid>https://danlebrero.com/2024/01/24/the-staff-engineers-path-summary/</guid><pubDate>Wed, 24 Jan 2024 00:00:00 +0100</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/3thSc4p">The Staff Engineer&rsquo;s Path: A Guide for Individual Contributors Navigating Growth and Change</a> by <a href="https://www.linkedin.com/in/tanyareilly">Tanya Reilly</a>.</p><p>Must-read for anybody interested on growing in the individual contributor track.</p>
<blockquote><p>Be the engineer that everyone wants to work with. <cite>Tanya Reilly, this book</cite></p>
</blockquote><h1>Key Insights</h1><p><img src="/images/blog/books/staff-engineers-path/pillars.png" alt="Staff engineer pillars" /></p>
<ul>
  <li>Staff eng roles come in a lot of shapes, but not all orgs will need all kinds of staff engs.</li>
  <li>Senior is a &ldquo;tenure&rdquo; level: you don&rsquo;t need to go further.</li>
  <li>Whenever there is a feeling of &ldquo;someone should do something here&rdquo;, there is a reasonable change that the someone is you.</li>
  <li>Autonomous: Find your own problems to work on.</li>
  <li>Know why the problem you are working on is strategically important, and it is not, do something else.</li>
  <li>Not necessary to provide solution but to ensure there is agreed-upon, well-understood solution that solves the problem.</li>
  <li>Feedback loops will be months.</li>
  <li>Write down a &ldquo;what do I do here?&rdquo; doc to ensure expectations/focus in shared with manager and peers.</li>
  <li>Vision/Strategy is not always needed:
  <ul>
    <li>It is a big project.</li>
    <li>Getting the people to agree <strong>is</strong> the work.</li>
  </ul></li>
  <li>None of the options can make everybody happy:
  <ul>
    <li>Rather than asking &ldquo;Is everyone ok with option A?&rdquo; ask &ldquo;Can anyone not live with option A?&rdquo;</li>
    <li>Not deciding is a decision, usually not a good one.</li>
  </ul></li>
  <li>You have to make peace with walking past things that are broken or suboptimal.</li>
  <li>Do what is important for the company, but also what is important for you.</li>
  <li>Notice when you are doing busy work because you are tired, and find a way to rest instead.</li>
  <li>Put non meetings in the calendar too:
  <ul>
    <li>Not &ldquo;make time&rdquo; but specific items.</li>
  </ul></li>
  <li>The usual reason why a project is difficult is that you are dealing with ambiguity.</li>
  <li>Number one tool for project success: writing things down.</li>
  <li>As a project lead, you will fill any roles that you don&rsquo;t have someone in them.</li>
  <li>Recruit people that are optimistic, good at conflict resolution and comms.</li>
  <li>Better wrong than vague: chance to change direction early.</li>
  <li>If it seems trivial, it is because you do not understand it.</li>
  <li>Writing code is rarely the highest leverage thing you can spend time on.
  <ul>
    <li>Coding gives you a depth of understanding that is hard to gain otherwise.</li>
  </ul></li>
  <li>Something will always go wrong:
  <ul>
    <li>Take it as an opportunity to learn.</li>
  </ul></li>
  <li>Techniques to get unstuck:
  <ol>
    <li>Understand and explain.</li>
    <li>Make the work easier.</li>
    <li>Get org support.</li>
    <li>Make alternative plans.</li>
  </ol></li>
  <li>Supporting an untrained person through making a change in a difficult codebase takes more effort than doing it yourself.</li>
  <li>Three bullet points and a call to action:
  <ul>
    <li>Three bullet points detailing the issue at hand.</li>
    <li>One and only one call to action.</li>
  </ul></li>
  <li>Blocked by:
  <ul>
    <li>A decision: make a guess and document it with an ADR.</li>
  </ul></li>
  <li>No talk about implementation until all agree about the problem.</li>
  <li>Don&rsquo;t just tell people that the solution exists: you need to keep telling them.</li>
  <li>If the project is not in good shape by the end of it, it will never be.</li>
  <li>People assume that you know what you are talking about, so be careful with what you say.</li>
  <li>Values is what you do.</li>
  <li>The degree to which other people want to work with you is a direct indication of how successful you&rsquo;ll be in your career as an engineer.</li>
  <li>Do not accept a management role until you are a solid senior engineer.</li>
  <li><a href="https://medium.com/@ElizAyer/dont-ask-forgiveness-radiate-intent-d36fd22393a3">Radiating intent</a> (instead of seeking permission or asking for forgiveness).</li>
  <li>Attributes of a staff engineer:
  <ol>
    <li>Competent.</li>
    <li>Responsible.</li>
    <li>Remembers the goal:
    <ul>
      <li>SW is a means to a goal, not a goal itself.</li>
      <li>There is always a budget.</li>
    </ul></li>
    <li>Look Ahead.</li>
  </ol></li>
  <li>Don&rsquo;t jump to give advice, sometimes the mentee just need to vent or get empathy on the situation.</li>
  <li>If you cannot think on what to improve, ask yourself why they aren&rsquo;t one level more senior.</li>
  <li>You cannot be an expert in everything.</li>
  <li>Every job should help you grow towards your long-term goals and meet your immediate needs.</li>
  <li>Keep a weekly record of your job signals.</li>
  <li>Staying in one place for long gives you the feedback loop that comes from seeing the consequences of your actions.</li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#ch-0">Introduction</a></li>
  <li><a href="#p-1">Part I - The Big Picture</a>
  <ul>
    <li><a href="#ch-1">Chapter 1 - What would you say you do here?</a></li>
    <li><a href="#ch-2">Chapter 2 - Three Maps</a></li>
    <li><a href="#ch-3">Chapter 3 - Creating the Big Picture</a></li>
  </ul></li>
  <li><a href="#p-2">Part II - Execution</a>
  <ul>
    <li><a href="#ch-4">Chapter 4 - Finite Time</a></li>
    <li><a href="#ch-5">Chapter 5 - Leading Big Projects</a></li>
    <li><a href="#ch-6">Chapter 6 - Why Have We Stopped?</a></li>
  </ul></li>
  <li><a href="#p-3">Part III - Leveling Up</a>
  <ul>
    <li><a href="#ch-7">Chapter 7 - You&rsquo;re a Role Model Now (Sorry)</a></li>
    <li><a href="#ch-8">Chapter 8 - Good Influence at Scale</a></li>
    <li><a href="#ch-9">Chapter 9 - What&rsquo;s Next?</a></li>
  </ul></li>
</ul><h1><a name="ch-0"></a>Introduction</h1>
<ul>
  <li>Both paths need many of the same skills.</li>
  <li>Pillars:
  <ol>
    <li>Big-picture thinking.</li>
    <li>Execution.</li>
    <li>Leveling up others.</li>
  </ol></li>
  <li>When acting as a role model, you need to be right.</li>
</ul><p><img src="/images/blog/books/staff-engineers-path/pillars.png" alt="Staff engineer pillars" /></p><h1><a name="p-1"></a>Part I - The Big Picture</h1><h2><a name="ch-1"></a>Chapter 1 - What would you say you do here?</h2>
<ul>
  <li>Staff eng roles come in a lot of shapes, but not all orgs will need all kinds of staff engs.</li>
  <li>Senior is a &ldquo;tenure&rdquo; level: you don&rsquo;t need to go further.</li>
  <li>Big picture:
  <ul>
    <li>Good decisions need context:
    <ul>
      <li>Gathering context requires time and effort.</li>
    </ul></li>
    <li>Managers, as the people responsible for assigning headcount to technical initiatives, need to be part of major tech decisions.</li>
  </ul></li>
  <li>Project management:
  <ul>
    <li>Unstuck.</li>
    <li>Tech quality.</li>
    <li>High level system design.</li>
  </ul></li>
  <li>Whenever there is a feeling of &ldquo;someone should do something here&rdquo;, there is a reasonable change that the someone is you.</li>
  <li><a href="https://kind.engineering/">https://kind.engineering/</a>.</li>
  <li>Programming will often not be the best use of your time:
  <ul>
    <li>Enough work to make problems manageable by someone else:
    <ul>
      <li>Growth opportunity for less experience devs.</li>
    </ul></li>
  </ul></li>
  <li>Autonomous: Find your own problems to work on.</li>
  <li>Not necessary to provide solution but to ensure there is agreed-upon, well-understood solution that solves the problem.</li>
  <li>Who you report to influences:
  <ol>
    <li>Support you receive.</li>
    <li>Information you can access.</li>
    <li>How you are perceived.</li>
    <li>Scope: domain, teams:
    <ul>
      <li>Too broad:
      <ul>
        <li>Lack of impact: distracted with side-quests.</li>
        <li>Become a bottleneck: take part on every decision.</li>
        <li>Decision fatigue.</li>
        <li>Missing relationships: not enough regular contact.</li>
      </ul></li>
      <li>Too narrow:
      <ul>
        <li>Lack of impact.</li>
        <li>Opportunity cost: working on less important stuff.</li>
        <li>Overshadowing other engineers: no room for other engs to solve problems.</li>
        <li>Over-engineering: too much time on your hands.</li>
      </ul></li>
    </ul></li>
  </ol></li>
  <li>Ensure your scope is aligned to your preference of broad vs deep work.</li>
  <li>4 disciplines in any job:
  <ul>
    <li>Core tech skills.</li>
    <li>Product management.</li>
    <li>Project management.</li>
    <li>People management.</li>
  </ul></li>
  <li>Consider how much you want to code.</li>
  <li>Feedback loops will be months.</li>
  <li>Know why the problem you are working on is strategically important, and it is not, do something else.</li>
  <li><a href="/2022/02/23/staff-engineering-leadership-beyond-the-management-track-book-summary/#ch-1">4 staff eng archetypes</a>.</li>
  <li>Write down a &ldquo;what do I do here?&rdquo; doc to ensure expectations/focus in shared with manager and peers:
  <ul>
    <li>Overview.</li>
    <li>Goals.</li>
    <li>Sample activities.</li>
    <li>What success looks like?</li>
  </ul></li>
</ul><h2><a name="ch-2"></a>Chapter 2 - Three Maps</h2>
<ol>
  <li>Locator map:
  <ul>
    <li>Where are you in the org, and what is outside your bubble.</li>
    <li>Put your work in a bigger context.</li>
    <li>To make good decisions, you&rsquo;ll need to be able to see from others point of view.</li>
    <li>Risk of focusing only on your context:
    <ol>
      <li>Prioritizing badly:
      <ul>
        <li>Your problems seem more important and special.</li>
        <li>It is unusual to find a problem that is genuinely brand now.</li>
      </ul></li>
      <li>Losing empathy:
      <ul>
        <li>Think other domains are simpler.</li>
        <li>Overestimate what others know from your domain.</li>
      </ul></li>
      <li>Tuning out the background noise:
      <ul>
        <li>Stop noticing some problems because you get so used to them.</li>
      </ul></li>
      <li>Forgetting what they work is for:
      <ul>
        <li>Lose connection with the company&rsquo;s goals.</li>
      </ul></li>
    </ol></li>
  </ul></li>
  <li>Topological map:
  <ul>
    <li>Discover existing &ldquo;dangers&rdquo; and paths:
    <ul>
      <li>How leaders prefer to work.</li>
      <li>How decisions are made.</li>
      <li>&ldquo;Shadow org&rdquo; charts.</li>
    </ul></li>
    <li>Issues without one:
    <ol>
      <li>Your good ideas don&rsquo;t get traction.</li>
      <li>You don&rsquo;t find the difficult parts until you get there.</li>
      <li>Everything takes longer.</li>
    </ol></li>
    <li>Understand your org:
    <ul>
      <li>Culture:
      <ul>
        <li>Open or secret?
        <ul>
          <li>Open information can lead to more drama.</li>
        </ul></li>
        <li>Oral or written?</li>
        <li>Top-down or bottom-up?</li>
        <li>Fast change or deliberate change?
        <ul>
          <li>Tightly connected to oral/written.</li>
        </ul></li>
        <li>Back channels or front doors?</li>
        <li>Allocated or available?
        <ul>
          <li>If there are plenty of available people, changes are that a competing novel grassroots initiatives are about to start.</li>
        </ul></li>
        <li>Liquid (meritocracy of sorts) or crystallized (structured hierarchy and promotion)?</li>
      </ul></li>
    </ul></li>
    <li>Points of interests:
    <ol>
      <li>Chasms between teams/orgs:
      <ul>
        <li>Difficult to communicate, make decisions and resolve disputes.</li>
      </ul></li>
      <li>Fortresses:
      <ul>
        <li>Well-intended gatekeepers, but stop projects/change from happening.</li>
        <li>Avoid a battle, even if you might win.</li>
      </ul></li>
      <li>Disputed territory:
      <ul>
        <li>When two or more teams need to work closely together, their projects can fall into chaos if they don&rsquo;t have the same clear view of where they are trying to get to.</li>
      </ul></li>
      <li>Uncrossable desserts:
      <ul>
        <li>Unwinnable battles.</li>
      </ul></li>
      <li>Paved roads, shortcuts and busy ways around.</li>
    </ol></li>
    <li>You need to be technically correct and convince the right people.</li>
    <li>Figure out where decisions are happening:
    <ul>
      <li>You can influence higher up decisions by making sure relevant information reaches via your reporting chain.</li>
      <li>Ask to join but show how it will make the org more likely to achieve its goals.</li>
      <li>Figure out shadow org chart:
      <ul>
        <li>Connectors: people that know everybody.</li>
        <li>Old-timers.</li>
      </ul></li>
    </ul></li>
    <li>Be a bridge.</li>
  </ul></li>
  <li>Treasure map:
  <ul>
    <li>Where and why.</li>
    <li>Destination and stop points.</li>
    <li>Long term view.</li>
    <li>If only short term vision:
    <ol>
      <li>Harder to keep everybody going in the same direction.</li>
      <li>Not finish big things.</li>
      <li>Accumulate cruft.</li>
      <li>Competing initiatives.</li>
      <li>Engineers stop growing:
      <ul>
        <li>Small project problems != big project ones.</li>
      </ul></li>
    </ol></li>
    <li>If the map is not clear, create a new one.</li>
    <li>Trail map:
    <ul>
      <li>Tell the story of the work.</li>
      <li>Every small task become part of a bigger story.</li>
    </ul></li>
  </ul></li>
</ol>
<ul>
  <li>You learn some parts of the map through everyday learning, but you need to be deliberate for others.</li>
  <li>Hiking example: easy to find out what you miss by looking at others:
  <ul>
    <li>They had learned to pay attention adn they know what they were looking for.</li>
  </ul></li>
  <li>Habit of paying attention:
  <ul>
    <li>Take notes.</li>
    <li>What? Anything that helps you or others:
    <ul>
      <li>Have context.</li>
      <li>Navigate your org.</li>
      <li>Progress towards your goals.</li>
    </ul></li>
  </ul></li>
  <li>Techniques for seeing the bigger picture:
  <ol>
    <li>Taking an outsider view:
    <ul>
      <li>A new person to the team/org can always see the problems.</li>
    </ul></li>
    <li>Befriend other staff eng to understand from their point of view what your team/group looks like.</li>
    <li>Befriend non-eng to learn what is important for business.</li>
    <li>Understand your customer.</li>
    <li>Understand what already exists inside and outside your org before creating something new.</li>
  </ol></li>
  <li><a href="https://www.thevoid.community/report">The VOID report</a>: incidents newsletter.</li>
  <li><a href="https://www.rawsignal.ca/newsletter">Raw signal</a>: management and leadership newsletter.</li>
</ul><h2><a name="ch-3"></a>Chapter 3 - Creating the Big Picture</h2>
<ul>
  <li>Tech vision:
  <ul>
    <li>Describe future as if all work to get there had been done.</li>
    <li>Any scope:
    <ul>
      <li>Smaller scopes should inherit from larger ones.</li>
    </ul></li>
  </ul></li>
  <li>Tech strategy:
  <ul>
    <li>Plan of action: how to achieve your goals, and navigating past the obstacles.</li>
    <li><a href="/2020/08/31/good-strategy-bad-strategy-summary/#content">Good/Bad strategy</a>:
    <ol>
      <li>Diagnosis: distill the situation to its most essential characteristic.</li>
      <li>Guiding policy: short and clear signpost, marking the direction forward.</li>
      <li>Coherent action: specific based from diagnosis/guiding policy.
      <ul>
        <li>They are a time commitment.</li>
      </ul></li>
    </ol>
    <ul>
      <li>Strategy should draw on your advantages.</li>
      <li>Strategy is realistic and within your org constraints.</li>
    </ul></li>
  </ul></li>
  <li>Vision/Strategy is not always needed:
  <ul>
    <li>It is a big project.</li>
    <li>Getting the people to agree <strong>is</strong> the work.</li>
  </ul></li>
  <li>The approach:
  <ul>
    <li>Good strategy is boring to write about:
    <ul>
      <li>Should be obvious.</li>
    </ul></li>
    <li>Join existing initiatives.</li>
    <li>Find a sponsor:
    <ul>
      <li>Ensure your plan fix some of their problems.</li>
      <li>Elevator pitch.</li>
    </ul></li>
    <li>Choose your core group:
    <ul>
      <li>Makes you accountable.</li>
      <li>Small (2-4), committed to 8-12 hours per week.</li>
      <li>Consider bringing those who will oppose the most.</li>
      <li>Keep a broader set of allies informed and engaged.</li>
    </ul></li>
    <li>Set scope:
    <ul>
      <li>How much of the ord you plan to influence.</li>
    </ul></li>
    <li>Make sure it is achievable:
    <ul>
      <li>Cut scope.</li>
      <li>Be prepared to give up.</li>
    </ul></li>
    <li>Make it official.</li>
  </ul></li>
  <li>The writing:<br/> <img src="/images/blog/books/staff-engineers-path/writing.png" alt="Writing process" />
  <ul>
    <li>Questions:
    <ul>
      <li>What is great as it is?</li>
      <li>What is important?</li>
      <li>What will future you wish that present you had done?</li>
    </ul></li>
    <li>Reviewers will be biased by what is already in the doc:
    <ul>
      <li>Mitigations:
      <ul>
        <li>Talk more before writing.</li>
        <li>Make clear what parts you don&rsquo;t feel strong about.</li>
      </ul></li>
    </ul></li>
    <li>Interviews final questions:
    <ul>
      <li>What else should I have asked you?</li>
      <li>Is there anything important I missed?</li>
    </ul></li>
    <li>None of the options can make everybody happy:
    <ul>
      <li>Rather than asking &ldquo;Is everyone ok with option A?&rdquo; ask &ldquo;Can anyone not live with option A?&rdquo;</li>
      <li>Decide upfront who is the tiebreaker.</li>
      <li>Not deciding is a decision, usually not a good one.</li>
      <li>Document any decision, including trade-offs and reasons.</li>
    </ul></li>
  </ul></li>
  <li>Alignment:
  <ul>
    <li>Stay aligned with your sponsor, at minimum in the major checkpoints.</li>
    <li>Nemawashi: by the time of voting, you should know the result.</li>
    <li>Vision or strategy that not everyone knows is of little value.</li>
    <li>Find a one-liner slogan.</li>
    <li>What is the difference between your document being yours and the organizations?
    <ul>
      <li>Belief.</li>
      <li>Staffing the work, second.</li>
    </ul></li>
  </ul></li>
</ul><h1><a name="p-2"></a>Part II - Execution</h1><h2><a name="ch-4"></a>Chapter 4 - Finite Time</h2>
<ul>
  <li>You have to make peace with walking past things that are broken or suboptimal.</li>
  <li>Do what is important for the company, but also what is important for you.
  <ul>
    <li>Consider:
    <ul>
      <li>Energy:
      <ul>
        <li>Your current level and what the project will consume.</li>
        <li>Different people need different levels of energy for the same project.</li>
        <li>How many things are you already doing? Limit WIP.</li>
        <li>Does this kind of work give you or take energy?</li>
        <li>Are you procrastinating?
        <ul>
          <li>Notice when you are doing busy work because you are tired, and find a way to rest instead.</li>
        </ul></li>
        <li>Is this fight worth it?
        <ul>
          <li>Compare with other work.</li>
        </ul></li>
      </ul></li>
      <li>Quality of life:
      <ul>
        <li>Do you enjoy this work?</li>
        <li>How do you feel about the project&rsquo;s goals?</li>
      </ul></li>
      <li>Credibility:
      <ul>
        <li>Does this project use your technical skills?</li>
        <li>Does this project show your leadership skills?</li>
      </ul></li>
      <li>Social capital:
      <ul>
        <li>It this the kind of work that your company and your manager expect at your level?
        <ul>
          <li>Making your reporting chain successful gives them social capital that they can spend to help you.</li>
        </ul></li>
        <li>Will this work be respected?</li>
        <li>Are you squandering the capital you have built?</li>
      </ul></li>
      <li>Skills:
      <ul>
        <li>Each project will increase or decrease these.</li>
        <li>Will this project teach you something you want to learn?</li>
        <li>Will people around you raise your game?</li>
      </ul></li>
    </ul></li>
  </ul></li>
  <li>Everything you commit to have an opportunity cost.</li>
  <li>Put non meetings in the calendar too:
  <ul>
    <li>Not &ldquo;make time&rdquo; but specific items.</li>
  </ul></li>
  <li>Don&rsquo;t allocate 100% of your time:
  <ul>
    <li>Spikes in work will spill to your personal life.</li>
  </ul></li>
  <li>Increase your skills in three ways:
  <ol>
    <li>Deliberately learn something: take a class, buy a book, take a toy project.
    <ul>
      <li>Unlikely to happen at work.</li>
    </ul></li>
    <li>Work with someone more skilled.</li>
    <li>Learn by doing: most common.</li>
  </ol></li>
  <li>What if it is the wrong project?
  <ul>
    <li>If it is temporal, maybe do it.</li>
    <li>Let others lead: mentorship opportunity.</li>
    <li>Resize it.</li>
    <li>Say no.</li>
  </ul></li>
</ul><h2><a name="ch-5"></a>Chapter 5 - Leading Big Projects</h2>
<ul>
  <li>A great project lead has:
  <ul>
    <li>Perseverance.</li>
    <li>Courage.</li>
    <li>Willingness to talk to other people.</li>
  </ul></li>
  <li>The usual reason why a project is difficult is that you are dealing with ambiguity.</li>
  <li>Big project == several months + multiple teams.</li>
  <li>Number one tool for project success: writing things down.</li>
  <li>Ambiguity is the nature of the work.</li>
  <li>To make a project less overwhelming at the beginning:
  <ol>
    <li>Write things down: ideas, leads, rumors, to-dos, &hellip;</li>
    <li>Talk to your sponsor: understand what they want to achieve.</li>
    <li>Find at least one person that you can be open and unsure with.</li>
    <li>Give yourself a win: small steps.</li>
    <li>Use your strengths.</li>
  </ol></li>
  <li>Building context:
  <ol>
    <li>Goals: why are you doing this project?</li>
    <li>Understand customers:
    <ul>
      <li>Working with PMs, ask for their advice.</li>
    </ul></li>
    <li>Success metrics.</li>
    <li>Stakeholders.</li>
    <li>Figure out fixed constraints.</li>
    <li>Risks and mitigations.</li>
    <li>History of the project:
    <ul>
      <li>Respect what came before.</li>
      <li>Where it did come from?</li>
      <li>How was it announced?</li>
      <li>Who has already tried? What they left behind?</li>
    </ul></li>
    <li>Team.</li>
  </ol></li>
  <li>Project structure:
  <ul>
    <li>Define roles:
    <ul>
      <li>Specially important if multiple senior people are involved.</li>
      <li>To avoid overlaps and cracks/orphaned work/responsibilities.</li>
      <li><a href="https://www.cio.com/article/287088/project-management-how-to-design-a-successful-raci-project-plan.html">RACI matrix</a>:
      <ul>
        <li>Responsible: doing the work.</li>
        <li>Accountable: only one per task.</li>
        <li>Consulted.</li>
        <li>Informed.</li>
      </ul></li>
      <li>As a project lead, you will fill any roles that you don&rsquo;t have someone in them.</li>
    </ul></li>
    <li>Recruit people that are optimistic, good at conflict resolution and comms.</li>
    <li>Scope and milestones:
    <ul>
      <li>People don&rsquo;t act with a sense of urgency until there is a deadline that they cannot avoid thinking about.</li>
    </ul></li>
    <li>I have met almost nobody who is good at time estimation.</li>
    <li>Estimating should take into account other teams that you depend on:
    <ul>
      <li>If you ask those teams for last minute changed, you are disrupting the time estimation of other projects.</li>
    </ul></li>
    <li>Set rituals, comm channels, dev practices.</li>
    <li>Kick off meeting.</li>
  </ul></li>
  <li>Driving the project:
  <ul>
    <li><a href="https://leaddev.com/agile-other-ways-working/avoid-lake">Avoid the lake!</a> by Kripa Krishnan.</li>
  </ul>
  <ol>
    <li>Explore:
    <ul>
      <li>Get to the point where you can concisely explain what different teams in the project want in a way that they&rsquo;ll agree is accurate:
      <ul>
        <li>Loads of talking <strong>and listening</strong>.</li>
      </ul></li>
      <li>Build elevator pitch: reduce it to its most important aspects.</li>
    </ul></li>
    <li>Clarify:
    <ul>
      <li>Give mental models for what you are all doing:
      <ul>
        <li>Hook your model to the person&rsquo;s existing knowledge.</li>
        <li>Analogies and metaphors.</li>
      </ul></li>
      <li>Glossary: ubiquitous language.</li>
      <li>Graph/pictures.</li>
    </ul></li>
    <li>Design:
    <ul>
      <li>A written design is a very cheap iteration, <a href="https://www.linkedin.com/in/cian-synnott/">Cian Synnott</a>.</li>
    </ul></li>
  </ol></li>
</ul>
<blockquote><p>We are built for novelty and excitement, not for careful attention to detail. Discipline is something we have to work at. <cite>Atul Gawande, <em>The Checklist Manifesto</em></cite></p>
</blockquote>
<ul>
  <li>RFC:
  <ul>
    <li>The implementation should serve the goal; it should not be the goal.</li>
    <li>Design section:
    <ul>
      <li>Readers should understand what you intend to do, and should be able to tell you whether they think it will work.</li>
      <li>Better wrong than vague: chance to change direction early.</li>
      <li>Avoid passive voice:
      <ul>
        <li>Dr. Rebecca Johnson: If you can insert &lsquo;by zombies&rsquo; after the verb, you have passive voice.</li>
      </ul></li>
      <li>If it seems trivial, it is because you do not understand it.</li>
      <li>Any part of your solution that involves humans changing their workflows or behaviour will be difficult and needs to be part of the design.</li>
      <li>Figure the hard parts earlier.</li>
      <li>Name who will be on call for any new system.</li>
    </ul></li>
  </ul></li>
  <li>Coding:
  <ul>
    <li>Writing code is rarely the highest leverage thing you can spend time on.</li>
    <li>Coding gives you a depth of understanding that is hard to gain otherwise.</li>
    <li>Avoid being in the critical path.</li>
    <li>Set example (design, patterns, &hellip;).</li>
  </ul></li>
  <li>Communicating well is key for delivering a project in time.</li>
  <li>If your project is stuck, don&rsquo;t hide it: ask for help.</li>
  <li>Something will always go wrong:
  <ul>
    <li>Take it as an opportunity to learn.</li>
  </ul></li>
</ul><h2><a name="ch-6"></a>Chapter 6 - Why Have We Stopped?</h2>
<ul>
  <li>Techniques to get unstuck:
  <ol>
    <li>Understand and explain.</li>
    <li>Make the work easier.</li>
    <li>Get org support:
    <ul>
      <li>Show it is an objective.</li>
      <li>Show value.</li>
      <li>Escalate.</li>
    </ul></li>
    <li>Make alternative plans.</li>
  </ol></li>
  <li>Supporting an untrained person through making a change in a difficult codebase takes more effort than doing it yourself.</li>
  <li>Three bullet points and a call to action:
  <ul>
    <li>Three bullet points detailing the issue at hand.</li>
    <li>One and only one call to action.</li>
  </ul></li>
  <li>Blocked by:
  <ul>
    <li>A decision: make a guess and document it with an ADR.</li>
    <li>A single &ldquo;please click this button&rdquo;:
    <ul>
      <li>Might be a big queue of &ldquo;just click this button&rdquo;.</li>
      <li>The other person is responsible for the result.</li>
    </ul></li>
    <li>Unassigned work:
    <ul>
      <li>Rollup the context to make it explicit.</li>
      <li>Volunteer to mentor/advise/join the team that will own it.</li>
    </ul></li>
    <li>By a huge crowd of people:
    <ul>
      <li>Like a migration.</li>
      <li>Be a bridge
      <ul>
        <li>The team pushing for the migration to do as much work as possible.</li>
        <li>Make the new way the default:
        <ul>
          <li>Consider adding some friction to the old way.</li>
        </ul></li>
      </ul></li>
    </ul></li>
  </ul></li>
  <li>You are stuck:
  <ul>
    <li>Don&rsquo;t know where you&rsquo;re all going:
    <ul>
      <li>No agreement. Too many disparate voices, all interested in the problem:
      <ol>
        <li>Clarify roles:
        <ul>
          <li>Leader is the final decision maker.</li>
        </ul></li>
        <li>Choose strategy:
        <ul>
          <li>No talk about implementation until all agree about the problem.</li>
          <li>Don&rsquo;t try to solve everything neither please everyone.</li>
        </ul></li>
        <li>Choose stakeholder:
        <ul>
          <li>Reorient the project around getting something to someone.</li>
          <li>Vertical slices.</li>
        </ul></li>
      </ol></li>
    </ul></li>
    <li>You don&rsquo;t know how to get there:
    <ul>
      <li>Path is unknown but not unknowable.</li>
      <li>Articulate the problem.</li>
      <li>Revisit your assumptions:
      <ul>
        <li>Have you already assumed a specific solution?</li>
      </ul></li>
      <li>Step away from the problem for a few days.</li>
      <li>Look for prior art, including outside IT.</li>
      <li>Connect with the community.</li>
      <li>Start small.</li>
      <li>Look at the problem from a completely different angles.</li>
      <li>Ask for help.</li>
    </ul></li>
    <li>You don&rsquo;t know where you stand:
    <ul>
      <li>Is the work still necessary?</li>
      <li>Less comms or interest from leadership.</li>
      <li>Go and ask.</li>
      <li>You will not get what you want if you don&rsquo;t ask for it.</li>
    </ul></li>
  </ul></li>
  <li>Team thinks project is done but problem is not solved:
  <ol>
    <li>&ldquo;Finished&rdquo; but not usable yet:
    <ul>
      <li>Agree on a definition of done.</li>
      <li>Be your own user.</li>
      <li>Celebrate only once users are happy.</li>
    </ul></li>
    <li>Done but nobody uses it:
    <ul>
      <li>Don&rsquo;t just tell people that the solution exists: you need to keep telling them.</li>
      <li>Make it easy to find.</li>
    </ul></li>
    <li>Built on shaky foundations:
    <ul>
      <li>If the project is not in good shape by the end of it, it will never be.</li>
      <li>Set a culture of quality.</li>
      <li>User stories out of bugs and incidents.</li>
      <li>Negotiate ring-fencing resources for technical work.</li>
    </ul></li>
  </ol></li>
  <li>Reasons to stop:
  <ul>
    <li>Further investment is not worth the cost.</li>
    <li>You learn that it will not work.</li>
    <li>Project cancelled by higher management:
    <ul>
      <li>Even if it is for good reasons, you will feel bad about it.</li>
      <li>Be the one telling the team.</li>
    </ul></li>
    <li>You finished! Celebrate!</li>
  </ul></li>
</ul><h1><a name="p-3"></a>Part III - Leveling Up</h1><h2><a name="ch-7"></a>Chapter 7 - You&rsquo;re a Role Model Now (Sorry)</h2>
<ul>
  <li>People assume that you know what you are talking about, so be careful with what you say.</li>
  <li>You are a role model: how you behave is how others will behave.</li>
  <li>Values is what you do.</li>
  <li>The clearest indication of what the company is what gets people promoted.</li>
  <li>Attributes of a staff engineer:
  <ol>
    <li>Competent:
    <ol>
      <li>Technically:
      <ul>
        <li>You can learn a lot from books but there is no substitute for doing it yourself.</li>
        <li>Do not accept a management role until you are a solid senior engineer.</li>
        <li>Beware if you are only learning how your company operated, but nothing technical.</li>
      </ul></li>
      <li>Self-aware:
      <ul>
        <li>What you cant do.</li>
        <li>How long will take.</li>
        <li>What you don&rsquo;t know.</li>
        <li>Your own context (which will be different from others).</li>
      </ul></li>
      <li>High standards:
      <ul>
        <li>Seek constructive criticism.</li>
        <li>Own your mistakes:
        <ul>
          <li>Communicate clearly and quickly.</li>
          <li>Set to fix it.</li>
        </ul></li>
      </ul></li>
      <li>Be reliable: finish what you start.</li>
    </ol></li>
    <li>Responsible:
    <ol>
      <li>Take ownership:
      <ul>
        <li><a href="https://medium.com/@ElizAyer/dont-ask-forgiveness-radiate-intent-d36fd22393a3">Radiating intent</a> (instead of seeking permission or asking for forgiveness).</li>
        <li>Make decisions.</li>
        <li>Ask &ldquo;obvious&rdquo; questions: make the implicit explicit.</li>
        <li>Glue work.</li>
      </ul></li>
      <li>Take charge:
      <ul>
        <li>Redirecting colleagues to more valuable work.</li>
        <li>Take control of a mess/incident.</li>
        <li>Drive meetings:
        <ul>
          <li>Take notes.</li>
          <li>Ensure agenda.</li>
          <li>Keep it focused.</li>
        </ul></li>
        <li>Speak up when you see behavioral problems.</li>
      </ul></li>
      <li>Create calm:
      <ul>
        <li>Make big problems small.</li>
        <li>Keep small problems small.</li>
        <li>Be consistent.</li>
        <li>Take time off.</li>
      </ul></li>
    </ol></li>
    <li>Remember the goal:
    <ul>
      <li>SW is a means to a goal, not a goal itself.</li>
      <li>There is always a budget.</li>
    </ul></li>
    <li>Look Ahead:
    <ul>
      <li>Don&rsquo;t optimize for now at the cost of future velocity or capability.</li>
      <li>Announce intention to deprecate old systems.</li>
      <li>Continually make your environment better.</li>
      <li>Faster safer deploys.</li>
      <li>Document.</li>
      <li>Build the expectation of failure into your products.</li>
      <li>Optimize for maintenance, not creation.</li>
      <li>Keep it simple: spend at least the same amount of time on possible second solution as you will in the first one.</li>
      <li>Build with decommission in mind.</li>
      <li>Create future leaders.</li>
    </ul></li>
  </ol></li>
  <li>The degree to which other people want to work with you is a direct indication of how successful you&rsquo;ll be in your career as an engineer. Be the engineer that everyone wants to work with.</li>
</ul><h2><a name="ch-8"></a>Chapter 8 - Good Influence at Scale</h2>
<ul>
  <li>Three tiers of influence:
  <ul>
    <li>Individual.</li>
    <li>Group.</li>
    <li>Catalyst: your influence continue even after you step away.</li>
    <li>Do the first two first, only go broader if value is clear.</li>
  </ul></li>
  <li>4 forms:</li>
</ul>
<table>
  <thead>
    <tr>
      <th> </th>
      <th>Individual </th>
      <th>Group </th>
      <th>Catalyst </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Advice </td>
      <td>Mentoring, sharing knowledge, feedback </td>
      <td>Tech talks, documentation, articles </td>
      <td>Mentorship program, tech talk events </td>
    </tr>
    <tr>
      <td>Teaching </td>
      <td>Code reviews, design review, coaching, pairing, shadowing </td>
      <td>Classes, codelabs </td>
      <td>Onboarding curriculum, teaching people to teach </td>
    </tr>
    <tr>
      <td>Guardrails </td>
      <td>Code review, change review, design review </td>
      <td>Processes, linters, style guides </td>
      <td>Frameworks, culture change </td>
    </tr>
    <tr>
      <td>Opportunity </td>
      <td>Delegating, sponsorship, cheerleading, ongoing support </td>
      <td>Sharing the spotlight, empowering your team </td>
      <td>Creating a culture of opportunity, watching with pride as your superstar junior colleagues change the world </td>
    </tr>
  </tbody>
</table>
<ol>
  <li>Advise:
  <ul>
    <li>Should be tailored to the person receiving it.</li>
    <li>Mentorship:
    <ul>
      <li>Sharing <strong>your</strong> experience so others can leverage on it:
      <ul>
        <li>Might not be useful/applicable.</li>
      </ul></li>
      <li>Don&rsquo;t jump to give advice, sometimes the mentee just need to vent or get empathy on the situation.</li>
      <li>Set objectives for mentorship.</li>
    </ul></li>
    <li>Be kindly honest.</li>
    <li>Peer reviews:
    <ul>
      <li>2 audiences:
      <ul>
        <li>Person who asked for feedback.</li>
        <li>Their manager.</li>
      </ul></li>
      <li>If you cannot think on what to improve, ask yourself why they aren&rsquo;t one level more senior.</li>
    </ul></li>
    <li>Encourage people to write things down.</li>
  </ul></li>
  <li>Teaching:
  <ul>
    <li>Code reviews:
    <ul>
      <li>Careful to not destroy somebody&rsquo;s confidence and growth mindset.</li>
      <li>Call out the good as well as the bad.</li>
    </ul></li>
  </ul></li>
  <li>Guardrails:
  <ul>
    <li>Encourage autonomy, exploration and innovation:
    <ul>
      <li>They will not stop you going over the edge.</li>
    </ul></li>
    <li>Reviews:
    <ul>
      <li>Should the work exists?</li>
      <li>Does it solve the problem?</li>
      <li>Will it handle failure?</li>
      <li>Understandable?</li>
      <li>Fits the bigger picture?</li>
      <li>Do the right people know about it?</li>
    </ul></li>
  </ul></li>
  <li>Opportunity:
  <ul>
    <li>Finding people the experience that they need to grow.</li>
    <li>Delegation:
    <ul>
      <li>Give them a messy, unscoped project with a bit of a safety net.</li>
      <li>When you delegate, you are not going to get a clone:
      <ul>
        <li>Good as long as they achieve the goals.</li>
      </ul></li>
    </ul></li>
    <li>Sponsorship:
    <ul>
      <li>You are investing your time and social capital in their growth.</li>
    </ul></li>
  </ul></li>
</ol><h2><a name="ch-9"></a>Chapter 9 - What&rsquo;s Next?</h2>
<ul>
  <li>Expand your perspective by reading, attending conferences and asking others about their journey.</li>
  <li>You cannot be an expert in everything.</li>
  <li>If the work fills you with dread or exhausts you, instead of exciting you, look for a different path to your goal.</li>
  <li><a href="https://www.scienceofpeople.com/conference-networking/">How to network</a> by Vanessa Van Edwards.</li>
  <li>Build visibility.</li>
  <li>The most time-efficient way to build skills, visibility and contacts is as part of your job. You&rsquo;ll get better at whatever you spend time on.</li>
  <li>Every job should help you grow towards your long-term goals and meet your immediate needs.</li>
  <li>Keep a weekly record of your job signals:
  <ol>
    <li>Are you growing/learning?</li>
    <li>Are the skills transferable?</li>
    <li>Would you recruit friends to your company?</li>
    <li>How is your confidence? How capable you feel?</li>
    <li>How stressed you feel?</li>
  </ol></li>
  <li>Staying in one place for long gives you the feedback loop that comes from seeing the consequences of your actions.</li>
  <li>What to do next:
  <ul>
    <li>You may just want to use your current skills and keep doing much the same job until you retire.</li>
    <li>Promotion.</li>
    <li>Work less:
    <ul>
      <li>If you weren&rsquo;t able to avoid working overtime at five days a week, why you think you can stick to working four?</li>
    </ul></li>
    <li>Change internal team.</li>
    <li>New specialization.</li>
    <li>Management.</li>
    <li>Find/invent your own niche:
    <ul>
      <li>Learn what your strengths are, and then finding &ldquo;holes that are shaped like you&rdquo;.</li>
    </ul></li>
    <li>Same job, different employer.</li>
    <li>Change jobs and level up or down.</li>
    <li>Your own start-up.</li>
    <li>Go independent.</li>
    <li>Change careers.</li>
  </ul></li>
</ul>]]></description></item><item><title>Book notes: Deming's Journey to Profound Knowledge: How Deming Helped Win a War, Altered the Face of Industry, and Holds the Key to Our Future</title><link>https://danlebrero.com/2024/01/04/deming-journey-to-profound-knowledge-summary/</link><guid>https://danlebrero.com/2024/01/04/deming-journey-to-profound-knowledge-summary/</guid><pubDate>Thu, 04 Jan 2024 00:00:00 +0100</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/3FFsMQH">Deming&rsquo;s Journey to Profound Knowledge: How Deming Helped Win a War, Altered the Face of Industry, and Holds the Key to Our Future</a> by <a href="https://twitter.com/botchagalupe">John Willis</a> with <a href="https://www.linkedin.com/in/dereklewisbooks/">Derek Lewis</a>.</p><p>&ldquo;This book is truly about how the lens of Profound Knowledge was found&rdquo;.</p><h1>Key Insights</h1>
<ul>
  <li>Deming is the foundation of Lean, Agile and DevOps.</li>
  <li>Variability is a fact of life.</li>
  <li>Elements of the System of Profound Knowledge:
  <ol>
    <li>A Theory of Knowledge: How we know what we believe we know?</li>
    <li>A Theory of Variation: How do we analyze and understand what we know?</li>
    <li>A Theory of Psychology: How do we account for human behaviour?</li>
    <li>An Appreciation of Systems/Systems Thinking: Are we seeing the bigger picture?</li>
  </ol></li>
  <li>The opposite of analytic thinking is systems thinking.</li>
  <li>Japanese workers believed they were doing something that <em>mattered</em>.</li>
  <li>No matter how precise the machines and the processes, the outputs all slightly varied from each other.</li>
  <li>Less waste allowed manufacturers to do more and more with less and less.</li>
  <li>Shewhart’s method enabled management to see defects as result of process instead of the workers.</li>
  <li>Defect classification:
  <ol>
    <li>Common cause: variations that could be predicted and should be planned for.</li>
    <li>Special cause: couldn&rsquo;t be predicted and shouldn&rsquo;t be planned for.</li>
  </ol></li>
  <li>The real value of Statistical Process Control is that it allows you to observe variation and look at random vs non-random patterns:
  <ul>
    <li>A random pattern represents a stable process, aka a process &ldquo;under control&rdquo;.</li>
    <li>A non-random pattern is a useful predictor of potential defects, signaling an amount of uncertainly in the process.</li>
    <li>And here is the root of all evil: misidentifying variation.</li>
  </ul></li>
  <li>Under-performing and brand-new operators would have 100% of their work inspected until their work fell within the control limits.</li>
  <li>We really didn’t believe. We did what we were told and it worked.</li>
  <li>They shouldn’t strive to be better than others but to strive to be better than themselves - that is true competition.</li>
  <li>Management by means (MBM):
  <ul>
    <li>If you don&rsquo;t know how you achieved your objective, how do you know if you can do it again?</li>
  </ul></li>
  <li><a href="https://deming.org/explore/fourteen-points/">14 Points for Management</a></li>
  <li>A common disease that afflicts management is the impression that “our problems are different”.</li>
  <li>Only 6% of problems are due to human error. 94% are system error. And since the system is the responsibility of management, 94% of problems are caused by bad management.</li>
  <li><p>Quality is not so much about improving the product as it is about improving the process.</p>
  <blockquote>In God we trust. All others must bring data. <cite>Dr. Deming</cite>
  </blockquote></li>
  <li>Organizations need to be a place where people can teach themselves.</li>
  <li>Perfection is not for this world.</li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#p-0">Preface</a></li>
  <li><a href="#p-00">Introduction</a></li>
  <li><a href="#p-1">Part I - Foundations of Profound Knowledge</a>
  <ul>
    <li><a href="#ch-1">Chapter 1 - Humble Origins &amp; Non-Determinism</a></li>
    <li><a href="#ch-2">Chapter 2 - The Jungle in Paradise</a></li>
    <li><a href="#ch-3">Chapter 3 - The Birth of Quality Control &amp; Standardization</a></li>
    <li><a href="#ch-4">Chapter 4 - The Root of All Evil</a></li>
    <li><a href="#ch-5">Chapter 5 - Pragmatist</a></li>
  </ul></li>
  <li><a href="#p-2">Part II - Applications of Profound Knowledge</a>
  <ul>
    <li><a href="#ch-6">Chapter 6 - Dr. Deming Goes to Washington</a></li>
    <li><a href="#ch-7">Chapter 7 - Rosie &amp; World War II</a></li>
    <li><a href="#ch-8">Chapter 8 - CLASSIFIED</a></li>
  </ul></li>
  <li><a href="#p-3">Part III - International Implications of Profound Knowledge</a>
  <ul>
    <li><a href="#ch-9">Chapter 9 - Samurai Statistics</a></li>
    <li><a href="#ch-10">Chapter 10 - JUSE &amp; the Gentle Giant</a></li>
    <li><a href="#ch-11">Chapter 11 - The Butterfly Effect</a></li>
    <li><a href="#ch-12">Chapter 12 - Made in Japan</a></li>
    <li><a href="#ch-13">Chapter 13 - Rising Sun, Falling Eagle</a></li>
    <li><a href="#ch-14">Chapter 14 - Demingmania</a></li>
    <li><a href="#ch-15">Chapter 15 - Dr. Quinn, Medicine Woman</a></li>
  </ul></li>
  <li><a href="#p-4">Part IV - The Next Generation of Profound Knowledge</a>
  <ul>
    <li><a href="#ch-16">Chapter 16 - The Digital Cambrian Explosion</a></li>
    <li><a href="#ch-17">Chapter 17 - What Would Deming Do?</a></li>
    <li><a href="#ch-18">Chapter 18 - Deming&rsquo;s Dark Legacy</a></li>
    <li><a href="#ch-19">Chapter 19 - Out of the Cyber Crisis</a></li>
  </ul></li>
</ul><h1><a name="p-0"></a>Preface</h1>
<ul>
  <li><a href="https://amzn.to/3s94VpF">Eliyahu Goldratt</a> books:
  <ul>
    <li>The Goal.</li>
    <li>Theory of Constraints.</li>
    <li>Critical Chain.</li>
    <li>It&rsquo;s Not Luck.</li>
    <li>Necessary but Not Sufficient.</li>
  </ul></li>
  <li>Deming is the foundation of Lean, Agile and DevOps.</li>
</ul><h2><a name="p-00"></a>Introduction</h2>
<ul>
  <li>The Allies won because the US outproduced the rest of the world:
  <ul>
    <li>Despite the absence of millions of skilled American workers and managers.</li>
    <li>Thanks to the statistical process control method.</li>
  </ul></li>
  <li>The very nature of reality is random.</li>
  <li>Variability is a fact of life.</li>
  <li>Elements of the System of Profound Knowledge:
  <ol>
    <li>A Theory of Knowledge: How we know what we believe we know?</li>
    <li>A Theory of Variation: How do we analyze and understand what we know?</li>
    <li>A Theory of Psychology: How do we account for human behaviour?</li>
    <li>An Appreciation of Systems/Systems Thinking: Are we seeing the bigger picture?</li>
  </ol></li>
  <li>Deming&rsquo;s mission was to work himself out of a job.</li>
</ul><h1><a name="p-1"></a>Part I - Foundations of Profound Knowledge</h1><h2><a name="ch-1"></a>Chapter 1 - Humble Origins &amp; Non-Determinism</h2>
<ul>
  <li>Determinism (Newtonian Physics): World operates solely on cause and effect.</li>
  <li>Non-Determinism:
  <ul>
    <li>No matter how much you know, there is an infinite amount of change and randomness in the universe.</li>
    <li>No such thing as absolute certainty.</li>
    <li>Crucial role in shaping Deming&rsquo;s worldview:
    <ol>
      <li>Long-established and long-held beliefs weren&rsquo;t necessarily true.</li>
      <li>Underpinnings of our very existence are random.</li>
      <li>Forced him to look at problems as multifaceted, complex systems.</li>
    </ol></li>
  </ul></li>
  <li>The opposite of analytic thinking is systems thinking.</li>
</ul><h2><a name="ch-2"></a>Chapter 2 - The Jungle in Paradise</h2>
<ul>
  <li>Hawthorne Works:
  <ul>
    <li>Treated its workers more like partners than peasants. And it worked.</li>
    <li>Corporate success forged a bond of loyalty with its employees.</li>
    <li>&ldquo;Hawthorne Effect&rdquo;:
    <ul>
      <li>The act of subjects changing their behaviour in response to being observed.</li>
    </ul></li>
  </ul></li>
  <li>Japanese workers believed they were doing something that <em>mattered</em>.</li>
  <li>Workers:
  <ul>
    <li>Ford:
    <ul>
      <li>Saw them as inconvenient cogs in the machine.</li>
      <li>Standardize to make them interchangeable.</li>
    </ul></li>
    <li>Taylor:
    <ul>
      <li>Scientific management.</li>
      <li>Saw them as machines themselves.</li>
      <li>Optimize them for maximum efficiency, through right physical and psychological conditions.</li>
    </ul></li>
    <li>Both:
    <ul>
      <li>Think that workers don&rsquo;t want to work.</li>
      <li>Antagonism between workers and managers.</li>
    </ul></li>
  </ul></li>
  <li>Piecework is man&rsquo;s lowest degradation:
  <ul>
    <li>Incentivices workers to focus on quantity, not quality.</li>
  </ul></li>
</ul><h2><a name="ch-3"></a>Chapter 3 - The Birth of Quality Control &amp; Standardization</h2>
<ul>
  <li>The eternal question of quality has always been this: &ldquo;How good is good enough?&rdquo;</li>
  <li>Machine age: standardization was the catalyst.</li>
  <li>Interchangeable parts were the turning point in the history of quality control and led to the theory of variation.</li>
  <li>No matter how precise the machines and the processes, the outputs all slightly varied from each other:
  <ul>
    <li>This spawned a need to allow for variance in product specifications.</li>
    <li>This is more in line with a non-deterministic approach.</li>
  </ul></li>
</ul><h2><a name="ch-4"></a>Chapter 4 - The Root of All Evil</h2>
<ul>
  <li>Statistics is about how confident you feel when dealing with uncertainty.</li>
  <li>Operational definition: procedure agreed upon to translate a concept into a precise measurement.</li>
  <li>If you can track variation, then you can trace variation to better understand why a production line creates defects and detect it much earlier in the process.</li>
  <li>Statistical Process Control (SPC) let managers compare variation across workers and machines.</li>
  <li>Less waste allowed manufacturers to do more and more with less and less.</li>
  <li>Shewhart&rsquo;s method enabled management to see defects as result of process instead of the workers.</li>
  <li>Plan, do, check, study.</li>
  <li>Defect classification:
  <ol>
    <li>Common cause: variations that could be predicted and should be planned for.</li>
    <li>Special cause: couldn&rsquo;t be predicted and shouldn&rsquo;t be planned for.</li>
  </ol></li>
  <li>Shewhart: as long as the variance fell within standard-deviation limits, the variance was inherent to the manufacturing process (common cause).</li>
  <li>The real value of SPC is that it allows you to observe variation and look at random vs non-random patterns:
  <ul>
    <li>A random pattern represents a stable process, aka a process &ldquo;under control&rdquo;.</li>
    <li>A non-random pattern is a useful predictor of potential defects, signaling an amount of uncertainly in the process.</li>
    <li>And here is the root of all evil: misidentifying variation.</li>
    <li>As a result, managers can spend their time on things they can control.</li>
  </ul></li>
  <li>SPC allows you to statistically predict defects before they occur.</li>
</ul><h2><a name="ch-5"></a>Chapter 5 - Pragmatist</h2>
<ul>
  <li>The philosophy of pragmatism, what Deming would later call the Theory of Knowledge.</li>
  <li>A meter would be defined as the cord length needed for a clock&rsquo;s pendulum to travel one swing per second.</li>
  <li>Two types of knowledge: a priori and a posteriori.</li>
  <li>A posteriori thinkers or &ldquo;pragmatists&rdquo;:
  <ul>
    <li>Experience is the best teacher.</li>
    <li>Begin with observations and empirical data (hard evidence) and then work their way backwards.</li>
  </ul></li>
  <li>A standard is a measurement that suffices and that everybody agrees upon.</li>
</ul><h1><a name="p-2"></a>Part II - Applications of Profound Knowledge</h1><h2><a name="ch-6"></a>Chapter 6 - Dr. Deming Goes to Washington</h2>
<ul>
  <li>Under-performing and brand-new operators would have 100% of their work inspected until their work fell within the control limits.</li>
</ul><h2><a name="ch-7"></a>Chapter 7 - Rosie &amp; World War II</h2>
<ul>
  <li>Victory came because the US outproduced the rest of the world.</li>
</ul><h2><a name="ch-8"></a>Chapter 8 - CLASSIFIED</h2>
<ul>
  <li>Bounded rationality: humans can process only so much information at a time.</li>
  <li>David Woods: Anomaly response situations frequently involved time pressure, multiple interacting goals, high consequences of failure, and multiple interleaved tasks.</li>
</ul><h1><a name="p-3"></a>Part III - International Implications of Profound Knowledge</h1><h2><a name="ch-9"></a>Chapter 9 - Samurai Statistics</h2>
<ul>
  <li>The US used statistics to win the war, even as Japan threw statistics out of the windows. Afterwards, Japan used statistics to win the economic war, even as the US threw statistics out the window.</li>
</ul><h2><a name="ch-10"></a>Chapter 10 - JUSE &amp; the Gentle Giant</h2>
<ul>
  <li>SPC wasn&rsquo;t just about applying statistics to output. Quality touched everything in the process, including the quality of raw materials and components received from supplier and vendors.</li>
  <li>Ed knew that unless it included top management, the classes were unlikely to succeed.</li>
  <li>JUSE used the proceeds from the lecture fees and book royalties to fund a prize in Deming&rsquo;s honor. Accomplished three critical purposes:
  <ol>
    <li>Associated JUSE with one of the most famous statisticians in the world.</li>
    <li>Laid a sort of territorial claim to the man.</li>
    <li>Guaranteed Deming&rsquo;s involvement in Japan.</li>
  </ol></li>
  <li>Deming: They wanted more conferences, so we had more. It was a terrifying experience for me because I was new at it. I was a technical man.</li>
  <li>We really didn&rsquo;t believe. We did what we were told and it worked.</li>
  <li>He inspired hope, if not confidence.</li>
</ul><h2><a name="ch-11"></a>Chapter 11 - The Butterfly Effect</h2>
<ul>
  <li>He demonstrated how even competitors working together benefited their respective companies and, more importantly, their customers.</li>
  <li>What is Deming&rsquo;s real legacy? It is seeing the grander scheme and preaching cooperation instead of competition.</li>
  <li>They shouldn&rsquo;t strive to be better than others but to strive to be better than themselves - that is true competition.</li>
</ul><h2><a name="ch-12"></a>Chapter 12 - Made in Japan</h2>
<ul>
  <li>Because demand and profit margins were so high, US companies could afford waste, rework, stockpiling inventory, and other inefficiencies.</li>
  <li>Taylorism focused on eliminating individual waste. Ohno focused on systemic waste.</li>
  <li>Assembly-line workers were cross-trained in different positions.</li>
  <li>Machines were make multipurpose.</li>
  <li>Kanban:
  <ul>
    <li>The aim was to produce only what was needed, when it was needed, and in the amount needed.</li>
    <li>It went against everything Henry Ford believed and practiced.</li>
  </ul></li>
</ul><h2><a name="ch-13"></a>Chapter 13 - Rising Sun, Falling Eagle</h2>
<ul>
  <li>Kaizen: a process of deliberate, patient, continual refinement.</li>
  <li>How long do you think it will take the US to catch up with Japan?
  <ul>
    <li>Do you think Japan is standing still?</li>
  </ul></li>
  <li>What made one manufacturing plant better than others? Adopting a lean manufacturing philosophy trumped all those other factors.</li>
  <li>US companies focused on the process but forgot the people.</li>
</ul><h2><a name="ch-14"></a>Chapter 14 - Demingmania</h2>
<ul>
  <li>Management by means (MBM):
  <ul>
    <li>If you don&rsquo;t know how you achieved your objective, how do you know if you can do it again?</li>
  </ul></li>
  <li><a href="https://deming.org/explore/fourteen-points/">14 Points for Management</a>:
  <ul>
    <li>Improve constantly and forever the system.</li>
    <li>Eliminate slogans, exhortations, and targets for the workforce asking for zero defects and new levels of productivity. Such exhortations only create adversarial relationships, as the build of the causes of low quality and low productivity belong to the system and thus lie beyond the power of the workforce.</li>
  </ul></li>
  <li>Waraniak didn&rsquo;t focus on the race: he looked at the preparations and training leading up to it:
  <ul>
    <li>By using two cars and two teams in the design, training, and setup phases, GM could prototype twice the number of ideas and innovations.</li>
  </ul></li>
</ul><h2><a name="ch-15"></a>Chapter 15 - Dr. Quinn, Medicine Woman</h2><h1><a name="p-4"></a>Part IV - The Next Generation of Profound Knowledge</h1><h2><a name="ch-16"></a>Chapter 16 - The Digital Cambrian Explosion</h2>
<ul>
  <li>Dr. Deming reaction to someone who was complaning that he had changed something in his teaching: &ldquo;I will never apologize for learning&rdquo;.</li>
  <li>Lean development focus on waste, whereas agile focus on delivery.</li>
  <li>Steve Blank, The Lean Startup: putting together build, measure, learn and MVP with agile and lean methodologies.</li>
  <li>DevOps: collaboration between devs and ops, and automation of agile and lean principles.</li>
  <li>Read Deming&rsquo;s 14 Points of Management to understand the roots of DevOps.</li>
</ul><h2><a name="ch-17"></a>Chapter 17 - What Would Deming Do?</h2>
<ul>
  <li>A common disease that afflicts management is the impression that &ldquo;our problems are different&rdquo;:
  <ul>
    <li>They are different, to be sure, but the principles that will help are universal in nature.</li>
  </ul></li>
  <li>To profoundly change a system, requires know-how outside of that system.
  <ul>
    <li>If the system had the knowledge, then it would change itself on its own.</li>
    <li>Ed&rsquo;s System of Profound Knowledge does not require someone from the outside.</li>
  </ul></li>
  <li>Only 6% of problems are due to human error. 94% are system error.
  <ul>
    <li>And since the system is the responsibility of management, 94% of problems are caused by bad management.</li>
  </ul></li>
</ul><h2><a name="ch-18"></a>Chapter 18 - Deming&rsquo;s Dark Legacy</h2>
<ul>
  <li>From 2021, federal government&rsquo;s vendors are required to supply a software bill of materials.</li>
</ul><h2><a name="ch-19"></a>Chapter 19 - Out of the Cyber Crisis</h2>
<ul>
  <li>When you silo cybersecurity, seeing it as an independent component instead of a system, you put your entire organization at risk.</li>
  <li><p>Shannon Lietz: security needs to be designed into an organization&rsquo;s system.</p>
  <blockquote>It is not necessary to change. Survival is not mandatory. <cite>Dr. Deming</cite>
  </blockquote></li>
  <li>Today, leaders wait until there is a problem before they fix it.</li>
  <li>Quality is not so much about improving the product as it is about improving the process.</li>
  <li>Tighter relationships with fewer suppliers lead to increased process alignment and lower overall costs.</li>
  <li>In God we trust. All others must bring data.</li>
  <li>Instead of looking at incidents through arbitrary categories (P1 to P4), System of Profound Knowledge could be used to identify common-cause and special-cause patterns across all incidents.</li>
  <li>Blameless post-mortem: instead of assigning a problem to a certain person, blame would be placed on the system.</li>
  <li>&ldquo;I didn&rsquo;t question it&rdquo;: famous last words.</li>
  <li>Plenty of executive managers still don&rsquo;t understand the nature of the digital world and demand &ldquo;zero defects&rdquo; or &ldquo;never fail&rdquo; software.</li>
  <li>Maginot Line thinking is when you expend considerable resources in an effort to counteract a past threat.</li>
  <li>The security industry should assume that hackers will gain access to the system. We should plan for the inevitability of them getting in.</li>
  <li>Too often, managing by hard numbers sacrifices quality.</li>
  <li>Organizations need to be a place where people can teach themselves.</li>
  <li>Perfection is not for this world.</li>
</ul>]]></description></item><item><title>Book notes: Wiring the Winning Organization</title><link>https://danlebrero.com/2023/11/27/wiring-the-winning-organization-summary/</link><guid>https://danlebrero.com/2023/11/27/wiring-the-winning-organization-summary/</guid><pubDate>Mon, 27 Nov 2023 23:30:00 +0100</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/3tT8Xmk">Wiring the Winning Organization</a> by <a href="https://twitter.com/RealGeneKim">Gene Kim</a> and <a href="https://twitter.com/StevenJSpear">Steven J. Spear</a>.</p><p>Gene and Steven present the <a href="https://en.wikipedia.org/wiki/Grand_Unified_Theory">Grand Unified Theory</a> of organization performance.</p><p>3 questions to get started:</p>
<ol>
  <li>Are we solving our toughest problems in planning and practice, where we can iterate and learn?</li>
  <li>Are we shaping our problems so that they are easier to solve because they are simple, low risk, controllable, and easy to understand and iterate and learn from?</li>
  <li>Are we calling out problems loudly and consistently so that they can be swarmed, container, solved and prevent future occurrences?</li>
</ol><h1>Key Insights</h1>
<ul>
  <li>People with the best work experiences need fewer resources, less capital equipment, and less time to accomplish greater things:
  <ul>
    <li>It is the management system.</li>
  </ul></li>
  <li>Collaborative problem-solving occurs in three distinct layers:
  <ol>
    <li>Layer 1 contains the technical objects being worked on. Code in our case.</li>
    <li>Layer 2 contains the tools.</li>
    <li>Layer 3 contains the social circuitry:
    <ul>
      <li>Workers have what they need, when they need it, and in the format they need it.</li>
    </ul></li>
  </ol>
  <ul>
    <li>Layer 1 and 2 are the &ldquo;technical&rdquo; part of a sociotechnical system. Layer 3 is the &ldquo;socio&rdquo; part.</li>
  </ul></li>
  <li>Three mechanisms which create the difference between success and failure:
  <ol>
    <li>Slowification, to make solving problems easier to do:
    <ul>
      <li>Pulling problem-solving out of the realm of performance (operations or execution).</li>
      <li>Instead, realms of planning and practice.</li>
    </ul></li>
    <li>Simplification, to make the problems themselves easier to solve:
    <ul>
      <li>Partitioning large systems into smaller, coherent pieces allow to solve more problems independently and in parallel.</li>
    </ul>
    <ol>
      <li>Incrementalization:
      <ul>
        <li>Partition what is novel (which needs to be tested) from what is known (which is already validated).</li>
        <li>Adds to the novelty in smaller increments.</li>
        <li>Allow to iterate and test changes on fewer factors, so more quickly and safely.</li>
      </ul></li>
      <li>Modularization:
      <ul>
        <li>Smaller, simpler, more numerous coherent pieces.</li>
        <li>Less coupled as they are connected through only a few well-defined and stable interfaces.</li>
      </ul></li>
      <li>Linearization:
      <ul>
        <li>Assembly line.</li>
        <li>Partitions operations that share resources to accomplish multiple objectives into independent and coherent workflows.</li>
        <li>Coherence is achieved by committing all resources needed to generate outputs to workflows.</li>
        <li>Partitioning across workflows is achieved by preventing the sharing of resources between them.</li>
        <li>Partitioning within workflows is achieved by defining hand-offs between steps.</li>
      </ul></li>
    </ol></li>
    <li>Amplification, to make it obvious that there are problems that demand attention and whether they&rsquo;ve been seen and solved.</li>
  </ol></li>
  <li>Toyota + General Motors joint venture <a href="https://en.wikipedia.org/wiki/NUMMI">NUMMI</a>:
  <ul>
    <li>From worst to best with same people after changing management system.</li>
  </ul></li>
  <li>Difference between exceptional and ordinary is obvious by observing the experiences of people doing their work.</li>
  <li>Boundary of a group solving problems must be large enough that it is coherent, having all the people and resources needed, but small enough to not require large amounts of coordination.
  <ul>
    <li>How much coupling there is determines how much coherence leaders must create.</li>
  </ul></li>
  <li>To slowify or not is a choice that leaders make.</li>
  <li>To make things simpler, aim to no need to coordinate with anyone outside the team.</li>
  <li>Change their behaviours, which is a precursor for changing their beliefs.</li>
  <li>When we have more time, lower stakes, and less fear, our creativity can flourish.</li>
  <li>Three phases of work:
  <ol>
    <li>Planning.</li>
    <li>Practice:
    <ul>
      <li>Preproduction/testing.</li>
      <li>We can control the pace and the incremental complexity of what is occurring, so we are not overwhelmed.</li>
      <li>Feedback is used to find flaws and improve our plans.</li>
      <li>Time to coach and improve our abilities to execute those plans.</li>
    </ul></li>
    <li>Performance:
    <ul>
      <li>Force us to depend on already-developed routines, skills, and habits.</li>
      <li>Bring issues back to practice or planning.</li>
    </ul></li>
  </ol></li>
  <li>Training on speaking up directly, fostering psychologically safe conditions for others to speak up.</li>
  <li>Knowledge capture and the potential for continued progress are never-ending.</li>
  <li>A learning leader are more concerned with asking the question and listening to their team.</li>
  <li>Knowledge can also be captured as code.</li>
  <li>Knowledge capture can be conveyed in routines.</li>
  <li>They believed they couldn&rsquo;t think their way to the right answer; instead, they experimented relentlessly with great frequency and at low cost.</li>
  <li><p><a href="#center-out">Center-out leadership</a>.</p>
  <blockquote>As the complexity of the system increases, so do the cognitive demands on the organization. Managing cognitive load through teams with clear responsibilities and boundaries is a distinguishing focus of effective team design. <cite><a href="https://twitter.com/ruthmalan">Ruth Malan</a></cite>
  </blockquote></li>
  <li>Linearized processes can be fragile:
  <ul>
    <li>Without various stabilization mechanisms, they can quickly devolve into &ldquo;job shops&rdquo;.</li>
  </ul></li>
  <li>Design requires isomorphism between Layers 1 and 3. Production requires isomorphism in all three layers:
  <ul>
    <li>If there is a mismatch, orgs underperform.</li>
  </ul></li>
  <li>If effectively run orgs:
  <ul>
    <li>The functional leader is responsible for &ldquo;who&rdquo; and &ldquo;how&rdquo; - providing trainer people.</li>
    <li>The flow owner is responsible for the &ldquo;what&rdquo; and &ldquo;when&rdquo; of how those people are deployed.</li>
  </ul></li>
  <li>Accident investigations that stop at &ldquo;human error&rdquo; are not just bad but dangerous.</li>
  <li>Control theory addresses a broad variety of situations where no static plan can achieve the desired goal, no matter how good the plan is:
  <ul>
    <li>Feedback mechanisms are needed.</li>
    <li>Must be significantly faster and more reliable than the object being controlled.</li>
    <li>Fail: People become indifferent, when they point out problems that are never fixed, or help is requested but never arrives.</li>
  </ul></li>
  <li>Standards make succeeding easier; they make it more obvious that something is difficult or even wrong.</li>
  <li>One team leader for every four or so associates doing direct work:
  <ul>
    <li>Primary job is to help associates when they encounter problems.</li>
  </ul></li>
  <li>When we consider that the most precious resource in any organization is people&rsquo;s ingenuity and creativity, the most common risk is cognitive overload.</li>
</ul><h1>Practices</h1><p>List of practices and theories and if they support Slowification, Simplification ( <strong>I</strong>ncrementalization, <strong>M</strong>odularization, <strong>L</strong>inearization) or Amplification.</p>
<table>
  <thead>
    <tr>
      <th> </th>
      <th>Slowification</th>
      <th>Simplification </th>
      <th>Amplification </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Toyota Production System </td>
      <td>X </td>
      <td>I M L </td>
      <td>X </td>
    </tr>
    <tr>
      <td>DevOps </td>
      <td>X </td>
      <td>I M L </td>
      <td>X </td>
    </tr>
    <tr>
      <td>Deming </td>
      <td>X </td>
      <td>L </td>
      <td>X </td>
    </tr>
    <tr>
      <td>Agile SW Dev </td>
      <td>X </td>
      <td>I </td>
      <td>X </td>
    </tr>
    <tr>
      <td>Lean Startup </td>
      <td>X </td>
      <td>I </td>
      <td>X </td>
    </tr>
    <tr>
      <td>Resilience Engineering </td>
      <td>X </td>
      <td>M </td>
      <td>X </td>
    </tr>
    <tr>
      <td>System Dynamics </td>
      <td>X </td>
      <td> </td>
      <td>X </td>
    </tr>
    <tr>
      <td>Double-Loop Learning </td>
      <td>X </td>
      <td> </td>
      <td>X </td>
    </tr>
    <tr>
      <td>Improvement Kata </td>
      <td>X </td>
      <td> </td>
      <td>X </td>
    </tr>
    <tr>
      <td>Gemba walks, Empowerment, Participative Management </td>
      <td>X </td>
      <td> </td>
      <td>X </td>
    </tr>
    <tr>
      <td>Conway&rsquo;s Law </td>
      <td> </td>
      <td>M L </td>
      <td> </td>
    </tr>
    <tr>
      <td>Cognitive Load </td>
      <td> </td>
      <td>M L </td>
      <td> </td>
    </tr>
    <tr>
      <td>Team Topologies </td>
      <td>X </td>
      <td>M L </td>
      <td> </td>
    </tr>
    <tr>
      <td>Technical Debt </td>
      <td>X </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>Software Architecture </td>
      <td> </td>
      <td>M </td>
      <td> </td>
    </tr>
    <tr>
      <td>Normalization of Deviance </td>
      <td> </td>
      <td> </td>
      <td>X </td>
    </tr>
    <tr>
      <td>Lean Thinking </td>
      <td> </td>
      <td>L </td>
      <td> </td>
    </tr>
    <tr>
      <td>Psychological Safety </td>
      <td> </td>
      <td> </td>
      <td>X </td>
    </tr>
    <tr>
      <td>Westrum Cultural Typologies </td>
      <td> </td>
      <td> </td>
      <td>X </td>
    </tr>
  </tbody>
</table><p><br/></p><h1>Case Studies</h1><p>List of all cases studies in the book:</p>
<ol>
  <li>Chapter 5:
  <ul>
    <li>Case studies:</li>
    <li>MIT Sloan School Sailing Team.</li>
    <li>Mrs. Morris/Ms. Morrison.</li>
    <li>Apollo 11.</li>
    <li>The Columbia Space Shuttle Disaster.</li>
    <li>The Imperial Japanese Navy and Command, Control, and Compliance Leadership.</li>
    <li>The US Navy and Learning Leadership.</li>
    <li>United Airlines Flight 232 Crash Landing.</li>
    <li>United Airlines Flight 173 Crash.</li>
    <li>Google and Amazon Disaster Readiness Drills.</li>
    <li>Netflix.</li>
  </ul></li>
  <li>Chapter 6:
  <ul>
    <li>Boston Marathon: Preparing for a Mass Casualty Event.</li>
  </ul></li>
  <li>Chapter 8:
  <ul>
    <li>Wright Brother&rsquo;s First Flight.</li>
    <li>Incrementalization in the Arts.</li>
    <li>Apple iPhone vs Nokia.</li>
    <li>Menomonee Falls Safe School Reopenings.</li>
    <li>Mastering New Naval Technology.</li>
    <li>Amazon (pre-2002).</li>
    <li>IBM System/360.</li>
    <li>Accelerate Drug Development.</li>
    <li>Pratt &amp; Whitney&rsquo;s Jet Engine Design.</li>
    <li>Team of Teams.</li>
  </ul></li>
  <li>Chapter 9:
  <ul>
    <li>NASA Space Program: Mercury, Gemini, and Apollo.</li>
  </ul></li>
  <li>Chapter 10:
  <ul>
    <li>Toyota.</li>
  </ul></li>
</ol><h1>TOC</h1>
<ul>
  <li><a href="#p-0">Preface</a></li>
  <li><a href="#p-1">Part I - A New Theory of Performance Management</a>
  <ul>
    <li><a href="#ch-1">Chapter 1 - The Pinnacles of Human Achievement and Why We Form Organizations</a></li>
    <li><a href="#ch-2">Chapter 2 - Navigating from Danger Zones to Winning Zones</a></li>
    <li><a href="#ch-3">Chapter 3 - Winning Based on Liberating Ingenuity</a></li>
  </ul></li>
  <li><a href="#p-2">Part II - Slowification</a>
  <ul>
    <li><a href="#ch-4">Chapter 4 - Slowification: A Theory Overview</a></li>
    <li><a href="#ch-5">Chapter 5 - Slowification: Case Studies in Planning, Practice, and Performance</a></li>
    <li><a href="#ch-6">Chapter 6 - Slowification: Exemplar Case Study and Further Examination</a></li>
  </ul></li>
  <li><a href="#p-3">Part III - Simplification</a>
  <ul>
    <li><a href="#ch-7">Chapter 7 - Simplification: A Theory Overview</a></li>
    <li><a href="#ch-8">Chapter 8 - Simplification: Case Studies in Incrementalization, Modularization, and Linearization</a></li>
    <li><a href="#ch-9">Chapter 9 - Simplification: Exemplar Case Study and Further Examination</a></li>
  </ul></li>
  <li><a href="#p-4">Part IV - Amplification</a>
  <ul>
    <li><a href="#ch-10">Chapter 10 - Amplification: A Theory Overview and Exemplar Case Study</a></li>
  </ul></li>
  <li><a href="#p-5">Conclusion</a></li>
  <li><a href="#p-6">Appendix B - Transactional vs Developmental Leadership</a></li>
</ul><h1><a name="p-0"></a>Preface</h1>
<ul>
  <li>People with the best work experiences need fewer resources, less capital equipment, and less time to accomplish greater things:
  <ul>
    <li>It is the management system.</li>
  </ul></li>
  <li>Social circuity: the overlay of precesses, procedures, routines, and norms that enable people to do their work easily and well.</li>
</ul><h1><a name="p-1"></a>Part I - A New Theory of Performance Management</h1><h2><a name="ch-1"></a>Chapter 1 - The Pinnacles of Human Achievement and Why We Form Organizations</h2>
<ul>
  <li>Three mechanisms which create the difference between success and failure:
  <ol>
    <li>Slowification, to make solving problems easier to do:
    <ul>
      <li>Pulling problem-solving out of the realm of performance (operations or execution).</li>
      <li>Instead, realms of planning and practice.</li>
    </ul></li>
    <li>Simplification, to make the problems themselves easier to solve:
    <ul>
      <li>Through incrementalization, modularization, and linearization.</li>
      <li>Aim to make Layer 1 problem-solving parallel with little coordination from Layer 3.</li>
    </ul></li>
    <li>Amplification, to make it obvious that there are problems that demand attention and whether they&rsquo;ve been seen and solved:
    <ul>
      <li>Early and often, before problem become large and systematically disruptive.</li>
    </ul></li>
  </ol></li>
  <li>Toyota + General Motors joint venture <a href="https://en.wikipedia.org/wiki/NUMMI">NUMMI</a>:
  <ul>
    <li>From worst to best with same people after changing management system.</li>
  </ul></li>
  <li>Difference between exceptional and ordinary is obvious by observing the experiences of people doing their work.</li>
  <li>Collaborative problem-solving occurs in three distinct layers:
  <ol>
    <li>Layer 1 contains the technical objects being worked on. Code in our case.</li>
    <li>Layer 2 contains the tools.</li>
    <li>Layer 3 contains the social circuitry:
    <ul>
      <li>Workers have what they need, when they need it, and in the format they need it.</li>
    </ul></li>
  </ol>
  <ul>
    <li>Layer 1 and 2 are the &ldquo;technical&rdquo; part of a sociotechnical system. Layer 3 is the &ldquo;socio&rdquo; part.</li>
  </ul></li>
</ul><h2><a name="ch-2"></a>Chapter 2 - Navigating from Danger Zones to Winning Zones</h2>
<ul>
  <li>Boundary of a group solving problems must be large enough that it is coherent, having all the people and resources needed, but small enough to not require large amounts of coordination.</li>
  <li>Coherent:
  <ul>
    <li>Having the quality of a unified whole.</li>
    <li>In the same group, communicating directly with the needed frequency, speed, accuracy and detail required.</li>
  </ul></li>
  <li>Coupling:
  <ul>
    <li>When changes in one affect the other.</li>
  </ul></li>
  <li>How much coupling there is determines how much coherence leaders must create.</li>
  <li>Bad:
  <ul>
    <li>Over coupled and under partitioned.</li>
    <li>Under coupled and over partitioned.</li>
  </ul></li>
  <li>Estimates for the time (to remove furniture) is nearly always wrong:
  <ul>
    <li>First, they try to create a more accurate schedule by getting better information.</li>
    <li>Then, try to help by finding from others teams who doesn&rsquo;t seem too busy.</li>
    <li>This makes matters much worse.</li>
    <li>Now had two problems instead of one.</li>
    <li>Instead: keep people that are good at dealing with trickier issues in reserve.</li>
  </ul></li>
</ul><h2><a name="ch-3"></a>Chapter 3 - Winning Based on Liberating Ingenuity</h2>
<ul>
  <li>To slowify or not is a choice that leaders make.</li>
  <li>To make things simpler, aim to no need to coordinate with anyone outside the team.</li>
  <li>Recursive modularization:
  <ul>
    <li>Work was increasingly able to be performed and improved in parallel.</li>
  </ul></li>
  <li>Linearization does for sequential processes what modularization does for parallel processes.</li>
  <li>Flawed wiring: talking to the wrong people, at the wrong time, in the wrong way, about the wrong things.</li>
  <li>Wiring also dictates the type of feedback that is generated.</li>
  <li>Model line:
  <ul>
    <li>Transformative tool.</li>
    <li>Segment of the larger enterprise where new approaches can be tested.</li>
    <li>Small but coherent.</li>
  </ul></li>
  <li>Change their behaviours, which is a precursor for changing their beliefs.</li>
</ul><h1><a name="p-2"></a>Part II - Slowification</h1><h2><a name="ch-4"></a>Chapter 4 - Slowification: A Theory Overview</h2>
<ul>
  <li>Slowification is applied in one of two ways:
  <ol>
    <li>Slowing ourselves down, so we can be more deliberative and self-reflective.</li>
    <li>Slowing down the environment.</li>
  </ol></li>
  <li>When we have more time, lower stakes, and less fear, our creativity can flourish.</li>
  <li>When using System 1 (fast thinking):
  <ul>
    <li>We use only what we already know.</li>
    <li>Does not encourage or allow time to improve our thinking.</li>
  </ul></li>
  <li>Three phases of work:
  <ol>
    <li>Planning:
    <ul>
      <li>Safest environment.</li>
      <li>Cost of expressing and capturing ideas is low.</li>
      <li>Allow for slowification.</li>
    </ul></li>
    <li>Practice:
    <ul>
      <li>Preproduction/testing.</li>
      <li>Ideas are put into action.</li>
      <li>We can control the pace and the incremental complexity of what is occurring, so we are not overwhelmed.</li>
      <li>Feedback is used to find flaws and improve our plans.</li>
      <li>Time to coach and improve our abilities to execute those plans.</li>
      <li>Develop capabilities to address:
      <ul>
        <li>Most likely scenarios.</li>
        <li>Less likely but highly consequential scenarios.</li>
      </ul></li>
    </ul></li>
  </ol>
  <ul>
    <li>Allow for slowification.</li>
  </ul>
  <ol>
    <li>Performance:</li>
  </ol>
  <ul>
    <li>It controls the pace of the experience.</li>
    <li>Force us to depend on already-developed routines, skills, and habits.</li>
    <li>Bring issues back to practice or planning.</li>
  </ul></li>
  <li>Common element to slowification is feedback.</li>
</ul><h2><a name="ch-5"></a>Chapter 5 - Slowification: Case Studies in Planning, Practice, and Performance</h2>
<ul>
  <li>Deming&rsquo;s learning cycle of Plan-Do-Study-Act is a tool to encourage slowification.</li>
  <li>Leaders must capture the lessons learned to create an ever-improving baseline.</li>
  <li>&ldquo;Pause time&rdquo; culture to figure out what the problem is.</li>
  <li>Stress-testing their systems during practice sessions.</li>
  <li>Compliance leadership expect that instructions are followed without question.</li>
  <li>In learning leadership, plans are treated as best guesses and are subject to forceful backup.</li>
  <li>Training on speaking up directly, fostering psychologically safe conditions for others to speak up.</li>
  <li>Certain engineers were marked as either &ldquo;abducted by aliens&rdquo; or &ldquo;killed by zombies&rdquo;.</li>
  <li>An often-overlooked area of testing is business process and communications.</li>
  <li>Most often, stress testing discovered weak points in the Layer 3 social circuitry of their operations.</li>
</ul><h2><a name="ch-6"></a>Chapter 6 - Slowification: Exemplar Case Study and Further Examination</h2>
<ul>
  <li>Knowledge capture and the potential for continued progress are never-ending.</li>
  <li>Book of lessons learned.</li>
  <li>How often and well do we capture lessons learned in a way that is easy to access?</li>
  <li>How often are incorporated into future planning and used in future practice?</li>
  <li>Knowledge can also be captured as code.</li>
  <li>Knowledge capture can be conveyed in routines.</li>
  <li>A learning leader are more concerned with asking the question and listening to their team.</li>
</ul><h1><a name="p-3"></a>Part III - Simplification</h1><h2><a name="ch-7"></a>Chapter 7 - Simplification: A Theory Overview</h2>
<ul>
  <li>Partitioning large systems into smaller, coherent pieces allow to solve more problems independently and in parallel.</li>
  <li>A coherent component often requires teams to be cross-functional.</li>
  <li>When a coherent unit is decoupled from others, disruptions in one don&rsquo;t spill over.</li>
  <li>Three simplification techniques:
  <ol>
    <li>Incrementalization:
    <ul>
      <li>Partition what is novel (which needs to be tested) from what is known (which is already validated) into their own self-contained, coherent units.</li>
      <li>Adds to the novelty in smaller increments.</li>
      <li>Allow to iterate and test changes on fewer factors, so more quickly and safely.</li>
    </ul></li>
    <li>Modularization:
    <ul>
      <li>Smaller, simpler, more numerous coherent pieces.</li>
      <li>Less coupled as they are connected through only a few well-defined and stable interfaces.</li>
      <li>Creates option value: decouple (temporally) decisions tomorrow from conditions today, giving latitude of action to decision-makers.</li>
      <li>Downsides:
      <ul>
        <li>Potential incompatibility.</li>
        <li>Misspecification at the interfaces.</li>
        <li>Inability to change the interface when it proves to be inadequate.</li>
      </ul></li>
      <li>Leader has the Layer 3 responsibility to balance independence of action with ensuring enough compatibility that all integrate into a cohesive whole.</li>
    </ul></li>
    <li>Linearization:
    <ul>
      <li>Assembly line.</li>
      <li>Partitions operations that share resources to accomplish multiple objectives into independent and coherent workflows.</li>
      <li>Coherence is achieved by committing all resources needed to generate outputs to workflows.</li>
      <li>Partitioning across workflows is achieved by preventing the sharing of resources between them.</li>
      <li>Partitioning within workflows is achieved by defining hand-offs between steps.</li>
      <li>4 elements:
      <ol>
        <li>Sequentialization: outputs are generated along the single dedicated, non-looping pathway of connected activities.</li>
        <li>Standardization: output, steps/activities, handoffs and how work is done in each individual activity.</li>
        <li>Stabilization: triggers when there is a problem and resources to swarm it.</li>
        <li>Self-synchronization: system can automatically self-pace without elaborate scheduling.</li>
      </ol></li>
    </ul></li>
  </ol></li>
  <li>People can focus on a small number of novel items in a small number of projects and interact with the smallest number of people necessary.</li>
  <li>Ideally, there should be coordinated collaboration among those whose work depends on or is depended on by others:
  <ul>
    <li>However, too often, coordination is done only &ldquo;at the top of the silo&rdquo;.</li>
  </ul></li>
  <li>Nonlinearized flows need considerably more Layer 3 coordination.</li>
  <li>Managing how work is performed at the bottleneck is much simpler and more effective than scheduling the entire factory.</li>
  <li>Linearization is also essential in high-speed, sustained improvement.</li>
</ul><h2><a name="ch-8"></a>Chapter 8 - Simplification: Case Studies in Incrementalization, Modularization, and Linearization</h2>
<ul>
  <li>They believed they couldn&rsquo;t think their way to the right answer; instead, they experimented relentlessly with great frequency and at low cost.</li>
  <li>Breaking large problems into smaller pieces, around which it is easier to experiment and learn.</li>
  <li>Nokia engineers took over 48 hours to compile the Symbian OS, and two week to get a software build that could run on a prototype.</li>
  <li><a name="center-out"></a>Center-out leadership:
  <ul>
    <li>Collect as much information as they can get and push it out to those running local operations.</li>
    <li>Then delegate authority to local leaders to generate solutions that work for their unique situations.</li>
    <li>Then gather local lessons and synthesize them into shareable, collective wisdom.</li>
    <li>Useful when operational responsibility is distributed or when work happens in coherent local units that do not affect each other.</li>
  </ul></li>
  <li>Amazon pre-2002:
  <ul>
    <li>To change the ordering process, the digital teams would walk to the 80 different ordering teams and say &ldquo;We need to change this&rdquo;. The ordering teams would respond that they hadn&rsquo;t budgeted for it.</li>
    <li>SKU changes caused many global outages.</li>
    <li>Hire more project managers to help coordinate the work.</li>
    <li>Put in more approval processes in an attempt to reduce outages.</li>
  </ul></li>
  <li>Ruth Malan: As the complexity of the system increases, so do the cognitive demands on the organization. Managing cognitive load through teams with clear responsibilities and boundaries is a distinguishing focus of effective team design.</li>
  <li>Stabilization mechanism: they assigned only enough work to account for 85% of their colleagues&rsquo; time.</li>
  <li>Linearized processes can be fragile:
  <ul>
    <li>Without various stabilization mechanisms, they can quickly devolve into &ldquo;job shops&rdquo;.</li>
  </ul></li>
</ul><h2><a name="ch-9"></a>Chapter 9 - Simplification: Exemplar Case Study and Further Examination</h2>
<ul>
  <li>By having clarity around how these technical subsystems interact at Layer 1, orgs can be formed on how they should interact in Layer 3.</li>
  <li>Design requires isomorphism between Layers 1 and 3. Production requires isomorphism in all three layers:
  <ul>
    <li>If there is a mismatch, orgs underperform.</li>
  </ul></li>
  <li>If effectively run orgs, the functional leader is responsible for &ldquo;who&rdquo; and &ldquo;how&rdquo; - providing trainer people.</li>
  <li>The flow owner is responsible for:
  <ul>
    <li>The &ldquo;what&rdquo; and &ldquo;when&rdquo; of how those people are deployed.</li>
    <li>Establish what outputs.</li>
    <li>Work is sequenced properly.</li>
    <li>Balance cycle times and work load.</li>
    <li>Exchanges and handoffs between steps are well established.</li>
  </ul></li>
  <li>All-at-once leadership:
  <ul>
    <li>Must hold in their heads the entire Layer 1 system for which they are responsible and must coordinate nearly everyone and everything in Layer 3.</li>
  </ul></li>
  <li>Incremental leadership:
  <ul>
    <li>Maintain comm channels and mechanism of knowledge sharing.</li>
    <li>Partition novel from validated and ensuring experiments are being conducted rigorously and frequently.</li>
  </ul></li>
</ul><h1><a name="p-4"></a>Part IV - Amplification</h1><h2><a name="ch-10"></a>Chapter 10 - Amplification: A Theory Overview and Exemplar Case Study</h2>
<ul>
  <li>Amplification is the act of calling out problems loudly and consistently enough so help is triggered to swarm them.</li>
  <li>Control theory addresses a broad variety of situations where no static plan can achieve the desired goal, no matter how good the plan is:
  <ul>
    <li>Feedback mechanisms are needed.</li>
    <li>It can fail because of delays and imprecision.</li>
    <li>Must be significantly faster and more reliable than the object being controlled.</li>
  </ul></li>
  <li>Layer 3 processes and procedures must integrate signaling that should be frequent enough, fast enough, accurate enough, and loud enough.
  <ul>
    <li>Signaling must be designed well and deliberately.</li>
  </ul></li>
  <li>Six steps of amplification:
  <ol>
    <li>Sender generates signal:
    <ul>
      <li>Fail: People become indifferent, when they point out problems that are never fixed, or help is requested but never arrives.</li>
      <li>NASA culture: call out and examine anything anomalous or unexpected, and study it until it could be explained.</li>
    </ul></li>
    <li>Sender transmits signal:
    <ul>
      <li>Fail: People recognize a problem but do not feel safe calling it out.</li>
    </ul></li>
    <li>Receiver receives signal:
    <ul>
      <li>Simon Sinek: Communication is not about speaking what we think. It&rsquo;s about ensuring others hear what we mean.</li>
      <li>Fail: Leaders consumed with maintaining operational tempo can&rsquo;t pause long enough to develop new approaches.</li>
      <li>Apollo missions: only people allowed to communicate with astronauts in space were CAPCOMs:
      <ul>
        <li>Backup astronauts or training crew.</li>
        <li>Same training and same shared experiences allowed them to develop a highly efficient code.</li>
      </ul></li>
    </ul></li>
    <li>Corrective reaction is started:
    <ul>
      <li>Fail: signal arrives too late.</li>
      <li>Fail: nobody reacts to signal.</li>
    </ul></li>
    <li>Corrective reaction is completed.</li>
    <li>Sender confirms that reported problem has been solved:
    <ul>
      <li>Otherwise, they send another signal.</li>
    </ul></li>
  </ol></li>
  <li>In the best factories, mechanics pulled the anon cord twelve times a shift:
  <ul>
    <li>There were enough capable team leaders to consistently provide help.</li>
  </ul></li>
  <li>Accident investigations that stop at &ldquo;human error&rdquo; are not just bad but dangerous.</li>
  <li>Toyota&rsquo;s policy of &ldquo;global localization&rdquo;: building where it sells and buying where it builds.</li>
  <li>Exemplar case study:
  <ul>
    <li>One vehicle per minute.</li>
    <li>Varied and complex work.</li>
    <li>Several thousand employees.</li>
    <li>On-site suppliers.</li>
    <li>One team leader for every four or so associates doing direct work:
    <ul>
      <li>Primary job is to help associates when they encounter problems.</li>
      <li>Deliberate inversion of who was responsible.</li>
      <li>Ratio depends on technical sophistication of the work, and the frequency and severity with which problems occur.</li>
    </ul></li>
    <li>President:
    <ul>
      <li>Spend several hours a day on the shop floor.</li>
      <li>See the nuance and detail of what is actually occurring.</li>
    </ul></li>
    <li>Stopping the line was routine:
    <ul>
      <li>Short pause, associates tidy the work area.</li>
      <li>Long pauses: improvement activities or training.</li>
      <li>Back-shop teams use the time to do maintenance and repair.</li>
    </ul></li>
    <li>62 problem-solving stations:
    <ul>
      <li>Each focused in one big problem.</li>
      <li>Shared by both shifts, collaborating continually.</li>
      <li>Clear visibility.</li>
    </ul></li>
  </ul></li>
  <li>Standards make succeeding easier; they make it more obvious that something is difficult or even wrong.</li>
</ul><h1><a name="p-5"></a>Conclusion</h1>
<ul>
  <li>Successes are fantastic, yet often without obvious evidence of leadership involvement:
  <ul>
    <li>Leadership was everywhere in planning and practice.</li>
  </ul></li>
  <li>Both DevOps and TPS have the commonality of being developed to create conditions in which it is easier for individuals to succeed at what they do and have their efforts contribute seamlessly to a much larger whole.</li>
  <li>When we consider that the most precious resource in any organization is people&rsquo;s ingenuity and creativity, the most common risk is cognitive overload.</li>
  <li>3 questions to get started:
  <ol>
    <li>Are we solving our toughest problems in planning and practice, where we can iterate and learn?</li>
    <li>Are we shaping our problems so that they are easier to solve because they are simple, low risk, controllable, and easy to understand and iterate and learn from?</li>
    <li>Are we calling out problems loudly and consistently so that they can be swarmed, container, solved and prevent future occurrences?</li>
  </ol></li>
</ul><h1><a name="p-6"></a>Appendix B - Transactional vs Developmental Leadership</h1>
<table>
  <thead>
    <tr>
      <th> </th>
      <th>Transactional orientation </th>
      <th>Developmental orientation </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Limit </td>
      <td>Scare resources </td>
      <td>Useful understanding of resources&rsquo; best possible use </td>
    </tr>
    <tr>
      <td>Actions </td>
      <td>Optimization by allocation of scarce resources to best possible use </td>
      <td>Make it quicker and easier to solve difficult problems better </td>
    </tr>
    <tr>
      <td> </td>
      <td>People has to adapt to the system </td>
      <td>The system has to adapt to the people </td>
    </tr>
    <tr>
      <td>How increase output </td>
      <td>More resources </td>
      <td>Better problem-solving </td>
    </tr>
  </tbody>
</table>
<ul>
  <li>Transactional leaders focus on the process itself.</li>
  <li>Developmental mindset assumes that their limitation is insufficient understanding about how to use the resource available to them. They don&rsquo;t try to fix everything all at once.</li>
</ul>]]></description></item><item><title>Book notes: Code that fits in your head: Heuristics for Software Engineering</title><link>https://danlebrero.com/2023/11/08/code-that-fits-your-head-summary/</link><guid>https://danlebrero.com/2023/11/08/code-that-fits-your-head-summary/</guid><pubDate>Wed, 08 Nov 2023 00:00:00 +0100</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/3Hi4Y6K">Code that fits in your head: Heuristics for Software Engineering</a> by <a href="https://twitter.com/ploeh">Mark Seemann</a>.</p><p>Good advise for junior and mid level devs that have to work with Object-Oriented languages.</p><p>But my favourite quote:</p>
<blockquote><p>Do yourself a favour and learn functional programming. It fits better in your head.</p>
</blockquote><h1>Key Insights</h1>
<ul>
  <li><p>Only unsuccessful software ends.</p>
  <blockquote>The act of describing a program in unambiguous detail and the act of programming are one and the same <cite>Kevlin Henney</cite>
  </blockquote></li>
  <li>SW engineering was derailed by personal computers:
  <ul>
    <li>They created a generation of self-taught programmers that grow unaware of existing SW engineering knowledge.</li>
    <li>SW engineering should make the SW dev process more <strong>regular</strong>.</li>
  </ul></li>
  <li>Change compiler and linter warnings into errors.</li>
  <li>High-level tests should go easy on assertions.</li>
  <li>Don&rsquo;t get derailed: write down your improvement ideas and move on.</li>
  <li>Explicit is better than implicit.</li>
  <li>Cyclomatic complexity is one of the rare code metrics that I find useful in practice.</li>
  <li>You can compose code in many ways, but there are more wrong ways than good ways.</li>
  <li>Good interface design considers not only what is possible, but also what should be deliberately impossible.</li>
  <li>Every time your code successfully builds, commit it.</li>
  <li>Code reviews that take more than one hour are not effective.</li>
  <li>Do not sit with the author to do a code review:
  <ul>
    <li>Author will influence the reviewer.</li>
  </ul></li>
  <li>The more you edit test code, the less you can trust it.</li>
  <li>Write a test to reproduce the bug.</li>
  <li>Time it takes to execute a test suite matters: Less than 10 seconds.</li>
  <li>Do yourself a favour and learn functional programming. It fits better in your head.</li>
  <li>What to log:
  <ul>
    <li>Log all impure actions but not more.</li>
  </ul></li>
  <li>Meetings don&rsquo;t scale, documentation does.</li>
  <li>Security is like insurance.</li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#part-1">Part I: Acceleration</a>
  <ul>
    <li><a href="#ch-1">Chapter 1: Art or Science?</a></li>
    <li><a href="#ch-2">Chapter 2: Checklists</a></li>
    <li><a href="#ch-3">Chapter 3 - Tackling Complexity</a></li>
    <li><a href="#ch-4">Chapter 4 - Vertical Slice</a></li>
    <li><a href="#ch-5">Chapter 5 - Encapsulation</a></li>
    <li><a href="#ch-6">Chapter 6 - Triangulation</a></li>
    <li><a href="#ch-7">Chapter 7 - Decomposition</a></li>
    <li><a href="#ch-8">Chapter 8 - API Design</a></li>
    <li><a href="#ch-9">Chapter 9 - Teamwork</a></li>
  </ul></li>
  <li><a href="#p-2">Part II - Sustainability</a>
  <ul>
    <li><a href="#ch-10">Chapter 10 - Augmenting Code</a></li>
    <li><a href="#ch-11">Chapter 11 - Editing Unit Tests</a></li>
    <li><a href="#ch-12">Chapter 12 - Troubleshooting</a></li>
    <li><a href="#ch-13">Chapter 13 - Separation of Concerns</a></li>
    <li><a href="#ch-14">Chapter 14 - Rhythm</a></li>
    <li><a href="#ch-15">Chapter 15 - The Usual Suspects</a></li>
    <li><a href="#ch-16">Chapter 16 - Tour</a></li>
  </ul></li>
</ul><h1><a name="part-1"></a>Part I: Acceleration</h1><h2><a name="ch-1"></a>Chapter 1: Art or Science?</h2>
<ul>
  <li>How we think about SW development shapes how we work.</li>
  <li>Only unsuccessful software ends.</li>
</ul>
<blockquote><p>The act of describing a program in unambiguous detail and the act of programming are one and the same <cite>Kevlin Henney</cite></p>
</blockquote>
<ul>
  <li>None of the metaphors fit:
  <ul>
    <li>House building:
    <ul>
      <li>Projects.</li>
      <li>Phases.</li>
      <li>Dependencies.</li>
    </ul></li>
    <li>Garden:
    <ul>
      <li>Who grows the garden?</li>
    </ul></li>
    <li>Craftsman:
    <ul>
      <li>Heuristics: It does not scale.</li>
    </ul></li>
    <li>SW engineering:
    <ul>
      <li>It was derailed by personal computers:
      <ul>
        <li>They created a generation of self-taught programmers that grow unaware of existing SW engineering  knowledge.</li>
      </ul></li>
    </ul></li>
  </ul></li>
  <li>The skills you need to work as a professional SW dev tend to be situational (codebase, tools, &hellip;).</li>
</ul>
<blockquote><p>Programming is Pop Culture <cite>Alan Kay</cite></p>
</blockquote><h2><a name="ch-2"></a>Chapter 2: Checklists</h2>
<ul>
  <li>To enable, support and liberate.
  <ul>
    <li>Not to monitor or audit.</li>
  </ul></li>
  <li>Improve the outcome with no increase in skill.</li>
  <li>Change compiler and linter warnings into errors.
  <ul>
    <li>On existing codebases, enable one rule/namespace at a time.</li>
  </ul></li>
  <li>You are the technical expert, it is your job to make technical decisions, which includes internal quality decisions.</li>
</ul><h2><a name="ch-3"></a>Chapter 3 - Tackling Complexity</h2>
<ul>
  <li>What does fit in your head.</li>
  <li>SW engineering should make the SW dev process more <strong>regular</strong>.</li>
  <li>Sustainability: balance between too much focus vs too little on value.</li>
  <li>Why is programming difficult?
  <ol>
    <li>Short-memory con hold only 4-7 pieces of information.</li>
    <li>You spend more time reading than writing code:</li>
  </ol>
  <ul>
    <li>Optimise for code readability.</li>
    <li>Every minute you invest in making the code easier to understand pays itself back tenfold.</li>
  </ul>
  <ol>
    <li>System 1 (making decision based on immediate information) vs System 2.</li>
  </ol></li>
  <li>You can do SW engineering without understanding Computer Science.</li>
</ul><h2><a name="ch-4"></a>Chapter 4 - Vertical Slice</h2>
<ul>
  <li>SW eng: methodology to make sure that SW works as intended, and that stays that way.
  <ul>
    <li>As intended != solving the user problem.</li>
  </ul></li>
  <li>Implement features with the simples possible code, but look out for duplication.</li>
  <li>Walking skeleton.</li>
  <li>Drive changes through tests.</li>
  <li>Author ignores compiler warning when writing tests because readability, but does not for production code.</li>
  <li>High-level tests should go easy on assertions:
  <ul>
    <li>Make only the essentials visible.</li>
  </ul></li>
  <li>Author moves to unit tests with all behaviours test in green (???).</li>
  <li>DTO, Repository, Entity, equals &amp; hashcode. Very glad I left all of this behind.</li>
  <li>Manual testing from time to time is ok.</li>
</ul><h2><a name="ch-5"></a>Chapter 5 - Encapsulation</h2>
<ul>
  <li>Trading a compile-time error for a runtime exception is a poor trade-off.</li>
  <li>Encapsulation is a contract that describes valid interactions between objects and callers.</li>
  <li>Red-green-refactor.</li>
  <li>Postel&rsquo;s Law: Be conservative in what you send, be liberal in what you accept.</li>
  <li>With immutable objects, you only need to consider validity in one place: the constructor.</li>
</ul><h2><a name="ch-6"></a>Chapter 6 - Triangulation</h2>
<ul>
  <li>When you work with legacy code, you slowly, painstakingly commit the structure of the code base to long-term memory:
  <ul>
    <li>Information in long-term memory is harder to change, hence legacy code is harder to change.</li>
  </ul></li>
  <li>Don&rsquo;t get derailed: write down your improvement ideas and move on.</li>
  <li>Explicit is better than implicit.</li>
  <li>Devil&rsquo;s advocate technique: try to pass test with an obviously incomplete implementation:
  <ul>
    <li>This works as a critique of your tests.</li>
    <li>When to stop? Ask &ldquo;How likely is such a regression to happen?&rdquo;</li>
  </ul></li>
  <li>Use only &lt; or &lt;=.</li>
</ul><h2><a name="ch-7"></a>Chapter 7 - Decomposition</h2>
<ul>
  <li>Once the team&rsquo;s mindset has changed, the rule itself becomes redundant.</li>
  <li>Cyclomatic complexity is one of the rare code metrics that I find useful in practice.</li>
  <li>No more than 7 things should be going on in a single piece of code:
  <ul>
    <li>Each branch as one thing, so no more than cyclomatic complexity of 7.</li>
  </ul></li>
  <li>&ldquo;Static&rdquo; methods or methods with 0 parameters are a code smell.</li>
  <li>Parse, don&rsquo;t validate:
  <ul>
    <li>Instead of returning a bool, return either an error or a class from the domain model.</li>
  </ul></li>
  <li>Fractal architecture:
  <ul>
    <li>Each layer/piece of code should have no more than 7 things, those things themselves being composed of no more than 7 things.</li>
    <li>Low level details should be represented as a single abstract chunk, and higher level details should be either irrelevant at that level of zoom, or otherwise explicitly visible as method parameters or injected dependencies.</li>
  </ul></li>
  <li>Count variables to measure complexity:
  <ul>
    <li>Params + locals + class fields.</li>
    <li>Consider refactoring to Parameter Object if complexity becomes high.</li>
  </ul></li>
  <li>&ldquo;If you know ASP.NET &hellip;&rdquo;: In my experience with Spring, this is a big &ldquo;if&rdquo;. Spring has become a beast able to do many things, so knowing a lot of complex machinery beforehand should count somehow towards the complexity of the codebase.</li>
</ul><h2><a name="ch-8"></a>Chapter 8 - API Design</h2>
<ul>
  <li>You can compose code in many ways, but there are more wrong ways than good ways:
  <ul>
    <li>It requires skill and taste.</li>
  </ul></li>
  <li>Good interface design considers not only what is possible, but also what should be deliberately impossible.
  <ul>
    <li>Design APIs so that it is difficult to misuse them.</li>
  </ul></li>
  <li>Favour specialised APIs over Swiss Army API.</li>
  <li>Remove method names from an interface and see if you can guess what they do out of the interface name + inputs + outputs.</li>
  <li>Methods with side effects should return no data (void), so makes it trivial to recognise them:
  <ul>
    <li>Does this mean throw exceptions to signal errors?</li>
  </ul></li>
  <li>From best to worse communication options:
  <ol>
    <li>Types as they are check at compile time.</li>
    <li>Method names.</li>
    <li>Comments.</li>
    <li>Automated tests.</li>
    <li>Commit messages.</li>
    <li>Documentation.</li>
  </ol></li>
</ul><h2><a name="ch-9"></a>Chapter 9 - Teamwork</h2>
<ul>
  <li>Git: 50/72 rule
  <ul>
    <li>Headline in imperative 50 chars.</li>
    <li>Body 72 chars wide.</li>
  </ul></li>
  <li>CI: integrate every 4 hours.</li>
  <li>Every time your code successfully builds, commit it.</li>
  <li>Reject big PR.</li>
  <li>Code reviews that take more than one hour are not effective.</li>
  <li>Code review question: Will I be okay maintaining this?</li>
  <li>Do not sit with the author to do a code review:
  <ul>
    <li>Author will influence the reviewer.</li>
  </ul></li>
  <li>Cheer when you see something you like.</li>
</ul><h1><a name="p-2"></a>Part II - Sustainability</h1><h2><a name="ch-10"></a>Chapter 10 - Augmenting Code</h2>
<ul>
  <li>Strangler pattern at the method and class level.</li>
</ul><h2><a name="ch-11"></a>Chapter 11 - Editing Unit Tests</h2>
<ul>
  <li>The more you edit test code, the less you can trust it.</li>
  <li>You can&rsquo;t refactor unit tests.</li>
  <li>A test method having only one assertion: too simplistic.</li>
  <li>When you need to change your test code, try to do it without touching the production code.</li>
  <li>Don&rsquo;t trust a test that you haven&rsquo;t seen fail:
  <ul>
    <li>Comment out production code and bring it back a piece at a time.</li>
  </ul></li>
</ul><h2><a name="ch-12"></a>Chapter 12 - Troubleshooting</h2>
<ul>
  <li>Step 1: Try to understand what is going on:
  <ul>
    <li>Use the scientific method:
    <ol>
      <li>Make a prediction (hypothesis).</li>
      <li>Perform an experiment.</li>
      <li>Compare outcome with prediction.</li>
      <li>Goto 1 until you understand.</li>
    </ol></li>
  </ul></li>
  <li>Delete code to simplify.</li>
  <li>Time-box the process and take breaks if no progress is made.</li>
  <li>Rubber ducking: the mere act of explaining a problem tends to produce new insights.</li>
  <li>When a bug appears, stop what you are doing and fix it.</li>
  <li>Write a test to reproduce the bug.</li>
  <li>Time it takes to execute a test suite matters: Less than 10 seconds.</li>
</ul><h2><a name="ch-13"></a>Chapter 13 - Separation of Concerns</h2>
<ul>
  <li>You must be able to recompose what you decomposed.</li>
  <li>Nested composition:
  <ul>
    <li>Typical in OO</li>
    <li>Around side-effects:
    <ul>
      <li>You model actions.</li>
      <li>Compose by nesting.</li>
      <li>Hidden interactions: increases complexity.</li>
    </ul></li>
  </ul></li>
  <li>Sequential composition:
  <ul>
    <li>Pipeline.</li>
    <li>No side-effects.</li>
    <li>Good, pure functions.</li>
  </ul></li>
  <li>Push side-effects to the edge of the system.</li>
  <li>Functional programming fits better in your head.</li>
  <li>If you see an exception in the logs, treat it as a defect.</li>
  <li>What to log:
  <ul>
    <li>HTTP request + response.</li>
    <li>DB request + response.</li>
    <li>Log all impure actions but not more.</li>
  </ul></li>
</ul><h2><a name="ch-14"></a>Chapter 14 - Rhythm</h2>
<ul>
  <li>Personal:
  <ul>
    <li>Pomodoro: time-box 25 mins, 5 min break even when in the flow.</li>
    <li>Don&rsquo;t work long hours.</li>
    <li>Meetings don&rsquo;t scale, documentation does.</li>
    <li>Learn to touch type.</li>
  </ul></li>
  <li>Team:
  <ul>
    <li>Update dependencies regularly.</li>
  </ul></li>
</ul><h2><a name="ch-15"></a>Chapter 15 - The Usual Suspects</h2>
<ul>
  <li>Security is like insurance.</li>
  <li>STRIDE:
  <ul>
    <li>Spoofing: try to pose as somebody else.</li>
    <li>Tampering.</li>
    <li>Repudiation: deny performing an action, like receiving an item.</li>
    <li>Information disclosure.</li>
    <li>Denial of service.</li>
    <li>Elevation of privilege.</li>
  </ul></li>
  <li>Property base testing.</li>
  <li><a href="https://codescene.com/">Behavioural code analysis</a></li>
</ul><h2><a name="ch-16"></a>Chapter 16 - Tour</h2>
<ul>
  <li>File organization: put all files in one directory:
  <ul>
    <li>Break into multiple packages to enforce no cyclic dependencies.</li>
  </ul></li>
  <li>Learn a new system from tests.</li>
</ul>]]></description></item><item><title>Book notes: Wrong fit, Right fit: Why How We Work Matters More Than Ever</title><link>https://danlebrero.com/2023/10/25/right-fit-wrong-fit-summary/</link><guid>https://danlebrero.com/2023/10/25/right-fit-wrong-fit-summary/</guid><pubDate>Wed, 25 Oct 2023 00:00:00 +0200</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/3QrhK7X">Wrong Fit, Right Fit: Why How We Work Matters More Than Ever</a> by <a href="https://twitter.com/gramico">André Martin</a></p><p>Very interesting view on how to find your ideal job, and how companies can hire the right people: focus a lot more on how day-to-day work is done (and our preferences).</p><h1>Key Insights</h1>
<ul>
  <li>Fit: Deep and authentic connection to how a company works day-to-day.</li>
  <li>No place will be a perfect match.</li>
  <li>Working harder to fit in does not produce right fit; rather the opposite.</li>
  <li>Who a company says they are rarely matches how that company works day-to-day.</li>
  <li>Talent is &ldquo;forced&rdquo; to bump into ill-defined ways of working, use their creative energy to understand how things actually get done.</li>
  <li>Begin sharing the choice you are planning to make. If feel hesitation, doubt, or anxiety as you share there is likely something not lining up.</li>
  <li>Top 20% talent produce 80% of value.</li>
  <li>What if interviews where less like first dates and more like family reunions?</li>
  <li><a href="#ch-4">Chapter 4</a> is gold to understand yourself. Holistic Candidate Profile:
  <ol>
    <li>What are my core values?</li>
    <li>What is the life I am building?</li>
    <li>What is my craft/superpower?</li>
    <li>Who is my ideal leader?</li>
    <li>How do I like to work?</li>
    <li>What am I solving for?</li>
  </ol></li>
  <li>When a product appears superior on aspects that are comparable with other products, we will fill in the gaps on missing information or difficult to ascertain attributes in a manner that supports that superiority.</li>
  <li>As an interviewee, &ldquo;How can I position myself as the best candidate for the job?&rdquo;
  <ul>
    <li>We end up &ldquo;acting&rdquo; versus &ldquo;being&rdquo;.</li>
  </ul></li>
  <li>Most variance in satisfaction of an employee can be accounted for by their manager or leader.</li>
  <li><a href="#questions">Questions to understand ways of working in the company</a>:
  <ol>
    <li>What is the profile of the person who succeeds here?</li>
    <li>What is the reputation of the function/team you are joining?</li>
    <li>What happens here that didn&rsquo;t happen at the other companies you worked at previously?</li>
  </ol></li>
  <li>New talent is highly impressionable. Make sure they are surrounded by the &ldquo;models of your culture&rdquo; early and often.</li>
  <li>Onboarding:
  <ul>
    <li>Keep a journal.</li>
    <li>90 days.</li>
    <li>To figure out if it is right fit.</li>
  </ul></li>
  <li><a href="#howwork">How does the company get work done?</a>
  <ol>
    <li>How does the company collaborate?
    <ul>
      <li>Most fundamental attribute of right fit.</li>
    </ul></li>
    <li>How company assess performance?
    <ul>
      <li>Companies pay for one of:
      <ol>
        <li>Performance.</li>
        <li>Demonstrated expertise.</li>
        <li>Lived values/behaviours.</li>
        <li>Long-term commitment.</li>
      </ol></li>
    </ul></li>
  </ol></li>
  <li>Who owns my career, the company or me?</li>
  <li>Our education has trained us to ignore all the positives and go straight to the places to improve.</li>
  <li>As an executive leader, how you decide to work sets the floor (minimum expectation), not the ceiling.</li>
  <li>The Fit Assessment (page 126).</li>
  <li>The later you marry, the less likely you are to divorce.</li>
  <li>Learning improves self-confidence, curb anxiety and depression.</li>
  <li>Companies that promote learning regularly outperform competitors.</li>
  <li>Try to create a week calendar that is closer to your ideal in terms of time, types of meeting, and people you work alongside.</li>
  <li>A team makes the manager, not the other way around.</li>
  <li>Individual feedback have an inverse relationship to seniority. (Should be the opposite!).</li>
  <li>If you don&rsquo;t say no, then your yes is meaningless.</li>
  <li>Culture is an outcome.</li>
  <li>With each new recruit, it gets harder to consistently teach or develop consistent unwritten practices.</li>
  <li>To know how to the company should work in the future, study the company&rsquo;s most productive teams of today:
  <ul>
    <li>Somewhere out in your company, there is a better practice for everything.</li>
  </ul></li>
  <li><a href="#realistic-job-preview">Realistic job preview</a>.</li>
  <li>Team membership is as much of an art as team leadership.</li>
  <li>Transition from one role to another:
  <ul>
    <li>Companies usually ask to cover for both roles:
    <ul>
      <li>More stress in an already stressful situation.</li>
    </ul></li>
    <li>Instead:
    <ul>
      <li>7 days off to rest.</li>
      <li>7 days for reflection, reconnection and reset.</li>
    </ul></li>
  </ul></li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#p-0">Introduction: There is a Right Fit Company Waiting for You</a></li>
  <li><a href="#p-1">Part 1: Context + Right Fit</a>
  <ul>
    <li><a href="#ch-1">Chapter 1: How the Workplace Has Changed</a></li>
    <li><a href="#ch-2">Chapter 2 - Why Right Fit Is So Rare</a></li>
  </ul></li>
  <li><a href="#p-2">Part 2 - Talent + Right Fit</a>
  <ul>
    <li><a href="#ch-3">Chapter 3 - Beginning the Search for Right Fit</a></li>
    <li><a href="#ch-4">Chapter 4 - Self-Reflection and Fit Excursions</a></li>
  </ul></li>
  <li><a href="#p-3">Part 3 - Interviewing and Onboarding + Right Fit</a>
  <ul>
    <li><a href="#ch-5">Chapter 5 - Don&rsquo;t Judge a Company by Its Career Page</a></li>
    <li><a href="#ch-6">Chapter 6 - Figuring Out If You Really Fit</a></li>
  </ul></li>
  <li><a href="#p-4">Part 4 - Buffers + Right Fit</a>
  <ul>
    <li><a href="#ch-7">Chapter 7 - Inspirational Buffers and Enhancing Fit Over Time</a></li>
    <li><a href="#ch-8">Chapter 8 - Relational Buffers and Enhancing Fit Over Time</a></li>
  </ul></li>
  <li><a href="#p-5">Part 5 - Company + Right Fit</a>
  <ul>
    <li><a href="#ch-9">Chapter 9 - Crafting and Communicating How the Company Works</a></li>
    <li><a href="#ch-10">Chapter 10 - Reimagining Fit - Recruiting and (Re)recruiting for Right Fit</a></li>
  </ul></li>
</ul><h1><a name="p-0"></a>Introduction: There is a Right Fit Company Waiting for You</h1>
<ul>
  <li>What if it isn&rsquo;t about changing how we work, but rather improving our chances of creating and finding a better fit?</li>
  <li>Book based on 65 in-depth interviews, all level and different company sizes.</li>
  <li>Fit:
  <ul>
    <li>Deep and authentic connection to how a company works day-to-day.</li>
    <li>Days feel easy, work is meaningful and connection with company grows exponentially.</li>
  </ul></li>
  <li>Ways of working is innate in the fabric of the company and often emanate from early days:
  <ul>
    <li>How prioritize work, solve problems, innovate, manage conflict, socialize projects.</li>
  </ul></li>
  <li>Way of working often undervalued during recruitment.</li>
  <li>Pressure during interview to &ldquo;fit in&rdquo;.</li>
  <li>Three key misalignments:
  <ol>
    <li>Total mismatch: &ldquo;Nobody at the company looks like me or works like me&rdquo;.</li>
    <li>Person mismatch: &ldquo;Nobody at the company looks like me, but many people work how I prefer to work&rdquo;.</li>
    <li>Way of working mismatch: &ldquo;People look like me but nobody works the way I prefer to work&rdquo;.</li>
  </ol></li>
</ul><h1><a name="p-1"></a>Part 1: Context + Right Fit</h1><h2><a name="ch-1"></a>Chapter 1: How the Workplace Has Changed</h2>
<ul>
  <li>Great Resignation:
  <ul>
    <li>2022, 77% of talent resigns within the first three years. 45% within one year.</li>
    <li>Survey: Of 2000 US employees with less than 6 month at the company, 50% are actively looking for something new.</li>
    <li>2020:
    <ul>
      <li>PwC estimated 65% employees are looking for a new job.</li>
      <li>Gallup estimated $7.8 trillion of productivity loss due to disengaged employees.</li>
    </ul></li>
  </ul></li>
  <li>As human being, we want to be part of a community and be committed to something bigger than ourselves.</li>
  <li>Trends:
  <ol>
    <li>Rise of the culture deck:
    <ul>
      <li>Netflix started it.</li>
      <li>Brand campaigns made culture aspirational and the day-to-day climate less and less of a priority.</li>
      <li>More adept to talking about culture than doing.</li>
    </ul></li>
    <li>The Ping-Pong table of purposeless perks:
    <ul>
      <li>Clarity about what actually matters was being clouded by more and more stuff.</li>
    </ul></li>
    <li>The decade of decedent growth:
    <ul>
      <li>2009 to 2020 marked the longest economic expansion in the last 80 years.</li>
      <li>Habits are formed that don’t help in tougher times.</li>
    </ul></li>
    <li>A crisis of commitment:
    <ul>
      <li>With the abundance that surrounds us, we have entered into a constant state of infinite browsing where we strive to &ldquo;keep our options open&rdquo; over &ldquo;the option to choose to dedicate ourselves to&rdquo;.</li>
    </ul></li>
    <li>The side hustle economy:
    <ul>
      <li>46% americans took on a side hustle to cover their monthly budget.</li>
      <li>Formal employers are getting the rest of us, not the best of us.</li>
    </ul></li>
    <li>Being more vs doing more:
    <ul>
      <li>Does what I am doing matter?</li>
      <li>2017 study: found that 41% of a typical knowledge worker task don&rsquo;t add value.</li>
      <li>Not simply doing less, but better connect all the things we do to a higher purpose.</li>
      <li>When we are inspired, we have a nearly insatiable energy to create.</li>
      <li>Proximity can accelerate work.</li>
    </ul></li>
  </ol></li>
  <li>If you’re talent, maybe it’s time to start searching for a place you can love day-to-day in balance with searching for a position you can do or a brand you revere.</li>
  <li>If you&rsquo;re a leader, create an experience that fits those who &ldquo;love what we love&rdquo; as opposed to either allowing many cultures under one umbrella or trying to create a place where everyone can be, on average, not unhappy.</li>
</ul><h2><a name="ch-2"></a>Chapter 2 - Why Right Fit Is So Rare</h2>
<ul>
  <li>World Health Organization definition of burnout: a syndrome resulting from workplace stress that has not been successfully managed.
  <ul>
    <li>Three dimensions:
    <ul>
      <li>Feeling of energy depletion.</li>
      <li>Increased mental distance or negative feeling about one&rsquo;s job.</li>
      <li>Reduced professional efficacy.</li>
    </ul></li>
  </ul></li>
  <li>Cost of labor is typically 70% of operating budget.</li>
  <li>Cognitive dissonance:
  <ul>
    <li>Discomfort of making a choice or acting in a manner that is incongruent with one&rsquo;s stated values, opinions or preferences.</li>
    <li>Begin sharing the choice you are planning to make. If feel hesitation, doubt, or anxiety as you share there is likely something not lining up.</li>
  </ul></li>
  <li>Approach and Avoidance Systems:
  <ul>
    <li>Avoidance system: stop us from doing thing that put us in danger.</li>
    <li>Approach system:
    <ul>
      <li>Pleasure-based desires.</li>
      <li>Pleasure now and pain later.</li>
    </ul></li>
    <li>When choosing a job, approach system can overtake the avoidance system.</li>
  </ul></li>
  <li>BIRG-ing and Fit:
  <ul>
    <li>BIRG-ing:
    <ul>
      <li>Basking in reflected glory.</li>
      <li>Using others&rsquo; success to boost our own self-image.</li>
    </ul></li>
    <li>CORF-ing:
    <ul>
      <li>Cutting off reflected failure.</li>
      <li>Distance ourselves from failure.</li>
    </ul></li>
    <li>Football: we won vs they lost.</li>
    <li>Choosing a job for BIRG-ing.</li>
  </ul></li>
  <li>Fit is not about fitting in.
  <ul>
    <li>In wrong fit, we end up using our creative energy to &ldquo;fit in&rdquo;.</li>
  </ul></li>
  <li>Do I fit here?</li>
</ul><p><img src="/images/blog/books/wrong-fit-right-fit/do-i-fit-here.jpeg" alt="Do I fit here?" /></p><h1><a name="p-2"></a>Part 2 - Talent + Right Fit</h1><h2><a name="ch-3"></a>Chapter 3 - Beginning the Search for Right Fit</h2>
<ul>
  <li>Researchers were able to prove that there is no standard bell curve when it comes to performance.
  <ul>
    <li>Top 20% talent produce 80% of value.</li>
  </ul></li>
  <li>82% of Fortune 500 executive said they do not recruit highly talented people. 93% don&rsquo;t believe they develop people fast and effectively.</li>
  <li>What if interviews where less like first dates and more like family reunions?</li>
  <li>Holistic Candidate Profile:
  <ol>
    <li>What are my core values?</li>
    <li>What is the life I am building?</li>
    <li>What is my craft/superpower?</li>
    <li>Who is my ideal leader?</li>
    <li>How do I like to work?</li>
    <li>What am I solving for?</li>
  </ol></li>
  <li>Realistic Experience Preview:
  <ol>
    <li>What are our lived values?</li>
    <li>What promise do we make to talent?</li>
    <li>How do we make money/have an impact?</li>
    <li>What is the profile of your leader?</li>
    <li>What is the job the next 12-18 months?</li>
    <li>What are the principles, practices, and platforms that define how work gets done?</li>
  </ol></li>
</ul><h2><a name="ch-4"></a>Chapter 4 - Self-Reflection and Fit Excursions</h2><p>For talent, 8 core question. This chapter contains one &ldquo;Excursion&rdquo;/exercise to help you answer them.</p>
<ol>
  <li>What are the values you most consistently hold?
  <ul>
    <li>Pick from pairs of values.</li>
  </ul></li>
  <li>What is the life you are trying to build?
  <ul>
    <li>In two years time, what if:
    <ul>
      <li>Nothing changed.</li>
      <li>Dream the dream.</li>
    </ul></li>
  </ul></li>
  <li>What are your superpowers? What are you best at (vs what do you love to do)?
  <ul>
    <li>Superpowers:
    <ul>
      <li>What gaps do you fill in every company you have joined?</li>
      <li>What areas of expertise are you attempting to hone?</li>
      <li>What do people come to you for?</li>
      <li>What activities do you volunteer to take?</li>
    </ul></li>
    <li>Shadow side:
    <ul>
      <li>Often from overused strengths or non-productive behaviours when under stress.</li>
      <li>When under stress for long period, we flip into &ldquo;the grip&rdquo; <a href="https://www.psychologyjunkie.com/what-youre-like-during-grip-stress-based-on-your-myers-briggs-personality-type/">(Myers Briggs)</a>: unfamiliar and unproductive version of ourselves.</li>
    </ul></li>
  </ul></li>
  <li>Are you of craft, company or cause?</li>
  <li>Who is your ideal leader? What do you need from them to succeed?
  <ul>
    <li>Good chemistry with a manager is so important and so rare that many successful talent and leadership experts advocate for following a great manager.</li>
    <li>Things that we look for in our managers, will be gifted at ourselves.</li>
    <li>We gain our skills as managers from our managers.</li>
  </ul></li>
  <li>If you were to start a company, what would you do? How would you want it to feel?</li>
  <li>Above all else, what matters most to you right now? What are you solving for?
  <ul>
    <li>Our careers can be central to our life in some moments, and they can be enablers of our life in others.</li>
  </ul></li>
  <li>How to you bring all of your answers together into a single leadership story?
  <ul>
    <li>At the heart of finding right fit is changing the frame of how you see yourself.</li>
  </ul></li>
</ol><h1><a name="p-3"></a>Part 3 - Interviewing and Onboarding + Right Fit</h1><h2><a name="ch-5"></a>Chapter 5 - Don&rsquo;t Judge a Company by Its Career Page</h2>
<ul>
  <li><a href="https://en.wikipedia.org/wiki/Motivated_reasoning">Motivated reasoning</a>: When the early signals we get about a product or a place are positive and hold true, we will likely stop our search for new information or comparisons to other options.</li>
  <li>When a product appears superior on aspects that are comparable with other products, we will fill in the gaps on missing information or difficult to ascertain attributes in a manner that supports that superiority.</li>
  <li>Confirmation bias: potentially confirmatory evidence tends to be taken at face value while potentially dis-confirmatory evidence is subjected to critical and skeptical scrutiny.</li>
  <li>Information available about a company is &ldquo;mostly true version of the truth&rdquo;:
  <ul>
    <li>Doesn&rsquo;t give enough information to really see the cracks that every company has.</li>
    <li>Employer-brand version of Snapchat filters.</li>
    <li>Most sources are internally produced and relatively subjective.</li>
  </ul></li>
  <li>Rules to validate information:
  <ol>
    <li>More than three sources.</li>
    <li>Internal and external materials.</li>
    <li>Subjective and objective data.</li>
    <li>If something feels off, dive deeper. Don&rsquo;t ignore it.</li>
  </ol></li>
  <li>As an interviewee:
  <ul>
    <li>&ldquo;How can I position myself as the best candidate for the job?&rdquo;
    <ul>
      <li>The very nature of the question can lead us astray.</li>
      <li>We end up &ldquo;acting&rdquo; versus &ldquo;being&rdquo;.</li>
    </ul></li>
  </ul></li>
  <li><a name="questions"></a>Questions to understand ways of working in the company:
  <ol>
    <li>What is the profile of the person who succeeds here?
    <ul>
      <li>Learn how the company defines success.</li>
      <li>Ask interviewer to tell you about a real person.</li>
    </ul></li>
    <li>How does the company get work done? (chapter 6)</li>
    <li>What is the company&rsquo;s relationship to time?
    <ul>
      <li>Most important.</li>
      <li>Productivity equals full calendar?</li>
      <li>Is unlimited vacation really unlimited?</li>
      <li>Do you need to be at the office or in a meeting to be deemed productive?</li>
    </ul></li>
    <li>What is the reputation of the function/team you are joining?</li>
    <li>What are your day-to-day duties?
    <ul>
      <li>What will be the first three deliverables be once onboarding is complete?</li>
    </ul></li>
    <li>How does the leader get productivity out of their team?
    <ul>
      <li>Most variance in satisfaction of an employee can be accounted for by their manager or leader.</li>
      <li>Study by Artz et al. found that technical competence mattered above else.</li>
    </ul></li>
    <li>Where do people go once they leave this job/team/leader?
    <ul>
      <li>Most underrated skill as a leader is being a &ldquo;star maker&rdquo;.</li>
    </ul></li>
    <li>What happens here that didn&rsquo;t happen at the other companies you worked at previously?
    <ul>
      <li>Whether the culture has been solidified enough to turn into longstanding and unique practices.</li>
    </ul></li>
    <li>What are the nonnegotiables at the company?
    <ul>
      <li>How consistent are across interviews?</li>
    </ul></li>
  </ol></li>
</ul><h2><a name="ch-6"></a>Chapter 6 - Figuring Out If You Really Fit</h2>
<ul>
  <li>To find right fit, you should spend your first ninety days focused on understanding the reality of how the company truly works day-to-day and assessing that against your preferences.</li>
  <li>New talent is highly impressionable. Make sure they are surrounded by the &ldquo;models of your culture&rdquo; early and often.</li>
  <li>Fitting in is shifting away from your natural preference to be included or feel sense of belonging. This is a normal reaction to starting a new job.</li>
  <li>Most companies rarely fully understand or know how to articulate how work actually gets done.</li>
  <li>Three versions of a company:
  <ol>
    <li>The company we would be if we were at our best:
    <ul>
      <li>Recruiter version to sell the position.</li>
    </ul></li>
    <li>What is shown to talent on their first day:
    <ul>
      <li>Akin to being toured through a museum.</li>
    </ul></li>
    <li>How it is for most people, every day.</li>
  </ol></li>
  <li>As talent, onboarding:
  <ul>
    <li>Is about determining right or wrong fit.</li>
    <li>Rules:
    <ol>
      <li>Avoid snap judgments: take the full 90 days.</li>
      <li>Keep a journal.</li>
      <li>Review what you have learned at day 10, 30, 60 and 90:
      <ul>
        <li>Patterns and themes.</li>
        <li>Share with your manager/mentor.</li>
      </ul></li>
      <li>Let the facts lead you to your conclusions, not the other way around.</li>
      <li>Focus your assessment on the ways the company works.</li>
      <li>Make a decision to commit, or not:
      <ul>
        <li>Most important and difficult without a framework.</li>
      </ul></li>
      <li>Create buffers to sustain right fit as the company grows/transforms.</li>
    </ol></li>
  </ul></li>
  <li><a name="howwork"></a>How does the company get work done?
  <ol>
    <li>How does the company make decisions?
    <ul>
      <li>Tradeoffs made. Is everything a priority?</li>
      <li>Is there a clearly defined strategy that people can make decisions in alignment with?</li>
    </ul></li>
    <li>How does the company solve problems?
    <ul>
      <li>What information is most valuable when determining the best solution?</li>
      <li>Best companies use approach depending on the size and complexity or company values.</li>
    </ul></li>
    <li>How are ideas communicated?
    <ul>
      <li>Full sentences or pithy one-liners?</li>
    </ul></li>
    <li>How does the company collaborate?
    <ul>
      <li>Most fundamental attribute of right fit.</li>
      <li>Area that diverges the most from team to team.</li>
      <li>Pay attention to:
      <ul>
        <li>Meeting culture.</li>
        <li>Primary tools used to communicate.</li>
        <li>Cadence of work.</li>
      </ul></li>
    </ul></li>
    <li>How company assess performance?
    <ul>
      <li>Output, outcomes, strength of relationships, time in your seat or billed hours?</li>
      <li>Companies pay for one of:
      <ol>
        <li>Performance.</li>
        <li>Demonstrated expertise.</li>
        <li>Lived values/behaviours.</li>
        <li>Long-term commitment.</li>
      </ol></li>
      <li>To understand your own beliefs, look back at the classes you most enjoyed in school:
      <ul>
        <li>How did you get graded?</li>
        <li>Work alone or in groups?</li>
      </ul></li>
    </ul></li>
    <li>How does the company provide feedback?
    <ul>
      <li>Open, honest and consistent feedback is a rarity.</li>
      <li>We are fairly self-centered and idiosyncratic in our measurements, and thus our assessment is ultimately random and potentially damaging.</li>
      <li>Our education has trained us to ignore all the positives and go straight to the places to improve.</li>
    </ul></li>
    <li>How does the company resolve conflict and break ties?
    <ul>
      <li>Are purpose, values or principles used?</li>
      <li>Full commitment or &ldquo;disagree and commit&rdquo;?</li>
    </ul></li>
    <li>How company develops its talent?
    <ul>
      <li>Turning key events into lessons takes self-awareness, feedback, coaching, learning and testing out new behaviours, things that most companies fail to invest in.</li>
      <li>Who owns my career, the company or me?</li>
    </ul></li>
    <li>How does information flow?
    <ul>
      <li>Tells where decisions get made.</li>
    </ul></li>
    <li>How does the company socialize/gather?
    <ul>
      <li>What does the company celebrate?</li>
    </ul></li>
    <li>What is the company&rsquo;s relationship with time?
    <ul>
      <li>When on vacation, are I still available or unreachable?</li>
    </ul></li>
    <li>How does the company view rest and recovery?
    <ul>
      <li>Do leaders take vacation quietly, or are they vocal about taking breaks?</li>
    </ul></li>
  </ol></li>
  <li>No place will be a perfect match.</li>
  <li>As an executive leader, how you decide to work sets the floor (minimum expectation), not the ceiling.</li>
  <li>The Fit Assessment (page 126).</li>
</ul><h1><a name="p-4"></a>Part 4 - Buffers + Right Fit</h1><h2><a name="ch-7"></a>Chapter 7 - Inspirational Buffers and Enhancing Fit Over Time</h2>
<ul>
  <li>Great fit now doesn&rsquo;t guarantee that it will remain that way.</li>
  <li>Wrong fit is rarely sustainable for an extended period.</li>
  <li>Buffers to fit:
  <ul>
    <li>Actions to improve the overall experience over time.</li>
  </ul></li>
  <li>Two categories:
  <ol>
    <li>Inspirational:
    <ul>
      <li>Those that connect us to something more meaningful.</li>
      <li>Increase better and more value-adding work.</li>
    </ul></li>
    <li>Relational: center around people who we interact with.</li>
  </ol></li>
  <li>The later you marry, the less likely you are to divorce.</li>
  <li><a href="https://hbr.org/2013/04/does-money-really-affect-motiv">Correlation of pay to satisfaction is very weak</a>.</li>
  <li>Intrinsic motivations FTW!</li>
  <li>Inspirational buffers:
  <ol>
    <li>Connect to Purpose or Cause:
    <ul>
      <li>Company: why is the world better with us in it?</li>
      <li>Try to connect to the company purpose at least once a week.</li>
    </ul></li>
    <li>Increase Meaningful Work, Decrease Busy Work:
    <ul>
      <li>Two ways:
      <ol>
        <li>Align nature of work:
        <ul>
          <li>To your passions.</li>
          <li>Learn new skills.</li>
          <li>Connect to a cause you care.</li>
        </ul></li>
        <li>Spend more time in high-value activities.</li>
      </ol></li>
      <li>Once people know you are passionate in something, they will give you plenty of opportunity to do it.</li>
      <li>Say &ldquo;no&rdquo; more. Volunteer more.</li>
    </ul></li>
    <li>If you are learning and growing:
    <ul>
      <li>Learning improves self-confidence, curb anxiety and depression.</li>
      <li>Companies that promote learning regularly outperform competitors.</li>
      <li>Five clusters of learning opportunities:
      <ol>
        <li>Challenging assignments.</li>
        <li>Developmental relationships (mentors, teachers, managers).</li>
        <li>Hardships or adverse situations (wrong fit).</li>
        <li>Coursework and training.</li>
        <li>Personal experiences (birth of child, living in a new country).</li>
      </ol></li>
      <li>Majority of learning come from 1 and 2. Least from 4.</li>
      <li>Learning takes work: reflection, making connections to previous events, practicing new behaviours.</li>
      <li>Diversity of experience matters.</li>
      <li>Hardship often brings out the most raw version of ourselves.</li>
      <li>Treat every day as a prototype (== small experiment).</li>
    </ul></li>
    <li>Find a consumer in need that you can relate to and can help.</li>
  </ol></li>
  <li>In any project, ask if the consumer would pay an extra 5% for the work.</li>
  <li>Make better use of your time: 41% activities are neither personally fulfilling nor add value.</li>
  <li>Procrastination:
  <ul>
    <li>More during stress.</li>
    <li>Losing time on the tasks at had due to our urgent need to &ldquo;manage negative emotions&rdquo;.</li>
  </ul></li>
  <li>Working harder to fit in does not produce right fit; rather the opposite.</li>
  <li>Try to create a week calendar that is closer to your ideal in terms of time, types of meeting, and people you work alongside.</li>
</ul><h2><a name="ch-8"></a>Chapter 8 - Relational Buffers and Enhancing Fit Over Time</h2>
<ul>
  <li>4 Buffers:
  <ol>
    <li>A supportive leader/manager:
    <ul>
      <li>Look at how you can shape your manager to the one that you need.</li>
      <li>A team makes the manager, not the other way around.</li>
      <li>Positive reinforcement.</li>
      <li>Individual feedback have an inverse relationship to seniority.
      <ul>
        <li>It should be the opposite as the stakes are higher!</li>
      </ul></li>
      <li>Managers understand if their teams are performing, but they know very little about the why.</li>
      <li>Researcher found that managers estimate their impact way higher than their reporters.</li>
    </ul></li>
    <li>Meaningful mentor:
    <ul>
      <li>70% of talent who have a mentor are satisfied with their jobs.</li>
      <li>Mentors create connections, and connections are the seeds of commitment.</li>
      <li>3 types:
      <ol>
        <li>Storytellers: those who have been in the company for many years.</li>
        <li>Models: bleed the mission and values of the company.</li>
        <li>Masters of craft.
        <ul>
          <li>Rarely in the top leadership positions, very rarely used as mentors.</li>
        </ul></li>
      </ol></li>
      <li>Think what are you looking for in a mentor (career advise, connections, &hellip;)</li>
      <li>Agenda should be question based and focused on real areas where you are struggling or looking for wisdom.</li>
    </ul></li>
    <li>Workplace BFF or Doppelganger:
    <ul>
      <li>Good social relationships are one of the most consistent predictors of a happy life.</li>
      <li>Doppelganger:
      <ul>
        <li>Somebody like you but that moves through the org with greater ease.</li>
        <li>Represent future possibilities.</li>
      </ul></li>
      <li>Invest your time in the relationship.</li>
    </ul></li>
    <li>Life outside work is magic:
    <ul>
      <li>If you don&rsquo;t say no, then your yes is meaningless. Peter Block.</li>
      <li>The happier we are at home, the more engaged and committed we will be at work.</li>
      <li>Don&rsquo;t let your outside work hours be filled with sensory pursuits.</li>
    </ul></li>
  </ol></li>
</ul><h1><a name="p-5"></a>Part 5 - Company + Right Fit</h1><h2><a name="ch-9"></a>Chapter 9 - Crafting and Communicating How the Company Works</h2>
<ul>
  <li>Employee experience:
  <ul>
    <li>All the touch points an employee has with the company in a single year:</li>
    <li>Physical, human, digital and administrative.</li>
    <li>Excludes &ldquo;culture&rdquo;. Culture is an outcome.</li>
    <li>3 elements:
    <ol>
      <li>Work principles:
      <ul>
        <li>How it should feel to work in a team.</li>
        <li>What differentiates the company.</li>
      </ul></li>
      <li>Work practices: chapter 4.</li>
      <li>Work platforms: the technology used to do work.</li>
    </ol></li>
  </ul></li>
  <li>With each new recruit, it gets harder to consistently teach or develop consistent unwritten practices.</li>
  <li>Creating <em>Right Fit</em> doesn&rsquo;t mean being the right place for everyone.</li>
  <li>To know how to the company should work in the future, study the company&rsquo;s most productive teams of today:
  <ul>
    <li>Make consistent what has already been innovated on.</li>
  </ul></li>
  <li>Research: people make judgements within a fraction of a second upon seeing a person&rsquo;s face.</li>
  <li>Balance first impression is key: both who the company is today and what want to be tomorrow.</li>
  <li>Tips:
  <ol>
    <li>Make values the ground and work principles/practices/platforms the figure.</li>
    <li>Purpose and how it makes money overt.</li>
    <li>Show the real company in real ways.</li>
    <li>Create a network.</li>
  </ol></li>
  <li><a name="realistic-job-preview"></a>Realistic job preview:
  <ol>
    <li>Nonnegotiables: set the base at a certain level.</li>
    <li>What we do:
    <ul>
      <li>How the product/service flows through the system.</li>
      <li>Focus on how the role adds value.</li>
    </ul></li>
    <li>How we work:
    <ul>
      <li>Be super clear about how work gets done.</li>
      <li>Prose-based work principles, practices and platforms.</li>
    </ul></li>
    <li>What capabilities we need.</li>
    <li>The three top deliverables for this position or this team:
    <ul>
      <li>In the next eighteen to twenty-four months.</li>
    </ul></li>
  </ol></li>
</ul><h2><a name="ch-10"></a>Chapter 10 - Reimagining Fit - Recruiting and (Re)recruiting for Right Fit</h2>
<ul>
  <li>Onboarding:
  <ul>
    <li>A company will never have a more excited or engaged employee than the moment they walk into their first day.</li>
    <li>If a company just focuses on the new joiners, their culture will transform automatically over the next few years:
    <ul>
      <li>Turnover + growth.</li>
    </ul></li>
    <li>Anything the company spends on onboarding will be far less expensive than the hidden cost of losing new employees within their first six months.</li>
    <li>Cultural immersion: what is expected, what is valued and how works get done.</li>
  </ul></li>
  <li>Your early network will dictate much of your long-term success.</li>
  <li>Great managers are rare:
  <ul>
    <li>Gallup: companies fail to choose the right candidate 82% of time.</li>
  </ul></li>
  <li>Team membership is as much of an art as team leadership:
  <ul>
    <li>Teach our teams &ldquo;teaming&rdquo;.</li>
  </ul></li>
  <li>Performance as the collective act by individuals dedicated to a single mission:
  <ul>
    <li>Have one strategy:
    <ul>
      <li>Teams/individuals simply need to know their place in the strategy.</li>
    </ul></li>
    <li>Outcomes, not activities.</li>
    <li>1-2-1 focus on ensuring everyone is growing faster than the company:
    <ul>
      <li>Moving key events to lessons of experience.</li>
    </ul></li>
    <li>Pay well and distribute bonuses to the team.</li>
    <li>Find and celebrate the &ldquo;better practice&rdquo;:
    <ul>
      <li>Somewhere out in your company, there is a better practice for everything.</li>
      <li>Positive disobedient.</li>
    </ul></li>
  </ul></li>
  <li>Ensure strategy is participated in, not just developed:
  <ul>
    <li>The life or death of strategy is determined in the number of day-to-day decisions that are made in service of it (or not).</li>
  </ul></li>
  <li>Unnecessary meetings:
  <ul>
    <li>Those that don&rsquo;t directly connect to purpose, how we work or sense of community.</li>
    <li>Asses the monetary cost of every meeting.</li>
    <li>Clear outcomes for each meeting.
    <ul>
      <li>What cannot be done in another way?</li>
    </ul></li>
    <li>Set a limit for the size of meeting.</li>
  </ul></li>
  <li>Transition from one role to another:
  <ul>
    <li>Companies usually ask to cover for both roles:
    <ul>
      <li>More stress in an already stressful situation.</li>
    </ul></li>
    <li>Instead:
    <ul>
      <li>7 days off to rest.</li>
      <li>7 days for reflection, reconnection and reset.</li>
    </ul></li>
  </ul></li>
  <li>In times of transformation, think about how you work before you launch and design how it will work after.</li>
</ul>]]></description></item><item><title>Book notes: Never split the difference</title><link>https://danlebrero.com/2023/09/16/never-split-the-difference-summary/</link><guid>https://danlebrero.com/2023/09/16/never-split-the-difference-summary/</guid><pubDate>Sat, 16 Sep 2023 10:30:00 +0200</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/3yKCWKN">Never Split the Difference</a> by <a href="https://twitter.com/fbinegotiator">Chris Voss</a> and <a href="https://twitter.com/tahlraz">Tahl Raz</a></p><p>Kidnappers are just businessman trying to get the best price.</p><h1>Key Insights</h1>
<ul>
  <li>Apology and first name to seed warmth.</li>
  <li>Open-ended questions (calibrated questions):
  <ul>
    <li>Gives other illusion of control.</li>
    <li>How the other would solved your problems.</li>
  </ul></li>
  <li>Negotiate more effectively by influencing System 1.</li>
  <li>Core concept: Tactical empathy:
  <ul>
    <li>Listening is the most active thing you can do.</li>
    <li>When people feel listened:
    <ol>
      <li>Listen to themselves more carefully.</li>
      <li>More open to evaluate and clarify their own thoughts and feelings.</li>
      <li>Less defensive.</li>
      <li>More willing to listen to others.</li>
    </ol></li>
  </ul></li>
  <li>Engage negotiation with a mindset of discovery.</li>
  <li>Make it all about the other.</li>
  <li>Mirroring (isopraxism):
  <ul>
    <li>Sign of bonding.</li>
    <li>We fear what&rsquo;s different and drawn to what&rsquo;s similar.</li>
    <li>Repeat the last 3 words, or the critical 1 to 3 words.</li>
    <li>Downward inflection: I am listening and understand.</li>
    <li>Upward inflection: invite response.</li>
    <li>4 steps:
    <ol>
      <li>Use late-night FM DJ voice.</li>
      <li>Start with &ldquo;I&rsquo;m sorry&rdquo;.</li>
      <li>Mirror.</li>
      <li>Silence. 4 secs at least.</li>
      <li>Repeat.</li>
    </ol></li>
  </ul></li>
  <li>Never ask &ldquo;What do you mean by that?&rdquo;:
  <ul>
    <li>Is more irritating than mirroring.</li>
  </ul></li>
  <li>Labeling:
  <ul>
    <li>Validating someone&rsquo;s emotions by acknowledging them.</li>
    <li>Labeling negative emotions diffuses them.</li>
    <li>Labeling positive emotions reinforces them.</li>
  </ul></li>
  <li>&ldquo;No&rdquo; starts the negotiation.</li>
  <li>Clearly giving permission to say &ldquo;NO&rdquo; to your ideas preserve people need for autonomy.</li>
  <li>Helps people feel safe, secure, emotionally comfortable, and in control of their decision.</li>
  <li>Provoke a &ldquo;no&rdquo;.</li>
  <li>&ldquo;That&rsquo;s right&rdquo; (making progress) vs &ldquo;You&rsquo;re right&rdquo; (nothing changes).</li>
  <li>Deadlines are often arbitrary, almost always flexible, and hardly ever trigger the consequences we think they will.</li>
  <li>We are hardwired to reject unfairness.</li>
  <li>Prospect Theory (Kahneman and Tversky):
  <ul>
    <li>Certainty effect:
    <ul>
      <li>People are drawn to sure things over probabilities, even when probabilities is a better choice.</li>
    </ul></li>
    <li>Loss aversion:
    <ul>
      <li>People take greater risk to avoid losses than to achieve gains.</li>
    </ul></li>
  </ul></li>
  <li>How to negotiate a better salary:
  <ol>
    <li>Be pleasantly persistent on non-salary terms.</li>
    <li>Define success and metrics for next rise.</li>
    <li>Ask: &ldquo;What does it take to be successful here?&rdquo;
    <ul>
      <li>Interviewer will give advise, watch if you follow and become your unofficial mentor.</li>
    </ul></li>
  </ol></li>
  <li>Failure plants the seed of future success.</li>
  <li>&ldquo;How am I supposed to do that?&rdquo;.</li>
  <li>&ldquo;Yes&rdquo; is nothing without &ldquo;how&rdquo;.</li>
  <li><a href="#ch-9">You must understand your counterpart style for effective negotiation</a>.</li>
  <li><a href="#bargain">Ackerman bargaining</a>.</li>
  <li>When pressure is on, you don&rsquo;t raise to the occasion; you fall to your highest level of preparation.</li>
  <li>The first few minutes before a meeting, and the last few minutes (when everybody is leaving) often tell you more about the other side than anything in between.</li>
  <li><a href="https://info.blackswanltd.com/download-the-negotiation-one-sheet">Negotiation one sheet pdf</a>.</li>
</ul><h1><a name="ch-1"></a>Chapter 1: The new rules</h1>
<ul>
  <li>Apology and first name to seed warmth.</li>
  <li>Open-ended questions (calibrated questions):
  <ul>
    <li>The other side can respond but there are no fixed answers.</li>
    <li>Buys you time.</li>
    <li>Gives other illusion of control.</li>
    <li>How the other would solved your problems.</li>
    <li>&ldquo;How I am supposed to do that?&rdquo;</li>
  </ul></li>
  <li>Kidnappers are just businessman trying to get the best price.</li>
  <li>Cognitive bias:
  <ul>
    <li><a href="https://amzn.to/3CIAzL6">Thinking, fast and slow</a>.</li>
    <li>Irrational, more than <a href="https://en.wikipedia.org/wiki/List_of_cognitive_biases">150 different ones</a>.</li>
    <li>Come from System 1 thinking.</li>
    <li>System 1 steers and guides our rational thoughts (System 2).</li>
    <li>Negotiate more effectively by influencing System 1.</li>
  </ul></li>
  <li>Core concept: Tactical empathy:
  <ul>
    <li>Listening is the most active thing you can do.</li>
    <li>When people feel listened:
    <ol>
      <li>Listen to themselves more carefully.</li>
      <li>More open to evaluate and clarify their own thoughts and feelings.</li>
      <li>Less defensive.</li>
      <li>More willing to listen to others.</li>
    </ol></li>
  </ul></li>
  <li>Negotiation is the heart of collaboration:
  <ul>
    <li>Makes conflict meaningful and productive for all parties.</li>
  </ul></li>
</ul><h1><a name="ch-2"></a>Chapter 2: Be a Mirror</h1>
<ul>
  <li>Engage negotiation with a mindset of discovery.</li>
  <li>Overuse of personal pronouns (we/they vs me/I):
  <ul>
    <li>The less important he makes himself, the more important he probably is.</li>
  </ul></li>
  <li>Team of 4 or 5 to listen.</li>
  <li>Voices in your head:
  <ul>
    <li>When not talking, you are thinking about your arguments.</li>
    <li>When talking, making your arguments.</li>
    <li>The other is possibly doing the same.</li>
  </ul></li>
  <li>Make it all about the other.</li>
  <li>Three voice tones:
  <ol>
    <li>Late-night FM DJ voice:
    <ul>
      <li>Deep, soft, slow and reassuring.</li>
      <li><a href="https://www.youtube.com/watch?v=RJjnkxvbxaI">Listen here!</a>.</li>
    </ul></li>
    <li>Positive/playful voice:
    <ul>
      <li>Default one.</li>
      <li>Easy going. Good natured person.</li>
      <li>Relax and smile while talking.</li>
    </ul></li>
    <li>Assertive dominance voice:
    <ul>
      <li>Used very rarely.</li>
      <li>Probably push back.</li>
    </ul></li>
  </ol></li>
  <li>Mirroring (isopraxism):
  <ul>
    <li>Sign of bonding.</li>
    <li>We fear what&rsquo;s different and drawn to what&rsquo;s similar.</li>
    <li>Repeat the last 3 words, or the critical 1 to 3 words.</li>
    <li>Downward inflection: I am listening and understand.</li>
    <li>Upward inflection: invite response.</li>
  </ul></li>
  <li>4 steps:
  <ol>
    <li>Use late-night FM DJ voice.</li>
    <li>Start with &ldquo;I&rsquo;m sorry&rdquo;.</li>
    <li>Mirror.</li>
    <li>Silence. 4 secs at least.</li>
    <li>Repeat.</li>
  </ol></li>
  <li>Never ask &ldquo;What do you mean by that?&rdquo;:
  <ul>
    <li>Is more irritating than mirroring.</li>
  </ul></li>
</ul><h1><a name="ch-3"></a>Chapter 3: Don&rsquo;t Feel Their Pain, Label It.</h1>
<ul>
  <li>Tactical empathy:
  <ul>
    <li>The ability to recognize the perspective of a counterpart, and the vocalization of that recognition.</li>
    <li>Emotional intelligence on steroids.</li>
    <li>Visualize yourself in the position they describe, and put in as much detail as you can.</li>
  </ul></li>
  <li>Labeling:
  <ul>
    <li>Validating someone&rsquo;s emotions by acknowledging them.</li>
    <li>Give emotions a name.</li>
    <li>Steps:
    <ol>
      <li>Detect other person&rsquo;s emotional state.
      <ul>
        <li>Pay attention to changes people undergo when they respond to external events (your words).</li>
      </ul></li>
      <li>Label it:
      <ul>
        <li>It seems like &hellip;</li>
        <li>It sounds like &hellip;</li>
        <li>It looks like &hellip;</li>
        <li>NOT &ldquo;I am hearing that &hellip;&rdquo;</li>
      </ul></li>
      <li>Silence: be quiet and listen.</li>
    </ol></li>
    <li>Labeling negative emotions diffuses them:
    <ul>
      <li>When making a mistake, go straight to acknowledge it.</li>
    </ul></li>
    <li>Labeling positive emotions reinforces them.</li>
  </ul></li>
  <li>Accusation audit:
  <ul>
    <li>List every terrible thing your counterpart could say about you.</li>
  </ul></li>
</ul><h2><a name="ch-4"></a>Chapter 4: Beware &ldquo;Yes&rdquo; - Master &ldquo;No&rdquo;</h2>
<ul>
  <li>&ldquo;No&rdquo; starts the negotiation.</li>
  <li>Clearly giving permission to say &ldquo;NO&rdquo; to your ideas preserve people need for autonomy:
  <ul>
    <li>Emotions calm.</li>
    <li>Give time.</li>
  </ul></li>
  <li>No != rejection:
  <ul>
    <li>I am not yet ready to agree.</li>
    <li>I do not understand.</li>
    <li>I want something else.</li>
    <li>I need more information.</li>
  </ul></li>
  <li>After &ldquo;no&rdquo;, pause, ask solution-based questions or label their effect:
  <ul>
    <li>What about this doesn&rsquo;t work for you?</li>
    <li>It seems like there&rsquo;s something here that bothers you.</li>
  </ul></li>
  <li>Persuade them from their perspective, not ours:
  <ul>
    <li>Two primal urges:
    <ol>
      <li>Feel safe and secure.</li>
      <li>Feel in control.</li>
    </ol></li>
  </ul></li>
  <li>And early &ldquo;yes&rdquo; is often a counterfeit dodge.</li>
  <li>&ldquo;No&rdquo; skills:
  <ul>
    <li>Allows the real issue to be brought forth.</li>
    <li>Protects people from making ineffective decisions or to correct them.</li>
    <li>Slow things down so that people can freely embrace their decision.</li>
    <li>Helps people feel safe, secure, emotionally comfortable, and in control of their decision.</li>
    <li>Moves everyone&rsquo;s efforts forward.</li>
  </ul></li>
  <li>No &ldquo;no&rdquo; means no go.</li>
  <li>Email magic: provoke a &ldquo;no&rdquo;:
  <ul>
    <li>Have you given up on this project?</li>
  </ul></li>
  <li>Is not a bad time to talk?</li>
</ul><h1><a name="ch-5"></a>Chapter 5: Trigger the two words that immediately transform any negotiation</h1>
<ul>
  <li>Behavioral Change Stairway Model (BCSM) stages:
  <ol>
    <li>Active listening.</li>
    <li>Empathy.</li>
    <li>Rapport.</li>
    <li>Influence.</li>
    <li>Behavioural change.</li>
  </ol></li>
  <li>&ldquo;That&rsquo;s right&rdquo;:
  <ul>
    <li>To trigger: summarize paraphrasing + labeling.</li>
  </ul></li>
  <li>&ldquo;You&rsquo;re right&rdquo;: nothing changes.</li>
</ul><h1><a name="ch-6"></a>Chapter 6: Bend their reality</h1>
<ul>
  <li>No deal is better than a bad deal.</li>
  <li>Creative solutions are preceded by some degree of risk, annoyance, confusion, and conflict.
  <ul>
    <li>Compromise produce none of that.</li>
  </ul></li>
  <li>Deadlines are often arbitrary, almost always flexible, and hardly ever trigger the consequences we think they will.
  <ul>
    <li>Deadlines are the bogeyman of negotiations.</li>
    <li>Don A. Moore: when negotiators tell about their deadline, they get better deals.</li>
  </ul></li>
  <li>People who had damaged the part of the brain where emotions are generated cannot make decisions.</li>
  <li>The F-word: fair.
  <ul>
    <li>We are hardwired to reject unfairness.</li>
    <li>Don&rsquo;t concede when accused of unfairness.
    <ul>
      <li>Ask how you&rsquo;re mistreating them.</li>
    </ul></li>
    <li>Good use:
    <ul>
      <li>&ldquo;I want you to feel like you are being treated fairly at all times. So please stop me at any time if you feel I&rsquo;m being unfair, and we&rsquo;ll address it&rdquo;.</li>
    </ul></li>
  </ul></li>
  <li>Prospect Theory (Kahneman and Tversky):
  <ul>
    <li>Certainty effect:
    <ul>
      <li>People are drawn to sure things over probabilities, even when probabilities is a better choice.</li>
    </ul></li>
    <li>Loss aversion:
    <ul>
      <li>People take greater risk to avoid losses than to achieve gains.</li>
    </ul></li>
    <li>To get real leverage, you have to persuade that they have something concrete to lose if the deal fall through.</li>
    <li>Tactics:
    <ol>
      <li>Anchor their emotions:
      <ol>
        <li>Accusation audit.</li>
        <li>Play on their loss aversion.</li>
      </ol></li>
      <li>Let the other guy go first &hellip; most of the time:
      <ul>
        <li>Let the other side anchor monetary negotiations.</li>
        <li>Except if the other side is pro, as they may bend your reality with an extreme anchor.</li>
        <li>Except if the other side is a rookie, as you can bend their reality.</li>
      </ul></li>
      <li>Establish a range:
      <ul>
        <li>Expect them to come in at the lower end.</li>
      </ul></li>
      <li>Pivot to non-monetary terms.</li>
      <li>When you do talk numbers, use odd(weird) ones. Avoid rounded ones.
      <ul>
        <li>Example: 27,343.</li>
      </ul></li>
      <li>Surprise with a gift:
      <ul>
        <li>It triggers reciprocity.</li>
      </ul></li>
    </ol></li>
  </ul></li>
  <li>How to negotiate a better salary:
  <ol>
    <li>Be pleasantly persistent on non-salary terms.</li>
    <li>Define success and metrics for next rise.</li>
    <li>Ask: &ldquo;What does it take to be successful here?&rdquo;
    <ul>
      <li>Interviewer will give advise, watch if you follow and become your unofficial mentor.</li>
    </ul></li>
  </ol></li>
</ul><h1><a name="ch-7"></a>Chapter 7: Create the Illusion of Control</h1>
<ul>
  <li>Failure plants the seed of future success.</li>
  <li>Illusion of control with open-ended/calibrated questions:
  <ul>
    <li>Allows you to introduce an idea without sounding pushy.</li>
    <li>&ldquo;How am I supposed to do that?&rdquo;.
    <ul>
      <li>Ask for help! Not accusation or threat.</li>
    </ul></li>
    <li>Calibrated: they have a direction where you want the conversation to go.</li>
    <li>Question must start with &ldquo;what&rdquo; or &ldquo;how&rdquo;.
    <ul>
      <li>What about this is important to you?</li>
      <li>How can I help to make this better for us?</li>
      <li>How would you like me to proceed?</li>
      <li>How can we solve this problem?</li>
      <li>What are we trying to accomplish here?</li>
      <li>What is the biggest challenge you face?</li>
    </ul></li>
  </ul></li>
  <li>Without self-control and emotional regulation it does not work.
  <ul>
    <li>Bite your tongue, do not counterattack, learn to change your state to something more positive.</li>
  </ul></li>
</ul><h2><a name="ch-8"></a>Chapter 8: Guarantee Execution.</h2>
<ul>
  <li>&ldquo;Yes&rdquo; is nothing without &ldquo;how&rdquo;.</li>
  <li>Let your counterparts think they are defining success their way:
  <ol>
    <li>Questions:
    <ol>
      <li>How will we know we&rsquo;re on track?</li>
      <li>How will we address things if we find we&rsquo;re off track?</li>
    </ol></li>
    <li>Summarize until &ldquo;That&rsquo;s right&rdquo;.</li>
  </ol></li>
  <li>Signs the other doesn&rsquo;t believe it is their idea:
  <ul>
    <li>&ldquo;You&rsquo;re right&rdquo;.</li>
    <li>&ldquo;I&rsquo;ll try&rdquo;.</li>
  </ul></li>
  <li>The other side is a team. Buy must come from all.</li>
  <li>Spotting liars:
  <ol>
    <li>Body language or tone of voice does not match words.</li>
    <li>Rule of three:
    <ul>
      <li>Get 3 times confirmation:
      <ul>
        <li>Summarize.</li>
        <li>Similar calibrated questions.</li>
      </ul></li>
    </ul></li>
    <li>Pinocchio effect:
    <ul>
      <li>Liars tend to speak in more complex sentences.</li>
      <li>Liars avoid using &ldquo;I&rdquo;.</li>
    </ul></li>
  </ol></li>
  <li>How to get your counterparts bid against themselves:
  <ul>
    <li>You can express &ldquo;no&rdquo; four times before actually saying the word:
    <ol>
      <li>How am I supposed to do that?</li>
      <li>Your offer is very generous. I&rsquo;m sorry, that just doesn&rsquo;t work for me.</li>
      <li>I&rsquo;m sorry, but I&rsquo;m afraid I just can&rsquo;t do that.</li>
      <li>I&rsquo;m sorry, no.</li>
    </ol></li>
  </ul></li>
</ul><h2><a name="ch-9"></a>Chapter 9: Bargain hard</h2>
<ul>
  <li>Negotiation styles:
  <ol>
    <li>Analyst:
    <ul>
      <li>Motto: as much time as it takes to get it right.</li>
      <li>Problem solvers, information aggregators.</li>
      <li>Hypersensitive to reciprocity.</li>
      <li>Avoid slowing emotion.</li>
      <li>Hate surprises. Loads of preparation.</li>
      <li>Skeptical by nature.</li>
      <li>Dont ask them too many questions.</li>
      <li>User clear data.</li>
    </ul></li>
    <li>Accommodator:
    <ul>
      <li>Love building the relationship.
      <ul>
        <li>Great rapport may help little.</li>
      </ul></li>
      <li>Extremely friendly, optimistic, poor time managers.</li>
      <li>Can be difficult uncover their objections, hidden to avoid conflict.</li>
    </ul></li>
    <li>Assertive:
    <ul>
      <li>Time is money.</li>
      <li>Done over perfect.</li>
      <li>Want to win.</li>
      <li>Don&rsquo;t listen until they feel heard and understood.</li>
      <li>Give an inch, take a mile.</li>
    </ul></li>
  </ol></li>
</ul>
<table>
  <thead>
    <tr>
      <th> </th>
      <th>Time </th>
      <th>Silence </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Assertive </td>
      <td>Money </td>
      <td>More talking </td>
    </tr>
    <tr>
      <td>Analyst </td>
      <td>Preparation </td>
      <td>Thinking </td>
    </tr>
    <tr>
      <td>Accomodator </td>
      <td>Relationship </td>
      <td>Anger </td>
    </tr>
  </tbody>
</table>
<ul>
  <li><a href="https://info.blackswanltd.com/guide-to-3-negotiator-types">Guide to identify type</a>.
  <ul>
    <li>You must understand your counterpart style for effective negotiation.</li>
  </ul></li>
  <li>Be ready for the counterparts extreme anchor.</li>
  <li>Punch back:
  <ul>
    <li>Avoid it!!!</li>
    <li>&ldquo;Strategic umbrage&rdquo;: threat without anger but with &ldquo;poise&rdquo;.</li>
    <li>&ldquo;Why would you do that?&rdquo; but in a way that the &ldquo;that&rdquo; favours you:
    <ul>
      <li>Why would you ever change your existing supplier?</li>
    </ul></li>
    <li>&ldquo;I&rdquo; messages: &quot;I feel ___ when you ___ because ___&quot;.
</li>
  </ul></li>
  <li><a name="bargain"></a>Ackerman bargaining:
  <ol>
    <li>Set your target price.</li>
    <li>First offer at 65%.</li>
    <li>Other offers at 85, 95, 100%.</li>
    <li>Use lots of empathy and different ways of saying &ldquo;no&rdquo; to get the other side to counter before you increase your offer.</li>
    <li>For final amount, use non-rounded numbers.</li>
    <li>On the final number, throw a non-monetary item to show you&rsquo;re at your limit.</li>
  </ol></li>
  <li>When pressure is on, you don&rsquo;t raise to the occasion; you fall to your highest level of preparation.</li>
</ul><h1><a name="ch-10"></a>Find the Black Swan</h1>
<ul>
  <li>What we know must guide us but not blind us to what we do not know.
  <ul>
    <li>Retain beginner&rsquo;s mind.</li>
  </ul></li>
  <li>Black Swan == Unknown unknowns.
  <ul>
    <li>At least 3 on each negotiation.</li>
    <li>Change in mindset: open up your established pathways and embrace more intuitive and nuanced ways of listening.</li>
    <li>Not closely guarded information, but also completely innocuous. The value is misunderstood.</li>
  </ul></li>
  <li>Leverage:
  <ul>
    <li>Positive: You have something the other want.</li>
    <li>Negative:
    <ul>
      <li>If you can threat, make the other suffer.</li>
      <li>Avoid or label it.</li>
    </ul></li>
    <li>Normative: if you can show inconsistencies between their beliefs and their actions.</li>
  </ul></li>
  <li>When people act irrationally, is either:
  <ol>
    <li>Are ill-informed.</li>
    <li>They are constrained.</li>
    <li>They have other hidden interests.</li>
  </ol></li>
  <li>The first few minutes before a meeting, and the last few minutes (when everybody is leaving) often tell you more about the other side than anything in between.</li>
  <li><a href="https://info.blackswanltd.com/download-the-negotiation-one-sheet">Negotiation one sheet pdf</a>.</li>
</ul>]]></description></item><item><title>Book notes: Inspired: How to Create Tech Products Customers Love</title><link>https://danlebrero.com/2023/05/11/inspired-how-to-create-tech-products-customers-love-summary/</link><guid>https://danlebrero.com/2023/05/11/inspired-how-to-create-tech-products-customers-love-summary/</guid><pubDate>Thu, 11 May 2023 00:00:00 +0200</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/3MFmJNc">Inspired: How to Create Tech Products Customers Love</a> by <a href="https://twitter.com/cagan">Marty Cagan</a>.</p><p>If you liked <a href="/2020/01/22/accelerate-high-performing-technology-orgs-summary/#content">Accelerate</a>, The DevOps Handbook, <a href="/2021/12/01/sonner-safer-happier-summary-patterns-business-agility/#content">Sooner, safer, happier</a> or other similar books, you will want to buy this book for your Product Manager.</p><h1>Key Insights</h1>
<ul>
  <li>Root cause of failed product efforts: Waterfall process from ideas to deploy.
  <ul>
    <li>Causes:
    <ul>
      <li>Source of new product ideas: sales or stakeholders.</li>
      <li>Assuming you can guess the cost and benefit.</li>
      <li>Getting excited about product roadmaps:
      <ul>
        <li>Truth:
        <ul>
          <li>Half to 3/4 of ideas are not going to work.</li>
          <li>It takes several iterations for an idea to deliver the business value.</li>
        </ul></li>
      </ul></li>
      <li>PM, design, engineering, agile, and customer validation come in late in the game.</li>
      <li>Project centric (== outputs).</li>
    </ul></li>
  </ul></li>
  <li>Principles:
  <ol>
    <li>Risk tackled up front.
    <ul>
      <li>Product discovery: output is validated product backlog:
      <ul>
        <li>Will the user buy this? Value risk.</li>
        <li>Can the user figure out how to use it? UX risk.</li>
        <li>Can engineers built it? Feasibility risk.</li>
        <li>Can stakeholders support it? Business viability risk.</li>
      </ul></li>
    </ul></li>
    <li>Products are defined and designed collaboratively.</li>
    <li>Solve problems, not implement features.</li>
  </ol></li>
  <li>10-20 experiments per week.</li>
  <li>MVP: minimum viable <strong>prototype</strong>.</li>
  <li>Cross-functional long-lived teams.</li>
  <li>Missionaries, not mercenaries.</li>
  <li>The Product Manager:
  <ul>
    <li>Responsible and accountable for the success of the product.</li>
    <li>Decide what gets built.</li>
    <li>Not a 9-5 job.</li>
  </ul></li>
  <li>Ensure senior engineers are participating and contributing to product discovery.</li>
  <li>Typical roadmaps are the root cause of most waste and failed efforts in product organizations.
  <ul>
    <li>We need to solve the underlying problem, not deliver a feature.</li>
  </ul></li>
  <li>Outcome-based roadmaps (objective list) are good, as long as not all items have a deadline.</li>
  <li>High-integrity commitments:
  <ul>
    <li>Make commitment once value, UX, feasibility and business viability are clear.</li>
  </ul></li>
  <li>Product vision must inspire, product strategy must focus.</li>
  <li><a href="#ch-25">Principles of Product Vision</a>:
  <ul>
    <li>Fall in love with the problem, not with the solution.</li>
    <li>Don&rsquo;t be afraid to disrupt yourselves because if you don&rsquo;t, someone else will.</li>
    <li>Be stubborn on vision but flexible on the details.</li>
    <li>Realize that any product vision is a leap of faith:
    <ul>
      <li>If you could truly validate a vision, then your vision is not ambitious enough.</li>
    </ul></li>
  </ul></li>
  <li><a href="#ch-26">Principles of Product Strategy</a>:
  <ul>
    <li>Focus on one target market or person at a time:
    <ul>
      <li>Product will likely be useful to others, but at least will be loved by some, and that&rsquo;s key.</li>
    </ul></li>
    <li>Obsess over customers, not over competitors.</li>
  </ul></li>
  <li>If you are a PM and not good at evangelism, there is a strong chance that your product efforts will get derailed before they see the light of the day.</li>
  <li>Most product teams have a better understanding on how to accomplish quality, rather than speed.</li>
  <li>Key to effective product discovery is getting access to our customers without pushing quick experiments into production.</li>
  <li>Customer (and executives or stakeholders) cannot tell us what they want, because:
  <ol>
    <li>They don&rsquo;t know what is possible.</li>
    <li>Nobody knows what they want until they see it.</li>
  </ol></li>
  <li>UX is harder and more critical than engineering.</li>
  <li>Product discovery and validation only when there is significant risk.</li>
  <li>Customer discovery program:
  <ul>
    <li>Favourite leading indicator of future success.</li>
    <li>Aim for 6 reference customers:
    <ul>
      <li>Desperate for a solution, or a technologist.</li>
      <li>Willing to spend time with product team and testing prototypes.</li>
      <li>Not building features for all reference customers, but a single solution that works for all of them.</li>
    </ul></li>
    <li>If you cannot recruit even 4 or 5, you are probably chasing the wrong problem.</li>
  </ul></li>
  <li>Opportunity Assessment Technique, answer:
  <ol>
    <li>What business objective is this work intended to address? (Objective - Should match an OKR).</li>
    <li>How will you know if you&rsquo;ve succeeded? (Key result - Should match an OKR).</li>
    <li>What problem will this solve for our customers? (Customer problem).</li>
    <li>What type of customer are we focused on? (Target market).</li>
  </ol>
  <ul>
    <li>It is responsibility of the PM to answer these questions.</li>
  </ul></li>
  <li><a href="http://www.jpattonassociates.com/wp-content/uploads/2015/03/story_mapping.pdf">Jeff Patton&rsquo;s Story Map Summary</a>.</li>
  <li>Customer interviews:
  <ul>
    <li>Mindset: understand and learn. Not prove.</li>
    <li>At least 2-3 hours per week.</li>
  </ul></li>
  <li>Prototypes: can serve as a spec on what to build.</li>
  <li>Testing Usability:
  <ul>
    <li>Objective: trying to figure out how your user thinks about the problem.</li>
    <li>Avoid leading. Act like a parrot.</li>
  </ul></li>
  <li>Qualitative Value Testing Techniques:</li>
  <li>The single most important discovery activity.</li>
  <li>User willing to pay with money, reputation or time.</li>
  <li>Head of product to highlight big learnings at all-hands. Not more than 30 mins.</li>
  <li>Only a few companies are strong both at innovation and execution.</li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#part-1">Part I: Lessons from Top Tech Companies</a>
  <ul>
    <li><a href="#ch-1">Chapter 1: Behind Every Great Product</a></li>
    <li><a href="#ch-3">Chapter 3: Startups: Getting to Product/Market Fit</a></li>
    <li><a href="#ch-4">Chapter 4: Growth‐Stage Companies: Scaling to Success</a></li>
    <li><a href="#ch-5">Chapter 5: Enterprise Companies: Consistent Product Innovation</a></li>
    <li><a href="#ch-6">Chapter 6: The Root Causes of Failed Product Efforts</a></li>
    <li><a href="#ch-7">Chapter 7: Beyond Lean and Agile</a></li>
    <li><a href="#ch-8">Chapter 8: Key Concepts</a></li>
  </ul></li>
  <li><a href="#part-II">Part II: The Right People</a>
  <ul>
    <li><a href="#ch-9">Chapter 9: Principles of Strong Product Teams</a></li>
    <li><a href="#ch-10">Chapter 10: The Product Manager</a></li>
    <li><a href="#ch-11">Chapter 11: The Product Designer</a></li>
    <li><a href="#ch-13">Chapter 13: Product Marketing Managers</a></li>
    <li><a href="#ch-14">Chapter 14: The Supporting Roles</a></li>
    <li><a href="#ch-16">Chapter 16: The Role of Leadership</a></li>
    <li><a href="#ch-17">Chapter 17: The Head of Product Role</a></li>
    <li><a href="#ch-18">Chapter 18: The Head of Technology Role</a></li>
    <li><a href="#ch-19">Chapter 19: The Delivery Manager Role</a></li>
    <li><a href="#ch-20">Chapter 20: Principles of Structuring Product Teams</a></li>
  </ul></li>
  <li><a href="#part-III">Part III: The Right Product</a>
  <ul>
    <li><a href="#ch-22">Chapter 22: The Problems with Product Roadmaps</a></li>
    <li><a href="#ch-23">Chapter 23: The Alternative to Roadmaps</a></li>
    <li><a href="#ch-24">Chapter 24: Product Vision and Product Strategy</a></li>
    <li><a href="#ch-25">Chapter 25: Principles of Product Vision</a></li>
    <li><a href="#ch-26">Chapter 26: Principles of Product Strategy</a></li>
    <li><a href="#ch-27">Chapter 27: Product Principles</a></li>
    <li><a href="#ch-28">Chapter 28: The OKR Technique</a></li>
    <li><a href="#ch-30">Chapter 30: Product Objectives @ Scale</a></li>
    <li><a href="#ch-31">Chapter 31: Product Evangelism</a></li>
  </ul></li>
  <li><a href="#part-IV">Part IV: The Right Process</a>
  <ul>
    <li><a href="#ch-33">Chapter 33: Principles of Product Discovery</a></li>
    <li><a href="#ch-34">Chapter 34: Discovery Techniques Overview</a></li>
    <li><a href="#ch-34-1">Discovery framing techniques</a>
    <ul>
      <li><a href="#ch-35">Chapter 35: Opportunity Assessment Technique</a></li>
      <li><a href="#ch-36">Chapter 36: Customer Letter Technique</a></li>
      <li><a href="#ch-37">Chapter 37: Startup Canvas Technique</a></li>
    </ul></li>
    <li><a href="#ch-38a">Discovery Planning Techniques</a>
    <ul>
      <li><a href="#ch-38">Chapter 38: Story Map Technique</a></li>
      <li><a href="#ch-39">Chapter 39: Customer Discovery Program Technique</a></li>
    </ul></li>
    <li><a href="#ch-41a">Discovery Ideation Techniques</a>
    <ul>
      <li><a href="#ch-41">Chapter 41: Customer Interviews</a></li>
      <li><a href="#ch-42">Chapter 42: Concierge Test Technique</a></li>
      <li><a href="#ch-43">Chapter 43: The Power of Customer Misbehavior</a></li>
      <li><a href="#ch-44">Chapter 44: Hack Days</a></li>
    </ul></li>
    <li><a href="#ch-45a">Discovery Prototyping Techniques</a>
    <ul>
      <li><a href="#ch-45">Chapter 45: Principles of Prototypes</a></li>
      <li><a href="#ch-46">Chapter 46: Feasibility Prototype Technique</a></li>
      <li><a href="#ch-47">Chapter 47: User Prototype Technique</a></li>
      <li><a href="#ch-48">Chapter 48: Live‐Data Prototype Technique</a></li>
      <li><a href="#ch-49">Chapter 49: Hybrid Prototype Technique</a></li>
    </ul></li>
    <li><a href="#ch-50a">Discovery Testing Techniques</a>
    <ul>
      <li><a href="#ch-50">Chapter 50: Testing Usability</a></li>
      <li><a href="#ch-51">Chapter 51: Testing Value</a></li>
      <li><a href="#ch-52">Chapter 52: Demand Testing Techniques</a></li>
      <li><a href="#ch-53">Chapter 53: Qualitative Value Testing Techniques</a></li>
      <li><a href="#ch-54">Chapter 54: Quantitative Value Testing Techniques</a></li>
      <li><a href="#ch-56">Chapter 56: Testing Business Viability</a></li>
    </ul></li>
    <li><a href="#ch-58a">Transformation Techniques</a>
    <ul>
      <li><a href="#ch-58">Chapter 58: Discovery Sprint Technique</a></li>
      <li><a href="#ch-59">Chapter 59: Pilot Team Technique</a></li>
      <li><a href="#ch-60">Chapter 60: Weaning an Organization Off Roadmaps</a></li>
    </ul></li>
    <li><a href="#ch-61a">Process @ Scale</a>
    <ul>
      <li><a href="#ch-61">Chapter 61: Managing Stakeholders</a></li>
      <li><a href="#ch-62">Chapter 62: Communicating Product Learnings</a></li>
    </ul></li>
  </ul></li>
  <li><a href="#part-V">Part V: The Right Culture</a>
  <ul>
    <li><a href="#ch-64">Chapter 64: Good Product Team/Bad Product Team</a></li>
    <li><a href="#ch-65">Chapter 65: Top Reasons for Loss of Innovation</a></li>
    <li><a href="#ch-66">Chapter 66: Top Reasons for Loss of Velocity</a></li>
    <li><a href="#ch-67">Chapter 67: Establishing a Strong Product Culture</a></li>
  </ul></li>
</ul><h1><a name="part-1"></a>Part I: Lessons from Top Tech Companies</h1><h2><a name="ch-1"></a>Chapter 1: Behind Every Great Product</h2>
<ul>
  <li>Book is for Product Managers (PM).</li>
  <li>PM is a full time job.</li>
</ul><h2><a name="ch-3"></a>Chapter 3: Startups: Getting to Product/Market Fit</h2>
<ul>
  <li>One of the founders acts as the PM.</li>
  <li>Less 25 engineers in 1-5 product teams.</li>
</ul><h2><a name="ch-4"></a>Chapter 4: Growth‐Stage Companies: Scaling to Success</h2>
<ul>
  <li>25 to hundreds of engineers.</li>
  <li>Product teams complains:
  <ol>
    <li>Cannot see the big picture.</li>
    <li>How they contribute to goals.</li>
    <li>What means to be empowered, autonomous.</li>
  </ol></li>
  <li>Sales and marketing: go-to-market strategies not appropriate for new products.</li>
  <li>IT full of technical debt.</li>
</ul><h2><a name="ch-5"></a>Chapter 5: Enterprise Companies: Consistent Product Innovation</h2>
<ul>
  <li>Symptoms:
  <ul>
    <li>Lack of innovation.</li>
    <li>Diminished morale.</li>
    <li>Slow product delivery.</li>
    <li>No clear vision.</li>
  </ul></li>
</ul><h2><a name="ch-6"></a>Chapter 6: The Root Causes of Failed Product Efforts</h2>
<ul>
  <li>Root cause: Waterfall process from ideas to deploy.</li>
  <li>Causes:
  <ul>
    <li>Source of new product ideas: sales or stakeholders.</li>
    <li>Assuming you can guess the cost and benefit.</li>
    <li>Getting excited about product roadmaps:
    <ul>
      <li>Truth:
      <ul>
        <li>Half to 3/4 of ideas are not going to work.</li>
        <li>It takes several iterations for an idea to deliver the business value.</li>
      </ul></li>
    </ul></li>
    <li>PM, design, engineering, agile, and customer validation come in late in the game.</li>
    <li>Project centric (== outputs).</li>
  </ul></li>
</ul><h2><a name="ch-7"></a>Chapter 7: Beyond Lean and Agile</h2>
<ul>
  <li>Principles:
  <ol>
    <li>Risk tackled up front.</li>
    <li>Products are defined and designed collaboratively.</li>
    <li>Solve problems, not implement features.</li>
  </ol></li>
</ul><h2><a name="ch-8"></a>Chapter 8: Key Concepts</h2>
<ul>
  <li>Holistic Product == Functionality + tech + UX + monetization + user/customer acquisition + offline experience.</li>
  <li>Continuous Discovery and delivery.</li>
  <li>Product discovery: output is validated product backlog:
  <ol>
    <li>Will the user buy this? Value risk.</li>
    <li>Can the user figure out how to use it? UX risk.</li>
    <li>Can engineers built it? Feasibility risk.</li>
    <li>Can stakeholders support it? Business viability risk.</li>
  </ol></li>
  <li>10-20 experiments per week.</li>
  <li>MVP: minimum viable <strong>prototype</strong>.</li>
</ul><h1><a name="part-II"></a>Part II: The Right People</h1>
<ul>
  <li>It is all about the product team.</li>
</ul><h2><a name="ch-9"></a>Chapter 9: Principles of Strong Product Teams</h2>
<ul>
  <li>Cross-functional long-lived teams.</li>
  <li>Missionaries, not mercenaries.</li>
  <li>Prefer collocated.</li>
</ul><h2><a name="ch-10"></a>Chapter 10: The Product Manager</h2>
<ul>
  <li>Responsible and accountable for the success of the product.</li>
  <li>Decide what gets built.</li>
  <li>Key responsibilities:
  <ul>
    <li>Deep knowledge of:
    <ul>
      <li>the customer.</li>
      <li>the data.</li>
      <li>the business.</li>
      <li>the market and industry.</li>
    </ul></li>
  </ul></li>
  <li>Traits:
  <ul>
    <li>Smart, creative, persistent.</li>
    <li>Passion for products and solving customer problems.</li>
  </ul></li>
  <li>Not a 9-5 job.</li>
</ul><h2><a name="ch-11"></a>Chapter 11: The Product Designer</h2>
<ul>
  <li>Responsibilities:
  <ol>
    <li>Product discovery: measured on the success of the product.</li>
    <li>Holistic UX, including email, marketing, sales process, &hellip;</li>
    <li>Prototypes.</li>
    <li>Continuous user testing.</li>
    <li>Interaction and visual design.</li>
  </ol></li>
</ul><h2><a name="ch-13"></a>Chapter 13: Product Marketing Managers</h2>
<ul>
  <li>Usually not a full-time, dedicated member.</li>
  <li>Business viability.</li>
</ul><h2><a name="ch-14"></a>Chapter 14: The Supporting Roles</h2>
<ul>
  <li>Not a full-time decided member.</li>
  <li>User researchers:
  <ul>
    <li>Help to learn the most from user testing.</li>
  </ul></li>
  <li>Data Analysts.</li>
  <li>Test automation engineers.</li>
</ul><h2><a name="ch-16"></a>Chapter 16: The Role of Leadership</h2>
<ul>
  <li>Primary job: recruit, develop and retain strong talent.</li>
  <li>While growing, keep a holistic view of product.</li>
</ul><h2><a name="ch-17"></a>Chapter 17: The Head of Product Role</h2>
<ul>
  <li>Most senior product role, peer to CTO.</li>
  <li>Competencies:
  <ol>
    <li>Develop a strong team of PM.</li>
    <li>Product vision and strategy:
    <ol>
      <li>Only when the CEO is not the product visionary.</li>
    </ol></li>
    <li>Execution.</li>
    <li>Product culture.</li>
  </ol></li>
</ul><h2><a name="ch-18"></a>Chapter 18: The Head of Technology Role</h2>
<ul>
  <li>Objective: remove tech barriers and broadening what is possible.</li>
  <li>Responsibilities, in order of importance:
  <ul>
    <li>Organization: people.</li>
    <li>Leadership: strategic direction.</li>
    <li>Delivery.</li>
    <li>Architecture.</li>
    <li>Discovery: ensure senior engineers are participating and contributing to product discovery.</li>
    <li>Evangelism.</li>
  </ul></li>
</ul><h2><a name="ch-19"></a>Chapter 19: The Delivery Manager Role</h2>
<ul>
  <li>Project managers, and typically Scrum Masters.</li>
  <li>Remove impediments.</li>
</ul><h2><a name="ch-20"></a>Chapter 20: Principles of Structuring Product Teams</h2>
<ul>
  <li>Principles:
  <ol>
    <li>Team structure should follow investment strategy.</li>
    <li>Minimize dependencies.</li>
    <li>Ownership and autonomy.</li>
    <li>Maximize leverage:
    <ul>
      <li>Shared services.</li>
      <li>But brings dependencies, reduces autonomy.</li>
    </ul></li>
    <li>Follow production vision and strategy.</li>
    <li>3-12 people.</li>
    <li>Follow architecture (which should follow production vision).</li>
    <li>Align with user/customer:
    <ul>
      <li>Team to serve one type of user.</li>
    </ul></li>
    <li>Align with business units.</li>
    <li>Structure is a moving target:
    <ul>
      <li>Review at least yearly.</li>
    </ul></li>
  </ol></li>
</ul><h1><a name="part-III"></a>Part III: The Right Product</h1>
<ul>
  <li>Typical roadmaps are the root cause of most waste and failed efforts in product organizations.</li>
</ul><h2><a name="ch-22"></a>Chapter 22: The Problems with Product Roadmaps</h2>
<ul>
  <li>Product discovery is the most important core competency of a product organization.</li>
  <li>Issue with roadmap is that is treated as a commitment.</li>
  <li>We need to solve the underlying problem, not deliver a feature.</li>
</ul><h2><a name="ch-23"></a>Chapter 23: The Alternative to Roadmaps</h2>
<ul>
  <li>Valid roadmap purposes:
  <ol>
    <li>Ensure teams are working on the highest business value items.</li>
    <li>To track a date-based commitment, if there is any.</li>
  </ol></li>
  <li>Product teams need business context (clarity in <a href="/2022/01/12/turn-the-ship-around-book-summary/#content">intent based leadership</a>).</li>
  <li>Two main components to provide business context:
  <ol>
    <li>Product vision and strategy.</li>
    <li>Business objectives (not product ideas).</li>
  </ol></li>
  <li>Outcome-based roadmaps (objective list) are good, as long as not all items have a deadline.</li>
  <li>Deadlines:
  <ul>
    <li>Minimize them.</li>
    <li>Issue is that the commitment is made too early (== not enough information).</li>
    <li>High-integrity commitments:
    <ul>
      <li>Make commitment once value, UX, feasibility and business viability are clear.</li>
    </ul></li>
  </ul></li>
</ul><h2><a name="ch-24"></a>Chapter 24: Product Vision and Product Strategy</h2>
<ul>
  <li>Product vision must inspire, product strategy must focus.</li>
</ul><h2><a name="ch-25"></a>Chapter 25: Principles of Product Vision</h2>
<ol>
  <li>Start with why:
  <ul>
    <li>Product vision articulate your purpose.</li>
  </ul></li>
  <li>Fall in love with the problem, not with the solution.</li>
  <li>Don&rsquo;t be afraid to think big.</li>
  <li>Don&rsquo;t be afraid to disrupt yourselves because if you don&rsquo;t, someone else will.</li>
  <li>Needs to inspire.</li>
  <li>Determine and embrace relevant and meaningful trends.</li>
  <li>Skate to where the pack is heading, not to where it was.</li>
  <li>Be stubborn on vision but flexible on the details.</li>
  <li>Realize that any product vision is a leap of faith:
  <ul>
    <li>If you could truly validate a vision, then your vision is not ambitious enough.</li>
  </ul></li>
  <li>Evangelize continuously and relentlessly.</li>
</ol><h2><a name="ch-26"></a>Chapter 26: Principles of Product Strategy</h2>
<ol>
  <li>Focus on one target market or person at a time:
  <ul>
    <li>Product will likely be useful to others, but at least will be loved by some, and that&rsquo;s key.</li>
  </ul></li>
  <li>Needs to be aligned with business strategy.</li>
  <li>Needs to be aligned with sales and go-to-market strategy.</li>
  <li>Obsess over customers, not over competitors.</li>
  <li>Communicate the strategy across the org.</li>
</ol><h2><a name="ch-27"></a>Chapter 27: Product Principles</h2>
<ul>
  <li>Complement vision and strategy.</li>
  <li>Production principles: nature of the products you want to build.</li>
</ul><h2><a name="ch-28"></a>Chapter 28: The OKR Technique</h2>
<ul>
  <li>Two fundamental principles:
  <ol>
    <li>Tell people what to do, not how.</li>
    <li>Measure by result.</li>
  </ol></li>
  <li>OKR = Objectives and Key Results:
  <ul>
    <li>Management + focus + alignment.</li>
    <li>Objectives qualitative.</li>
    <li>Results quantitative. Outcomes.</li>
    <li>Typical cadence: org yearly, team quarterly.</li>
    <li>1-3 objectives, 1-3 key results.</li>
    <li>Track weekly.</li>
    <li>Team accountable.</li>
    <li>Org-wide consistent evaluation/scoring.</li>
    <li>Be transparent.</li>
    <li>High-integrity commitments are binary.</li>
  </ul></li>
</ul><h2><a name="ch-30"></a>Chapter 30: Product Objectives @ Scale</h2>
<ul>
  <li>Large burden on leadership and management to ensure that the org is truly aligned, that each and every product team understands how they fit into the mix, and what they are there to contribute.</li>
</ul><h2><a name="ch-31"></a>Chapter 31: Product Evangelism</h2>
<ul>
  <li>If you are a PM and not good at evangelism, there is a strong chance that your product efforts will get derailed before they see the light of the day.</li>
</ul><h1><a name="part-IV"></a>Part IV: The Right Process</h1>
<ul>
  <li>Product discovery:
  <ul>
    <li>Single solution that works for many customers, and not a series of specials.</li>
    <li>Learn fast + release with confidence (speed vs quality).</li>
    <li>In this book product == production ready.</li>
    <li>Most product teams have a better understanding on how to accomplish quality, rather than speed.</li>
    <li>Key to effective product discovery is getting access to our customers without pushing quick experiments into production.</li>
  </ul></li>
</ul><h2><a name="ch-33"></a>Chapter 33: Principles of Product Discovery</h2>
<ol>
  <li>Customer (and executives or stakeholders) cannot tell us what they want, because:
  <ol>
    <li>They don&rsquo;t know what is possible.</li>
    <li>Nobody knows what they want until they see it.</li>
  </ol></li>
  <li>Most important thing is to establish compelling value.</li>
  <li>UX is harder and more critical than engineering.</li>
  <li>Functionality, design and technology are intertwined.</li>
  <li>Many ideas won&rsquo;t work, and the ones that do require several iterations.</li>
  <li>We must validate our ideas on real users and customers.</li>
  <li>Aim to validate ideas the fastest, cheapest way possible.</li>
  <li>Shared learning by the whole team.</li>
</ol>
<ul>
  <li>Aim for 10-20 iterations per week.</li>
</ul><h2><a name="ch-34"></a>Chapter 34: Discovery Techniques Overview</h2>
<ol>
  <li>Discovery framing techniques:
  <ul>
    <li>To quickly identify the underlying issues that must be tackled during product discovery.</li>
    <li>Objective:
    <ol>
      <li>Agree on the problem.</li>
      <li>Identify big risk to be tackled ruing discovery work.</li>
    </ol></li>
    <li>Product discovery and validation only when there is significant risk.</li>
  </ul></li>
  <li>Discovery planning techniques:
  <ul>
    <li>To scope out and plan the discovery efforts.</li>
    <li>Customer discovery program:
    <ul>
      <li>Loads of work.</li>
      <li>Favourite leading indicator of future success.</li>
    </ul></li>
  </ul></li>
  <li>Discovery ideation techniques.</li>
  <li>Discovery prototyping techniques:
  <ul>
    <li><p>Different forms of prototypes, each suited to testing different things.</p>
    <blockquote>Plan to throw one away, you will anyhow. <cite>Fred Brooks</cite>
    </blockquote></li>
  </ul></li>
  <li>Discovery testing techniques:
  <ul>
    <li>Usual test order:
    <ol>
      <li>Value.</li>
      <li>Usability.</li>
      <li>Feasibility.</li>
      <li>Business Viability.</li>
    </ol></li>
    <li>Value and usability usually tested with the same users at the same time.</li>
  </ul></li>
  <li>Transformation techniques:
  <ul>
    <li>Way of work.</li>
  </ul></li>
</ol><h1><a name="ch-34-1"></a>Discovery framing techniques</h1><h2><a name="ch-35"></a>Chapter 35: Opportunity Assessment Technique</h2>
<ul>
  <li>Answer:
  <ol>
    <li>What business objective is this work intended to address? (Objective - Should match an OKR).</li>
    <li>How will you know if you&rsquo;ve succeeded? (Key result - Should match an OKR).</li>
    <li>What problem will this solve for our customers? (Customer problem).</li>
    <li>What type of customer are we focused on? (Target market).</li>
  </ol></li>
  <li>It is responsibility of the PM to answer these questions.</li>
</ul><h2><a name="ch-36"></a>Chapter 36: Customer Letter Technique</h2>
<ul>
  <li>For larger efforts.</li>
  <li>Write an imagined press release.</li>
  <li>Write an imagined letter from a happy customer to the CEO.</li>
</ul><h2><a name="ch-37"></a>Chapter 37: Startup Canvas Technique</h2>
<ul>
  <li>When trying to figure out the new product:
  <ul>
    <li>Lot more risks.</li>
    <li><a href="https://miro.com/templates/startup-canvas/">Template</a>.</li>
  </ul></li>
  <li>Typically, value is the most risky risk.</li>
</ul><h1><a name="ch-38a"></a>Discovery Planning Techniques</h1><h2><a name="ch-38"></a>Chapter 38: Story Map Technique</h2>
<ul>
  <li>Framing and planning technique, useful for ideation good for design and communication.</li>
  <li><a href="http://www.jpattonassociates.com/wp-content/uploads/2015/03/story_mapping.pdf">Jeff Patton&rsquo;s summary</a>.</li>
</ul><h2><a name="ch-39"></a>Chapter 39: Customer Discovery Program Technique</h2>
<ul>
  <li>Simple best tool for marketing and sales is the happy reference customer:
  <ul>
    <li>Real (not family/friends).</li>
    <li>In production.</li>
    <li>Paying.</li>
    <li>Willing to tell others.</li>
  </ul></li>
  <li>Discovery and developing a set of reference customers in parallel with discovery and developing the actual product.</li>
  <li>Substantial effort.</li>
  <li>Aim for 6 reference customers:
  <ul>
    <li>Same market.</li>
    <li>Recruit 8.</li>
    <li>Desperate for a solution, or a technologist.</li>
    <li>Willing to spend time with product team and testing prototypes.</li>
  </ul></li>
  <li>Not building features for all reference customers, but a single solution that works for all of them.</li>
  <li>They do not pay in advance, it is a partner.</li>
  <li>If you cannot recruit even 4 or 5, you are probably chasing the wrong problem.</li>
  <li>Variations:
  <ul>
    <li>API/Platform products:
    <ul>
      <li>Reference apps instead of customers.</li>
    </ul></li>
    <li>Customer-Enabling tools:
    <ul>
      <li>Well respected and influential internal users/employees.</li>
    </ul></li>
    <li>Consumer products:
    <ul>
      <li>10-50 users.</li>
      <li>Supplement with much broad testing.</li>
    </ul></li>
  </ul></li>
</ul><h1><a name="ch-41a"></a>Discovery Ideation Techniques</h1><h2><a name="ch-41"></a>Chapter 41: Customer Interviews</h2>
<ul>
  <li>Try to understand:
  <ol>
    <li>Are your customers who you think they are?</li>
    <li>Do they really have to problem you think they have?</li>
    <li>How does the customer solve this problem today?</li>
    <li>What would be required for them to switch?</li>
  </ol></li>
  <li>Tips:
  <ul>
    <li>At least 2-3 hours per week.</li>
    <li>Mindset: understand and learn. Not prove.</li>
    <li>About 1 hour.</li>
    <li>On their native habitat.</li>
    <li>Be clear on the problem you think they have, and how you will either confirm or contradict that.</li>
    <li>PM (takes notes) + engineer (listens) + product designer (leads).</li>
    <li>Open-ended questions, learn what they are doing today.</li>
    <li>Debrief with colleagues.</li>
  </ul></li>
</ul><h2><a name="ch-42"></a>Chapter 42: Concierge Test Technique</h2>
<ul>
  <li>Do your customer work.</li>
</ul><h2><a name="ch-43"></a>Chapter 43: The Power of Customer Misbehavior</h2>
<ul>
  <li>Encourage customers to use our product to solve problems other than what we planned for and officially support.</li>
  <li>Not a useful technique for all companies.</li>
  <li>Open API.</li>
</ul><h2><a name="ch-44"></a>Chapter 44: Hack Days</h2>
<ul>
  <li>Undirected: any problem related to mission.</li>
  <li>Directed: a specific problem:
  <ul>
    <li>Facilitates the inclusion of engineers.</li>
    <li>Help building a team of missionaries.</li>
  </ul></li>
</ul><h2><a name="ch-45a"></a>Discovery Prototyping Techniques</h2><h2><a name="ch-45"></a>Chapter 45: Principles of Prototypes</h2>
<ol>
  <li>Cheap learning.</li>
  <li>Think deeper about the problem.</li>
  <li>Build shared understanding.</li>
  <li>Right level of fidelity.</li>
  <li>Tackle on or more product risks.</li>
</ol>
<ul>
  <li>Can serve as a spec on what to build.</li>
</ul><h2><a name="ch-46"></a>Chapter 46: Feasibility Prototype Technique</h2>
<ul>
  <li>Just enough code to mitigate risk.</li>
</ul><h2><a name="ch-47"></a>Chapter 47: User Prototype Technique</h2>
<ul>
  <li>It is not good for proving anything.</li>
</ul><h2><a name="ch-48"></a>Chapter 48: Live‐Data Prototype Technique</h2>
<ul>
  <li>It is not okay for the PM to tell engineers that the prototype is good enough for production.</li>
</ul><h2><a name="ch-49"></a>Chapter 49: Hybrid Prototype Technique</h2>
<ul>
  <li>Wizard of Oz:
  <ul>
    <li>High fidelity FE and actual person manually performing the task.</li>
  </ul></li>
</ul><h1><a name="ch-50a"></a>Discovery Testing Techniques</h1><h2><a name="ch-50"></a>Chapter 50: Testing Usability</h2>
<ul>
  <li>This is not rocket science.</li>
  <li>Key points:
  <ul>
    <li>Prefer high-fidelity user prototype.</li>
    <li>PM + Designer + Engineer.</li>
    <li>Prepare set of tasks to test.</li>
    <li>Ask for candid feedback, good or bad.</li>
    <li>Keep the users in &ldquo;use mode&rdquo; and out of &ldquo;critique&rdquo; mode.
    <ul>
      <li>What matters is whether users can easily do the tasks.</li>
    </ul></li>
    <li>Keep quiet while the user is doing the task.
    <ul>
      <li>Avoid leading. Act like a parrot.</li>
    </ul></li>
    <li>Objective: trying to figure out how your user thinks about the problem.</li>
    <li>Summarize the learnings.</li>
  </ul></li>
</ul><h2><a name="ch-51"></a>Chapter 51: Testing Value</h2>
<ul>
  <li>Test demand, value qualitatively and quantitatively.</li>
</ul><h2><a name="ch-52"></a>Chapter 52: Demand Testing Techniques</h2>
<ul>
  <li>Testing for demand is easy.</li>
  <li>Fake door demand testing:
  <ul>
    <li>Add button to new functionality but do not build anything.</li>
    <li>Check click-through rate.</li>
    <li>Ask in the fake page for volunteers to talk about the feature.</li>
  </ul></li>
  <li>Same idea: landing page demand test but for whole product.</li>
</ul><h2><a name="ch-53"></a>Chapter 53: Qualitative Value Testing Techniques</h2>
<ul>
  <li>Not for proving anything but for quick learnings and big insights.</li>
  <li>The single most important discovery activity.</li>
  <li>2-3 per week.</li>
  <li>Don&rsquo;t hire a firm to do this.</li>
  <li>Steps:
  <ol>
    <li>Customer interviews.</li>
    <li>Usability test.</li>
    <li>Value test, check if they are willing to pay:
    <ol>
      <li>Money: give you credit card details or sign a non-binding letter of intent to buy.</li>
      <li>Reputation: Recommend to friends, in social media, workmates.</li>
      <li>Time: work with you for a significant time.</li>
    </ol></li>
  </ol></li>
</ul><h2><a name="ch-54"></a>Chapter 54: Quantitative Value Testing Techniques</h2>
<ul>
  <li>To collect evidence.</li>
  <li>Types:
  <ol>
    <li>Live-data prototype.</li>
    <li>A/B testing:
    <ul>
      <li>1% or fewer users.</li>
      <li>High volume traffic.</li>
    </ul></li>
    <li>Invite-only testing:
    <ul>
      <li>For risk-adverse or low volume.</li>
    </ul></li>
    <li>Use clients from the customer discovery program.</li>
  </ol></li>
</ul><h2><a name="ch-56"></a>Chapter 56: Testing Business Viability</h2>
<ul>
  <li>Stakeholders:
  <ul>
    <li>Marketing.</li>
    <li>Sales.</li>
    <li>Customer Success.</li>
    <li>Finance.</li>
    <li>Legal.</li>
    <li>Business development.</li>
    <li>Security.</li>
    <li>CEO/COO/GM.</li>
  </ul></li>
</ul><h1><a name="ch-58a"></a>Transformation Techniques</h1><h2><a name="ch-58"></a>Chapter 58: Discovery Sprint Technique</h2>
<ul>
  <li>One week time-box of product discovery work to tackle a substantial risk.</li>
  <li>Sprint: how to solve big problems and test new ideas in just five days.</li>
  <li>Use when:
  <ol>
    <li>Something big/critical/difficult to tackle.</li>
    <li>When learning product discovery.</li>
    <li>When moving too slow.</li>
  </ol></li>
</ul><h2><a name="ch-59"></a>Chapter 59: Pilot Team Technique</h2>
<ul>
  <li>To avoid freaking out the laggards.</li>
</ul><h2><a name="ch-60"></a>Chapter 60: Weaning an Organization Off Roadmaps</h2>
<ul>
  <li>Highlight the business outcome the feature is intended to help.
  <ul>
    <li>Celebrate if it does.</li>
    <li>In not; emphasize that the feature was delivered but the result was not.</li>
  </ul></li>
</ul><h1><a name="ch-61a"></a>Process @ Scale</h1><h2><a name="ch-61"></a>Chapter 61: Managing Stakeholders</h2>
<ul>
  <li>Stakeholder: has vote power.</li>
  <li>PM responsibility:
  <ul>
    <li>Understand considerations and constraints of stakeholders.</li>
    <li>Commit to find solutions that also work for the stakeholders.</li>
  </ul></li>
  <li>Success in stakeholder management == trust.
  <ul>
    <li>Trust comes from knowledge in customer, analytics, tech, industry and specially your business.</li>
    <li>Gain trust by openly sharing what we learn.</li>
  </ul></li>
  <li>Spend 1-2-1 time during discovery.</li>
  <li>Group settings is not the forum for designing strong products.</li>
</ul><h2><a name="ch-62"></a>Chapter 62: Communicating Product Learnings</h2>
<ul>
  <li>Head of product to highlight big learnings at all-hands. Not more than 30 mins.</li>
</ul><h1><a name="part-V"></a>Part V: The Right Culture</h1><h2><a name="ch-64"></a>Chapter 64: Good Product Team/Bad Product Team</h2>
<ul>
  <li>Bad teams show the prototypes to engineers during sprint planning so they can estimate.</li>
  <li>Speed comes from the right techniques and not forced labor.</li>
  <li>Bad teams consider analytics and reporting a nice to have.</li>
  <li>Good teams obsess over their reference customers. Bad teams obsess over their competitors.</li>
  <li>Good teams celebrate impact. Bad teams celebrate when they finally release something.</li>
</ul><h2><a name="ch-65"></a>Chapter 65: Top Reasons for Loss of Innovation</h2>
<ul>
  <li>Missing one or more of:
  <ul>
    <li>Customer-centric culture.</li>
    <li>Compelling product vision.</li>
    <li>Focused product strategy.</li>
    <li>Strong product managers.</li>
    <li>Stable product teams.</li>
    <li>Engineers in discovery.</li>
    <li>Corporate courage.</li>
    <li>Empowered product teams.</li>
    <li>Time to innovate.</li>
    <li>Product mindset.</li>
  </ul></li>
</ul><h2><a name="ch-66"></a>Chapter 66: Top Reasons for Loss of Velocity</h2>
<ul>
  <li>Tech debt.</li>
  <li>Lack of strong PM.</li>
  <li>Lack of delivery management.</li>
  <li>Infrequent releases.</li>
  <li>Lack of product vision and strategy.</li>
  <li>Lack of co-located, durable product teams.</li>
  <li>Not including engineers early enough during product discovery.</li>
  <li>Not utilizing product design in discovery and instead having them try to do their work at the same time the engineers are trying to build.</li>
  <li>Changing priorities.</li>
  <li>A consensus culture.</li>
</ul><h2><a name="ch-67"></a>Chapter 67: Establishing a Strong Product Culture</h2>
<ul>
  <li>Two dimensions:
  <ol>
    <li>Consistently innovate:
    <ul>
      <li>Experiments.</li>
      <li>Open mind.</li>
      <li>Empowerment.</li>
      <li>Technology.</li>
      <li>Business and customer-savvy teams.</li>
      <li>Team diversity.</li>
      <li>Discovery techniques.</li>
    </ul></li>
    <li>Consistent execution:
    <ul>
      <li>Urgency.</li>
      <li>High integrity commitments.</li>
      <li>Empowerment.</li>
      <li>Accountability.</li>
      <li>Collaboration.</li>
      <li>Results (vs output).</li>
      <li>Recognition.</li>
    </ul></li>
  </ol></li>
  <li>Most companies that are exceptionally strong at execution are pretty tough places to work.</li>
  <li>Only a few companies are strong both at innovation and execution.</li>
</ul>]]></description></item><item><title>The Taxman notification: an IT horror story</title><link>https://danlebrero.com/2023/04/27/taxman-notification-it-horror-story/</link><guid>https://danlebrero.com/2023/04/27/taxman-notification-it-horror-story/</guid><pubDate>Thu, 27 Apr 2023 00:00:00 +0200</pubDate><description><![CDATA[<script src="/js/freezeframe.min.js"></script><p>With your first coffee in the morning, you open your email and, oooooh gosh, there is an email from the TAXMAN authorities. It reads (paraphrasing):</p>
<blockquote><p>You have an important notification to read. Please go to <a href="https://notifications.gob.es">https://notifications.gob.es</a> to read it.<br/> If you do not read it within 10 days, we will proceed to apply the resolution, whether you like it or not, you worthless scum.</p>
</blockquote><p>After a quick check that it is not a phishing email, you anxiously click the TAXMAN notifications website link, and … BAM! You are welcomed with:</p>
<blockquote><p>Identification failed. Digital certificate not found, you idiot!</p>
</blockquote><p>For a second, you catch the faint sound of maniacal laughter coming from the headset, but when you put them on, you can only hear the sound of your blood pumping on your ears.</p><h2>Firefox</h2><p>As you remove the headset, you rack your brain trying to recall the last time you had to access the TAXMAN website, and suddenly, it dawns on you&hellip;</p><p><span style="font-size: calc(100% - 0px);">I</span>  <span style="font-size: calc(100% + 2px);">t</span>  <span style="font-size: calc(100% + 4px);">&nbsp;&nbsp;o</span>  <span style="font-size: calc(100% + 6px);">n</span>  <span style="font-size: calc(100% + 8px);">l</span>  <span style="font-size: calc(100% + 10px);">y</span>  <span style="font-size: calc(100% + 12px);">&nbsp;&nbsp;w</span>  <span style="font-size: calc(100% + 14px);">o</span>  <span style="font-size: calc(100% + 16px);">r</span>  <span style="font-size: calc(100% + 18px);">k</span>  <span style="font-size: calc(100% + 20px);">e</span>  <span style="font-size: calc(100% + 22px);">d</span>  <span style="font-size: calc(100% + 24px);">&nbsp;&nbsp;i</span>  <span style="font-size: calc(100% + 26px);">n</span>  <span style="font-size: calc(100% + 28px);">&nbsp;&nbsp;F</span>  <span style="font-size: calc(100% + 30px);">i</span>  <span style="font-size: calc(100% + 32px);">r</span>  <span style="font-size: calc(100% + 34px);">e</span>  <span style="font-size: calc(100% + 36px);">f</span>  <span style="font-size: calc(100% + 38px);">o</span>  <span style="font-size: calc(100% + 40px);">x</span>  <span style="font-size: calc(100% + 42px);">!</span></p><p>With the hope that you have not formatted the computer since, you copy and paste the TAXMAN notification link to Firefox and …</p>
<blockquote><p>Identification failed. Digital certificate not found, you dumb!</p>
</blockquote><p>As chills creep up your spine, you try to focus by closing your eyes. What was it? How did it work last time? What the difference is?</p><p><span style="font-size: calc(100% + 0px);">I</span>  <span style="font-size: calc(100% + 2px);">t</span>  <span style="font-size: calc(100% + 4px);">&nbsp;&nbsp;w</span>  <span style="font-size: calc(100% + 6px);">a</span>  <span style="font-size: calc(100% + 8px);">s</span>  <span style="font-size: calc(100% + 8px);">&nbsp;&nbsp;</span>  <span style="font-size: calc(100% + 10px);">f</span>  <span style="font-size: calc(100% + 12px);">r</span>  <span style="font-size: calc(100% + 14px);">o</span>  <span style="font-size: calc(100% + 16px);">m</span>  <span style="font-size: calc(100% + 16px);">&nbsp;&nbsp;</span>  <span style="font-size: calc(100% + 18px);">y</span>  <span style="font-size: calc(100% + 20px);">o</span>  <span style="font-size: calc(100% + 22px);">u</span>  <span style="font-size: calc(100% + 24px);">r</span>  <span style="font-size: calc(100% + 24px);">&nbsp;&nbsp;</span>  <span style="font-size: calc(100% + 26px);">o</span>  <span style="font-size: calc(100% + 28px);">l</span>  <span style="font-size: calc(100% + 30px);">d</span>  <span style="font-size: calc(100% + 30px);">&nbsp;&nbsp;</span>  <span style="font-size: calc(100% + 32px);">l</span>  <span style="font-size: calc(100% + 34px);">a</span>  <span style="font-size: calc(100% + 36px);">p</span>  <span style="font-size: calc(100% + 38px);">t</span>  <span style="font-size: calc(100% + 40px);">o</span>  <span style="font-size: calc(100% + 42px);">p</span>  <span style="font-size: calc(100% + 44px);">!</span></p><p>Praying for it to work, you race to the attic, unshelve your old fella, frantically rummage through the tangled chaos that is your overcrowded cable box and, as soon as you find its power cable - with your heart pounding in your chest - then and there, you turn it on and two beeps latter …</p><p>It starts!</p><p>Without wasting one second, you dismiss the six <code>Please update</code> popups, open the email in Firefox and …</p>
<blockquote><p>Identification failed. Digital certificate not found, you fool!</p>
</blockquote><h2>Where is my certificate?</h2><p>In a random forum, somebody suggests that if your Firefox has been upgraded, it is most likely that your certificates are in an old profile.</p><p>You find the instructions on how to recover an old profile, and …</p>
<blockquote><p>Identification failed. Digital certificate not found, you dimwit!</p>
</blockquote><p>You run downstairs to the new computer, recover the old profile and …</p>
<blockquote><p>Identification failed. Digital certificate not found, you simpleton!</p>
</blockquote><p>Arggghhh, nooooooooooo…….</p><p>More googling suggests finding a file named <code>cert9.db</code>.</p><p>A brute force <code>find /</code> locates the file at <code>/System/Volumes/Data/Users/dlebrero/Desktop/Old Firefox data</code>. You use it to overwrite Firefox’s current’s cert9.db - YES I AM SURE I WANT TO OVERWRITE THAT BLOODY WORTHLESS FILE - and Firefox’s settings reveal that your precious certificate is in place!</p><p><img src="/images/blog/taxman/certificate-found.jpeg" alt="Gollum finds certificate" /></p><p>With a smile on your lips and a knot on your stomach, you go ahead to read the notification …</p>
<blockquote><p>Identification failed. Digital certificate not found, you moron!</p>
</blockquote><p>Oh? WHAAAT?</p><p>Once your wrist starts hurting from bashing F5, you carefully inspect the certificate information and notice that it expired two months ago.</p><p><img
class="gifoverlay"
src="/images/blog/taxman/noooo.gif"
/></p><p>With most of the day wasted and all joy drained from your soul, you brace yourself for what asking for a new certificate is going to entail.</p><h2>New certificate</h2><p>To request a corporate certificate, you first need a personal digital certificate.</p><p>This one just requires you to fill up a form that emails you a code, book a physical appointment in a tax office, and then present yourself with your ID card, the code and patience to last a few hours of queuing.</p><p>After this, an email arrives with a link to download your personal certificate.</p><p>Bye-bye to half a day, but at least you can ask for the corporate digital certificate!</p><h2>Corporate certificate</h2><p>Skipping lunch, you waste no time filling up the form to request the corporate certificate.</p><p>Your already low morale gets another blow when step 3 out of 4 throws an <code>unexpected error</code> at you. Fuck you unexpected!</p><p>You open the Firefox network panel to see what is going on.</p><p>One request is timing out after two minutes. Retrying several times has the same result. Some server is either overloaded, down, or on a long coffee break - who knows what privileges bureaucracy’s servers get.</p><p>You should go to have lunch and try again in a couple of hours, but &hellip;</p><p><img
class="gifoverlay"
src="/images/blog/taxman/refresh.gif"
/></p><p>you cannot help yourself and after twenty-five minutes of hammering the retry button, you manage to advance to step 4!</p><p>Step 4: <code>The request timed out</code>.</p><p><big><b>WTH!!!????</b></big></p><p>The Firefox network panel is still open, so you scroll up and down several times but no request is timing-out or failing. You refresh the page a couple of times and even restart the computer just in case. </p><p><code>The request timed out</code>.</p><p><img
class="gifoverlay"
src="/images/blog/taxman/despair.gif"
/></p><p>What now?</p><h2>Chrome</h2><p>Out of desperation you try with Chrome, because why not.</p><p>Chrome shows the same “timeout error” on step 4 but on opening the Chrome DevTools you see an error in the console: <code>Failed to launch ‘afirma’ because the scheme does not have a registered handler</code>. REALLY??? IN WHAT TWISTED MIND THIS IS A TIMEOUT ERROR??????? </p><p>Googling suggests that you have to install yet another piece of government software to complete the process.</p><p>And with this, and after paying the government 24€ + VAT (where the added value is?), you finally get the certificate!</p><h2>The notification</h2><p>With butterflies in your stomach and palms sweating, at last you open the TAXMAN notification. </p><p>It reads:</p>
<blockquote><p>This is a notification to inform you that this notification system is being decommissioned and from now on you will be notified with the new <a href="https://dehu.gob.es/">https://dehu.gob.es/</a> notification website.</p>
</blockquote>
<script>
new Freezeframe(".gifoverlay", {
  overlay: true
});
</script><p><big><b>WTF?</b></big></p><p>But hey, it could have been worse. </p><p>This could have happened to your dad &hellip; and you had to fix it over the phone. Shrills&hellip;</p>]]></description></item><item><title>Book notes: High Output Management</title><link>https://danlebrero.com/2023/04/12/high-output-management-summary/</link><guid>https://danlebrero.com/2023/04/12/high-output-management-summary/</guid><pubDate>Wed, 12 Apr 2023 00:00:00 +0200</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/3AodrCr">High Output Management</a> by <a href="https://en.wikipedia.org/wiki/Andrew_Grove">Andrew Grove</a>.</p><p>A classic that layout the foundations for a lot of the current management and leadership principles and practices.</p><h1>Key Insights</h1>
<ul>
  <li>You need to plan the way a fire department plans.</li>
  <li>You are not an employee. You are in a business with one employee: yourself.</li>
  <li>Aim is not whatever the customer wants whenever he wants it.</li>
  <li>Your task is to find the most cost-effective way to deploy your resources:
  <ul>
    <li>There is one right answer.</li>
  </ul></li>
  <li>Use pairing indicators: together both effect and counter-effect each other.</li>
  <li>Any measurement is better than none.</li>
  <li>Quality:
  <ul>
    <li>Balance desired result of the inspection:
    <ul>
      <li>Improved quality.</li>
      <li>Minimum disturbance to the production process.</li>
    </ul></li>
    <li>Variable inspection: adjust monitoring rate to the recent quality levels.</li>
  </ul></li>
  <li>Manager&rsquo;s output: output of group reporting to her + output of group under her influence.</li>
  <li>Individual contributors who gather and disseminate know-how and information should be seen as middle managers.</li>
  <li>Much of what we do often seems so inconsequential that our position in the business hardly seems justified.</li>
  <li>Information most useful to managers comes from quick, often casual verbal exchanges. Timely information is more valuable.</li>
  <li>Reports are more a medium of self-discipline than a way to communicate information:
  <ul>
    <li>Writing a report is important; reading it is often not.</li>
  </ul></li>
  <li>Manager activities:
  <ol>
    <li>Information-gathering: all other activities depend on this one.</li>
    <li>Conveying information.</li>
    <li>Decision-making.</li>
    <li>Nudging.</li>
    <li>Role model.</li>
  </ol></li>
  <li>Increase output by either:
  <ol>
    <li>Increase # activities, aka speed up work.</li>
    <li>Increase leverage.</li>
    <li>Shift to activities with higher leverage:
    <ol>
      <li>When many people are affected by one manager.</li>
      <li>When a person&rsquo;s activity/behaviour over a long period of time is affected by a manager&rsquo;s brief, well-focused set of words/actions.</li>
      <li>When a large group is affected by an individual supplying a unique, key piece of knowledge/information.</li>
    </ol></li>
  </ol></li>
  <li>Delegate only activities that you are familiar with.</li>
  <li>Delegation without follow-through is abdication.</li>
  <li>One-to-one meetings:
  <ul>
    <li>Frequency depends on the task-relevant maturity of the subordinate.</li>
    <li>It is a subordinate meeting:
    <ul>
      <li>Agenda and tone set by subordinate.</li>
      <li>Because subordinate must prepare only one, while supervisor would prepare several.</li>
    </ul></li>
  </ul></li>
  <li>Staff meetings:</li>
  <li>Anything that affect more than 2 subordinates.</li>
  <li>Supervisor learn from the exchange and confrontation that often develops, better than on 1-2-1.</li>
  <li>Supervisor role: leader, observer, expediter, questioner, decision-maker, moderator, facilitator.
  <ul>
    <li>NOT lecturer, as it undermines free discussion.</li>
  </ul></li>
  <li>Managers get a little more obsolete (in the know-how) everyday.</li>
  <li>Any decision to be worked out and reached at the lowest level: people closest to the issue and with the most knowledge.</li>
  <li>Who should plan? Those implementing the plan.</li>
  <li>Management by objectives:
  <ul>
    <li>Answer 2 questions:
    <ol>
      <li>Where do I want to go? (Objective).</li>
      <li>How will I pace myself? (Key results).</li>
    </ol></li>
    <li>Should provide focus (== few objectives).</li>
    <li>Key results can be achieved, but the objective still missed.</li>
    <li>Not for individual performance review, but an input for it.</li>
  </ul></li>
  <li>All large organizations with a common business purpose end up in a hybrid organizational form.</li>
  <li>Can an employee have two bosses? Tentative &ldquo;yes&rdquo;.
  <ol>
    <li>Mission-oriented manager: what business problem to work on.</li>
    <li>Technical manager: technical proficiency and career development.</li>
  </ol></li>
  <li>Most appropriate mode of control:</li>
</ul><p><img src="/images/blog/books/high-output-management/mode-of-control.png" alt="model of control" /></p>
<ul>
  <li>Two reasons why somebody is not doing his job:
  <ol>
    <li>Not capable.</li>
    <li>Not motivated.</li>
  </ol>
  <ul>
    <li>If his life depended on it, could he do it?</li>
  </ul></li>
  <li>Motivation has to come from within:</li>
</ul><p><img src="/images/blog/books/high-output-management/maslow-hierarchy-motivation.png" alt="maslow hierarchy" /></p>
<ul>
  <li>Manager as a coach:
  <ol>
    <li>Takes no personal credit for the success of his team, and because of that his players trust him.</li>
    <li>He is tough on his team.</li>
    <li>Likely he was a good player himself at one time: he understands the game well.</li>
  </ol></li>
  <li>Would you cringe to deliver a tough performance review to your subordinate-friend?
  <ul>
    <li>If so, don&rsquo;t make friends at work.</li>
  </ul></li>
  <li>Performance Appraisal:
  <ul>
    <li>One of the manager&rsquo;s highest leverage activities.</li>
    <li>Output measures (100% objective) + internal measures (what is done for the output of future periods).</li>
    <li>No way to do it completely objective.</li>
    <li>Will the subordinate remember all the messages? If not, remove the less important ones.</li>
    <li>We should spend more time trying to improve the performance of our top achievers as they account for a disproportionally large share of the work.</li>
    <li>Do not ask for a self-review: it is a supervisor responsibility.</li>
  </ul></li>
  <li>If performance appraisal is difficult, interviewing is just about impossible.
  <ul>
    <li>The most insights come from discussing subjects familiar to both you and the candidate.</li>
    <li>Don&rsquo;t worry about being blunt: direct questions tend to bring direct answers.</li>
    <li>A candidate can tell you a great deal by asking you questions.</li>
  </ul></li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#ch-0">Introduction</a></li>
  <li><a href="#part-1">Part I: The Breakfast Factory</a>
  <ul>
    <li><a href="#ch-1">Chapter 1 - The Basics of Production: Delivering a Breakfast</a></li>
    <li><a href="#ch-2">Chapter 2 - Managing the Breakfast Factory</a></li>
  </ul></li>
  <li><a href="#p-2">Part II - Management Is a Team Game</a>
  <ul>
    <li><a href="#ch-3">Chapter 3 - Managerial Leverage</a></li>
    <li><a href="#ch-4">Chapter 4 - Meetings - The Medium of Managerial Work</a></li>
    <li><a href="#ch-5">Chapter 5 - Decisions, Decisions</a></li>
    <li><a href="#ch-6">Chapter 6 - Planning: Today&rsquo;s Actions for Tomorrow&rsquo;s Output</a></li>
  </ul></li>
  <li><a href="#p-3">Part III - Team of Teams</a>
  <ul>
    <li><a href="#ch-7">Chapter 7 - The Breakfast Factory Goes National</a></li>
    <li><a href="#ch-8">Chapter 8 - Hybrid Organizations</a></li>
    <li><a href="#ch-9">Chapter 9 - Dual Reporting</a></li>
    <li><a href="#ch-10">Chapter 10 - Modes of Control</a></li>
  </ul></li>
  <li><a href="#p-4">Part IV - The Players</a>
  <ul>
    <li><a href="#ch-11">Chapter 11 - The Sports Analogy</a></li>
    <li><a href="#ch-12">Chapter 12 - Task-Relevant Maturity</a></li>
    <li><a href="#ch-13">Chapter 13 - Performance Appraisal: Manager as Judge and Jury </a></li>
    <li><a href="#ch-14">Chapter 14 - Two Difficult Tasks</a></li>
    <li><a href="#ch-15">Chapter 15 - Compensation as Task-Relevant Feedback</a></li>
    <li><a href="#ch-16">Chapter 16 - Why Training Is The Boss&rsquo;s Job</a></li>
  </ul></li>
</ul><h2><a name="ch-0"></a>Introduction</h2>
<ul>
  <li>Being second best is a tough environment is just not good enough.</li>
  <li>Globalization: every person will compete with every person anywhere in the world who is capable of doing the same thing.</li>
  <li>When products and services become largely indistinguishable from each other, all there is by the way of competitive advantage is time.</li>
  <li>Book aimed to middle managers, and know-how managers (knowledge experts that sort of act as consultants).</li>
  <li>3 basic ideas:
  <ol>
    <li>Output-oriented approach to management.</li>
    <li>Not individuals but teams: the output from a manager is the output of the org units under his supervision or influence.
    <ul>
      <li>Managerial leverage.</li>
    </ul></li>
    <li>A team will perform well only if peak performance is elicited from individuals in it.
    <ul>
      <li>Task-relevant feedback.</li>
    </ul></li>
  </ol></li>
  <li>You need to plan the way a fire department plans.</li>
  <li>You are not an employee. You are in a business with one employee: yourself.</li>
</ul><h1><a name="part-1"></a>Part I: The Breakfast Factory</h1><h2><a name="ch-1"></a>Chapter 1: The Basics of Production: Delivering a Breakfast</h2>
<ul>
  <li>Aim:
  <ul>
    <li>Scheduled delivery time.</li>
    <li>Acceptable quality.</li>
    <li>Lowest cost.</li>
    <li>NOT: whatever the customer wants whenever he wants it.</li>
  </ul></li>
  <li>Find the limiting step and schedule all work around it.</li>
  <li>Production principles:
  <ol>
    <li>Limiting step.</li>
    <li>Time offsets.</li>
    <li>Fundamental types of production operations:
    <ol>
      <li>Process.</li>
      <li>Assembly.</li>
      <li>Test.</li>
    </ol></li>
  </ol></li>
  <li>Example: compiler:
  <ol>
    <li>Process: create the component.</li>
    <li>Test the individual components.</li>
    <li>Assemble into a compiler.</li>
    <li>System test.</li>
  </ol></li>
  <li>Timing of the releases of various bodies of software from one stage to another can all be calculated and staged in advance. (Really???).</li>
  <li>Your task is to find the most cost-effective way to deploy your resources:
  <ul>
    <li>There is one right answer.</li>
    <li>You must develop a clear understanding of the trade-offs between the various factors, and reduce this understanding to a quantifiable set of relationships.</li>
  </ul></li>
  <li>Choose in-process tests over those that destroy product (how this translates to software?).</li>
  <li>Opportunity at risk: what would it cost to shut down until there are more raw materials? Customers lost * cost of bringing them back.</li>
</ul><h2><a name="ch-2"></a>Chapter 2 - Managing the Breakfast Factory</h2>
<ul>
  <li>You have to focus each indicator on a specific operational goal.</li>
  <li>Use pairing indicators: together both effect and counter-effect each other.</li>
  <li>Any measurement is better than none.</li>
  <li>Effective indicators:
  <ol>
    <li>Cover the output, not simple the activity involved.</li>
    <li>Should measure physical countable things.</li>
  </ol>
  <ul>
    <li>Benefits:
    <ol>
      <li>Spell out very clearly the objectives.</li>
      <li>Provide objectivity.</li>
      <li>Allow comparing teams.</li>
    </ol></li>
  </ul></li>
  <li>Leading indicators:
  <ul>
    <li>Indication of what the future might look like.</li>
    <li>Only useful if they entice you to act.</li>
  </ul></li>
  <li>Linearity indicator: progress vs time.</li>
  <li>Trend indicator: output measured against time and against some expected level.</li>
  <li>Staggered chart:
  <ul>
    <li>Forecast and when what it made in.</li>
    <li>Best means of getting a feeling for future business trends.</li>
    <li>Actual value in black.</li>
  </ul></li>
</ul>
<table>
  <thead>
    <tr>
      <th> </th>
      <th>Jan </th>
      <th>Feb </th>
      <th>Mar </th>
      <th>Apr </th>
      <th>May </th>
      <th>Jun </th>
      <th>&hellip; </th>
      <th>&hellip; </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Dec </td>
      <td>20 </td>
      <td>30 </td>
      <td>40 </td>
      <td>50 </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>Jan </td>
      <td><strong>18</strong> </td>
      <td>25 </td>
      <td>35 </td>
      <td>45 </td>
      <td>55 </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>Feb </td>
      <td> </td>
      <td><strong>21</strong> </td>
      <td>31 </td>
      <td>35 </td>
      <td>45 </td>
      <td>60 </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>Mar </td>
      <td> </td>
      <td> </td>
      <td><strong>33</strong> </td>
      <td>45 </td>
      <td>65 </td>
      <td>70 </td>
      <td>75 </td>
      <td> </td>
    </tr>
    <tr>
      <td>&hellip; </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>&hellip; </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>
<ul>
  <li>Build to order vs build to forecast.</li>
  <li>Build to forecast:
  <ul>
    <li>Two simultaneous processes (manufacturing and sales), each with a separate time cycle.</li>
    <li>Both are somehow unpredictable, so &ldquo;slack&rdquo; must be added.</li>
    <li>Most common form of slack: inventory.</li>
    <li>Keep inventory at the lowest-value stage (what does it mean for SW? RFC?)</li>
  </ul></li>
  <li>Quality:
  <ul>
    <li>Receiving inspection, in-process inspection, outgoing inspection.</li>
    <li>Balance desired result of the inspection:
    <ul>
      <li>Improved quality.</li>
      <li>Minimum disturbance to the production process.</li>
    </ul></li>
    <li>Gate-like inspection vs monitoring:
    <ul>
      <li>Variable inspection: adjust monitoring rate to the recent quality levels.</li>
    </ul></li>
  </ul></li>
  <li>Productivity:
  <ul>
    <li>output / labor.</li>
    <li>To increase: work smarter or work harder.</li>
  </ul></li>
  <li>Leverage:
  <ul>
    <li>Output generated by specific work activity.</li>
    <li>Work smarter by simplifying work:
    <ul>
      <li>List activities to do the work and ask why they are needed.</li>
    </ul></li>
  </ul></li>
</ul><h1><a name="p-2"></a>Part II - Management Is a Team Game</h1><h2><a name="ch-3"></a>Chapter 3 - Managerial Leverage</h2>
<ul>
  <li>Manager&rsquo;s output: output of group reporting to her + output of group under her influence.</li>
  <li>Individual contributors who gather and disseminate know-how and information should be seen as middle managers.</li>
  <li>Much of what we do often seems so inconsequential that our position in the business hardly seems justified:
  <ul>
    <li>Activities seem trivial, insignificant and messy.</li>
    <li>But output seems important, significant and worthwhile.</li>
  </ul></li>
  <li>Information most useful to managers comes from quick, often casual verbal exchanges. Timely information is more valuable.</li>
  <li>Reports are more a medium of self-discipline than a way to communicate information:
  <ul>
    <li>Writing a report is important; reading it is often not.</li>
    <li>(Similarly) preparation of an annual plan is in itself the end, not the resulting bound volume.</li>
  </ul></li>
  <li>Visiting a particular place in the company and observe what&rsquo;s going on there is an especially efficient (and underutilized) way to get information.</li>
  <li>Transmitting objectives and preferred approaches is key to successful delegation.</li>
  <li>Manager activities:
  <ol>
    <li>Information-gathering: all other activities depend on this one.</li>
    <li>Conveying information.</li>
    <li>Decision-making.</li>
    <li>Nudging.</li>
    <li>Role model.</li>
  </ol></li>
  <li>How you handle your own time is the single most important aspect of being a role model and leader.</li>
  <li>Meetings provide an occasion for managerial activities:
  <ul>
    <li>Meetings are a medium.</li>
  </ul></li>
  <li>Managerial output == Leverage<sub>1</sub> * Activity<sub>1</sub> + L<sub>2</sub>*A<sub>2</sub> + L<sub>3</sub> * A<sub>3</sub>
  <ul>
    <li>Increase output by either:
    <ol>
      <li>Increase # activities, aka speed up work: Good time management:
      <ul>
        <li>Identify limiting step and schedule around it.</li>
        <li>Batching: to reduce task switching.</li>
        <li>Forecast:
        <ul>
          <li>Large portion of managerial work can be forecasted.</li>
          <li>Use your calendar as the medium to forecast.</li>
        </ul></li>
        <li>Do not accept more work if you are at max capacity.</li>
        <li>Be proactive at filling holes in your calendar between the time-critical events.</li>
        <li>When you say &ldquo;yes&rdquo; to one thing, you are inevitably saying &ldquo;no&rdquo; to another.</li>
        <li>Allow for slack.</li>
        <li>Keep an inventory of project not urgent but important over the long term, so free time is used in these projects and not meddling.</li>
      </ul></li>
      <li>Increase leverage.</li>
      <li>Shift to activities with higher leverage.</li>
    </ol></li>
    <li>High leverage activities:
    <ol>
      <li>When many people are affected by one manager.</li>
      <li>When a person&rsquo;s activity/behaviour over a long period of time is affected by a manager&rsquo;s brief, well-focused set of words/actions.</li>
      <li>When a large group is affected by an individual supplying a unique, key piece of knowledge/information.</li>
    </ol></li>
  </ul></li>
  <li>Managerial meddling has negative leverage:
  <ul>
    <li>Subordinate will show less initiative.</li>
  </ul></li>
  <li>Delegate only activities that you are familiar with.</li>
  <li>Delegation without follow-through is abdication:
  <ul>
    <li>You are still responsible for its accomplishment.</li>
    <li>Monitoring is the only practical way to ensure a result.</li>
    <li>Monitoring != meddling.</li>
    <li>Monitoring == QA. Same principles:
    <ul>
      <li>Do it early, variable inspection.</li>
      <li>Go into some details randomly but not all details all the time.</li>
    </ul></li>
  </ul></li>
  <li>A manager should have 6-8 subordinates:
  <ul>
    <li>Half day per week per subordinate.</li>
    <li>For know-how managers, each planning, advisory, or coordination group counts as a subordinate.</li>
  </ul></li>
  <li>Interruptions - the plague of managerial work:
  <ul>
    <li>Strive towards regularity.</li>
    <li>Because you need to coordinate with other managers, you can only move towards regularity if others do too.</li>
    <li>Reduce time spend handling interruptions by using standard responses.
    <ul>
      <li>Have regular scheduled time (like 1-2-1).</li>
      <li>Force interrupters to make an active decision about whether an issue can wait.</li>
      <li>&ldquo;I am doing individual work. Please don&rsquo;t interrupt me unless it really can&rsquo;t wait until 2pm&rdquo;.</li>
    </ul></li>
  </ul></li>
</ul><h2><a name="ch-4"></a>Chapter 4 - Meetings - The Medium of Managerial Work</h2>
<ul>
  <li>2 types:
  <ol>
    <li>Process-oriented meetings:
    <ul>
      <li>Knowledge is shared and information exchanged.</li>
      <li>Regular.</li>
      <li>Kinds:
      <ol>
        <li>One-to-one:
        <ul>
          <li>Mutual teaching and exchange of info.</li>
          <li>Frequency depends on the task-relevant maturity of the subordinate.</li>
          <li>Also depend on how fast things change.</li>
          <li>Should last one hour minimum.</li>
          <li>In or near the subordinate work area.</li>
          <li>Key point: it is a subordinate meeting:
          <ul>
            <li>Agenda and tone set by subordinate.</li>
            <li>Because subordinate must prepare only one, while supervisor would prepare several.</li>
          </ul></li>
          <li>Content:
          <ul>
            <li>Performance/Indicators figures.</li>
            <li>Any problems or potential ones (even it is only intuition).</li>
            <li>Criteria: anything that preoccupy or nag the subordinate.</li>
          </ul></li>
          <li>Supervisor role: learn and coach.</li>
          <li>Both take notes: help focus, commitment and follow up.</li>
        </ul></li>
        <li>Staff meetings
        <ul>
          <li>Supervisor + all subordinates.</li>
          <li>Interaction among peers.</li>
          <li>Decision-making by a group of peers is not easy.</li>
          <li>Supervisor learn from the exchange and confrontation that often develops, better than on 1-2-1.</li>
          <li>Content:
          <ul>
            <li>Anything that affect more than 2 subordinates.</li>
            <li>Agenda + open session.</li>
          </ul></li>
          <li>Supervisor role: leader, observer, expediter, questioner, decision-maker, moderator, facilitator.
          <ul>
            <li>NOT lecturer, as it undermines free discussion.</li>
          </ul></li>
          <li>Supervision should be &ldquo;inactive&rdquo; while subordinates &ldquo;active&rdquo;.</li>
        </ul></li>
        <li>Operation reviews:
        <ul>
          <li>Teaching and learning between employees several organizational levels apart.</li>
          <li>Roles:
          <ul>
            <li>Organizing manager:
            <ul>
              <li>Help chose topics and level of detail.</li>
              <li>Housekeeping.</li>
              <li>Timekeeper.</li>
            </ul></li>
            <li>Reviewing manager:
            <ul>
              <li>Senior supervisor at whom the review is aimed.</li>
              <li>Ask questions, make comments, catalyst to audience participation.</li>
              <li>Role model for junior managers.</li>
              <li>Should never preview the material.</li>
            </ul></li>
            <li>Presenters:
            <ul>
              <li>Look at body language of audience.</li>
            </ul></li>
            <li>Audience:
            <ul>
              <li>You are being paid to attend: pay attention, ask questions, make comments.</li>
            </ul></li>
          </ul></li>
        </ul></li>
      </ol></li>
    </ul></li>
    <li>Mission-Oriented meetings:
    <ul>
      <li>Adhoc to produce a specific output.</li>
      <li>The chairman is responsible for the result and must have a clear understanding of the meeting objective. Ask yourself:
      <ul>
        <li>What I am trying to accomplish?</li>
        <li>Is a meeting necessary/desirable/justifiable?</li>
      </ul></li>
      <li>Beware of the dollar cost of the meeting.</li>
      <li>Avoid more than 6 people. 8 Max.</li>
      <li>Chairman:
      <ul>
        <li>Agenda.</li>
        <li>Role of each participant.</li>
        <li>Commitment from each participant.</li>
        <li>Send minutes + decision + actions asap.</li>
      </ul></li>
    </ul></li>
  </ol></li>
</ul><h2><a name="ch-5"></a>Chapter 5 - Decisions, Decisions</h2>
<ul>
  <li>The faster the change in the know-how, the greater the divergence between knowledge and position power is likely to be.
  <ul>
    <li>Managers get a little more obsolete everyday.</li>
    <li>Key to success is middle manager that mesh smoothly the holder of the two types of power.</li>
  </ul></li>
  <li>Ideal decision model:
  <ol>
    <li>Free discussion.</li>
    <li>Clear decision.</li>
    <li>Full support.</li>
    <li>Go to 1 if decision was wrong.</li>
  </ol>
  <ul>
    <li>Easy one to follow for senior managers and newly graduates.</li>
    <li>Any decision to be worked out and reached at the lowest level: people closest to the issue and with the most knowledge.</li>
    <li>Good decisions need expertise + judgment (== experience).</li>
  </ul></li>
  <li>The Peer-Group Syndrome:
  <ul>
    <li>Peers are afraid to stick out their necks.</li>
    <li>Peers going in circles until consensus is developed, due the fear of:
    <ul>
      <li>Sounding dumb (specially seniors).</li>
      <li>Being overruled (specially juniors).</li>
      <li>Not enough business or technical knowledge.</li>
    </ul></li>
    <li>No proper discussion happens, hence best decision is not made.</li>
    <li>Push for consensus, and failing that, step in and make a decision.
    <ul>
      <li>Not too early, not too late.</li>
    </ul></li>
  </ul></li>
  <li>Answer:
  <ul>
    <li>What decision?</li>
    <li>When?</li>
    <li>Who will decide?</li>
    <li>Who needs to be consulted?</li>
    <li>Who can veto/ratify?</li>
    <li>Who needs to be informed?</li>
  </ul></li>
  <li>Politics and manipulation or even their appearance should be avoided at all costs.</li>
</ul><h2><a name="ch-6"></a>Chapter 6 - Planning: Today&rsquo;s Actions for Tomorrow&rsquo;s Output</h2>
<ul>
  <li>Steps:
  <ol>
    <li>Determine environmental demand:
    <ul>
      <li>What your clients want now?</li>
      <li>What your clients will want in X months/years?</li>
    </ul></li>
    <li>Determine present status:
    <ul>
      <li>Should be stated in the same terms (currency, widgets, outputs) as the demand.</li>
    </ul></li>
    <li>Determine what to do to close the gap:
    <ul>
      <li>What do you need to close the gap?</li>
      <li>What can you do to close the gap?</li>
    </ul></li>
  </ol></li>
  <li>Today&rsquo;s gap represents a failure of planning sometime in the past.</li>
  <li>The output of the planning process is the decisions made and the actions taken as result of the process.</li>
  <li>How often to plan? Give enough time to get feedback on the last planning process.</li>
  <li>Who should plan? Those implementing the plan.</li>
  <li>Management by objectives:
  <ul>
    <li>Concern only with steps 2 and 3 of planning.</li>
    <li>Answer 2 questions:
    <ol>
      <li>Where do I want to go? (Objective).</li>
      <li>How will I pace myself? (Key results).</li>
    </ol></li>
    <li>Should provide focus (== few objectives).</li>
    <li>Key results can be achieved, but the objective still missed.</li>
    <li>Not for individual performance review, but an input for it.</li>
    <li>No room for ambiguity in key results.</li>
  </ul></li>
</ul><h1><a name="p-3"></a>Part III - Team of Teams</h1><h2><a name="ch-7"></a>Chapter 7 - The Breakfast Factory Goes National</h2>
<ul>
  <li>Centralization-decentralization dichotomy.</li>
</ul><h2><a name="ch-8"></a>Chapter 8 - Hybrid Organizations</h2>
<ul>
  <li>Two extremes:
  <ol>
    <li>Totally mission-oriented:
    <ul>
      <li>Completely decentralized.</li>
      <li>Independent.</li>
      <li>Responsible.</li>
      <li>More responsive: this is critical for a business unit.</li>
    </ul></li>
    <li>Totally functional form:
    <ul>
      <li>Economies of scale.</li>
      <li>Increase leverage.</li>
      <li>More flexibility moving resources/people on corporate-wide priorities.</li>
    </ul></li>
  </ol></li>
  <li>Hybrid: mix of both:
  <ul>
    <li>Business units: decentralized.</li>
    <li>Functional groups:
    <ul>
      <li>Centralized.</li>
      <li>Viewed as internal subcontractors.</li>
      <li>Information overload to serve all business units.</li>
      <li>Negotiation and competition for their time/resources.</li>
    </ul></li>
  </ul></li>
  <li>All large organizations with a common business purpose end up in a hybrid organizational form.</li>
</ul><p><img src="/images/blog/books/high-output-management/matrix-organization.png" alt="matrix organization" /></p>
<ul>
  <li>Most important task of hybrid orgs is the optimum and timely allocation of its resources and the efficient resolution of conflicts arising over that allocation:
  <ul>
    <li>Central &ldquo;allocators&rdquo; is not the answer.</li>
    <li>Middle managers are:
    <ol>
      <li>They are numerous.</li>
      <li>They are close to the problem.</li>
    </ol>
    <ul>
      <li>To succeed they need:
      <ol>
        <li>Accept the hybrid org form.</li>
        <li>Develop and master dual reporting.</li>
      </ol></li>
    </ul></li>
  </ul></li>
</ul><h2><a name="ch-9"></a>Chapter 9 - Dual Reporting</h2>
<ul>
  <li>Can an employee have two bosses? Tentative &ldquo;yes&rdquo;.</li>
  <li>Matrix management:
  <ul>
    <li>Core idea is that a project manager (outside the contracting company) could wield as much influence on the work of units within a given contractor company as could the company management itself.</li>
  </ul></li>
  <li>We want the immediacy and the operating priorities coming from the general manager, plus a technical supervisory relationship.</li>
  <li>The technical supervisor role can be filled by a group of peers:
  <ul>
    <li>Required the voluntary surrender of individual decision-making to the group.</li>
    <li>This requires trust in the peer group, which requires a strong and positive culture.</li>
    <li>Makes manager&rsquo;s life ambiguous.</li>
  </ul></li>
  <li>Two bosses:
  <ol>
    <li>Mission-oriented manager: what business problem to work on.</li>
    <li>Technical manager: technical proficiency and career development.</li>
  </ol></li>
  <li>Multi-plane organization:
  <ul>
    <li>Mission-oriented org chart is a plane, while technical org chart is another.</li>
    <li>There can be more than two planes, some will be temporal.</li>
    <li>Having multiple planes (org charts) allow for the optimal organization for a given problem/objective.</li>
  </ul></li>
</ul><h2><a name="ch-10"></a>Chapter 10 - Modes of Control</h2>
<ul>
  <li>Means:
  <ol>
    <li>Free-market forces:
    <ul>
      <li>Like choosing what/where tires to buy.</li>
      <li>Self-interest.</li>
      <li>Requires a clear dollar value, which within an org is hard to establish.</li>
    </ul></li>
    <li>Contractual obligations:
    <ul>
      <li>Like stopping at a ref traffic light.</li>
      <li>Obey the law.</li>
    </ul></li>
    <li>Cultural values:
    <ul>
      <li>Like helping on an accident while exposing yourself to danger.</li>
      <li>When environment changes more rapidly than one can change rules.</li>
      <li>When a set of circumstances is so ambiguous and unclear that a contract would be prohibitively complicated.</li>
      <li>Interest of the group takes precedence over the interest of the individual.</li>
      <li>Emotions.</li>
      <li>Requires shared values, objectives and methods.
      <ul>
        <li>It is management&rsquo;s role to articulate these and be an example.</li>
      </ul></li>
      <li>Requires shares experiences.</li>
    </ul></li>
  </ol></li>
  <li>Most appropriate mode of control: <img src="/images/blog/books/high-output-management/mode-of-control.png" alt="model of control" /></li>
  <li>New employee are in self-interest:
  <ul>
    <li>Promotion from within tends to be favored by corporations with strong cultures.</li>
  </ul></li>
</ul><h1><a name="p-4"></a>Part IV - The Players</h1><h2><a name="ch-11"></a>Chapter 11 - The Sports Analogy</h2>
<ul>
  <li>A team will perform only as well as the individuals on it.</li>
  <li>Manager can elicit peak individual performance.</li>
  <li>Two reasons why somebody is not doing his job:
  <ol>
    <li>Not capable.</li>
    <li>Not motivated.</li>
  </ol>
  <ul>
    <li>If his life depended on it, could he do it?</li>
    <li>To improve performance:
    <ol>
      <li>Training.</li>
      <li>Motivation.</li>
    </ol></li>
  </ul></li>
  <li>Motivation has to come from within:
  <ul>
    <li>All a manager can do is create an environment in which motivated people can flourish.</li>
    <li>Maslow&rsquo;s theory of motivation:
    <ul>
      <li>Needs cause people to have drives, which in turn result in motivation.</li>
      <li>No need, no motivation.</li>
      <li>When a lower need is satisfied, one higher is likely to take over.</li>
      <li>Physiological needs: things money can buy.</li>
      <li>Security/safety needs: protect oneself from going back to physiological needs.</li>
      <li>Social/Affiliation needs: belong to a group that share something in common.</li>
      <li>Esteem/recognition needs: need to keep up with or emulate someone/some group.</li>
      <li>Self-actualization:
      <ul>
        <li>Personal realization: &ldquo;What I can be, I must be&rdquo;.</li>
        <li>Two types:
        <ol>
          <li>Competency-driven: mastery.</li>
          <li>Achievement-driven:
          <ul>
            <li>Abstract need to achieve in all that you do.</li>
            <li>Spontaneously test the limit of their abilities.</li>
            <li>This is why OKR should be unachievable/impossible.</li>
          </ul></li>
        </ol></li>
        <li>Person needs to measure his progress/achievements.</li>
        <li>Measure by feedback on his performance.</li>
        <li>For competency-driven, feedback comes from within that individual.</li>
        <li>At work, performance indicators and milestones linked to the individual&rsquo;s performance.</li>
        <li>Fear of failure can become a negative source of motivation if it becomes preoccupation.</li>
      </ul></li>
    </ul></li>
  </ul></li>
</ul><p><img src="/images/blog/books/high-output-management/maslow-hierarchy-motivation.png" alt="maslow hierarchy" /></p>
<ul>
  <li>Self-limiting: once achieved, no longer motivates.</li>
  <li>The sport analogy:
  <ul>
    <li>Marathon: people try to beat others or the stopwatch.</li>
    <li>Cultural prejudice:
    <ul>
      <li>Respect for sportsman training long hours but somebody working long hours is a workaholic.</li>
    </ul></li>
    <li>Manager as a coach:
    <ol>
      <li>Takes no personal credit for the success of his team, and because of that his players trust him.</li>
      <li>He is tough on his team.</li>
      <li>Likely he was a good player himself at one time: he understands the game well.</li>
    </ol></li>
  </ul></li>
</ul><h2><a name="ch-12"></a>Chapter 12 - Task-Relevant Maturity</h2>
<ul>
  <li>See <a href="/2020/04/01/no-nonsense-leadership-summary/#ch-2">Chapter 2 of No-nonsense Leadership</a>.</li>
  <li>High output is associated with particular combinations of certain managers and certain groups of workers:
  <ul>
    <li>The fundamental variable that tells you what management styles is most appropriate is task-relevant maturity (TRM) of a subordinate.</li>
    <li>TRM:
    <ul>
      <li>Achievement orientation +</li>
      <li>Readiness to take responsibility +</li>
      <li>Education +</li>
      <li>Training +</li>
      <li>Experience.</li>
    </ul></li>
    <li>TRM is task specific.</li>
  </ul></li>
  <li>Three levels:
  <ol>
    <li>Low:
    <ul>
      <li>Structured task-oriented</li>
      <li>Tell what/when/how.</li>
      <li>Detailed instructions.</li>
    </ul></li>
    <li>Medium:
    <ul>
      <li>Emphasis on two-way communication.</li>
      <li>Emotional support.</li>
      <li>Encouragement.</li>
      <li>Focus more on the individual than the task.</li>
    </ul></li>
    <li>High:
    <ul>
      <li>Minimal involvement.</li>
      <li>Focus on agreeing on objectives.</li>
      <li>Monitoring.</li>
    </ul></li>
  </ol></li>
  <li>Highest levels of TRM the training is complete, and the subordinate&rsquo;s motivation is likely self-actualization.</li>
  <li>Deciding on your subordinates TRM is not easy, but even if the manager knows the TRM, his personal preferences tend to override the proper choice of management style.</li>
  <li>Would you cringe to deliver a tough performance review to your subordinate-friend?
  <ul>
    <li>If so, don&rsquo;t make friends at work.</li>
  </ul></li>
</ul><h2><a name="ch-13"></a>Chapter 13 - Performance Appraisal: Manager as Judge and Jury</h2>
<ul>
  <li>One of the manager&rsquo;s highest leverage activities.</li>
  <li>Main purpose is to improve the subordinate&rsquo;s performance:
  <ol>
    <li>What skills are missing and how to remedy that lack.</li>
    <li>Intensify subordinate&rsquo;s motivation.</li>
  </ol></li>
  <li>Delivering a good performance review is very hard due to our professional training and our cultural background as our society values avoiding confrontation.</li>
  <li>Assessing performance:
  <ul>
    <li>Output measures (100% objective) + internal measures (what is done for the output of future periods).</li>
    <li>No way to do it completely objective.</li>
    <li>Weight of output vs internal should be clear from the beginning.</li>
    <li>Time offset: time it takes the subordinate&rsquo;s activity to have an effect on the output.</li>
    <li>Manager&rsquo;s review should include both the performance of his group and his own performance.</li>
    <li>Avoid the &ldquo;potential trap&rdquo;: manager shows good forms but output of group is poor.</li>
    <li>No matter how well a subordinate has done his job, we can always find ways to suggest improvements.</li>
  </ul></li>
  <li>Delivery the assessment:
  <ul>
    <li>Three &ldquo;L&rdquo;s:
    <ol>
      <li>Level:
      <ul>
        <li>The credibility and integrity of the entire system depend on you being totally frank.</li>
      </ul></li>
      <li>Listen:
      <ul>
        <li>If your subordinate&rsquo;s response (verbal and non-verbal) to the assessment do not completely assure you that what you&rsquo;ve said has gotten through, it is your responsibility to keep at it until you are satisfied that you have been heard and understood.</li>
      </ul></li>
      <li>Leave yourself out:
      <ul>
        <li>Control your emotions, so they do not affect your task.</li>
      </ul></li>
    </ol></li>
  </ul></li>
  <li>Review should have no surprises, but if you uncover one, swallow hard and bring it up.</li>
  <li>3 types of performance review:
  <ol>
    <li>On the one hand &hellip; on the other &hellip;:
    <ul>
      <li>Most reviews.</li>
      <li>Avoid: superficiality, cliches, and laundry list.</li>
      <li>People has finite capacity, so target a few key areas.</li>
      <li>Prep:
      <ol>
        <li>Write down everything you can think of (brain dump, no mental editing).</li>
        <li>Find relationship between items.</li>
        <li>For each relationship, write a &ldquo;message&rdquo; for the subordinate.</li>
      </ol></li>
      <li>Will the subordinate remember all the messages? If not, remove the less important ones.</li>
    </ul></li>
    <li>The blast:
    <ul>
      <li>Major performance problem.</li>
      <li>Stages:<br/> <img src="/images/blog/books/high-output-management/bad-performance-apprisal-phases.png" alt="bad performance stages" /></li>
      <li>Outcomes:
      <ol>
        <li>Agree on assessment and solution.</li>
        <li>Disagree on assessment but agree/commit on solution.</li>
        <li>Disagree on assessment and solution.</li>
      </ol>
      <ul>
        <li>Outcomes 1 and 2 are ok.</li>
      </ul></li>
    </ul></li>
    <li>Reviewing the Ace:
    <ul>
      <li>Typical issue: review is about past achievements, and not about future performance improvements.</li>
      <li>We should spend more time trying to improve the performance of our top achievers as they account for a disproportionally large share of the work.</li>
      <li>Concentrating on the top achievers is a high leverage activity: if they get better, the impact on the group output is very great indeed.</li>
    </ul></li>
  </ol></li>
  <li>Do not ask for a self-review: it is a supervisor responsibility.</li>
  <li>Provide the appraisal before the face-to-face meeting.</li>
</ul><h2><a name="ch-14"></a>Chapter 14 - Two Difficult Tasks</h2>
<ol>
  <li>Interviewing:
  <ul>
    <li>If performance appraisal is difficult, interviewing is just about impossible.</li>
    <li>Applicant should do 80% of the talking, but you are in control:
    <ul>
      <li>Gently interrupt if things go off track.</li>
    </ul></li>
    <li>The most insights come from discussing subjects familiar to both you and the candidate.</li>
    <li>4 categories:
    <ol>
      <li>Technical/skills:
      <ul>
        <li>Describe some project.</li>
        <li>What are your weakness.</li>
      </ul></li>
      <li>What he did with knowledge:
      <ul>
        <li>Past achievements.</li>
        <li>Past failures.</li>
      </ul></li>
      <li>Discrepancies:
      <ul>
        <li>What did you learn from failures.</li>
        <li>Problem in current position.</li>
      </ul></li>
      <li>Operational values:
      <ul>
        <li>Why are you ready for a new job.</li>
        <li>Why should my company hire you.</li>
      </ul></li>
    </ol></li>
    <li>You must judge potential contribution.</li>
    <li>Don&rsquo;t worry about being blunt: direct questions tend to bring direct answers.</li>
    <li>A candidate can tell you a great deal by asking you questions.</li>
  </ul></li>
  <li>&ldquo;I quit!&rdquo;:
  <ul>
    <li>High value employee that quits from reasons other than compensation.</li>
    <li>Usually he feels unrecognized.</li>
    <li>Your initial reaction to his announcement is absolutely crucial:
    <ul>
      <li>Drop everything, sit down and ask him why.</li>
      <li>Let him talk and then ask him more questions until real reasons emerge.</li>
      <li>Don&rsquo;t argue, lecture or panic.</li>
      <li>Buy time for next round.</li>
    </ul></li>
  </ul></li>
</ol><h2><a name="ch-15"></a>Chapter 15 - Compensation as Task-Relevant Feedback</h2>
<ul>
  <li>Money has significance at all levels of Maslow&rsquo;s motivation hierarchy.</li>
  <li>The percentage the bonus represents of a manager&rsquo;s total compensation should rise with his total compensation.</li>
  <li>Base salary should be a mix of experience and merit.</li>
  <li>Peter Principle: employee gets promoted until he reaches his level of incompetence, and then stays there:
  <ul>
    <li>More accurate: an employee moves in cycles:
    <ol>
      <li>&ldquo;Meets expectations&rdquo;.</li>
      <li>&ldquo;Exceed expectations&rdquo;.</li>
      <li>Promotion. Go to 1.</li>
    </ol></li>
    <li>If employee does not meet expectations after promotion:
    <ol>
      <li>Should be &ldquo;recycled&rdquo; to previous position until ready.</li>
      <li>Is a management misjudgement.</li>
    </ol></li>
  </ul></li>
</ul><h2><a name="ch-16"></a>Chapter 16 - Why Training Is The Boss&rsquo;s Job</h2>
<ul>
  <li>For training to be effective, it has to be closely tied to how things are actually done in your org.</li>
  <li>Training should be a process, not an event.</li>
  <li>Training must be done by a person who represents a suitable role model.</li>
  <li>Skills that you have had for years are much harder to explain than to practice.</li>
  <li>Regard the first time you teach a course as a throw-away:
  <ul>
    <li>No matter how hard you try, it won&rsquo;t be great.</li>
    <li>Give this first course to the most knowledgeable of your subordinates, who won&rsquo;t be confused and will help to improve it.</li>
  </ul></li>
  <li>If it is your first time teaching, you&rsquo;ll discover:
  <ol>
    <li>Training is hard.</li>
    <li>You are the one that will learn the most.</li>
    <li>If training goes well, it is nothing short of exhilarating.</li>
  </ol></li>
</ul>]]></description></item><item><title>Client-side good practices when building third party API integrations</title><link>https://danlebrero.com/2023/03/29/client-side-integration-patterns-good-practices/</link><guid>https://danlebrero.com/2023/03/29/client-side-integration-patterns-good-practices/</guid><pubDate>Wed, 29 Mar 2023 00:00:00 +0200</pubDate><description><![CDATA[<p>Here is a brain dump of things that I consider when I have to build a new integration with some third party API provider.</p><p>Notes are quite sketchy. If something needs of a longer explanation let me know!</p><h1>Truths</h1>
<ul>
  <li>They are messy.</li>
  <li>Third parties will become unavailable, both in small doses (few requests &ldquo;randomly&rdquo; failing) and in big ones (few minutes or hours of downtime).</li>
  <li>SFTP is a perfectly acceptable way of integrating.</li>
</ul><h1>Practices</h1><h2>Initial implementation</h2>
<ul>
  <li>Read the docs.
  <ul>
    <li>Do not just fiddle with the endpoints but read the actual docs.</li>
  </ul></li>
  <li>Play with the API to understand behaviours. What if:
  <ul>
    <li>the url is wrong? Does it return a 404?</li>
    <li>the data queried does not exist? Empty result or 404?</li>
    <li>we miss some query/body parameters?</li>
    <li>we concurrently update the same piece of information?</li>
    <li>we exceed the rate limit?</li>
  </ul></li>
  <li>Estimate call rate and data volumes:
  <ul>
    <li>Is batching available?</li>
    <li>Is pagination available?</li>
    <li>Get a sense of the performance:
    <ul>
      <li>It might affect the implementation and business flow.</li>
    </ul></li>
  </ul></li>
  <li>Document findings
  <ul>
    <li>Include support contact information and expectations.</li>
  </ul></li>
  <li>Subscribe the provider&rsquo;s status page.</li>
  <li>Find out what is their change management process:
  <ul>
    <li>Subscribe to whatever you need to subscribe to find out about changes.</li>
    <li>Is it a newly built third party?
    <ul>
      <li>Try to get direct access to their technical team.</li>
      <li>Expect loads of backwards incompatible changes.</li>
      <li>VS mature products, higher chance that the bug is on their side.</li>
    </ul></li>
  </ul></li>
  <li>Consider a <a href="https://martinfowler.com/bliki/DarkLaunching.html">dark launch</a>:
  <ul>
    <li>Put the integration in production, so it is exercised but do not use it in a client facing functionality.</li>
    <li>Minimum monitoring (error and performance) required for this to be useful.</li>
    <li>Useful also to collect real example responses to use for additional testing.</li>
  </ul></li>
</ul><h2>On the way to production</h2>
<ul>
  <li>What is the acceptable business process when the integration fails?
  <ul>
    <li>Integration will fail.</li>
    <li>Avoid &ldquo;at all costs&rdquo; making an integration mandatory for a key user flow.</li>
    <li>What is the fallback mechanism? Default answer?</li>
    <li>If there is a reasonable business flow, consider recording which user flows where affected and proper actions retried/amended/reviewed/notified.</li>
    <li>It is a business decision.</li>
  </ul></li>
  <li>Add retries:
  <ul>
    <li>Think of clock time, not number of retries.</li>
    <li>Consider supporting a manual retry mechanism for your support folks.</li>
    <li>See &ldquo;user-flow vs background integrations below&rdquo;.</li>
  </ul></li>
  <li>Add a kill-switch:
  <ul>
    <li>Ideally in the hands of a PM.</li>
    <li>Review &ldquo;What is the acceptable business process when the integration fails&rdquo;.</li>
  </ul></li>
  <li>Always set timeouts in network calls:
  <ul>
    <li>In the case of Apache HTTP client, <a href="/2019/12/11/apache-http-client-timeouts-config-production-asynchronous-http-client-pictures">at least connection and read timeout</a>.</li>
    <li>Consider that while the thread is waiting for a response, it might be holding other resources (locks, db connections) hostage, which might affect unrelated requests.</li>
    <li>Review &ldquo;What is the acceptable business process when the integration fails&rdquo;.</li>
    <li>Note: when there is a read timeout while waiting for the server to respond, the client side does not know if the request was processed or not.</li>
    <li>Note: if the client application crashes, any in-flight request to the provider ends up in an unknown state from the client&rsquo;s point of view.
    <ul>
      <li>Consider a retry/recovery mechanism when the client application starts up.</li>
    </ul></li>
  </ul></li>
  <li>If you can influence it, encourage the provider to implement idempotent APIs:
  <ul>
    <li>&ldquo;At least once&rdquo; semantics are way easier than &ldquo;at most once&rdquo;.</li>
  </ul></li>
  <li>You might want to consider splitting one third party API into smaller independent integrations if:
  <ul>
    <li>Some endpoints are more critical than others for your business process.</li>
    <li>The various endpoints have widely different latencies.</li>
  </ul></li>
  <li>Monitoring:
  <ul>
    <li>Call rate, error rate, latency.</li>
    <li>Logs:
    <ul>
      <li>All calls.</li>
      <li>Request/Response body in the case of an error.
      <ul>
        <li>Careful with PII data.</li>
      </ul></li>
      <li>Side note: client side monitoring is always better than server side monitoring, as the server might not see some requests if they never reach it, or it might miss monitoring data if it is struggling with load/network/crashing.
      <ul>
        <li>Server side monitoring is still required.</li>
      </ul></li>
    </ul></li>
  </ul></li>
  <li>Set alerts:
  <ul>
    <li>Useful distinction between errors:
    <ul>
      <li>4xx:
      <ul>
        <li>It&rsquo;s our fault.</li>
        <li>Most likely something that we can do about it.</li>
        <li>Daily/weekly report:
        <ul>
          <li>Daily the first few weeks.</li>
          <li>Only alert if % is very high.</li>
          <li>Very unlikely that a retry will help.</li>
        </ul></li>
      </ul></li>
      <li>5xx and timeouts/network errors:
      <ul>
        <li><a href="/2016/11/21/the-boy-who-cried-wolf-an-it-tale/">Do not alert on each and every error</a>:
        <ul>
          <li>Timeout and 5xx will happen and are normal.</li>
        </ul></li>
        <li>Too many:
        <ul>
          <li>First few weeks might mean that you need to tweak your timeouts:
          <ul>
            <li>Dark launch!</li>
          </ul></li>
          <li>Escalate to the provider team.</li>
        </ul></li>
        <li>Retries will help.</li>
      </ul></li>
      <li>In both cases, keep a close eye the first time that you release an integration.</li>
      <li>Remember that GraphQL needs <a href="https://productionreadygraphql.com/2020-08-01-guide-to-graphql-errors">additional error handling</a>.</li>
    </ul></li>
    <li>If you are doing out of hours escalation, ensure that the person to be contacted when there is an alert is the person that thinks that the alert deserves an out of hours alert.
    <ul>
      <li>Most likely it is an issue with the provider, so it &ldquo;only&rdquo; needs to be escalated to their support.</li>
      <li>Provide a dashboard for that alert that even a PM will understand.</li>
      <li>Provide a phone contact to the third party support.</li>
    </ul></li>
    <li>See &ldquo;user-flow vs background integrations below&rdquo;.</li>
    <li>Consider doing load testing.</li>
  </ul></li>
  <li>Security:
  <ul>
    <li>SSL.</li>
    <li>IP allow-list.</li>
    <li>Credentials rotation:
    <ul>
      <li>If it is not automated, figure out who to contact.</li>
    </ul></li>
    <li>On start up, check that the credentials are valid.</li>
  </ul></li>
</ul><h2>Practices for user-flow vs background integrations</h2><p>The main difference between API integration that is in a user-flow and integration that runs in some background process is that the user-flow integrations require a low latency, as it is unlikely that users are willing to wait long.</p><h4>Background integrations</h4>
<ul>
  <li>Multiple retries:
  <ul>
    <li>Consider exponential backoff.</li>
    <li>Think in terms of clock time: For how many minutes/hours is the business process still meaningful? Or is it pointless if delayed more than X?
    <ul>
      <li>Business decision.</li>
    </ul></li>
  </ul></li>
  <li>Alerts:
  <ul>
    <li>Think in terms of clock time: how long can this integration be down before somebody should panic?
    <ul>
      <li>Business decision.</li>
    </ul></li>
    <li>Consider alerting before the process runs out of retries, so that once the issue is addressed the process will (hopefully) successfully retry.</li>
  </ul></li>
  <li>Timeouts can be longer: up to minutes could be ok.</li>
  <li>Batching is more likely to be useful.</li>
  <li>No need for circuit-breakers.</li>
  <li>Rate-limiting should result in traffic shaping.</li>
</ul><h4>User-flow integrations</h4>
<ul>
  <li>You cannot wait long as there is a human looking at a spinning icon on the other side, so:
  <ul>
    <li>No more than one retry.</li>
    <li>Short timeouts.</li>
    <li>This in terms of clock time: how long will the human be willing to wait for the result to appear on their screen before they think your app is broken?</li>
    <li>Most of the time, a few seconds tops.</li>
  </ul></li>
  <li>Connection pools are a must:
  <ul>
    <li>Unless your call rate is so low that it will make no difference.</li>
    <li>Each integration should have its own connection pool:
    <ul>
      <li>Do not share connection pools between different integrations.</li>
    </ul></li>
    <li>Configure the connection pool timeout and the TTL.</li>
  </ul></li>
  <li>Circuit breakers are a must.</li>
  <li>Consider stale-while-revalidating + stale-while-error for cached authorization tokens and data:
  <ul>
    <li>Reduce extra latency when the token/data is stale.</li>
    <li>Better resilience: set refresh short enough that any transient error in the provider will not affect the user as the refresh will be retried several times before it comes really stale.</li>
  </ul></li>
  <li>Alerts:
  <ul>
    <li>Based on circuit breakers.</li>
    <li>Think in terms of clock time:
    <ul>
      <li>For how long a circuit breaker must be open before somebody should panic?</li>
    </ul></li>
  </ul></li>
  <li>Most PaaS platforms have a hard time limit to process the request.</li>
  <li>Consider:
  <ul>
    <li>Moving to a completely or mostly async IO model, to avoid thread starvation.</li>
    <li><a href="https://blogs.oracle.com/javamagazine/post/java-loom-virtual-threads-platform-threads">Java virtual threads</a>!</li>
    <li>Sync data from the provider in a background process, store locally and serve from local store.</li>
    <li>Splitting processing into two steps:
    <ol>
      <li>Trigger request to provider on first client request.</li>
      <li>Client to periodically poll to check if the response is ready.</li>
    </ol></li>
  </ul></li>
</ul><h2>Annoyances</h2><p>A list of things that should never happen, and do not make sense at all, but you will need to live with.</p>
<ul>
  <li>Expect the integration to behave out of spec:
  <ul>
    <li>Be kind with the provider&rsquo;s developers.</li>
  </ul></li>
  <li>A 200 response does not mean a successful response:
  <ul>
    <li>Look at something inside the response to confirm that it was a successful response.</li>
  </ul></li>
  <li>Health check endpoints tell you that the health check endpoint is working (or not):
  <ul>
    <li>Making this call does not guarantee the success of the following HTTP request:
    <ul>
      <li>Health check implementations usually just return a 200 if the API server is up, but do not check that all the downstream dependencies are up and running.
      <ul>
        <li>Doing so is usually very expensive.</li>
      </ul></li>
    </ul></li>
    <li>Even if the health check endpoint does health checking of downstream servers and the downstream servers of the downstream servers, it is possible that by the time we send the second request, the API server or any of its dependencies is frozen or dead, or that there is some network issue on the path.</li>
    <li>Making this call makes the error handling and logic more complex.</li>
    <li>So, avoid.</li>
    <li>See &ldquo;Side note: client side monitoring is always better than server side monitoring&rdquo;.</li>
  </ul></li>
  <li>Probably the dev environment of the provider is crap:
  <ul>
    <li>Consider using their staging in all pre-production environments.</li>
    <li>Use their dev environment for initial development.</li>
  </ul></li>
</ul><h1>Extra references</h1>
<ul>
  <li><a href="/2017/08/03/stability-patterns-a-case-study-devoxx-pl-2017-video">Resilience Patterns</a>.</li>
  <li><a href="https://martinfowler.com/bliki/DarkLaunching.html">Dark launch</a>.</li>
  <li><a href="/2019/12/11/apache-http-client-timeouts-config-production-asynchronous-http-client-pictures">Configuring connection pools and timeouts</a>.</li>
  <li><a href="https://productionreadygraphql.com/2020-08-01-guide-to-graphql-errors">GraphQL error handling</a>.</li>
  <li><a href="/2016/11/21/the-boy-who-cried-wolf-an-it-tale/">Alert fatigue</a>.</li>
</ul>]]></description></item></channel></rss>