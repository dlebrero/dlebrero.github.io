<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="https://danlebrero.com" rel="self" type="application/rss+xml"/><title>Daniel Lebrero Berna Blog</title><link>https://danlebrero.com</link><language>en</language><lastBuildDate>Wed, 12 Apr 2023 00:00:00 +0200</lastBuildDate><pubDate>Wed, 12 Apr 2023 00:00:00 +0200</pubDate><description>Daniel Lebrero blog</description><generator>clj-rss</generator><item><title>Book notes: High Output Management</title><link>https://danlebrero.com/2023/04/12/high-output-management-summary/</link><guid>https://danlebrero.com/2023/04/12/high-output-management-summary/</guid><pubDate>Wed, 12 Apr 2023 00:00:00 +0200</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/3AodrCr">High Output Management</a> by <a href="https://en.wikipedia.org/wiki/Andrew_Grove">Andrew Grove</a>.</p><p>A classic that layout the foundations for a lot of the current management and leadership principles and practices.</p><h1>Key Insights</h1>
<ul>
  <li>You need to plan the way a fire department plans.</li>
  <li>You are not an employee. You are in a business with one employee: yourself.</li>
  <li>Aim is not whatever the customer wants whenever he wants it.</li>
  <li>Your task is to find the most cost-effective way to deploy your resources:</li>
  <li>There is one right answer.</li>
  <li>Use pairing indicators: together both effect and counter-effect each other.</li>
  <li>Any measurement is better than none.</li>
  <li>Quality:
  <ul>
    <li>Balance desired result of the inspection:
    <ul>
      <li>Improved quality.</li>
      <li>Minimum disturbance to the production process.</li>
    </ul></li>
    <li>Variable inspection: adjust monitoring rate to the recent quality levels.</li>
  </ul></li>
  <li>Manager&rsquo;s output: output of group reporting to her + output of group under her influence.</li>
  <li>Individual contributors who gather and disseminate know-how and information should be seen as middle managers.</li>
  <li>Much of what we do often seems so inconsequential that our position in the business hardly seems justified.</li>
  <li>Information most useful to managers comes from quick, often casual verbal exchanges. Timely information is more valuable.</li>
  <li>Reports are more a medium of self-discipline than a way to communicate information:
  <ul>
    <li>Writing a report is important; reading it is often not.</li>
  </ul></li>
  <li>Manager activities:
  <ol>
    <li>Information-gathering: all other activities depend on this one.</li>
    <li>Conveying information.</li>
    <li>Decision-making.</li>
    <li>Nudging.</li>
    <li>Role model.</li>
  </ol></li>
  <li>Increase output by either:
  <ol>
    <li>Increase # activities, aka speed up work.</li>
    <li>Increase leverage.</li>
    <li>Shift to activities with higher leverage:
    <ol>
      <li>When many people are affected by one manager.</li>
      <li>When a person&rsquo;s activity/behaviour over a long period of time is affected by a manager&rsquo;s brief, well-focused set of words/actions.</li>
      <li>When a large group is affected by an individual supplying a unique, key piece of knowledge/information.</li>
    </ol></li>
  </ol></li>
  <li>Delegate only activities that you are familiar with.</li>
  <li>Delegation without follow-through is abdication.</li>
  <li>One-to-one meetings:
  <ul>
    <li>Frequency depends on the task-relevant maturity of the subordinate.</li>
    <li>It is a subordinate meeting:
    <ul>
      <li>Agenda and tone set by subordinate.</li>
      <li>Because subordinate must prepare only one, while supervisor would prepare several.</li>
    </ul></li>
  </ul></li>
  <li>Staff meetings:</li>
  <li>Anything that affect more than 2 subordinates.</li>
  <li>Supervisor learn from the exchange and confrontation that often develops, better than on 1-2-1.</li>
  <li>Supervisor role: leader, observer, expediter, questioner, decision-maker, moderator, facilitator.
  <ul>
    <li>NOT lecturer, as it undermines free discussion.</li>
  </ul></li>
  <li>Managers get a little more obsolete (in the know-how) everyday.</li>
  <li>Any decision to be worked out and reached at the lowest level: people closest to the issue and with the most knowledge.</li>
  <li>Who should plan? Those implementing the plan.</li>
  <li>Management by objectives:
  <ul>
    <li>Answer 2 questions:
    <ol>
      <li>Where do I want to go? (Objective).</li>
      <li>How will I pace myself? (Key results).</li>
    </ol></li>
    <li>Should provide focus (== few objectives).</li>
    <li>Key results can be achieved, but the objective still missed.</li>
    <li>Not for individual performance review, but an input for it.</li>
  </ul></li>
  <li>All large organizations with a common business purpose end up in a hybrid organizational form.</li>
  <li>Can an employee have two bosses? Tentative &ldquo;yes&rdquo;.
  <ol>
    <li>Mission-oriented manager: what business problem to work on.</li>
    <li>Technical manager: technical proficiency and career development.</li>
  </ol></li>
  <li>Most appropriate mode of control:</li>
</ul><p><img src="/images/blog/books/high-output-management/mode-of-control.png" alt="model of control" /></p>
<ul>
  <li>Two reasons why somebody is not doing his job:
  <ol>
    <li>Not capable.</li>
    <li>Not motivated.</li>
  </ol>
  <ul>
    <li>If his life depended on it, could he do it?</li>
  </ul></li>
  <li>Motivation has to come from within:</li>
</ul><p><img src="/images/blog/books/high-output-management/maslow-hierarchy-motivation.png" alt="maslow hierarchy" /></p>
<ul>
  <li>Manager as a coach:
  <ol>
    <li>Takes no personal credit for the success of his team, and because of that his players trust him.</li>
    <li>He is tough on his team.</li>
    <li>Likely he was a good player himself at one time: he understands the game well.</li>
  </ol></li>
  <li>Would you cringe to deliver a tough performance review to your subordinate-friend?
  <ul>
    <li>If so, don&rsquo;t make friends at work.</li>
  </ul></li>
  <li>Performance Appraisal:
  <ul>
    <li>One of the manager&rsquo;s highest leverage activities.</li>
    <li>Output measures (100% objective) + internal measures (what is done for the output of future periods).</li>
    <li>No way to do it completely objective.</li>
    <li>Will the subordinate remember all the messages? If not, remove the less important ones.</li>
    <li>We should spend more time trying to improve the performance of our top achievers as they account for a disproportionally large share of the work.</li>
    <li>Do not ask for a self-review: it is a supervisor responsibility.</li>
  </ul></li>
  <li>If performance appraisal is difficult, interviewing is just about impossible.
  <ul>
    <li>The most insights come from discussing subjects familiar to both you and the candidate.</li>
    <li>Don&rsquo;t worry about being blunt: direct questions tend to bring direct answers.</li>
    <li>A candidate can tell you a great deal by asking you questions.</li>
  </ul></li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#ch-0">Introduction</a></li>
  <li><a href="#part-1">Part I: The Breakfast Factory</a>
  <ul>
    <li><a href="#ch-1">Chapter 1 - The Basics of Production: Delivering a Breakfast</a></li>
    <li><a href="#ch-2">Chapter 2 - Managing the Breakfast Factory</a></li>
  </ul></li>
  <li><a href="#p-2">Part II - Management Is a Team Game</a>
  <ul>
    <li><a href="#ch-3">Chapter 3 - Managerial Leverage</a></li>
    <li><a href="#ch-4">Chapter 4 - Meetings - The Medium of Managerial Work</a></li>
    <li><a href="#ch-5">Chapter 5 - Decisions, Decisions</a></li>
    <li><a href="#ch-6">Chapter 6 - Planning: Today&rsquo;s Actions for Tomorrow&rsquo;s Output</a></li>
  </ul></li>
  <li><a href="#p-3">Part III - Team of Teams</a>
  <ul>
    <li><a href="#ch-7">Chapter 7 - The Breakfast Factory Goes National</a></li>
    <li><a href="#ch-8">Chapter 8 - Hybrid Organizations</a></li>
    <li><a href="#ch-9">Chapter 9 - Dual Reporting</a></li>
    <li><a href="#ch-10">Chapter 10 - Modes of Control</a></li>
  </ul></li>
  <li><a href="#p-4">Part IV - The Players</a>
  <ul>
    <li><a href="#ch-11">Chapter 11 - The Sports Analogy</a></li>
    <li><a href="#ch-12">Chapter 12 - Task-Relevant Maturity</a></li>
    <li><a href="#ch-13">Chapter 13 - Performance Appraisal: Manager as Judge and Jury </a></li>
    <li><a href="#ch-14">Chapter 14 - Two Difficult Tasks</a></li>
    <li><a href="#ch-15">Chapter 15 - Compensation as Task-Relevant Feedback</a></li>
    <li><a href="#ch-16">Chapter 16 - Why Training Is The Boss&rsquo;s Job</a></li>
  </ul></li>
</ul><h2><a name="ch-0"></a>Introduction</h2>
<ul>
  <li>Being second best is a tough environment is just not good enough.</li>
  <li>Globalization: every person will compete with every person anywhere in the world who is capable of doing the same thing.</li>
  <li>When products and services become largely indistinguishable from each other, all there is by the way of competitive advantage is time.</li>
  <li>Book aimed to middle managers, and know-how managers (knowledge experts that sort of act as consultants).</li>
  <li>3 basic ideas:
  <ol>
    <li>Output-oriented approach to management.</li>
    <li>Not individuals but teams: the output from a manager is the output of the org units under his supervision or influence.
    <ul>
      <li>Managerial leverage.</li>
    </ul></li>
    <li>A team will perform well only if peak performance is elicited from individuals in it.
    <ul>
      <li>Task-relevant feedback.</li>
    </ul></li>
  </ol></li>
  <li>You need to plan the way a fire department plans.</li>
  <li>You are not an employee. You are in a business with one employee: yourself.</li>
</ul><h1><a name="part-1"></a>Part I: The Breakfast Factory</h1><h2><a name="ch-1"></a>Chapter 1: The Basics of Production: Delivering a Breakfast</h2>
<ul>
  <li>Aim:
  <ul>
    <li>Scheduled delivery time.</li>
    <li>Acceptable quality.</li>
    <li>Lowest cost.</li>
    <li>NOT: whatever the customer wants whenever he wants it.</li>
  </ul></li>
  <li>Find the limiting step and schedule all work around it.</li>
  <li>Production principles:
  <ol>
    <li>Limiting step.</li>
    <li>Time offsets.</li>
    <li>Fundamental types of production operations:
    <ol>
      <li>Process.</li>
      <li>Assembly.</li>
      <li>Test.</li>
    </ol></li>
  </ol></li>
  <li>Example: compiler:
  <ol>
    <li>Process: create the component.</li>
    <li>Test the individual components.</li>
    <li>Assemble into a compiler.</li>
    <li>System test.</li>
  </ol></li>
  <li>Timing of the releases of various bodies of software from one stage to another can all be calculated and staged in advance. (Really???).</li>
  <li>Your task is to find the most cost-effective way to deploy your resources:
  <ul>
    <li>There is one right answer.</li>
    <li>You must develop a clear understanding of the trade-offs between the various factors, and reduce this understanding to a quantifiable set of relationships.</li>
  </ul></li>
  <li>Choose in-process tests over those that destroy product (how this translates to software?).</li>
  <li>Opportunity at risk: what would it cost to shut down until there are more raw materials? Customers lost * cost of bringing them back.</li>
</ul><h2><a name="ch-2"></a>Chapter 2 - Managing the Breakfast Factory</h2>
<ul>
  <li>You have to focus each indicator on a specific operational goal.</li>
  <li>Use pairing indicators: together both effect and counter-effect each other.</li>
  <li>Any measurement is better than none.</li>
  <li>Effective indicators:
  <ol>
    <li>Cover the output, not simple the activity involved.</li>
    <li>Should measure physical countable things.</li>
  </ol>
  <ul>
    <li>Benefits:
    <ol>
      <li>Spell out very clearly the objectives.</li>
      <li>Provide objectivity.</li>
      <li>Allow comparing teams.</li>
    </ol></li>
  </ul></li>
  <li>Leading indicators:
  <ul>
    <li>Indication of what the future might look like.</li>
    <li>Only useful if they entice you to act.</li>
  </ul></li>
  <li>Linearity indicator: progress vs time.</li>
  <li>Trend indicator: output measured against time and against some expected level.</li>
  <li>Staggered chart:
  <ul>
    <li>Forecast and when what it made in.</li>
    <li>Best means of getting a feeling for future business trends.</li>
    <li>Actual value in black.</li>
  </ul></li>
</ul>
<table>
  <thead>
    <tr>
      <th> </th>
      <th>Jan </th>
      <th>Feb </th>
      <th>Mar </th>
      <th>Apr </th>
      <th>May </th>
      <th>Jun </th>
      <th>&hellip; </th>
      <th>&hellip; </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Dec </td>
      <td>20 </td>
      <td>30 </td>
      <td>40 </td>
      <td>50 </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>Jan </td>
      <td><strong>18</strong> </td>
      <td>25 </td>
      <td>35 </td>
      <td>45 </td>
      <td>55 </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>Feb </td>
      <td> </td>
      <td><strong>21</strong> </td>
      <td>31 </td>
      <td>35 </td>
      <td>45 </td>
      <td>60 </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>Mar </td>
      <td> </td>
      <td> </td>
      <td><strong>33</strong> </td>
      <td>45 </td>
      <td>65 </td>
      <td>70 </td>
      <td>75 </td>
      <td> </td>
    </tr>
    <tr>
      <td>&hellip; </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>&hellip; </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>
<ul>
  <li>Build to order vs build to forecast.</li>
  <li>Build to forecast:
  <ul>
    <li>Two simultaneous processes (manufacturing and sales), each with a separate time cycle.</li>
    <li>Both are somehow unpredictable, so &ldquo;slack&rdquo; must be added.</li>
    <li>Most common form of slack: inventory.</li>
    <li>Keep inventory at the lowest-value stage (what does it mean for SW? RFC?)</li>
  </ul></li>
  <li>Quality:
  <ul>
    <li>Receiving inspection, in-process inspection, outgoing inspection.</li>
    <li>Balance desired result of the inspection:
    <ul>
      <li>Improved quality.</li>
      <li>Minimum disturbance to the production process.</li>
    </ul></li>
    <li>Gate-like inspection vs monitoring:
    <ul>
      <li>Variable inspection: adjust monitoring rate to the recent quality levels.</li>
    </ul></li>
  </ul></li>
  <li>Productivity:
  <ul>
    <li>output / labor.</li>
    <li>To increase: work smarter or work harder.</li>
  </ul></li>
  <li>Leverage:
  <ul>
    <li>Output generated by specific work activity.</li>
    <li>Work smarter by simplifying work:
    <ul>
      <li>List activities to do the work and ask why they are needed.</li>
    </ul></li>
  </ul></li>
</ul><h1><a name="p-2"></a>Part II - Management Is a Team Game</h1><h2><a name="ch-3"></a>Chapter 3 - Managerial Leverage</h2>
<ul>
  <li>Manager&rsquo;s output: output of group reporting to her + output of group under her influence.</li>
  <li>Individual contributors who gather and disseminate know-how and information should be seen as middle managers.</li>
  <li>Much of what we do often seems so inconsequential that our position in the business hardly seems justified:
  <ul>
    <li>Activities seem trivial, insignificant and messy.</li>
    <li>But output seems important, significant and worthwhile.</li>
  </ul></li>
  <li>Information most useful to managers comes from quick, often casual verbal exchanges. Timely information is more valuable.</li>
  <li>Reports are more a medium of self-discipline than a way to communicate information:
  <ul>
    <li>Writing a report is important; reading it is often not.</li>
    <li>(Similarly) preparation of an annual plan is in itself the end, not the resulting bound volume.</li>
  </ul></li>
  <li>Visiting a particular place in the company and observe what&rsquo;s going on there is an especially efficient (and underutilized) way to get information.</li>
  <li>Transmitting objectives and preferred approaches is key to successful delegation.</li>
  <li>Manager activities:
  <ol>
    <li>Information-gathering: all other activities depend on this one.</li>
    <li>Conveying information.</li>
    <li>Decision-making.</li>
    <li>Nudging.</li>
    <li>Role model.</li>
  </ol></li>
  <li>How you handle your own time is the single most important aspect of being a role model and leader.</li>
  <li>Meetings provide an occasion for managerial activities:
  <ul>
    <li>Meetings are a medium.</li>
  </ul></li>
  <li>Managerial output == Leverage<sub>1</sub> * Activity<sub>1</sub> + L<sub>2</sub>*A<sub>2</sub> + L<sub>3</sub> * A<sub>3</sub>
  <ul>
    <li>Increase output by either:
    <ol>
      <li>Increase # activities, aka speed up work: Good time management:
      <ul>
        <li>Identify limiting step and schedule around it.</li>
        <li>Batching: to reduce task switching.</li>
        <li>Forecast:
        <ul>
          <li>Large portion of managerial work can be forecasted.</li>
          <li>Use your calendar as the medium to forecast.</li>
        </ul></li>
        <li>Do not accept more work if you are at max capacity.</li>
        <li>Be proactive at filling holes in your calendar between the time-critical events.</li>
        <li>When you say &ldquo;yes&rdquo; to one thing, you are inevitably saying &ldquo;no&rdquo; to another.</li>
        <li>Allow for slack.</li>
        <li>Keep an inventory of project not urgent but important over the long term, so free time is used in these projects and not meddling.</li>
      </ul></li>
      <li>Increase leverage.</li>
      <li>Shift to activities with higher leverage.</li>
    </ol></li>
    <li>High leverage activities:
    <ol>
      <li>When many people are affected by one manager.</li>
      <li>When a person&rsquo;s activity/behaviour over a long period of time is affected by a manager&rsquo;s brief, well-focused set of words/actions.</li>
      <li>When a large group is affected by an individual supplying a unique, key piece of knowledge/information.</li>
    </ol></li>
  </ul></li>
  <li>Managerial meddling has negative leverage:
  <ul>
    <li>Subordinate will show less initiative.</li>
  </ul></li>
  <li>Delegate only activities that you are familiar with.</li>
  <li>Delegation without follow-through is abdication:
  <ul>
    <li>You are still responsible for its accomplishment.</li>
    <li>Monitoring is the only practical way to ensure a result.</li>
    <li>Monitoring != meddling.</li>
    <li>Monitoring == QA. Same principles:
    <ul>
      <li>Do it early, variable inspection.</li>
      <li>Go into some details randomly but not all details all the time.</li>
    </ul></li>
  </ul></li>
  <li>A manager should have 6-8 subordinates:
  <ul>
    <li>Half day per week per subordinate.</li>
    <li>For know-how managers, each planning, advisory, or coordination group counts as a subordinate.</li>
  </ul></li>
  <li>Interruptions - the plague of managerial work:
  <ul>
    <li>Strive towards regularity.</li>
    <li>Because you need to coordinate with other managers, you can only move towards regularity if others do too.</li>
    <li>Reduce time spend handling interruptions by using standard responses.
    <ul>
      <li>Have regular scheduled time (like 1-2-1).</li>
      <li>Force interrupters to make an active decision about whether an issue can wait.</li>
      <li>&ldquo;I am doing individual work. Please don&rsquo;t interrupt me unless it really can&rsquo;t wait until 2pm&rdquo;.</li>
    </ul></li>
  </ul></li>
</ul><h2><a name="ch-4"></a>Chapter 4 - Meetings - The Medium of Managerial Work</h2>
<ul>
  <li>2 types:
  <ol>
    <li>Process-oriented meetings:
    <ul>
      <li>Knowledge is shared and information exchanged.</li>
      <li>Regular.</li>
      <li>Kinds:
      <ol>
        <li>One-to-one:
        <ul>
          <li>Mutual teaching and exchange of info.</li>
          <li>Frequency depends on the task-relevant maturity of the subordinate.</li>
          <li>Also depend on how fast things change.</li>
          <li>Should last one hour minimum.</li>
          <li>In or near the subordinate work area.</li>
          <li>Key point: it is a subordinate meeting:
          <ul>
            <li>Agenda and tone set by subordinate.</li>
            <li>Because subordinate must prepare only one, while supervisor would prepare several.</li>
          </ul></li>
          <li>Content:
          <ul>
            <li>Performance/Indicators figures.</li>
            <li>Any problems or potential ones (even it is only intuition).</li>
            <li>Criteria: anything that preoccupy or nag the subordinate.</li>
          </ul></li>
          <li>Supervisor role: learn and coach.</li>
          <li>Both take notes: help focus, commitment and follow up.</li>
        </ul></li>
        <li>Staff meetings
        <ul>
          <li>Supervisor + all subordinates.</li>
          <li>Interaction among peers.</li>
          <li>Decision-making by a group of peers is not easy.</li>
          <li>Supervisor learn from the exchange and confrontation that often develops, better than on 1-2-1.</li>
          <li>Content:
          <ul>
            <li>Anything that affect more than 2 subordinates.</li>
            <li>Agenda + open session.</li>
          </ul></li>
          <li>Supervisor role: leader, observer, expediter, questioner, decision-maker, moderator, facilitator.
          <ul>
            <li>NOT lecturer, as it undermines free discussion.</li>
          </ul></li>
          <li>Supervision should be &ldquo;inactive&rdquo; while subordinates &ldquo;active&rdquo;.</li>
        </ul></li>
        <li>Operation reviews:
        <ul>
          <li>Teaching and learning between employees several organizational levels apart.</li>
          <li>Roles:
          <ul>
            <li>Organizing manager:
            <ul>
              <li>Help chose topics and level of detail.</li>
              <li>Housekeeping.</li>
              <li>Timekeeper.</li>
            </ul></li>
            <li>Reviewing manager:
            <ul>
              <li>Senior supervisor at whom the review is aimed.</li>
              <li>Ask questions, make comments, catalyst to audience participation.</li>
              <li>Role model for junior managers.</li>
              <li>Should never preview the material.</li>
            </ul></li>
            <li>Presenters:
            <ul>
              <li>Look at body language of audience.</li>
            </ul></li>
            <li>Audience:
            <ul>
              <li>You are being paid to attend: pay attention, ask questions, make comments.</li>
            </ul></li>
          </ul></li>
        </ul></li>
      </ol></li>
    </ul></li>
    <li>Mission-Oriented meetings:
    <ul>
      <li>Adhoc to produce a specific output.</li>
      <li>The chairman is responsible for the result and must have a clear understanding of the meeting objective. Ask yourself:
      <ul>
        <li>What I am trying to accomplish?</li>
        <li>Is a meeting necessary/desirable/justifiable?</li>
      </ul></li>
      <li>Beware of the dollar cost of the meeting.</li>
      <li>Avoid more than 6 people. 8 Max.</li>
      <li>Chairman:
      <ul>
        <li>Agenda.</li>
        <li>Role of each participant.</li>
        <li>Commitment from each participant.</li>
        <li>Send minutes + decision + actions asap.</li>
      </ul></li>
    </ul></li>
  </ol></li>
</ul><h2><a name="ch-5"></a>Chapter 5 - Decisions, Decisions</h2>
<ul>
  <li>The faster the change in the know-how, the greater the divergence between knowledge and position power is likely to be.
  <ul>
    <li>Managers get a little more obsolete everyday.</li>
    <li>Key to success is middle manager that mesh smoothly the holder of the two types of power.</li>
  </ul></li>
  <li>Ideal decision model:
  <ol>
    <li>Free discussion.</li>
    <li>Clear decision.</li>
    <li>Full support.</li>
    <li>Go to 1 if decision was wrong.</li>
  </ol>
  <ul>
    <li>Easy one to follow for senior managers and newly graduates.</li>
    <li>Any decision to be worked out and reached at the lowest level: people closest to the issue and with the most knowledge.</li>
    <li>Good decisions need expertise + judgment (== experience).</li>
  </ul></li>
  <li>The Peer-Group Syndrome:
  <ul>
    <li>Peers are afraid to stick out their necks.</li>
    <li>Peers going in circles until consensus is developed, due the fear of:
    <ul>
      <li>Sounding dumb (specially seniors).</li>
      <li>Being overruled (specially juniors).</li>
      <li>Not enough business or technical knowledge.</li>
    </ul></li>
    <li>No proper discussion happens, hence best decision is not made.</li>
    <li>Push for consensus, and failing that, step in and make a decision.
    <ul>
      <li>Not too early, not too late.</li>
    </ul></li>
  </ul></li>
  <li>Answer:
  <ul>
    <li>What decision?</li>
    <li>When?</li>
    <li>Who will decide?</li>
    <li>Who needs to be consulted?</li>
    <li>Who can veto/ratify?</li>
    <li>Who needs to be informed?</li>
  </ul></li>
  <li>Politics and manipulation or even their appearance should be avoided at all costs.</li>
</ul><h2><a name="ch-6"></a>Chapter 6 - Planning: Today&rsquo;s Actions for Tomorrow&rsquo;s Output</h2>
<ul>
  <li>Steps:
  <ol>
    <li>Determine environmental demand:
    <ul>
      <li>What your clients want now?</li>
      <li>What your clients will want in X months/years?</li>
    </ul></li>
    <li>Determine present status:
    <ul>
      <li>Should be stated in the same terms (currency, widgets, outputs) as the demand.</li>
    </ul></li>
    <li>Determine what to do to close the gap:
    <ul>
      <li>What do you need to close the gap?</li>
      <li>What can you do to close the gap?</li>
    </ul></li>
  </ol></li>
  <li>Today&rsquo;s gap represents a failure of planning sometime in the past.</li>
  <li>The output of the planning process is the decisions made and the actions taken as result of the process.</li>
  <li>How often to plan? Give enough time to get feedback on the last planning process.</li>
  <li>Who should plan? Those implementing the plan.</li>
  <li>Management by objectives:
  <ul>
    <li>Concern only with steps 2 and 3 of planning.</li>
    <li>Answer 2 questions:
    <ol>
      <li>Where do I want to go? (Objective).</li>
      <li>How will I pace myself? (Key results).</li>
    </ol></li>
    <li>Should provide focus (== few objectives).</li>
    <li>Key results can be achieved, but the objective still missed.</li>
    <li>Not for individual performance review, but an input for it.</li>
    <li>No room for ambiguity in key results.</li>
  </ul></li>
</ul><h1><a name="p-3"></a>Part III - Team of Teams</h1><h2><a name="ch-7"></a>Chapter 7 - The Breakfast Factory Goes National</h2>
<ul>
  <li>Centralization-decentralization dichotomy.</li>
</ul><h2><a name="ch-8"></a>Chapter 8 - Hybrid Organizations</h2>
<ul>
  <li>Two extremes:
  <ol>
    <li>Totally mission-oriented:
    <ul>
      <li>Completely decentralized.</li>
      <li>Independent.</li>
      <li>Responsible.</li>
      <li>More responsive: this is critical for a business unit.</li>
    </ul></li>
    <li>Totally functional form:
    <ul>
      <li>Economies of scale.</li>
      <li>Increase leverage.</li>
      <li>More flexibility moving resources/people on corporate-wide priorities.</li>
    </ul></li>
  </ol></li>
  <li>Hybrid: mix of both:
  <ul>
    <li>Business units: decentralized.</li>
    <li>Functional groups:
    <ul>
      <li>Centralized.</li>
      <li>Viewed as internal subcontractors.</li>
      <li>Information overload to serve all business units.</li>
      <li>Negotiation and competition for their time/resources.</li>
    </ul></li>
  </ul></li>
  <li>All large organizations with a common business purpose end up in a hybrid organizational form.</li>
</ul><p><img src="/images/blog/books/high-output-management/matrix-organization.png" alt="matrix organization" /></p>
<ul>
  <li>Most important task of hybrid orgs is the optimum and timely allocation of its resources and the efficient resolution of conflicts arising over that allocation:
  <ul>
    <li>Central &ldquo;allocators&rdquo; is not the answer.</li>
    <li>Middle managers are:
    <ol>
      <li>They are numerous.</li>
      <li>They are close to the problem.</li>
    </ol>
    <ul>
      <li>To succeed they need:
      <ol>
        <li>Accept the hybrid org form.</li>
        <li>Develop and master dual reporting.</li>
      </ol></li>
    </ul></li>
  </ul></li>
</ul><h2><a name="ch-9"></a>Chapter 9 - Dual Reporting</h2>
<ul>
  <li>Can an employee have two bosses? Tentative &ldquo;yes&rdquo;.</li>
  <li>Matrix management:
  <ul>
    <li>Core idea is that a project manager (outside the contracting company) could wield as much influence on the work of units within a given contractor company as could the company management itself.</li>
  </ul></li>
  <li>We want the immediacy and the operating priorities coming from the general manager, plus a technical supervisory relationship.</li>
  <li>The technical supervisor role can be filled by a group of peers:
  <ul>
    <li>Required the voluntary surrender of individual decision-making to the group.</li>
    <li>This requires trust in the peer group, which requires a strong and positive culture.</li>
    <li>Makes manager&rsquo;s life ambiguous.</li>
  </ul></li>
  <li>Two bosses:
  <ol>
    <li>Mission-oriented manager: what business problem to work on.</li>
    <li>Technical manager: technical proficiency and career development.</li>
  </ol></li>
  <li>Multi-plane organization:
  <ul>
    <li>Mission-oriented org chart is a plane, while technical org chart is another.</li>
    <li>There can be more than two planes, some will be temporal.</li>
    <li>Having multiple planes (org charts) allow for the optimal organization for a given problem/objective.</li>
  </ul></li>
</ul><h2><a name="ch-10"></a>Chapter 10 - Modes of Control</h2>
<ul>
  <li>Means:
  <ol>
    <li>Free-market forces:
    <ul>
      <li>Like choosing what/where tires to buy.</li>
      <li>Self-interest.</li>
      <li>Requires a clear dollar value, which within an org is hard to establish.</li>
    </ul></li>
    <li>Contractual obligations:
    <ul>
      <li>Like stopping at a ref traffic light.</li>
      <li>Obey the law.</li>
    </ul></li>
    <li>Cultural values:
    <ul>
      <li>Like helping on an accident while exposing yourself to danger.</li>
      <li>When environment changes more rapidly than one can change rules.</li>
      <li>When a set of circumstances is so ambiguous and unclear that a contract would be prohibitively complicated.</li>
      <li>Interest of the group takes precedence over the interest of the individual.</li>
      <li>Emotions.</li>
      <li>Requires shared values, objectives and methods.
      <ul>
        <li>It is management&rsquo;s role to articulate these and be an example.</li>
      </ul></li>
      <li>Requires shares experiences.</li>
    </ul></li>
  </ol></li>
  <li>Most appropriate mode of control: <img src="/images/blog/books/high-output-management/mode-of-control.png" alt="model of control" /></li>
  <li>New employee are in self-interest:
  <ul>
    <li>Promotion from within tends to be favored by corporations with strong cultures.</li>
  </ul></li>
</ul><h1><a name="p-4"></a>Part IV - The Players</h1><h2><a name="ch-11"></a>Chapter 11 - The Sports Analogy</h2>
<ul>
  <li>A team will perform only as well as the individuals on it.</li>
  <li>Manager can elicit peak individual performance.</li>
  <li>Two reasons why somebody is not doing his job:
  <ol>
    <li>Not capable.</li>
    <li>Not motivated.</li>
  </ol>
  <ul>
    <li>If his life depended on it, could he do it?</li>
    <li>To improve performance:
    <ol>
      <li>Training.</li>
      <li>Motivation.</li>
    </ol></li>
  </ul></li>
  <li>Motivation has to come from within:
  <ul>
    <li>All a manager can do is create an environment in which motivated people can flourish.</li>
    <li>Maslow&rsquo;s theory of motivation:
    <ul>
      <li>Needs cause people to have drives, which in turn result in motivation.</li>
      <li>No need, no motivation.</li>
      <li>When a lower need is satisfied, one higher is likely to take over.</li>
      <li>Physiological needs: things money can buy.</li>
      <li>Security/safety needs: protect oneself from going back to physiological needs.</li>
      <li>Social/Affiliation needs: belong to a group that share something in common.</li>
      <li>Esteem/recognition needs: need to keep up with or emulate someone/some group.</li>
      <li>Self-actualization:
      <ul>
        <li>Personal realization: &ldquo;What I can be, I must be&rdquo;.</li>
        <li>Two types:
        <ol>
          <li>Competency-driven: mastery.</li>
          <li>Achievement-driven:
          <ul>
            <li>Abstract need to achieve in all that you do.</li>
            <li>Spontaneously test the limit of their abilities.</li>
            <li>This is why OKR should be unachievable/impossible.</li>
          </ul></li>
        </ol></li>
        <li>Person needs to measure his progress/achievements.</li>
        <li>Measure by feedback on his performance.</li>
        <li>For competency-driven, feedback comes from within that individual.</li>
        <li>At work, performance indicators and milestones linked to the individual&rsquo;s performance.</li>
        <li>Fear of failure can become a negative source of motivation if it becomes preoccupation.</li>
      </ul></li>
    </ul></li>
  </ul></li>
</ul><p><img src="/images/blog/books/high-output-management/maslow-hierarchy-motivation.png" alt="maslow hierarchy" /></p>
<ul>
  <li>Self-limiting: once achieved, no longer motivates.</li>
  <li>The sport analogy:
  <ul>
    <li>Marathon: people try to beat others or the stopwatch.</li>
    <li>Cultural prejudice:
    <ul>
      <li>Respect for sportsman training long hours but somebody working long hours is a workaholic.</li>
    </ul></li>
    <li>Manager as a coach:
    <ol>
      <li>Takes no personal credit for the success of his team, and because of that his players trust him.</li>
      <li>He is tough on his team.</li>
      <li>Likely he was a good player himself at one time: he understands the game well.</li>
    </ol></li>
  </ul></li>
</ul><h2><a name="ch-12"></a>Chapter 12 - Task-Relevant Maturity</h2>
<ul>
  <li>See <a href="/2020/04/01/no-nonsense-leadership-summary/#ch-2">Chapter 2 of No-nonsense Leadership</a>.</li>
  <li>High output is associated with particular combinations of certain managers and certain groups of workers:
  <ul>
    <li>The fundamental variable that tells you what management styles is most appropriate is task-relevant maturity (TRM) of a subordinate.</li>
    <li>TRM:
    <ul>
      <li>Achievement orientation +</li>
      <li>Readiness to take responsibility +</li>
      <li>Education +</li>
      <li>Training +</li>
      <li>Experience.</li>
    </ul></li>
    <li>TRM is task specific.</li>
  </ul></li>
  <li>Three levels:
  <ol>
    <li>Low:
    <ul>
      <li>Structured task-oriented</li>
      <li>Tell what/when/how.</li>
      <li>Detailed instructions.</li>
    </ul></li>
    <li>Medium:
    <ul>
      <li>Emphasis on two-way communication.</li>
      <li>Emotional support.</li>
      <li>Encouragement.</li>
      <li>Focus more on the individual than the task.</li>
    </ul></li>
    <li>High:
    <ul>
      <li>Minimal involvement.</li>
      <li>Focus on agreeing on objectives.</li>
      <li>Monitoring.</li>
    </ul></li>
  </ol></li>
  <li>Highest levels of TRM the training is complete, and the subordinate&rsquo;s motivation is likely self-actualization.</li>
  <li>Deciding on your subordinates TRM is not easy, but even if the manager knows the TRM, his personal preferences tend to override the proper choice of management style.</li>
  <li>Would you cringe to deliver a tough performance review to your subordinate-friend?
  <ul>
    <li>If so, don&rsquo;t make friends at work.</li>
  </ul></li>
</ul><h2><a name="ch-13"></a>Chapter 13 - Performance Appraisal: Manager as Judge and Jury</h2>
<ul>
  <li>One of the manager&rsquo;s highest leverage activities.</li>
  <li>Main purpose is to improve the subordinate&rsquo;s performance:
  <ol>
    <li>What skills are missing and how to remedy that lack.</li>
    <li>Intensify subordinate&rsquo;s motivation.</li>
  </ol></li>
  <li>Delivering a good performance review is very hard due to our professional training and our cultural background as our society values avoiding confrontation.</li>
  <li>Assessing performance:
  <ul>
    <li>Output measures (100% objective) + internal measures (what is done for the output of future periods).</li>
    <li>No way to do it completely objective.</li>
    <li>Weight of output vs internal should be clear from the beginning.</li>
    <li>Time offset: time it takes the subordinate&rsquo;s activity to have an effect on the output.</li>
    <li>Manager&rsquo;s review should include both the performance of his group and his own performance.</li>
    <li>Avoid the &ldquo;potential trap&rdquo;: manager shows good forms but output of group is poor.</li>
    <li>No matter how well a subordinate has done his job, we can always find ways to suggest improvements.</li>
  </ul></li>
  <li>Delivery the assessment:
  <ul>
    <li>Three &ldquo;L&rdquo;s:
    <ol>
      <li>Level:
      <ul>
        <li>The credibility and integrity of the entire system depend on you being totally frank.</li>
      </ul></li>
      <li>Listen:
      <ul>
        <li>If your subordinate&rsquo;s response (verbal and non-verbal) to the assessment do not completely assure you that what you&rsquo;ve said has gotten through, it is your responsibility to keep at it until you are satisfied that you have been heard and understood.</li>
      </ul></li>
      <li>Leave yourself out:
      <ul>
        <li>Control your emotions, so they do not affect your task.</li>
      </ul></li>
    </ol></li>
  </ul></li>
  <li>Review should have no surprises, but if you uncover one, swallow hard and bring it up.</li>
  <li>3 types of performance review:
  <ol>
    <li>On the one hand &hellip; on the other &hellip;:
    <ul>
      <li>Most reviews.</li>
      <li>Avoid: superficiality, cliches, and laundry list.</li>
      <li>People has finite capacity, so target a few key areas.</li>
      <li>Prep:
      <ol>
        <li>Write down everything you can think of (brain dump, no mental editing).</li>
        <li>Find relationship between items.</li>
        <li>For each relationship, write a &ldquo;message&rdquo; for the subordinate.</li>
      </ol></li>
      <li>Will the subordinate remember all the messages? If not, remove the less important ones.</li>
    </ul></li>
    <li>The blast:
    <ul>
      <li>Major performance problem.</li>
      <li>Stages:<br/> <img src="/images/blog/books/high-output-management/bad-performance-apprisal-phases.png" alt="bad performance stages" /></li>
      <li>Outcomes:
      <ol>
        <li>Agree on assessment and solution.</li>
        <li>Disagree on assessment but agree/commit on solution.</li>
        <li>Disagree on assessment and solution.</li>
      </ol>
      <ul>
        <li>Outcomes 1 and 2 are ok.</li>
      </ul></li>
    </ul></li>
    <li>Reviewing the Ace:
    <ul>
      <li>Typical issue: review is about past achievements, and not about future performance improvements.</li>
      <li>We should spend more time trying to improve the performance of our top achievers as they account for a disproportionally large share of the work.</li>
      <li>Concentrating on the top achievers is a high leverage activity: if they get better, the impact on the group output is very great indeed.</li>
    </ul></li>
  </ol></li>
  <li>Do not ask for a self-review: it is a supervisor responsibility.</li>
  <li>Provide the appraisal before the face-to-face meeting.</li>
</ul><h2><a name="ch-14"></a>Chapter 14 - Two Difficult Tasks</h2>
<ol>
  <li>Interviewing:
  <ul>
    <li>If performance appraisal is difficult, interviewing is just about impossible.</li>
    <li>Applicant should do 80% of the talking, but you are in control:
    <ul>
      <li>Gently interrupt if things go off track.</li>
    </ul></li>
    <li>The most insights come from discussing subjects familiar to both you and the candidate.</li>
    <li>4 categories:
    <ol>
      <li>Technical/skills:
      <ul>
        <li>Describe some project.</li>
        <li>What are your weakness.</li>
      </ul></li>
      <li>What he did with knowledge:
      <ul>
        <li>Past achievements.</li>
        <li>Past failures.</li>
      </ul></li>
      <li>Discrepancies:
      <ul>
        <li>What did you learn from failures.</li>
        <li>Problem in current position.</li>
      </ul></li>
      <li>Operational values:
      <ul>
        <li>Why are you ready for a new job.</li>
        <li>Why should my company hire you.</li>
      </ul></li>
    </ol></li>
    <li>You must judge potential contribution.</li>
    <li>Don&rsquo;t worry about being blunt: direct questions tend to bring direct answers.</li>
    <li>A candidate can tell you a great deal by asking you questions.</li>
  </ul></li>
  <li>&ldquo;I quit!&rdquo;:
  <ul>
    <li>High value employee that quits from reasons other than compensation.</li>
    <li>Usually he feels unrecognized.</li>
    <li>Your initial reaction to his announcement is absolutely crucial:
    <ul>
      <li>Drop everything, sit down and ask him why.</li>
      <li>Let him talk and then ask him more questions until real reasons emerge.</li>
      <li>Don&rsquo;t argue, lecture or panic.</li>
      <li>Buy time for next round.</li>
    </ul></li>
  </ul></li>
</ol><h2><a name="ch-15"></a>Chapter 15 - Compensation as Task-Relevant Feedback</h2>
<ul>
  <li>Money has significance at all levels of Maslow&rsquo;s motivation hierarchy.</li>
  <li>The percentage the bonus represents of a manager&rsquo;s total compensation should rise with his total compensation.</li>
  <li>Base salary should be a mix of experience and merit.</li>
  <li>Peter Principle: employee gets promoted until he reaches his level of incompetence, and then stays there:
  <ul>
    <li>More accurate: an employee moves in cycles:
    <ol>
      <li>&ldquo;Meets expectations&rdquo;.</li>
      <li>&ldquo;Exceed expectations&rdquo;.</li>
      <li>Promotion. Go to 1.</li>
    </ol></li>
    <li>If employee does not meet expectations after promotion:
    <ol>
      <li>Should be &ldquo;recycled&rdquo; to previous position until ready.</li>
      <li>Is a management misjudgement.</li>
    </ol></li>
  </ul></li>
</ul><h2><a name="ch-16"></a>Chapter 16 - Why Training Is The Boss&rsquo;s Job</h2>
<ul>
  <li>For training to be effective, it has to be closely tied to how things are actually done in your org.</li>
  <li>Training should be a process, not an event.</li>
  <li>Training must be done by a person who represents a suitable role model.</li>
  <li>Skills that you have had for years are much harder to explain than to practice.</li>
  <li>Regard the first time you teach a course as a throw-away:
  <ul>
    <li>No matter how hard you try, it won&rsquo;t be great.</li>
    <li>Give this first course to the most knowledgeable of your subordinates, who won&rsquo;t be confused and will help to improve it.</li>
  </ul></li>
  <li>If it is your first time teaching, you&rsquo;ll discover:
  <ol>
    <li>Training is hard.</li>
    <li>You are the one that will learn the most.</li>
    <li>If training goes well, it is nothing short of exhilarating.</li>
  </ol></li>
</ul>]]></description></item><item><title>Client-side good practices when building third party API integrations</title><link>https://danlebrero.com/2023/03/29/client-side-integration-patterns-good-practices/</link><guid>https://danlebrero.com/2023/03/29/client-side-integration-patterns-good-practices/</guid><pubDate>Wed, 29 Mar 2023 00:00:00 +0200</pubDate><description><![CDATA[<p>Here is a brain dump of things that I consider when I have to build a new integration with some third party API provider.</p><p>Notes are quite sketchy. If something needs of a longer explanation let me know!</p><h1>Truths</h1>
<ul>
  <li>They are messy.</li>
  <li>Third parties will become unavailable, both in small doses (few requests &ldquo;randomly&rdquo; failing) and in big ones (few minutes or hours of downtime).</li>
  <li>SFTP is a perfectly acceptable way of integrating.</li>
</ul><h1>Practices</h1><h2>Initial implementation</h2>
<ul>
  <li>Read the docs.
  <ul>
    <li>Do not just fiddle with the endpoints but read the actual docs.</li>
  </ul></li>
  <li>Play with the API to understand behaviours. What if:
  <ul>
    <li>the url is wrong? Does it return a 404?</li>
    <li>the data queried does not exist? Empty result or 404?</li>
    <li>we miss some query/body parameters?</li>
    <li>we concurrently update the same piece of information?</li>
    <li>we exceed the rate limit?</li>
  </ul></li>
  <li>Estimate call rate and data volumes:
  <ul>
    <li>Is batching available?</li>
    <li>Is pagination available?</li>
    <li>Get a sense of the performance:
    <ul>
      <li>It might affect the implementation and business flow.</li>
    </ul></li>
  </ul></li>
  <li>Document findings
  <ul>
    <li>Include support contact information and expectations.</li>
  </ul></li>
  <li>Subscribe the provider&rsquo;s status page.</li>
  <li>Find out what is their change management process:
  <ul>
    <li>Subscribe to whatever you need to subscribe to find out about changes.</li>
    <li>Is it a newly built third party?
    <ul>
      <li>Try to get direct access to their technical team.</li>
      <li>Expect loads of backwards incompatible changes.</li>
      <li>VS mature products, higher chance that the bug is on their side.</li>
    </ul></li>
  </ul></li>
  <li>Consider a <a href="https://martinfowler.com/bliki/DarkLaunching.html">dark launch</a>:
  <ul>
    <li>Put the integration in production, so it is exercised but do not use it in a client facing functionality.</li>
    <li>Minimum monitoring (error and performance) required for this to be useful.</li>
    <li>Useful also to collect real example responses to use for additional testing.</li>
  </ul></li>
</ul><h2>On the way to production</h2>
<ul>
  <li>What is the acceptable business process when the integration fails?
  <ul>
    <li>Integration will fail.</li>
    <li>Avoid &ldquo;at all costs&rdquo; making an integration mandatory for a key user flow.</li>
    <li>What is the fallback mechanism? Default answer?</li>
    <li>If there is a reasonable business flow, consider recording which user flows where affected and proper actions retried/amended/reviewed/notified.</li>
    <li>It is a business decision.</li>
  </ul></li>
  <li>Add retries:
  <ul>
    <li>Think of clock time, not number of retries.</li>
    <li>Consider supporting a manual retry mechanism for your support folks.</li>
    <li>See &ldquo;user-flow vs background integrations below&rdquo;.</li>
  </ul></li>
  <li>Add a kill-switch:
  <ul>
    <li>Ideally in the hands of a PM.</li>
    <li>Review &ldquo;What is the acceptable business process when the integration fails&rdquo;.</li>
  </ul></li>
  <li>Always set timeouts in network calls:
  <ul>
    <li>In the case of Apache HTTP client, <a href="/2019/12/11/apache-http-client-timeouts-config-production-asynchronous-http-client-pictures">at least connection and read timeout</a>.</li>
    <li>Consider that while the thread is waiting for a response, it might be holding other resources (locks, db connections) hostage, which might affect unrelated requests.</li>
    <li>Review &ldquo;What is the acceptable business process when the integration fails&rdquo;.</li>
    <li>Note: when there is a read timeout while waiting for the server to respond, the client side does not know if the request was processed or not.</li>
    <li>Note: if the client application crashes, any in-flight request to the provider ends up in an unknown state from the client&rsquo;s point of view.
    <ul>
      <li>Consider a retry/recovery mechanism when the client application starts up.</li>
    </ul></li>
  </ul></li>
  <li>If you can influence it, encourage the provider to implement idempotent APIs:
  <ul>
    <li>&ldquo;At least once&rdquo; semantics are way easier than &ldquo;at most once&rdquo;.</li>
  </ul></li>
  <li>You might want to consider splitting one third party API into smaller independent integrations if:
  <ul>
    <li>Some endpoints are more critical than others for your business process.</li>
    <li>The various endpoints have widely different latencies.</li>
  </ul></li>
  <li>Monitoring:
  <ul>
    <li>Call rate, error rate, latency.</li>
    <li>Logs:
    <ul>
      <li>All calls.</li>
      <li>Request/Response body in the case of an error.
      <ul>
        <li>Careful with PII data.</li>
      </ul></li>
      <li>Side note: client side monitoring is always better than server side monitoring, as the server might not see some requests if they never reach it, or it might miss monitoring data if it is struggling with load/network/crashing.
      <ul>
        <li>Server side monitoring is still required.</li>
      </ul></li>
    </ul></li>
  </ul></li>
  <li>Set alerts:
  <ul>
    <li>Useful distinction between errors:
    <ul>
      <li>4xx:
      <ul>
        <li>It&rsquo;s our fault.</li>
        <li>Most likely something that we can do about it.</li>
        <li>Daily/weekly report:
        <ul>
          <li>Daily the first few weeks.</li>
          <li>Only alert if % is very high.</li>
          <li>Very unlikely that a retry will help.</li>
        </ul></li>
      </ul></li>
      <li>5xx and timeouts/network errors:
      <ul>
        <li><a href="/2016/11/21/the-boy-who-cried-wolf-an-it-tale/">Do not alert on each and every error</a>:
        <ul>
          <li>Timeout and 5xx will happen and are normal.</li>
        </ul></li>
        <li>Too many:
        <ul>
          <li>First few weeks might mean that you need to tweak your timeouts:
          <ul>
            <li>Dark launch!</li>
          </ul></li>
          <li>Escalate to the provider team.</li>
        </ul></li>
        <li>Retries will help.</li>
      </ul></li>
      <li>In both cases, keep a close eye the first time that you release an integration.</li>
      <li>Remember that GraphQL needs <a href="https://productionreadygraphql.com/2020-08-01-guide-to-graphql-errors">additional error handling</a>.</li>
    </ul></li>
    <li>If you are doing out of hours escalation, ensure that the person to be contacted when there is an alert is the person that thinks that the alert deserves an out of hours alert.
    <ul>
      <li>Most likely it is an issue with the provider, so it &ldquo;only&rdquo; needs to be escalated to their support.</li>
      <li>Provide a dashboard for that alert that even a PM will understand.</li>
      <li>Provide a phone contact to the third party support.</li>
    </ul></li>
    <li>See &ldquo;user-flow vs background integrations below&rdquo;.</li>
    <li>Consider doing load testing.</li>
  </ul></li>
  <li>Security:
  <ul>
    <li>SSL.</li>
    <li>IP allow-list.</li>
    <li>Credentials rotation:
    <ul>
      <li>If it is not automated, figure out who to contact.</li>
    </ul></li>
    <li>On start up, check that the credentials are valid.</li>
  </ul></li>
</ul><h2>Practices for user-flow vs background integrations</h2><p>The main difference between API integration that is in a user-flow and integration that runs in some background process is that the user-flow integrations require a low latency, as it is unlikely that users are willing to wait long.</p><h4>Background integrations</h4>
<ul>
  <li>Multiple retries:
  <ul>
    <li>Consider exponential backoff.</li>
    <li>Think in terms of clock time: For how many minutes/hours is the business process still meaningful? Or is it pointless if delayed more than X?
    <ul>
      <li>Business decision.</li>
    </ul></li>
  </ul></li>
  <li>Alerts:
  <ul>
    <li>Think in terms of clock time: how long can this integration be down before somebody should panic?
    <ul>
      <li>Business decision.</li>
    </ul></li>
    <li>Consider alerting before the process runs out of retries, so that once the issue is addressed the process will (hopefully) successfully retry.</li>
  </ul></li>
  <li>Timeouts can be longer: up to minutes could be ok.</li>
  <li>Batching is more likely to be useful.</li>
  <li>No need for circuit-breakers.</li>
  <li>Rate-limiting should result in traffic shaping.</li>
</ul><h4>User-flow integrations</h4>
<ul>
  <li>You cannot wait long as there is a human looking at a spinning icon on the other side, so:
  <ul>
    <li>No more than one retry.</li>
    <li>Short timeouts.</li>
    <li>This in terms of clock time: how long will the human be willing to wait for the result to appear on their screen before they think your app is broken?</li>
    <li>Most of the time, a few seconds tops.</li>
  </ul></li>
  <li>Connection pools are a must:
  <ul>
    <li>Unless your call rate is so low that it will make no difference.</li>
    <li>Each integration should have its own connection pool:
    <ul>
      <li>Do not share connection pools between different integrations.</li>
    </ul></li>
    <li>Configure the connection pool timeout and the TTL.</li>
  </ul></li>
  <li>Circuit breakers are a must.</li>
  <li>Consider stale-while-revalidating + stale-while-error for cached authorization tokens and data:
  <ul>
    <li>Reduce extra latency when the token/data is stale.</li>
    <li>Better resilience: set refresh short enough that any transient error in the provider will not affect the user as the refresh will be retried several times before it comes really stale.</li>
  </ul></li>
  <li>Alerts:
  <ul>
    <li>Based on circuit breakers.</li>
    <li>Think in terms of clock time:
    <ul>
      <li>For how long a circuit breaker must be open before somebody should panic?</li>
    </ul></li>
  </ul></li>
  <li>Most PaaS platforms have a hard time limit to process the request.</li>
  <li>Consider:
  <ul>
    <li>Moving to a completely or mostly async IO model, to avoid thread starvation.</li>
    <li><a href="https://blogs.oracle.com/javamagazine/post/java-loom-virtual-threads-platform-threads">Java virtual threads</a>!</li>
    <li>Sync data from the provider in a background process, store locally and serve from local store.</li>
    <li>Splitting processing into two steps:
    <ol>
      <li>Trigger request to provider on first client request.</li>
      <li>Client to periodically poll to check if the response is ready.</li>
    </ol></li>
  </ul></li>
</ul><h2>Annoyances</h2><p>A list of things that should never happen, and do not make sense at all, but you will need to live with.</p>
<ul>
  <li>Expect the integration to behave out of spec:
  <ul>
    <li>Be kind with the provider&rsquo;s developers.</li>
  </ul></li>
  <li>A 200 response does not mean a successful response:
  <ul>
    <li>Look at something inside the response to confirm that it was a successful response.</li>
  </ul></li>
  <li>Health check endpoints tell you that the health check endpoint is working (or not):
  <ul>
    <li>Making this call does not guarantee the success of the following HTTP request:
    <ul>
      <li>Health check implementations usually just return a 200 if the API server is up, but do not check that all the downstream dependencies are up and running.
      <ul>
        <li>Doing so is usually very expensive.</li>
      </ul></li>
    </ul></li>
    <li>Even if the health check endpoint does health checking of downstream servers and the downstream servers of the downstream servers, it is possible that by the time we send the second request, the API server or any of its dependencies is frozen or dead, or that there is some network issue on the path.</li>
    <li>Making this call makes the error handling and logic more complex.</li>
    <li>So, avoid.</li>
    <li>See &ldquo;Side note: client side monitoring is always better than server side monitoring&rdquo;.</li>
  </ul></li>
  <li>Probably the dev environment of the provider is crap:
  <ul>
    <li>Consider using their staging in all pre-production environments.</li>
    <li>Use their dev environment for initial development.</li>
  </ul></li>
</ul><h1>Extra references</h1>
<ul>
  <li><a href="/2017/08/03/stability-patterns-a-case-study-devoxx-pl-2017-video">Resilience Patterns</a>.</li>
  <li><a href="https://martinfowler.com/bliki/DarkLaunching.html">Dark launch</a>.</li>
  <li><a href="/2019/12/11/apache-http-client-timeouts-config-production-asynchronous-http-client-pictures">Configuring connection pools and timeouts</a>.</li>
  <li><a href="https://productionreadygraphql.com/2020-08-01-guide-to-graphql-errors">GraphQL error handling</a>.</li>
  <li><a href="/2016/11/21/the-boy-who-cried-wolf-an-it-tale/">Alert fatigue</a>.</li>
</ul>]]></description></item><item><title>Notes on book notes</title><link>https://danlebrero.com/2023/03/15/why-to-take-booknotes/</link><guid>https://danlebrero.com/2023/03/15/why-to-take-booknotes/</guid><pubDate>Wed, 15 Mar 2023 00:00:00 +0100</pubDate><description><![CDATA[<p>Let&rsquo;s explain the process of taking <a href="/tags/book_notes/index.html">book notes</a> before looking at the why.</p><h2>The process</h2><p>Step one: buy a book, or even better, pick up one from your towering unread book pile.</p><p>As you read, take notes in an old-fashioned notebook. Pen and paper.</p><p>Once you finish the book, leave it aside for a few weeks.</p><p>Next, prune the handwritten notes while moving them to electronic form. Leave it aside for a few weeks.</p><p>Last, summarize the notes into key learning and publish in your blog.</p><h2>The benefits</h2><h3>1. More focus, more learning</h3><p>Taking notes by hand has two benefits:</p>
<ol>
  <li>Handwriting notes forces me to focus on what I am reading, improving my understanding and retention of the material.</li>
  <li>As writing the notes is laborious, I tend to write fewer notes, which means trying to understand the key points, which in turn means learning more.
  <ul>
    <li>This is in contrast with highlighting text in an ebook.</li>
  </ul></li>
</ol><h3>Retain more due to repetition</h3><p>Repetition. I “read” a book at least four times:</p>
<ol>
  <li>The actual reading.</li>
  <li>Writing the notes to the notebook.</li>
  <li>Reading the notes and writing them back notes to electronic form.</li>
  <li>Summarizing the electronic forms.</li>
</ol><p>As several weeks have passed, for both steps 3 and 4 I have to go back to the book to understand what some notes mean.</p><p>Step 3 will be especially effective if your handwriting is as crappy as mine:</p><p><img src="/images/blog/books/notes-book-notes/book-notes.jpg" alt="Book notes" /></p><p>This will require you to go back to the book to figure out what you wrote and why it was important.</p><h3>No book left behind</h3><p>If you have abandoned a book for a few weeks, it can be a struggle to pick up where you left off.</p><p>With notes in hand, however, you can quickly refresh your memory and get back into the flow of the book.</p><p>I have found that my abandon rate has dropped significantly since I started taking notes.</p>
<p class="sidenote">my abandon rate of ebooks is significantly higher than paper books, hence I avoid ebooks as much as possible.</p><h3>Fast refresh, future reminder</h3><p>Key learnings take two minutes to read, and the full notes five. This means that it is effortless to re-read them from time to time, reinforcing your memory.</p><p>And, obviously, being in electronic form makes them searchable.</p><h3>Doing two things at once</h3><p>In <a href="/2019/11/27/becoming-a-technical-leader-book-notes/">Becoming a Technical Leader</a>, Weinberg recommends trying to do two things at once, but not in the sense of multitasking but in the sense of killing two birds with one stone.</p><p>In my case, taking notes means that I am both reading a book, having a quick reference for my future self, and at the same time generating content for my blog.</p><h2>Drawbacks</h2><p>Absolutely none.</p><p>Oooooookkk, maybe all this process takes significantly more time, but I wish I had started with my very first book:</p><p><img src="/images/blog/books/notes-book-notes/all-books.jpg" alt="All books" /></p><h2>Tools</h2><p>Some geekery about what do I use:</p>
<ol>
  <li><a href="https://amzn.to/3mE31tG">Oxford Notepad</a>:
  <ul>
    <li>A5 is THE right size.</li>
    <li>Spiral because:
    <ol>
      <li>holds the pen.</li>
      <li>It can be folded entirely over.</li>
    </ol></li>
    <li>80gms: no ink in the other side</li>
  </ul></li>
  <li><a href="https://amzn.to/406YNcB">Pilot V5</a>: writes in every position/surface, but I find it dirty.
  <ul>
    <li>Happy to learn about alternatives.</li>
  </ul></li>
  <li><a href="https://amzn.to/3JC5rkL">Neck light</a>: a surprisingly useful present.</li>
</ol><p>And the most important of all, a bookmark for each book handcrafted by my lovely daughter:</p><p><img src="/images/blog/books/notes-book-notes/book-marker.jpg" alt="book mark" /></p><p>They will become a very good reason to revisit all the books … and it keeps her busy for at least one hour each <i class="far fa-smile" aria-hidden="true"></i>.</p>]]></description></item><item><title>Book notes: Building Microservices - Second edition</title><link>https://danlebrero.com/2023/01/24/building-microservices-second-edition-designing-fine-grained-systems-summary/</link><guid>https://danlebrero.com/2023/01/24/building-microservices-second-edition-designing-fine-grained-systems-summary/</guid><pubDate>Tue, 24 Jan 2023 00:00:00 +0100</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/3aTXY39">Building Microservices: Designing Fine-Grained Systems</a> by <a href="https://twitter.com/samnewman">Sam Newman</a>.</p><p>When an author lists more drawbacks thatn benefits (nine vs six), you know he knows what he is talking about.</p><h1>Key Insights</h1>
<ul>
  <li>Independent deployability is key.</li>
  <li>Clear, stable service boundaries.</li>
  <li>Smaller teams working on smaller codebases tend to be more productive.</li>
</ul>
<table>
  <thead>
    <tr>
      <th>Benefits </th>
      <th>Pain Points </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Tech heterogeneity </td>
      <td>Tech overload </td>
    </tr>
    <tr>
      <td>Robustness </td>
      <td>Latency </td>
    </tr>
    <tr>
      <td>Scalability </td>
      <td>Data Consistency </td>
    </tr>
    <tr>
      <td>Easy of deployment </td>
      <td>Dev experience </td>
    </tr>
    <tr>
      <td>Org alignment </td>
      <td>Cost </td>
    </tr>
    <tr>
      <td>Composability </td>
      <td>Monitoring and troubleshooting </td>
    </tr>
    <tr>
      <td> </td>
      <td>Reporting </td>
    </tr>
    <tr>
      <td> </td>
      <td>Security </td>
    </tr>
    <tr>
      <td> </td>
      <td>Testing </td>
    </tr>
  </tbody>
</table>
<ul>
  <li>When to avoid:
  <ul>
    <li>Start ups:
    <ul>
      <li>Because no stable service boundaries.</li>
      <li>Small teams.</li>
    </ul></li>
    <li>SW deployed by customers, due to operation burden. <img src="/images/blog/books/building-microservices/collaboration-style.png" alt="communication style" /></li>
  </ul></li>
  <li>Keep your middleware dumb, and keep the smarts in the endpoints.</li>
  <li>Prefer to put into an event what you would be happy to share via an API.</li>
  <li>Ideal technology should:
  <ol>
    <li>Make backwards compatibility easy.</li>
    <li>Make interfaces explicit.</li>
    <li>Keep your APIs technology-agnostic.</li>
    <li>Make services simple for consumers.</li>
    <li>Hide internal implementation details.</li>
  </ol></li>
  <li>Communication:
  <ul>
    <li>RPC:
    <ul>
      <li>gRPC good, other bad.</li>
      <li>Use when good deal of control of client and server.</li>
    </ul></li>
    <li>REST:
    <ul>
      <li>Sensible default choice.</li>
      <li>Good for external API: wide support + caching.</li>
      <li><a href="https://en.wikipedia.org/wiki/HATEOAS">HATEOAS</a>: No practical advantage.</li>
    </ul></li>
    <li>GraphQL:
    <ul>
      <li>Dynamic queries can cause stability issues similar to a big/slow/resource intensive SQL query affecting the whole system.</li>
      <li>CDN caching more difficult.</li>
      <li>Write requests are awkward.</li>
    </ul></li>
    <li>Message brokers:
    <ul>
      <li>What any given broker technology means by guaranteed delivery can vary. Read the documentation very carefully.</li>
      <li>Pay really careful attention to how exactly once delivery is implemented (if it is).
      <ul>
        <li>Even better, expect duplicates.</li>
      </ul></li>
    </ul></li>
  </ul></li>
  <li>Author still a fan of XML.</li>
  <li>Client libraries should be created by team other than the one that owns the server API.</li>
  <li>Sagas:
  <ul>
    <li>Saga gives enough information to reason about what state it is in.</li>
    <li>Sagas assume the underlying components are reliable as it does not deal with technical failures (5xx, timeouts).</li>
    <li>General rule:
    <ul>
      <li>If a team owns the implementation of the entire saga: orchestration.</li>
      <li>If multiple teams: choreographed.</li>
    </ul></li>
  </ul></li>
  <li>We want to build artifacts once and only once, and use them for all deployments.</li>
  <li>Source code organization:
  <ul>
    <li>Multirepo:
    <ul>
      <li>If you are constantly making changes across multiple services, your microservices boundaries are wrong.</li>
    </ul></li>
    <li>Monorepo:
    <ul>
      <li>Ease changes in multiple services:
      <ul>
        <li>Atomic commits (but not atomic deployments).</li>
      </ul></li>
      <li>Needs load of tooling:
      <ul>
        <li><a href="https://bazel.build">Bazel</a>.</li>
      </ul></li>
    </ul></li>
    <li>Per team monorepo.</li>
  </ul></li>
  <li>3 services per dev is not an uncommon ratio.</li>
  <li>The smarter the PaaS try to be, the more they go wrong.</li>
  <li>If you need to do a lot of fine tuning around resources available to your functions, then FaaS is not the best option.</li>
  <li>Explore FaaS before Kubernetes.</li>
  <li>Future: Kubernetes hidden under a more developer friendly experience.</li>
  <li>If your teams work independently, it follows that they should be able to test independently:
  <ul>
    <li>If also follows that they should own their test environments.</li>
    <li>It is a reason against end-to-end tests.</li>
  </ul></li>
  <li>Contract testing and consumer-driven contracts:
  <ul>
    <li>Pair consumer and producer team members to write them.</li>
    <li>Make existing communication channels more explicit.</li>
    <li><a href="https://docs.pact.io/pact_broker">Pact Broker</a>.</li>
    <li><a href="https://spring.io/projects/spring-cloud-contract">Spring Cloud Contract</a>. Only JVM.</li>
  </ul></li>
  <li>Monitoring:
  <ol>
    <li>Log aggregation:
    <ul>
      <li>Avoid log forwarding agents reformatting the logs. Make services log in the right format.</li>
    </ul></li>
    <li>Metrics aggregation:
    <ul>
      <li>Look for a product that is built with high cardinality in mind, so you can attach more metadata/tags to the metrics.</li>
    </ul></li>
    <li>Distributed tracing:
    <ul>
      <li>Pick a tool that supports <a href="https://opentelemetry.io/">OpenTelemetry</a>.</li>
    </ul></li>
    <li>Semantic monitoring:
    <ul>
      <li>Are we selling &ldquo;as usual&rdquo;?</li>
      <li>Implemented with:
      <ol>
        <li>Real user monitoring: In the past.</li>
        <li>Synthetic transactions: Catch issues before clients are aware.</li>
      </ol></li>
    </ul></li>
  </ol>
  <ul>
    <li>Be sceptical of ML/AI.</li>
  </ul></li>
  <li>Good alert:
  <ul>
    <li>Relevant.</li>
    <li>Unique.</li>
    <li>Timely.</li>
    <li>Prioritized.</li>
    <li>Understandable.</li>
    <li>Diagnostic: clear what is wrong.</li>
    <li>Advisory: help understand what actions to take.</li>
    <li>Focusing.</li>
  </ul></li>
  <li>Standardization:
  <ul>
    <li>Make it easy to do the right thing.</li>
  </ul></li>
  <li>You are only as secure as your least secure aspect.</li>
  <li>Credentials of users and operators are often the weakest point of our system:
  <ul>
    <li>In 2020, 80% of hacks due to it.</li>
  </ul></li>
  <li>Cost of any security implementation should be justified by your threat model.</li>
  <li>Failure is everywhere:
  <ul>
    <li>Spend less time trying to stop the inevitable and more dealing with it gracefully.</li>
  </ul></li>
  <li>Root cause analysis: it is surprising how often we want that root cause to be a human.</li>
  <li>CQRS: one of the hardest forms of scaling.</li>
  <li>The ideal number of places to cache is zero.</li>
  <li>When customizing a product built by someone else, you have to work in their world.</li>
  <li>One experience, one backend for frontend (BFF).</li>
  <li>Collective ownership can allow for more standardization, hence easier to move people/work around.</li>
  <li>The biggest cost to working efficiently at scale is the need of coordination.</li>
  <li>Coming up with a vision without considering how your staff will feel about it and without considering what capabilities they have is likely to lead to a bad place.</li>
  <li>Architecture is what happens, not what is planned.</li>
  <li>Make Product Manager accountable for the technical quality of the system.</li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#p-1">Part I - Foundation</a>
  <ul>
    <li><a href="#ch-1">Chapter 1 - What are Microservices?</a></li>
    <li><a href="#ch-2">Chapter 2 - How to Model Microservices</a></li>
    <li><a href="#ch-3">Chapter 3 - Splitting the Monolith</a></li>
    <li><a href="#ch-4">Chapter 4 - Microservices Communication Styles</a></li>
  </ul></li>
  <li><a href="#p-2">Part II - Implementation</a>
  <ul>
    <li><a href="#ch-5">Chapter 5 - Implementing Microservices Communication</a></li>
    <li><a href="#ch-6">Chapter 6 - Workflow</a></li>
    <li><a href="#ch-7">Chapter 7 - Build</a></li>
    <li><a href="#ch-8">Chapter 8 - Deployment</a></li>
    <li><a href="#ch-9">Chapter 9 - Testing</a></li>
    <li><a href="#ch-10">Chapter 10 - From Monitoring to Observability</a></li>
    <li><a href="#ch-11">Chapter 11 - Security</a></li>
    <li><a href="#ch-12">Chapter 12 - Resilience</a></li>
    <li><a href="#ch-13">Chapter 13 - Scaling</a></li>
  </ul></li>
  <li><a href="#p-3">Part III - People</a>
  <ul>
    <li><a href="#ch-14">Chapter 14 - User Interfaces</a></li>
    <li><a href="#ch-15">Chapter 15 - Organizational Structures</a></li>
    <li><a href="#ch-16">Chapter 16 - The Evolutionary Architect</a></li>
  </ul></li>
</ul><h1><a name="p-1"></a>Part I - Foundation</h1><h2><a name="ch-1"></a>Chapter 1 - What are Microservices?</h2>
<ul>
  <li>Independent deployability is key.</li>
  <li>Clear, stable service boundaries.</li>
  <li>Monoliths:
  <ul>
    <li>Single-process monolith.</li>
    <li>Modular monolith.</li>
    <li>Distributed monolith.</li>
  </ul></li>
  <li>Tech that enable microservices:
  <ul>
    <li>Log aggregation and distributed tracing.</li>
    <li>Containers and Kubernetes.</li>
    <li>Streaming.</li>
    <li>Public Cloud and Serverless.</li>
  </ul></li>
  <li>Smaller teams working on smaller codebases tend to be more productive.</li>
</ul>
<table>
  <thead>
    <tr>
      <th>Benefits </th>
      <th>Pain Points </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Tech heterogeneity </td>
      <td>Tech overload </td>
    </tr>
    <tr>
      <td>Robustness </td>
      <td>Latency </td>
    </tr>
    <tr>
      <td>Scalability </td>
      <td>Data Consistency </td>
    </tr>
    <tr>
      <td>Easy of deployment </td>
      <td>Dev experience </td>
    </tr>
    <tr>
      <td>Org alignment </td>
      <td>Cost </td>
    </tr>
    <tr>
      <td>Composability </td>
      <td>Monitoring and troubleshooting </td>
    </tr>
    <tr>
      <td> </td>
      <td>Reporting </td>
    </tr>
    <tr>
      <td> </td>
      <td>Security </td>
    </tr>
    <tr>
      <td> </td>
      <td>Testing </td>
    </tr>
  </tbody>
</table>
<ul>
  <li>When to avoid:
  <ul>
    <li>Start ups:
    <ul>
      <li>Because no stable service boundaries.</li>
      <li>Small teams.</li>
    </ul></li>
    <li>SW deployed by customers, due to operation burden.</li>
  </ul></li>
</ul><h2><a name="ch-2"></a>Chapter 2 - How to Model Microservices</h2>
<ul>
  <li>Boundaries:
  <ul>
    <li>Information hiding.</li>
    <li>Strong cohesion:
    <ul>
      <li>Code that changes together, stays together.</li>
    </ul></li>
    <li>Low coupling.</li>
  </ul></li>
  <li>Types of coupling, from low to high:
  <ol>
    <li>Domain coupling:
    <ul>
      <li>Unavoidable: one service calling another.</li>
      <li>Beware of one service talking to too many downstream services:
      <ul>
        <li>Too much logic centralized.</li>
        <li><a href="https://en.wikipedia.org/wiki/God_object">God &ldquo;class&rdquo;</a>.</li>
      </ul></li>
    </ul></li>
    <li>Pass-through coupling:
    <ul>
      <li>One service passes data to another purely because the data is needed further downstream.</li>
      <li>Fix by:
      <ol>
        <li>Bypass the intermediary:
        <ul>
          <li>Increase the domain coupling of calling service.</li>
        </ul></li>
        <li>Required information to become part of the intermediary contract:
        <ul>
          <li>Intermediary to collect all/part of that data.</li>
        </ul></li>
        <li>Intermediary to treat required information as a blob:
        <ul>
          <li>The Clojure way!</li>
        </ul></li>
      </ol></li>
    </ul></li>
    <li>Common coupling:
    <ul>
      <li>Two services using the same data.</li>
      <li>Okish for reference data ( low change, read only).</li>
      <li>Service that are thin wrappers around CRUD, is a sign of weak cohesion and high coupling.</li>
    </ul></li>
    <li>Content coupling:
    <ul>
      <li>Upstream service reaches into the internals of a downstream service and changes its internal state.</li>
      <li>Other services touching your DB directly.</li>
    </ul></li>
  </ol></li>
  <li>To model:
  <ol>
    <li>Mainly, use DDD:
    <ul>
      <li>Both aggregates and bounded context give us the unit of cohesion with well defined interfaces: candidates for microservices.</li>
      <li>Coarser-grained bounded context can contain/hide other bounded context.</li>
    </ul></li>
    <li>Event Storming.</li>
    <li>Other forces:
    <ul>
      <li>Volatility: things that change frequently should go into their own service.</li>
      <li>Data: PII/PCI.</li>
      <li>Technology: use the right tool for the job.</li>
      <li>Organizational: Conway&rsquo;s law.</li>
    </ul></li>
  </ol></li>
  <li>Onion architecture: it has lots of layers and makes you cry when you have to cut through it.</li>
</ul><h2><a name="ch-3"></a>Chapter 3 - Splitting the Monolith</h2><p>Skipped. See book notes on <a href="/2022/02/09/monolith-to-microservices-summary/#content">Monolith to Microservices: Evolutionary Patterns to Transform Your Monolith</a>.</p><h2><a name="ch-4"></a>Chapter 4 - Microservices Communication Styles</h2>
<ul>
  <li>When you buy into specific tech choice, you are buying into a set of ideas and constraints that come with it.</li>
</ul><p><img src="/images/blog/books/building-microservices/collaboration-style.png" alt="communication style" /></p>
<ul>
  <li>Sync blocking: beware of long call chains.</li>
  <li>Common data:
  <ul>
    <li>Large volumes.</li>
    <li>Universal.</li>
    <li>High latency.</li>
  </ul></li>
  <li>Keep your middleware dumb, and keep the smarts in the endpoints.</li>
  <li>Prefer to put into an event what you would be happy to share via an API.</li>
</ul><h1><a name="p-2"></a>Part II - Implementation</h1><h2><a name="ch-5"></a>Chapter 5 - Implementing Microservices Communication</h2>
<ul>
  <li>Ideal technology should:
  <ol>
    <li>Make backwards compatibility easy.</li>
    <li>Make interfaces explicit.</li>
    <li>Keep your APIs technology-agnostic.</li>
    <li>Make services simple for consumers.</li>
    <li>Hide internal implementation details.</li>
  </ol></li>
  <li>Choices:
  <ul>
    <li>RPC:
    <ul>
      <li>gRPC good, other bad.</li>
      <li>Use when good deal of control of client and server.</li>
    </ul></li>
    <li>REST:
    <ul>
      <li>Open API concern: a spec used for documenting now being used for a more explicit contract.</li>
      <li>Lot more complex than protobuf.</li>
      <li>Less performance than gRPC.</li>
      <li>HTTP/3: based on <a href="https://en.wikipedia.org/wiki/QUIC">QUIC</a>, less overhead than TPC.</li>
      <li>Sensible default choice.</li>
      <li>Good for external API: wide support + caching.</li>
      <li><a href="https://en.wikipedia.org/wiki/HATEOAS">HATEOAS</a>:
      <ul>
        <li>Many of the ideas in REST are predicated on creating distributed hypermedia systems, and this isn&rsquo;t what most people end up building.</li>
        <li>More chatty.</li>
        <li>No practical advantage.</li>
      </ul></li>
    </ul></li>
    <li>GraphQL:
    <ul>
      <li>Dynamic queries can cause stability issues similar to a big/slow/resource intensive SQL query affecting the whole system.</li>
      <li>CDN caching more difficult.</li>
      <li>Write requests are awkward.</li>
    </ul></li>
    <li>Message brokers:
    <ul>
      <li>What any given broker technology means by guaranteed delivery can vary. Read the documentation very carefully.</li>
      <li>Pay really careful attention to how exactly once delivery is implemented (if it is).
      <ul>
        <li>Even better, expect duplicates.</li>
      </ul></li>
    </ul></li>
  </ul></li>
  <li>Serialization formats:
  <ul>
    <li>Author still a fan of XML.</li>
  </ul></li>
  <li>Use schemas to catch structural breakages.</li>
  <li>Avoid breaking changes:
  <ul>
    <li>Just add, never remove.</li>
    <li>Tolerant reader.</li>
  </ul></li>
  <li>Explicit interfaces:
  <ul>
    <li>Events:
    <ul>
      <li><a href="https://www.asyncapi.com">https://www.asyncapi.com</a>.</li>
      <li><a href="https://cloudevents.io">https://cloudevents.io</a>.</li>
    </ul></li>
  </ul></li>
  <li>Breaking changes:
  <ul>
    <li>Lockstep deployments:
    <ul>
      <li>Avoid.</li>
      <li>More palatable if service + all consumers owned by the same team.</li>
    </ul></li>
    <li>Coexists incompatible microservices versions:
    <ul>
      <li>Use sparingly and for short periods of time.</li>
    </ul></li>
    <li>Emulate the old interface:
    <ul>
      <li>Preferred approach.</li>
      <li>Author torn between encoding versions in urls (simpler, obvious) or specify in header (less coupling).</li>
    </ul></li>
    <li>Social contract:
    <ul>
      <li>How breaking changes will be notified?</li>
      <li>How they will be agreed upon?</li>
      <li>Who will update the consumers?</li>
      <li>How long before old endpoint is removed?</li>
    </ul></li>
  </ul></li>
  <li>If you are using libraries for code reuse across microservices boundaries, you have to accept that multiple versions of that library will be out there.</li>
  <li>Client libraries should be created by team other than the one that owns the server API:
  <ul>
    <li>To avoid tightly coupled.</li>
  </ul></li>
  <li>Service discovery:
  <ul>
    <li>DNS:
    <ul>
      <li>Slow to propagate changes.</li>
      <li>Okish with a load balancer.</li>
    </ul></li>
    <li>Dynamic service registries:
    <ul>
      <li>Avoid Zookeeper.</li>
      <li>Consul: good, specially if you need Vault also.</li>
      <li>etcd/kubernetes.</li>
    </ul></li>
  </ul></li>
  <li>When using an API gateway or service mesh, it is essential that their behaviour is generic, agnostic of specific microservices.</li>
  <li>In API gateway, avoid:
  <ul>
    <li>Call aggregation.</li>
    <li>Protocol rewriting.</li>
    <li>Use between your microservices.</li>
  </ul></li>
  <li><a href="https://www.bizops.com/what-is-bizops">BizOps</a>.</li>
</ul><h2><a name="ch-6"></a>Chapter 6 - Workflow</h2>
<ul>
  <li>Sagas does not give atomicity in ACID terms:
  <ul>
    <li>Saga gives enough information to reason about what state it is in.</li>
  </ul></li>
  <li>Saga failure mode:
  <ul>
    <li>Sagas assume the underlying components are reliable as it does not deal with technical failures (5xx, timeouts).</li>
    <li>Backwards recovery: compensating transactions.</li>
    <li>Forward recovery: retry and keep processing.</li>
  </ul></li>
  <li>Orchestrated sagas:
  <ul>
    <li>One coordinator.</li>
    <li>Easy to understand: one place to look at how a process work.</li>
    <li>High coupling.</li>
    <li>Risk of &ldquo;god&rdquo; service and anemic ones:
    <ul>
      <li>Avoid by having different services play the orchestrator role for different flows.</li>
    </ul></li>
  </ul></li>
  <li>Choreographed sagas:
  <ul>
    <li>More decoupled.</li>
    <li>harder to understand the process and the saga state.</li>
    <li>Saga state:
    <ul>
      <li>Events should have a correlationID or sagaID.</li>
      <li>A process consumes all events to show the actual state.</li>
    </ul></li>
  </ul></li>
  <li>General rule:
  <ul>
    <li>If a team owns the implementation of the entire saga: orchestration.</li>
    <li>If multiple teams: choreographed.</li>
  </ul></li>
</ul><h2><a name="ch-7"></a>Chapter 7 - Build</h2>
<ul>
  <li>We want to build artifacts once and only once, and use them for all deployments.</li>
  <li>Source code organization:
  <ul>
    <li>One giant repo, one giant build:
    <ul>
      <li>Avoid.</li>
    </ul></li>
    <li>Multirepo:
    <ul>
      <li>Hard to work with several services at the same time.</li>
      <li>If you are constantly making changes across multiple services, your microservices boundaries are wrong.</li>
      <li>Most straightforward.</li>
    </ul></li>
    <li>Monorepo:
    <ul>
      <li>Ease:
      <ul>
        <li>Fine grained code reuse.</li>
        <li>Changes in multiple services:
        <ul>
          <li>Atomic commits (but not atomic deployments).</li>
        </ul></li>
      </ul></li>
      <li>Needs load of tooling:
      <ul>
        <li><a href="https://bazel.build">Bazel</a>.</li>
      </ul></li>
    </ul></li>
    <li>Per team monorepo.</li>
  </ul></li>
</ul><h2><a name="ch-8"></a>Chapter 8 - Deployment</h2>
<ul>
  <li>Principles of microservices deployment:
  <ol>
    <li>Isolated execution.</li>
    <li>Focus on automation:
    <ul>
      <li>Aim for self-service.</li>
      <li>3 services per dev is not an uncommon ratio.</li>
    </ul></li>
    <li>Infrastructure as code:
    <ul>
      <li>How automation should be done.</li>
      <li><a href="https://www.terraform.io">Terraform</a> / <a href="https://www.pulumi.com">Pulumi</a>.</li>
    </ul></li>
    <li>Zero-downtime deployment:
    <ul>
      <li>Avoid coordination.</li>
    </ul></li>
    <li>Desired state management:
    <ul>
      <li>Declarative state.</li>
      <li>Platform automatically makes changes to arrive to the desired state.</li>
      <li><a href="https://kubernetes.io">Kubernetes</a> / <a href="https://www.nomadproject.io">Nomad</a>.</li>
      <li>GitOps: <a href="https://fluxcd.io">Flux</a>.</li>
    </ul></li>
  </ol></li>
  <li>Deployment options:
  <ol>
    <li>Physical machine.</li>
    <li>Virtual machine:
    <ul>
      <li>Stricter isolation than containers.</li>
    </ul></li>
    <li>Containers:
    <ul>
      <li>More lightweight than virtual machines.</li>
    </ul></li>
    <li>Application containers.</li>
    <li>Platform as a service (PaaS):
    <ul>
      <li>When PaaS solutions work well for your context, they work very well indeed.</li>
      <li>The smarter the PaaS try to be, the more they go wrong.</li>
    </ul></li>
    <li>Function as a Service (FaaS):
    <ul>
      <li>If you need to do a lot of fine tuning around resources available to your functions, then FaaS is not the best option.</li>
      <li><a href="https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-overview">Azure Durable Functions</a>.</li>
      <li>Cold start is optimized in most platforms.</li>
      <li>One function per microservice or per aggregate:
      <ul>
        <li>Avoid more fine-grained.</li>
      </ul></li>
    </ul></li>
  </ol></li>
  <li>Explore FaaS before Kubernetes.</li>
  <li>Kubernetes has limited multitenancy capabilities:
  <ol>
    <li>Use <a href="https://www.redhat.com/en/technologies/cloud-computing/openshift">OpenShift</a>.</li>
    <li>Use federated model: multiple Kubernetes clusters with a layer on top.</li>
  </ol></li>
  <li><a href="https://knative.dev/docs/">Knative</a> aims to provide FaaS-style workflows to developers:
  <ul>
    <li>Risky to adopt.</li>
  </ul></li>
  <li>Future: Kubernetes hidden under a more developer friendly experience.</li>
  <li>Progressive delivery:
  <ul>
    <li>Separate deployment from release.</li>
    <li>Blue/Green deployments.</li>
    <li>Feature toggles.</li>
    <li>Canary releases:
    <ul>
      <li><a href="https://spinnaker.io">Spinnaker</a>.</li>
    </ul></li>
    <li>Parallel run: send to old and new and compare.</li>
  </ul></li>
</ul><h2><a name="ch-9"></a>Chapter 9 - Testing</h2>
<ul>
  <li>Who owns an end-to-end test suite?
  <ul>
    <li>Everybody / nobody.</li>
    <li>Dedicated team: this can be disastrous.</li>
    <li>Split suite and assign subsets to teams.</li>
  </ul></li>
  <li><p>Actively remove tests that are no longer needed.</p>
  <blockquote>Why not use a version number for the whole system? Now you have 2.1.0 problems. <cite><a href="https://twitter.com/brandonbyars">Brandom Byars</a></cite>
  </blockquote></li>
  <li><p>If your teams work independently, it follows that they should be able to test independently:</p>
  <ul>
    <li>If also follows that they should own their test environments.</li>
    <li>It is a reason against end-to-end tests.</li>
  </ul></li>
  <li>Contract testing and consumer-driven contracts:
  <ul>
    <li>Pair consumer and producer team members to write them.</li>
    <li>Make existing communication channels more explicit.</li>
    <li><a href="https://docs.pact.io/pact_broker">Pact Broker</a>.</li>
    <li><a href="https://spring.io/projects/spring-cloud-contract">Spring Cloud Contract</a>. Only JVM.</li>
  </ul></li>
</ul><h2><a name="ch-10"></a>Chapter 10 - From Monitoring to Observability</h2>
<ul>
  <li>Observability: the extent to which you can understand the internal state of the system from external outputs.</li>
  <li>Monitoring and observability system are production systems.</li>
  <li>Building blocks:
  <ol>
    <li>Log aggregation:
    <ul>
      <li>Prerequisite for microservices.</li>
      <li>Pick a common format.</li>
      <li>Avoid log forwarding agents reformatting the logs. Make services log in the right format.</li>
      <li>Log correlation ID.</li>
      <li>Careful with timestamps and clock skew:
      <ul>
        <li>Tracing does not have this issue.</li>
      </ul></li>
    </ul></li>
    <li>Metrics aggregation:
    <ul>
      <li>Look for a product that is built with high cardinality in mind, so you can attach more metadata/tags to the metrics.</li>
      <li><a href="https://prometheus.io/">Prometheus</a> is low-cardinality.</li>
      <li><a href="https://www.honeycomb.io/">HoneyComb</a> or <a href="https://lightstep.com/">LightSteps</a>.</li>
    </ul></li>
    <li>Distributed tracing:
    <ul>
      <li>Pick a tool that supports <a href="https://opentelemetry.io/">OpenTelemetry</a>.</li>
    </ul></li>
    <li>Are we doing ok?
    <ul>
      <li>SLA.</li>
      <li>SLO: at the team level.</li>
      <li>SLI: indicator-data to know if we are meeting a SLO.</li>
      <li><a href="/2017/07/16/error-budget-google-solution-for-innovating-at-a-sustainable-pace/#content">Error budgets</a>.</li>
    </ul></li>
    <li>Alerting:
    <ul>
      <li>Biggest question: Should this problem cause someone to be woken up at 3am?</li>
      <li>Avoid overalerting.</li>
      <li>Good alert:
      <ul>
        <li>Relevant.</li>
        <li>Unique.</li>
        <li>Timely.</li>
        <li>Prioritized.</li>
        <li>Understandable.</li>
        <li>Diagnostic: clear what is wrong.</li>
        <li>Advisory: help understand what actions to take.</li>
        <li>Focusing.</li>
      </ul></li>
    </ul></li>
    <li>Semantic monitoring:
    <ul>
      <li>Are we selling &ldquo;as usual&rdquo;?</li>
      <li>Are users login as usual?</li>
      <li>Implemented with:
      <ol>
        <li>Real user monitoring:
        <ul>
          <li>In the past.</li>
          <li>Noisy.</li>
        </ul></li>
        <li>Synthetic transactions:
        <ul>
          <li>Catch issues before clients are aware.</li>
        </ul></li>
      </ol></li>
    </ul></li>
    <li>Testing in production:
    <ol>
      <li>Synthetic transactions.</li>
      <li>A/B testing.</li>
      <li>Canary releases.</li>
      <li>Parallel run.</li>
      <li>Smoke test.</li>
      <li>Chaos engineering.</li>
    </ol></li>
  </ol></li>
  <li>Standardization:
  <ul>
    <li>Important in monitoring and observability.</li>
    <li>Make it easy to do the right thing.</li>
  </ul></li>
  <li>Select tools that:
  <ul>
    <li>Democratic: everybody can use them.</li>
    <li>Easy to integrate: OpenTelemetry.</li>
    <li>Provide temporal, relative, relational and proportional context.</li>
    <li>Realtime.</li>
    <li>Suitable for your scale.</li>
  </ul></li>
  <li>Be sceptical of ML/AI.</li>
</ul><h2><a name="ch-11"></a>Chapter 11 - Security</h2>
<ul>
  <li>You are only as secure as your least secure aspect.</li>
  <li>Core principles:
  <ol>
    <li>Least privilege.</li>
    <li>Defense in depth:
    <ul>
      <li>Multiple protections.</li>
      <li>Microservices provide more defense in depth than monoliths as:
      <ul>
        <li>They have smaller scope.</li>
        <li>Can be segmented in networks.</li>
      </ul></li>
    </ul></li>
    <li>Automation:
    <ul>
      <li>Recover.</li>
      <li>Rotate keys.</li>
    </ul></li>
  </ol></li>
  <li>Five functions of Cybersecurity:
  <ol>
    <li>Identify potential attackers, their targets are where you are most vulnerable:
    <ul>
      <li>As human beings, we are quite bad at understanding risks.</li>
      <li>Threat modeling:
      <ul>
        <li>Focus on the whole system, not a subset.</li>
      </ul></li>
    </ul></li>
    <li>Protect.</li>
    <li>Detect.</li>
    <li>Respond.</li>
    <li>Recover.</li>
  </ol></li>
  <li>Foundations of application security:
  <ol>
    <li>Credentials:
    <ul>
      <li>Credentials of users and operators are often the weakest point of our system:
      <ul>
        <li>In 2020, 80% of hacks due to it.</li>
      </ul></li>
      <li>Troy Hunt, <a href="https://www.troyhunt.com/passwords-evolved-authentication-guidance-for-the-modern-era/">Passwords evolved</a>:
      <ul>
        <li>Use password managers.</li>
        <li>Avoid complex password rules.</li>
        <li>Avoid mandated regular password changes.</li>
      </ul></li>
      <li><a href="https://git-secret.io">git-secret</a> and <a href="https://github.com/zricethezav/gitleaks">gitleaks</a>.</li>
    </ul></li>
    <li>Patching:
    <ul>
      <li>Containers: <a href="https://www.aquasec.com/">Aqua</a>.</li>
      <li>Libraries: <a href="https://snyk.io/">Snyk</a> or Github.</li>
    </ul></li>
    <li>Backups.</li>
    <li>Rebuilds:
    <ul>
      <li>Including restoration of backed up data.</li>
    </ul></li>
  </ol></li>
  <li>Cost of any security implementation should be justified by your threat model.</li>
  <li>Data in transit:
  <ol>
    <li>Server identity: HTTPS.</li>
    <li>Client identity:
    <ul>
      <li>Mutual TLS.</li>
      <li>API keys.</li>
    </ul></li>
    <li>Visibility of data: HTTPS.</li>
    <li>Manipulation of data:
    <ul>
      <li>HTTPS.</li>
      <li>HMAC.</li>
    </ul></li>
  </ol></li>
  <li>Data at rest:
  <ul>
    <li>Where do you store the encryption keys?</li>
  </ul></li>
  <li>Do fine-grained authorization in service. It is ok for coarse-grained in the gateway.</li>
  <li>Gateway generating a JWT per request.</li>
  <li><a href="https://amzn.to/3opUfNH">Agile Application Security</a> by Laure Bell.</li>
</ul><h2><a name="ch-12"></a>Chapter 12 - Resilience</h2>
<ul>
  <li>Resilience:
  <ol>
    <li>Robustness:
    <ul>
      <li>The ability to absorb expected perturbation.</li>
      <li>As we increase robustness, we increase complexity.</li>
    </ul></li>
    <li>Rebound:
    <ul>
      <li>Ability to recover after a traumatic event.</li>
    </ul></li>
    <li>Graceful extensibility:
    <ul>
      <li>How well we deal with a situation that is unexpected.</li>
      <li>Flatter orgs will often be better prepared.</li>
      <li>Optimizations can increase brittleness.</li>
    </ul></li>
    <li>Sustained adaptability:
    <ul>
      <li>Ability to continually adapt to changing envs, stakeholders and demands.</li>
      <li>Requires a holistic view of the system.</li>
      <li>Share information freely on an incident.</li>
      <li>Culture to find time to learn from incident.</li>
    </ul></li>
  </ol></li>
  <li>Failure is everywhere:
  <ul>
    <li>Spend less time trying to stop the inevitable and more dealing with it gracefully.</li>
  </ul></li>
  <li>Responding very slowly is one of the worst failure modes you can experience.</li>
  <li>CP (from CAP theorem) systems can&rsquo;t fix all your problems, specially if you keep records of the real world.</li>
  <li>Blame:
  <ul>
    <li>Root cause analysis: it is surprising how often we want that root cause to be a human.</li>
    <li>If it is true that one person making a mistake can really bring an entire telco to its knees, you&rsquo;d think that would say more about the telco than the individual.</li>
  </ul></li>
</ul><h2><a name="ch-13"></a>Chapter 13 - Scaling</h2>
<ul>
  <li>Four axes:
  <ol>
    <li>Vertical scaling:
    <ul>
      <li>In a public cloud provider, is very fast to apply.</li>
      <li>Little risk.</li>
      <li>Does not improve robustness.</li>
    </ul></li>
    <li>Horizontal duplication:
    <ul>
      <li>It does improve robustness.</li>
    </ul></li>
    <li>Data partitioning:
    <ul>
      <li>It does not improve robustness.</li>
    </ul></li>
    <li>Functional decomposition:
    <ul>
      <li>It does improve robustness.</li>
      <li>Can choose tech most appropriate to the microservice load.</li>
    </ul></li>
  </ol></li>
  <li>CQRS: one of the hardest forms of scaling.</li>
  <li>Caching:
  <ul>
    <li>Improves robustness.</li>
    <li>Client-side:
    <ul>
      <li>Main issue is invalidation and consistency.</li>
      <li>Better latency.</li>
    </ul></li>
    <li>Server-side:
    <ul>
      <li>Main issue is that clients still need to make a network trip.</li>
      <li>Latency improved for all clients.</li>
    </ul></li>
    <li>Server to return TTL.</li>
    <li>Conditional GET (<a href="https://en.wikipedia.org/wiki/HTTP_ETag">ETag</a>).</li>
    <li>Notification (pub/sub):
    <ul>
      <li>Consider adding a heartbeat.</li>
    </ul></li>
    <li>The ideal number of places to cache is zero.</li>
  </ul></li>
  <li>At certain scaling points, you will need to rearchitect.</li>
</ul><h1><a name="p-3"></a>Part III - People</h1><h2><a name="ch-14"></a>Chapter 14 - User Interfaces</h2>
<ul>
  <li>Traditional reasons for dedicated FE teams:
  <ol>
    <li>Scarcity of specialist:
    <ul>
      <li>Share between teams:
      <ul>
        <li>Do the hard bits and teach the team to do the easy ones.</li>
        <li><a href="/2021/01/20/team-topologies-summary/#content">Enabling teams</a>.</li>
      </ul></li>
    </ul></li>
    <li>UI consistency:
    <ul>
      <li>Enabling teams.</li>
      <li><a href="https://uxdesign.cc/everything-you-need-to-know-about-design-systems-54b109851969">Design System</a>.</li>
    </ul></li>
    <li>Technical challenge:
    <ol>
      <li>Monolith FE.</li>
      <li>Micro FE:
      <ul>
        <li>Key problem: unlikely that 1 micro FE == 1 microservice, so micro FE ends up making multiple API calls to multiple BE services.</li>
        <li>2 types:
        <ol>
          <li>Page-based decomposition:
          <ul>
            <li>We&rsquo;ve lost a lot by automatically assuming that a web-based UI means a single-page app.</li>
            <li>Forward traffic to microservice/microFE depending on url.</li>
          </ul></li>
          <li>Widget-based decomposition:
          <ul>
            <li>Needs an assembly layer to pull the parts together.</li>
            <li>Options:
            <ul>
              <li>Iframes: issues with comms between widgets.</li>
              <li>Server-side templating.</li>
              <li>Dynamically inserted by the client.</li>
            </ul></li>
            <li>Issues:
            <ul>
              <li>Dependencies:
              <ul>
                <li>Great to upgrade one widget dependencies at a time.</li>
                <li>Duplication of libraries to download.</li>
              </ul></li>
              <li>Communication using custom events:
              <ul>
                <li>Same as event-driven communication patterns.</li>
              </ul></li>
            </ul></li>
          </ul></li>
        </ol></li>
      </ul></li>
      <li>Central aggregating gateway:
      <ul>
        <li>Often the central aggregating gateway does so much that ends up being owned by a dedicated team:
        <ul>
          <li>Potential contention and bottleneck.</li>
        </ul></li>
        <li>When customizing a product built by someone else, you have to work in their world.</li>
        <li>Strongly advise against using filtering and aggregation capabilities of dedicated gateway API.</li>
      </ul></li>
      <li>Backend for frontend (BFF):
      <ul>
        <li>Like (3) but one BFF per FE.</li>
        <li>FE and its BFF owned by same team and very coupled.</li>
        <li>One experience, one BFF.</li>
        <li>Consider BFF for external parties as a way to isolation APIs.</li>
      </ul></li>
      <li>GraphQL.</li>
    </ol></li>
  </ol></li>
</ul><h2><a name="ch-15"></a>Chapter 15 - Organizational Structures</h2>
<ul>
  <li>The biggest cost to working efficiently at scale is the need of coordination.</li>
  <li>Conways law, team API, platform team, enabling teams: <a href="/2021/01/20/team-topologies-summary/#content">Team Topologies</a>.</li>
  <li>Automation is key.</li>
  <li><a href="/2020/03/04/the-lean-mindset-summary/#content">Dunbar numbers</a>.</li>
  <li>Strong ownership can allow for more local variation than collective ownership.</li>
  <li>Collective ownership can allow for more standardization, hence easier to move people/work around.</li>
  <li>When creating an internal framework, it all starts with the best intentions.</li>
  <li>Avoid internal framework unless you&rsquo;ve exhausted your other options.</li>
  <li>Do code reviews promptly: pair programming FTW!</li>
  <li>Coming up with a vision without considering how your staff will feel about it and without considering what capabilities they have is likely to lead to a bad place.</li>
</ul><h2><a name="ch-16"></a>Chapter 16 - The Evolutionary Architect</h2>
<ul>
  <li>Architects and engineers have a rigor and discipline we could only dream of.</li>
  <li>Many forms of IT certification are worthless, as we know little about what &ldquo;good&rdquo; looks like.</li>
  <li>SW architects should focus on helping create a framework in which the right systems can emerge and continue to grow as we learn more.</li>
  <li>SW arch as a town planner. (Same analogy as in <a href="/2020/08/12/elements-of-clojure-book-summary/#content">Elements of Clojure</a>).</li>
  <li>Architecture is what happens, not what is planned.</li>
  <li>Habitability: is the characteristic of source code that enables programmers coming to the code later in its life to understand its construction and intentions and to change it comfortably and confidently.</li>
  <li>Strategic goals -&gt; Technical vision -&gt; Principles -&gt; Practices.</li>
  <li>Architects as an enabling team:
  <ul>
    <li>2-3 full time architects plus tech leads.</li>
  </ul></li>
  <li>Make Product Manager accountable for the technical quality of the system.</li>
  <li>Key things to standardize:
  <ul>
    <li>Monitoring.</li>
    <li>Interfaces between microservices.</li>
    <li>Architectural safety (error codes, circuit breakers, &hellip;).</li>
    <li>Governance:
    <ul>
      <li>Group activity, mostly people executing the work being governed.</li>
      <li>Examples.</li>
      <li>Microservices templates.</li>
    </ul></li>
  </ul></li>
</ul>]]></description></item><item><title>Book notes: Investments Unlimited, a novel about devops, security, audit compliance, and thriving in the Digital Age</title><link>https://danlebrero.com/2022/08/31/investments-unlimited-novel-security-devops-summary/</link><guid>https://danlebrero.com/2022/08/31/investments-unlimited-novel-security-devops-summary/</guid><pubDate>Wed, 31 Aug 2022 00:00:00 +0200</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/3KdOtZy">Investments Unlimited</a> by <a href="https://twitter.com/helenhappybee">Helen Beal</a>, <a href="https://twitter.com/BillBensing">Bill Bensing</a>, <a href="https://twitter.com/jasonacox">Jason Cox</a>, <a href="https://twitter.com/MichaelEdenzon">Michael Edenzon</a>, <a href="https://twitter.com/TopoPal">Dr. Tapabrata &ldquo;Topo&rdquo; Pal</a>, <a href="https://twitter.com/HttpSecHeaders">Caleb Queern</a>, <a href="https://www.linkedin.com/in/john-rzeszotarski-6113814/">John Rzeszotarski</a>, <a href="https://twitter.com/invariantly">Andres Vega</a>, and <a href="https://twitter.com/botchagalupe">John Willis</a>.</p><p>I thought that it was impossible for any book, but Investments Unlimited is as enjoyable and insightful as <a href="/2020/02/05/the-unicorn-project-summary/#content">The Unicorn Project</a>.</p><p>You can consider this book a sequel of what happens after adopting DevOps (and forgetting about Security/Audit/Compliance).</p><p>WARN: some dialogues will make you angry.</p><h1>Key Insights</h1>
<ul>
  <li>Governance is the process of identifying and making promises, and then checking that you keep those promises.</li>
  <li>Promises:
  <ul>
    <li>Good way to market any change management.</li>
    <li>Controls are very sterile but nobody wants to break a promise.</li>
  </ul></li>
  <li>Normalization of deviance: exceptions to process becoming the norm.</li>
  <li>Risk is increased by someone not familiar with the change putting the change in production:
  <ul>
    <li>Better is to enforce a peer review process.</li>
  </ul></li>
  <li><p>One could look at compliance and security features as non-functional requirements: Product Manager responsibility.</p>
  <blockquote>Software is not eating the world, it is infecting it <cite>Josh Corman, <a href="https://www.youtube.com/watch?v=jkoFL7hGiUk">Continuous Acceleration</a></cite>
  </blockquote></li>
  <li>Their processes reflect how you incentive them.</li>
  <li><a href="http://DearAuditor.org">DearAuditor.org</a></li>
  <li><a href="https://itrevolution.com/book/devops-automated-governance-reference-architecture/">Devops Automated Governance Reference Architecture</a>.</li>
  <li>The change process rigor was based on what happened historically, not the system needs.</li>
  <li>Subjectivity encourages lack of transparency and opinion-driven measures.</li>
  <li><a href="#thelinesmodel">Three Lines Model</a>.</li>
  <li>Policy as code!
  <ul>
    <li><a href="https://www.open-scap.org">Open Security Content Automation Protocol (OSCAP)</a>.</li>
    <li><a href="https://www.openpolicyagent.org">Open Policy Agent (OPA)</a>.</li>
  </ul></li>
  <li>Diffusion of responsibility: as the number of bystanders increases, the personal responsibility that an individual bystander feels decreases.
  <ul>
    <li>Open Source: Everybody assumes that someone else has checked the source.</li>
  </ul></li>
  <li>Change Advisor Board (CAB) as consulting partners, not approval authority.</li>
  <li>Where does it say the word &ldquo;automated&rdquo;?</li>
  <li>More important to have the evidence of what the team decided, than to be 100% compliant all the time.</li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#ch-0">Chapter 0 - Preface</a></li>
  <li><a href="#ch-1">Chapter 1 - Tuesday March 29th</a></li>
  <li><a href="#ch-2">Chapter 2 - Thursday, March 29th</a></li>
  <li><a href="#ch-3">Chapter 3 - Tuesday, April 5th</a></li>
  <li><a href="#ch-4">Chapter 4 - Wednesday, April 6th</a></li>
  <li><a href="#ch-5">Chapter 5 - Tuesday, April 19th</a></li>
  <li><a href="#ch-6">Chapter 6 - Tuesday, April 28th</a></li>
  <li><a href="#ch-7">Chapter 7 - Wednesday, May 18th</a></li>
  <li><a href="#ch-8">Chapter 8 - Monday, June 6th</a></li>
  <li><a href="#ch-9">Chapter 9 - Thursday 1st</a></li>
  <li><a href="#ch-10">Chapter 10 - Wednesday, September 21st</a></li>
  <li><a href="#ch-11">Chapter 11 - Thursday, October 1st</a></li>
  <li><a href="#ch-12">Chapter 12 - December 13th</a></li>
  <li><a href="#ch-13">Chapter 13 - February 7th</a></li>
  <li><a href="#ch-14">Epilogue</a></li>
</ul><h1><a name="ch-0"></a>Chapter 0 - Preface</h1>
<ul>
  <li>Governance, either:</li>
  <li>Anxiety, frustration, fear, anger.</li>
  <li>Control, peace, order, safety.</li>
  <li>Governance aims to safeguard what a company holds of value.</li>
</ul><h1><a name="ch-1"></a>Chapter 1 - Tuesday March 29th</h1>
<ul>
  <li>Chief Audit Executive and Chief Risk Officer role are highly interrelated and interdependent, so much that some orgs have merged into a single CRCO (Chief Risk and Compliance Officer).</li>
  <li>Product release deadlines always a higher priority: (╯°□°）╯︵ ┻━┻
  <ul>
    <li>VP of Product: &ldquo;We had no choice.&rdquo;</li>
  </ul></li>
  <li>She wasn&rsquo;t pleased by the blame that was being tossed around the room.</li>
  <li>VP Product: It takes forever to get features out. I don&rsquo;t know what our dev teams do all day.
  <ul>
    <li>VP Eng: Tech debt + urgent new features.</li>
    <li>Hire more engineers!</li>
  </ul></li>
  <li>CEO: what I need are solutions.</li>
</ul><h1><a name="ch-2"></a>Chapter 2 - Thursday, March 29th</h1>
<ul>
  <li>It always falls to Engineering to fix everything. (ノಠ益ಠ)ノ彡┻━┻</li>
  <li>Auditor role: compare what org says it should do to manage risk with what is actually done.</li>
  <li>Inconsistent process, ineffective in ensuring security and compliance, resulting in unauthorized and vulnerable SW with significant number of defects in production. (╯’□’)╯︵ ┻━┻</li>
  <li>Just mentioning the Governance, Risk and Compliance (GRC) system caused an audible groan in the room.</li>
  <li>Our best security advice mostly comes from internet searches. (ノ-_-)ノ ミ ┴┴</li>
  <li>Bits and pieces may work in silos, but it doesn&rsquo;t work as a full system.</li>
  <li>Backlogs were so back up that each backlog had a backlog item to review the backlog.</li>
  <li>Promises:
  <ul>
    <li>Good way to market any change management.</li>
    <li>Promises we are making to regulators and customers and to each other.</li>
    <li>Controls are very sterile but nobody wants to break a promise.</li>
  </ul></li>
  <li>People love to talk about themselves, especially when someone is listening to them moan about a problem:
  <ul>
    <li>Lead the conversation with empathy.</li>
    <li>Elicit fact from the complaining.</li>
  </ul></li>
  <li>Copious notes.</li>
</ul><h1><a name="ch-3"></a>Chapter 3 - Tuesday, April 5th</h1>
<ul>
  <li>It is amazing what happens when you can focus and finish a task.</li>
  <li>Subjective nature of how we create evidence. (ノ ゜Д゜)ノ ︵ ┻━┻</li>
  <li>Normalization of deviance: exceptions to process becoming the norm.</li>
  <li>We have clear and published guidelines:
  <ul>
    <li>But people just ignore them.</li>
  </ul></li>
  <li>We need segregation of duties: developers vs operations.
  <ul>
    <li>But in &ldquo;DevOps-fied&rdquo; teams everybody is a dev.</li>
    <li>Does not work: as risk is increased by someone not familiar with the change putting the change in production.</li>
    <li>Better is to enforce a peer review process.</li>
  </ul></li>
  <li>One could look at compliance and security features as non-functional requirements:
  <ul>
    <li>Product Manager responsibility.</li>
  </ul></li>
  <li><a href="https://amzn.to/3AJci8A">Build Trap</a>:
  <ul>
    <li>Only focus on features and neglect experimentation and learning (including learning how to work better).</li>
  </ul></li>
  <li>Change not only engineering but also business.</li>
</ul><h1><a name="ch-4"></a>Chapter 4 - Wednesday, April 6th</h1>
<ul>
  <li>Product Manager needs to manage upwards, sideways and downward.</li>
  <li><p><a href="http://blog.jabebloom.com/2020/03/04/the-three-economies-an-introduction/">The Three Economies</a>.</p>
  <blockquote>Software is not eating the world, it is infecting it <cite>Josh Corman, <a href="https://www.youtube.com/watch?v=jkoFL7hGiUk">Continuous Acceleration</a></cite>
  </blockquote></li>
  <li><p>Chronic conflicts between dev, ops and sec.</p></li>
  <li>Their processes reflect how you incentive them.</li>
  <li>Shift left: smart people defining and codifying the security and compliance policies, instead of manually checking screenshots.</li>
  <li>Compliance/Security as a product: how would you bring a product to market when you have no objective evidence the markets wants it but some qualitative evidence that it is desired?
  <ul>
    <li>Small, quick experiments, minimally viable products, to learn what and what doesn&rsquo;t work.</li>
  </ul></li>
</ul><h1><a name="ch-5"></a>Chapter 5 - Tuesday, April 19th</h1>
<ul>
  <li><a href="http://DearAuditor.org">DearAuditor.org</a></li>
  <li>Was never going to drag itself out of this mess without seeing Audit in a new light.</li>
  <li><a href="https://itrevolution.com/book/devops-automated-governance-reference-architecture/">Devops Automated Governance Reference Architecture</a>.</li>
  <li>First design the business process of automated governance, then do a tool and tech selection.</li>
  <li>Production Access Debt:
  <ul>
    <li>Every time a persistent production account is accessed, you add ten points. Each breakglass read account is one, each write account is five.</li>
    <li>Reduce points by:
    <ol>
      <li>Everything must be code:
      <ul>
        <li>Including infra and build/deploy pipelines.</li>
      </ul></li>
      <li>All logs must be streamed out.</li>
      <li>No system in production unless it has observability built in.</li>
    </ol></li>
  </ul></li>
  <li><a href="https://www.capitalone.com/tech/software-engineering/governance-in-a-devops-environment/">Governance in a DevOps environment</a>.</li>
</ul><h1><a name="ch-6"></a>Chapter 6 - Tuesday, April 28th</h1>
<ul>
  <li>Subjective change approval policies and processes. (┛ಸ_ಸ)┛彡┻━┻</li>
  <li>The change process rigor was based on what happened historically, not the system needs.</li>
  <li>No standardization because engineering inability to agree on a converted set of operation approaches.</li>
  <li>The Devops Automated Governance takes subjectivity and makes it objective.</li>
  <li>Subjectivity encourages lack of transparency and opinion-driven measures.</li>
</ul><h1><a name="ch-7"></a>Chapter 7 - Wednesday, May 18th</h1>
<ul>
  <li>Shift left on security: let risk management being in the developer&rsquo;s mind:
  <ul>
    <li>Seeking advice and input from Audit early in the process.</li>
  </ul></li>
</ul><h1><a name="ch-8"></a>Chapter 8 - Monday, June 6th</h1>
<ul>
  <li>Didn&rsquo;t care about how it was done; they only cared about the number of applications that were migrated onto the cloud. ( °□°) ︵ ┻━┻</li>
  <li>Governance is the process of identifying and making promises, and then checking that you keep those promises.</li>
  <li><a href="https://www.theiia.org/globalassets/site/about-us/advocacy/three-lines-model-updated.pdf">Three Lines Model</a>:<br/><div id="thelinesmodel"></div> <img src="/images/blog/books/investment-unlimited/three-lines-model.png" alt="Three lines model" />
  <ol>
    <li>First line (bank tellers, engineers):
    <ul>
      <li>Own and manage the risk associated with their responsibilities.</li>
      <li>Provide input into designing controls, as they execute them in a daily basis and knows what works.</li>
    </ul></li>
    <li>Second line (Risk management and compliance, Security):
    <ul>
      <li>Structure risk management framework.</li>
      <li>Decide on policies and controls.</li>
      <li>Monitors first line for following the policies and controls.</li>
    </ul></li>
    <li>Third line (assurance mechanism, Audit):
    <ul>
      <li>Asses if risk management approach is effective.</li>
    </ul></li>
  </ol></li>
  <li>Policy as code!
  <ul>
    <li><a href="https://www.open-scap.org">Open Security Content Automation Protocol (OSCAP)</a>.</li>
    <li><a href="https://www.openpolicyagent.org">Open Policy Agent (OPA)</a>.</li>
  </ul></li>
</ul><h1><a name="ch-9"></a>Chapter 9 - Thursday 1st</h1>
<ul>
  <li>Diffusion of responsibility: as the number of bystanders increases, the personal responsibility that an individual bystander feels decreases.
  <ul>
    <li>Open Source:
    <ul>
      <li>Everybody assumes that someone else has checked the source.</li>
      <li>Hence, OS is not more secure than closed source.</li>
    </ul></li>
  </ul></li>
</ul><h1><a name="ch-10"></a>Chapter 10 - Wednesday, September 21st</h1>
<ul>
  <li>Software bill of materials: all the components you use to build your software:
  <ul>
    <li>Easily find out which code/product is using a particular library version.</li>
    <li><a href="https://owasp.org/www-project-dependency-track/">OWASP Dependency Track</a>.</li>
  </ul></li>
</ul><h1><a name="ch-11"></a>Chapter 11 - Thursday, October 1st</h1>
<ul>
  <li>Publish non-compliant artefacts and break at deploy time:
  <ul>
    <li>This allows for break-glass scenarios where someone has to accept the risk of deploying a non-compliant deploy.</li>
  </ul></li>
  <li>If a change is 100% compliant, lets eliminated CAB (change advisor board):
  <ul>
    <li>CAB as consulting partners, not approval authority.</li>
  </ul></li>
</ul><h1><a name="ch-12"></a>Chapter 12 - December 13th</h1>
<ul>
  <li>Where does it say the word &ldquo;automated&rdquo;?</li>
</ul><h1><a name="ch-13"></a>Chapter 13 - February 7th</h1>
<ul>
  <li>Guiding policies:
  <ol>
    <li>If the rest of the policies are abided by, then you can bypass manual change approval process and go straight to production.</li>
    <li>Complete automation for capturing evidence of quality, risk mitigation, and compliance. Only manual process is peer-review.</li>
    <li>Security and compliance are as important as functional requirements. Security, Risk, Compliance and Audit must identify requires from day one.</li>
    <li>Software budget: to track deficit in quality, risk, compliance and audit. When budget is depleted, no more feature work is allowed.</li>
  </ol></li>
  <li>Bring authority to information, not the other way around.</li>
  <li>Security is responsibility of those building the SW.</li>
  <li>More important to have the evidence of what the team decided, than to be 100% compliant all the time.</li>
</ul><h1><a name="ch-14"></a>Epilogue</h1>
<ul>
  <li>When done well, tech and security cannot be seen from the outside.</li>
  <li>Every business was truly a technology business and every business leader was a technology leader.</li>
  <li><a href="https://www.devsecops.org">DevSecOps.org</a></li>
</ul>]]></description></item><item><title>Book notes: Remote Team Interactions Workbook: Using Team Topologies Patterns for Remote Working </title><link>https://danlebrero.com/2022/07/20/team-topologies-remote-team-interactions-workbook-summary/</link><guid>https://danlebrero.com/2022/07/20/team-topologies-remote-team-interactions-workbook-summary/</guid><pubDate>Wed, 20 Jul 2022 00:00:00 +0200</pubDate><description><![CDATA[<p>These are my notes on <a href="https://twitter.com/matthewpskelton">Matthew Skelton</a> and <a href="https://twitter.com/manupaisable">Manuel Pais</a>&rsquo;s <a href="https://amzn.to/3claIjE">Remote Team Interactions Workbook: Using Team Topologies Patterns for Remote Working </a>.</p><p>A <a href="/2021/01/20/team-topologies-summary/#content">Team Topologies</a> companion with homework to map your current team topologies, and useful advise for remote work.</p><p>Thanks to <a href="https://itrevolution.com">ITRevolution</a> for the complimentary copy!</p><h1>Key Insights</h1>
<ul>
  <li>Physical office was covering up poorly defined teams and poorly defined ares of focus.</li>
  <li>In a remote work setting, it is vital to &ldquo;over communicate&rdquo;.</li>
  <li>In remote settings, keep it shorter and sharper: it&rsquo;s harder to hold people&rsquo;s attention remotely.</li>
  <li>Facilitating interaction longer than a few weeks suggests something isn&rsquo;t quite right.</li>
  <li>In the context of remote work, it is too easy to accidentally fall into a swamp of direct private messages.</li>
</ul><h1>Homework</h1>
<ul>
  <li><a href="https://github.com/TeamTopologies/Team-API-Template">Define your Team API</a>.</li>
  <li><a href="https://github.com/TeamTopologies/Team-Dependencies-Tracking">Track team dependencies</a>.</li>
  <li>Start a network-building event: communities of practice, internal tech events, lunchtime talks, coffee breaks.</li>
  <li><a href="https://github.com/TeamTopologies/Trust-Boundaries-Template">Trust boundaries assessment</a>.</li>
  <li><a href="https://github.com/TeamTopologies/Online-Space-Assessment">Online space assessment</a>.</li>
  <li><a href="https://github.com/TeamTopologies/Team-Cognitive-Load-Assessment">Cognitive load assessment/Internal platform survey</a>.</li>
</ul><h1><a name="ch-0"></a>Preface</h1>
<ul>
  <li>Physical office was covering up poorly defined teams and poorly defined ares of focus.</li>
  <li>A successful remote-first approach requires the explicit design of communication between teams using physical and online spaces.</li>
</ul><h2><a name="ch-1"></a>Chapter 1 - Overview - Focus on Remote Team Interactions</h2>
<ul>
  <li>Google&rsquo;s <a href="https://rework.withgoogle.com/guides/understanding-team-effectiveness/steps/identify-dynamics-of-effective-teams/">five keys</a> to successful teams:
  <ol>
    <li>Psychological safety.</li>
    <li>Dependability.</li>
    <li>Structure and clarity.</li>
    <li>Meaning.</li>
    <li>Impact.</li>
  </ol></li>
  <li><a href="https://github.com/TeamTopologies/Team-Cognitive-Load-Assessment">Cognitive load assessment</a>:
  <ul>
    <li>This is something the platform team should use as a KPI.</li>
  </ul></li>
  <li>Problematic dependency between teams, symptoms:
  <ul>
    <li>Delays.</li>
    <li>Increase WIP.</li>
    <li>Unpredictability.</li>
  </ul></li>
  <li>Instead of waiting, focus on tracking and then removing the in-flow dependencies.
  <ul>
    <li><a href="https://amzn.to/3aKJS3T">Making Work Visible</a> by Dominca De Grandis.</li>
  </ul></li>
  <li>In a remote work setting, it is vital to &ldquo;over communicate&rdquo;:
  <ul>
    <li>What, why, how, when will be done.</li>
  </ul></li>
</ul><h1><a name="ch-2"></a>Chapter 2: Team Dependencies</h1>
<ul>
  <li>Techniques to track and manage inter-team dependencies, to promote healthy ones, and minimize others.</li>
  <li>Team API:
  <ul>
    <li>For remote teams, especially important:
    <ul>
      <li>Road map: how to notify changes?</li>
      <li>Communication preferences:
      <ul>
        <li>Channel, schedule.</li>
        <li>Expected response time.</li>
      </ul></li>
    </ul></li>
    <li><a href="https://github.com/TeamTopologies/Team-API-Template">Template</a></li>
  </ul></li>
  <li>Dependencies can never be fully eradicated.</li>
  <li>Not all dependencies are the same:
  <ul>
    <li>Blocking vs non-blocking.</li>
    <li>Healthy vs unhealthy.</li>
    <li>Frequent vs infrequent.</li>
  </ul></li>
  <li>Tracking dependencies:
  <ul>
    <li>Add dependency tag to stories.</li>
    <li><a href="https://youtu.be/faKSg7iLigw?t=2479">Physical dependency matrix</a>.</li>
    <li>Dependency swimlane board:
    <ul>
      <li>Add a specific lane to your Kanban board with the tasks that depend on other teams.</li>
    </ul></li>
    <li><a href="https://github.com/TeamTopologies/Team-Dependencies-Tracking">Simple table</a>.</li>
  </ul></li>
  <li>Internal network:
  <ul>
    <li>Virtual coffee.</li>
    <li>Internal conference.</li>
    <li>Communities of Practice.</li>
    <li>Brown bag sessions.</li>
    <li>Enabling teams.</li>
  </ul></li>
  <li>Keep it shorter and sharper: it&rsquo;s harder to hold people&rsquo;s attention remotely.</li>
</ul><h1><a name="ch-3"></a>Chapter 3: Setting Team Boundaries</h1>
<ul>
  <li>Group trust boundaries:
  <ul>
    <li><a href="https://danlebrero.com/2020/03/04/the-lean-mindset-summary/">Dunbar numbers</a>.</li>
    <li>Groups slightly smaller than the trust boundary are likely to have good trust. Larger than are likely to have trust issues and are candidate to splitting into smaller groups.</li>
    <li>When the size of an online space reaches a trust boundary, create a new space.</li>
    <li>Online space aligned to flow of change.</li>
    <li>Optimize for trust within online spaces.</li>
  </ul></li>
  <li>Chat tools:
  <ul>
    <li>Standardise channel names:
    <ul>
      <li>TeamType_TeamName.</li>
      <li>Team_InteractionMode_Team.</li>
    </ul></li>
    <li>People name to include team they belong to.</li>
    <li>Explicit etiquette.</li>
  </ul></li>
</ul><h2><a name="ch-4"></a>Chapter 4: Purposeful Interactions</h2>
<ul>
  <li>Facilitating interaction longer than a few weeks suggests something isn&rsquo;t quite right.</li>
  <li>Difficulties or awkwardness in team interactions can be used as a kind of sensing mechanism to help evolve the org.</li>
  <li>Focus on flow.</li>
  <li>In the context of remote work, it is too easy to accidentally fall into a swamp of direct private messages.</li>
  <li>Define usage guidelines for Slack/Teams/&hellip;</li>
  <li>Curate the chat workspace.</li>
</ul><h1><a name="ch-5"></a>Chapter 5: Next steps</h1>
<ul>
  <li><a href="https://ITRev.io/EngExpFeedback">Internal Platform survey</a>.</li>
  <li>Internal personas.</li>
  <li>Naming and usage for chat tools: don&rsquo;t attempt to design everything upfront, allow some patterns to emerge.</li>
  <li>Expect rework.</li>
</ul>]]></description></item><item><title>Book notes: An Elegant Puzzle: Systems of Engineering Management</title><link>https://danlebrero.com/2022/07/06/an-elegant-puzzle-systems-of-engineer-management-book-summary/</link><guid>https://danlebrero.com/2022/07/06/an-elegant-puzzle-systems-of-engineer-management-book-summary/</guid><pubDate>Wed, 06 Jul 2022 00:00:00 +0200</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/3tvRUEL">An Elegant Puzzle: Systems of Engineering Management</a> by <a href="https://twitter.com/Lethain">Will Larson</a>.</p><h1>Key Insights</h1>
<ul>
  <li>Managers should support 6-8 engineers.</li>
  <li>Managers of mangers should support 4-6 managers.</li>
  <li>Tech lead is a role with limited career opportunities: too little management and too little technical.</li>
  <li>Teams smaller than 4 are not teams.</li>
  <li>On hiring, fix one team at a time, not a bit on each.</li>
  <li>Move work, not people.</li>
  <li>States of a team:
  <ol>
    <li>Falling behind:
    <ul>
      <li>Backlog growing, low morale, hard work but little progress.</li>
      <li>Solution: hire more people.</li>
      <li>Tactical support:
      <ul>
        <li>Setting user expectations.</li>
        <li>Quick wins (for morale).</li>
      </ul></li>
    </ul></li>
    <li>Threading water:
    <ul>
      <li>Critical work gets done but no innovation or paying technical debt.</li>
      <li>Solution: reduce WIP.</li>
      <li>Tactical support: from personal to team view on productivity.</li>
    </ul></li>
    <li>Repaying debt:
    <ul>
      <li>Compounding effect.</li>
      <li>Solution: find time to continue.</li>
      <li>Tactical support: ensure enough delivery to keep users happy.</li>
    </ul></li>
    <li>Innovating:
    <ul>
      <li>Solution: Enough slack.</li>
      <li>High performing teams are sacred.</li>
      <li>Tactical support: ensure work is valued.</li>
    </ul></li>
  </ol></li>
  <li>Key tools for leading change:
  <ol>
    <li>Systems thinking.</li>
    <li>Metrics.</li>
    <li>Vision.</li>
  </ol></li>
  <li>Folks universally want to be responsible.</li>
</ul>
<table>
  <thead>
    <tr>
      <th> </th>
      <th>Strategy </th>
      <th>Vision </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Purpose </td>
      <td>Approach to a specific challenge </td>
      <td>A gentle, aligning pressure </td>
    </tr>
    <tr>
      <td>Character </td>
      <td>Practical </td>
      <td>Aspirational </td>
    </tr>
    <tr>
      <td>Time Frame </td>
      <td>Variable </td>
      <td>Long-term </td>
    </tr>
    <tr>
      <td>Specificity </td>
      <td>Accurate, detailed </td>
      <td>Illustrative, directional </td>
    </tr>
    <tr>
      <td>Quantity </td>
      <td>As many as useful </td>
      <td>As few as possible </td>
    </tr>
  </tbody>
</table>
<ul>
  <li>The fact that something stops working at significantly increased scale is a sign that it was designed appropriately to the previous constraints rather than being over-designed.</li>
  <li>Most poor working relationships are the by-product of information gaps.</li>
  <li>Prioritize long-term success over short-term quality.</li>
  <li>Bad policy is one that does little constraint.</li>
  <li>Policies are hard to enforce because:
  <ul>
    <li>Reduce opportunities.</li>
    <li>Are a local suboptimal.</li>
  </ul></li>
  <li>With the right people, any process works, and with the wrong people, no process works.</li>
  <li><a href="#errors">Typical errors as a manager</a>.</li>
  <li>Growth only comes from change, and that is something you can influence.</li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#ch-2">Chapter 2 - Organizations</a></li>
  <li><a href="#ch-3">Chapter 3 - Tools</a></li>
  <li><a href="#ch-4">Chapter 4 - Approaches</a></li>
  <li><a href="#ch-5">Chapter 5 - Culture</a></li>
  <li><a href="#ch-6">Chapter 6 - Careers</a></li>
  <li><a href="#ch-7">Chapter 7 - Appendix</a></li>
</ul><h1><a name="ch-2"></a>Chapter 2 - Organizations</h1>
<ul>
  <li>Sizing teams:
  <ul>
    <li>The fundamental challenge of organizational design.</li>
    <li>Managers should support 6-8 engineers:
    <ul>
      <li>Less == tech lead.
      <ul>
        <li>It is a role with limited career opportunities:
        <ul>
          <li>Too little management and too little technical.</li>
        </ul></li>
      </ul></li>
      <li>More == coach.</li>
    </ul></li>
    <li>Managers of mangers should support 4-6 managers:
    <ul>
      <li>Less == underutilized, tempted to create their own work.</li>
      <li>More == coach.</li>
    </ul></li>
    <li>On-call requires 8 engineers.</li>
    <li>Teams smaller than 4 are not teams.</li>
  </ul></li>
  <li>Staying on the path to high-performing teams.
  <ul>
    <li>States of a team:
    <ol>
      <li>Falling behind:
      <ul>
        <li>Backlog growing, low morale, hard work but little progress.</li>
        <li>Solution: hire more people.</li>
        <li>Tactical support:
        <ul>
          <li>Setting user expectations.</li>
          <li>Quick wins (for morale).</li>
        </ul></li>
      </ul></li>
      <li>Threading water:
      <ul>
        <li>Critical work gets done but no innovation or paying technical debt.</li>
        <li>Solution: reduce WIP.</li>
        <li>Tactical support: from personal to team view on productivity.</li>
      </ul></li>
      <li>Repaying debt:
      <ul>
        <li>Compounding effect.</li>
        <li>Solution: find time to continue.</li>
        <li>Tactical support: ensure enough delivery to keep users happy.</li>
      </ul></li>
      <li>Innovating:
      <ul>
        <li>Solution: Enough slack.</li>
        <li>High performing teams are sacred.</li>
        <li>Tactical support: ensure work is valued.</li>
      </ul></li>
    </ol></li>
    <li>Slow process to move between stages.</li>
    <li>On hiring, fix one team at a time, not a bit on each.</li>
    <li>Move work, not people.</li>
    <li>Gatekeeper antipattern:
    <ul>
      <li>Having humans who perform gatekeeping activities creates very odd social dynamics, and is rarely a great use of a human&rsquo;s time.</li>
    </ul></li>
    <li>If you are overwhelmed with possible areas of improvements, agree with your manager on an explicit plan, and give yourself permission to do the rest poorly.</li>
    <li>Plan your succession: Page 53.</li>
  </ul></li>
</ul><h1><a name="ch-3"></a>Chapter 3 - Tools</h1>
<ul>
  <li>Key tools for leading change:
  <ol>
    <li>Systems thinking.</li>
    <li>Metrics.</li>
    <li>Vision.</li>
  </ol></li>
  <li>Basic product management:
  <ol>
    <li>Explore problems to solve:
    <ul>
      <li>User&rsquo;s pain.</li>
      <li>User&rsquo;s purpose.</li>
      <li>Competition.</li>
      <li>User cohorts.</li>
      <li>Further competitive advantages.</li>
    </ul></li>
    <li>Problem selection:
    <ul>
      <li>Consider different time frames.</li>
      <li>Industry trends.</li>
      <li>ROI.</li>
    </ul></li>
    <li>Solution validation:
    <ul>
      <li>Write an announcement letter.</li>
      <li>Prior art.</li>
      <li>User switching costs.</li>
      <li>Find an early adopter.</li>
      <li>It is far more reliable to get good at cheap validation than it is to get great at picking the right solution.</li>
    </ul></li>
  </ol></li>
</ul>
<table>
  <thead>
    <tr>
      <th> </th>
      <th>Strategy </th>
      <th>Vision </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Purpose </td>
      <td>Approach to a specific challenge </td>
      <td>A gentle, aligning pressure </td>
    </tr>
    <tr>
      <td>Character </td>
      <td>Practical </td>
      <td>Aspirational </td>
    </tr>
    <tr>
      <td>Time Frame </td>
      <td>Variable </td>
      <td>Long-term </td>
    </tr>
    <tr>
      <td>Specificity </td>
      <td>Accurate, detailed </td>
      <td>Illustrative, directional </td>
    </tr>
    <tr>
      <td>Quantity </td>
      <td>As many as useful </td>
      <td>As few as possible </td>
    </tr>
  </tbody>
</table>
<ul>
  <li>Goals decouple the &ldquo;what&rdquo; from the &ldquo;how&rdquo;.</li>
  <li>Good goals have 4 numbers:
  <ol>
    <li>Target.</li>
    <li>Baseline.</li>
    <li>Trend.</li>
    <li>Time frame.</li>
  </ol>
  <ul>
    <li>Answer:
    <ol>
      <li>How ambitious the goal is.</li>
      <li>When it is achieved.</li>
    </ol></li>
    <li>Set constraints: investment, baselines that should not change.</li>
  </ul></li>
  <li>Metrics are an effective way to lead change with little or no organizational authority:
  <ul>
    <li>The most general and self-managing tool is bench marking (against other teams).</li>
    <li>Nudge teams into action by pushing notifications.</li>
    <li>Folks universally want to be responsible.</li>
  </ul></li>
  <li>The fact that something stops working at significantly increased scale is a sign that it was designed appropriately to the previous constraints rather than being over-designed.</li>
  <li>Migrations are the only mechanism to effectively manage technical debt.</li>
  <li>Reorgs:
  <ul>
    <li>Is it going to solve an already existing and not temporal structural problem?</li>
    <li>Use a years out head count, to avoid yearly reorgs.</li>
    <li>Put teams that work together (especially poorly) as close together as possible. This minimizes distance from escalation during disagreements, allowing arbiters to have sufficient context.</li>
  </ul></li>
  <li>Most poor working relationships are the by-product of information gaps.</li>
  <li>Career progression:
  <ol>
    <li>Identify your 3-5 years goal.</li>
    <li>Identify gaps in your skills to achieve that goal.</li>
    <li>Pick a few to focus for the next 3-6 months.</li>
    <li>Agree on action plan with manager.</li>
  </ol></li>
  <li>Model, document, share:
  <ul>
    <li>Approach to leadership without authority.</li>
    <li>Model:
    <ol>
      <li>Baseline.</li>
      <li>Try it long enough as an experiment.</li>
    </ol></li>
    <li>Document:
    <ul>
      <li>The problem solved.</li>
      <li>Learning.</li>
      <li>Detailed approach.</li>
    </ul></li>
    <li>Share:
    <ul>
      <li>Don&rsquo;t lobby for changes, just present.</li>
    </ul></li>
  </ul></li>
  <li>Designing centralized decision-making groups:
  <ul>
    <li>Aim to increase positive freedom, while not reducing negative freedom.</li>
    <li>Decide:
    <ol>
      <li>Influence: advisory &lt;&ndash;&gt; authoritarian.</li>
      <li>Interface: ticket, email, weekly review sessions.</li>
      <li>Size.</li>
      <li>Time commitment.</li>
      <li>Identity: small teams and high time commitment are required for shifting identity to this group. If you want this.</li>
      <li>Selection process.</li>
      <li>Length of term.</li>
      <li>How representative will this group be?</li>
    </ol></li>
    <li>Failure modes:
    <ul>
      <li>Domineering.</li>
      <li>Bottlenecked.</li>
      <li>Status oriented.</li>
      <li>Inert.</li>
    </ul></li>
  </ul></li>
  <li>Presenting to senior leadership: Page 104.</li>
  <li>Time management:
  <ul>
    <li>Reflect on how you spend your time.</li>
    <li>Prioritize long-term success over short-term quality.</li>
    <li>Stop doing things, and then alert your team and management.</li>
  </ul></li>
  <li>Communities of learnings:
  <ol>
    <li>Few minutes of content, then move to discussion.</li>
    <li>Discuss in groups of 4-5.</li>
    <li>Regroup and share learnings per group.</li>
  </ol>
  <ul>
    <li>Pick topics people already know about.</li>
  </ul></li>
</ul><h1><a name="ch-4"></a>Chapter 4 - Approaches</h1>
<ul>
  <li>Policies:
  <ul>
    <li>To bring consistency == fairness.</li>
  </ul>
  <ol>
    <li>Define goals.</li>
    <li>Defines constraints that support those goals.</li>
  </ol>
  <ul>
    <li>Bad policy is one that does little constraint.</li>
    <li>Policies are hard to enforce because:
    <ul>
      <li>Reduce opportunities.</li>
      <li>Are a local suboptimal.</li>
    </ul></li>
    <li>Avoid exceptions:
    <ol>
      <li>Collect escalations and exception requests.</li>
      <li>Periodically, review policy with (1) in mind.</li>
    </ol></li>
  </ul></li>
  <li>How to say no to more work:
  <ol>
    <li>Explain current velocity and its constraint. Outcome, either:
    <ol>
      <li>You get more resources.</li>
      <li>Move to prioritization vs current work.</li>
    </ol></li>
    <li>Prioritization vs current work:
    <ol>
      <li>Document all incoming tasks.</li>
      <li>Develop guiding principles on how work is selected.</li>
      <li>Show selected list.</li>
      <li>Compare new work against principles and selected list.</li>
    </ol></li>
  </ol></li>
  <li>Almost every internal problem can be traced back to a missing or poor relationship:
  <ul>
    <li>Start debugging problems from the relationship angle.</li>
  </ul></li>
  <li>With the right people, any process works, and with the wrong people, no process works.</li>
  <li>When:
  <ul>
    <li>Rapid growing: execution is more important than new ideas.</li>
    <li>Stabilized: ideas &gt; execution.</li>
  </ul></li>
  <li><p id="errors"/>Typical errors as a manager:
  <ul>
    <li>Junior:
    <ul>
      <li>Only manage down.</li>
      <li>Only manage up.</li>
      <li>Never manage up.</li>
      <li>Optimize locally.</li>
      <li>Assume hiring never solves any problem.</li>
      <li>Not spending time building relationships.</li>
      <li>Define their role too narrowly</li>
      <li>Forget your manager is a human being.</li>
    </ul></li>
    <li>More experienced:
    <ul>
      <li>Do what worked in previous company.</li>
      <li>Spend too much time building relationships.</li>
      <li>Assume hiring can solve any problem.</li>
      <li>Abscond rather than delegate.</li>
      <li>Become disconnected from ground truth.</li>
    </ul></li>
    <li>Both:
    <ul>
      <li>Mistake team size for impact.</li>
      <li>Mistake title for impact.</li>
      <li>Confuse authority with truth.</li>
      <li>Dont trust the team enough to delegate.</li>
      <li>Let other people manage your time.</li>
      <li>Only see problems and not celebrate successes.</li>
    </ul></li>
  </ul></li>
  <li>To grow as a manager, purse growth in scope rather than # people you manage.</li>
</ul><h1><a name="ch-5"></a>Chapter 5 - Culture</h1>
<ul>
  <li>To make your peers your team:
  <ol>
    <li>Must be aware of each others work.</li>
    <li>Know at a personal level.</li>
    <li>Somebody must act as a referee.</li>
    <li>Avoid zero-sum culture.</li>
    <li>Make it explicit.</li>
  </ol></li>
</ul><h1><a name="ch-6"></a>Chapter 6 - Careers</h1>
<ul>
  <li>Growth only comes from change, and that is something you can influence.</li>
  <li>Interview process:
  <ol>
    <li>Be kind.
    <ul>
      <li>Budget enough time.</li>
    </ul></li>
    <li>Agree with interviews on role&rsquo;s requirements.</li>
    <li>Understand the signal your interview is checking for.</li>
    <li>Come prepared.</li>
    <li>Deliberately express interest:
    <ul>
      <li>Get every interviewer to send a note saying that they enjoyed the interview (with an explanation).</li>
    </ul></li>
    <li>Feedback loops:
    <ul>
      <li>Training new interviews.</li>
      <li>Candidate to interview designer.</li>
      <li>Interviewers to interview designer.</li>
    </ul></li>
  </ol></li>
  <li>Performance management systems are the most valuable entry point to shape company&rsquo;s culture, inclusion and performance.</li>
  <li>Moving away from generalized roles and towards specialists, creates a more brittle organization.</li>
</ul><h2><a name="ch-7"></a>Chapter 7 - Appendix</h2>
<ul>
  <li>Teams and orgs have very limited appetite for new process: roll out one change at a time.</li>
  <li>Sprints work well if:
  <ul>
    <li>Team knows:
    <ul>
      <li>What they should be working on.</li>
      <li>Can determine if the work is complete.</li>
      <li>Knows how to figure out what to work on next.</li>
    </ul></li>
    <li>Stakeholders:
    <ul>
      <li>Can learn what the team is working on.</li>
      <li>Can learn what the team plans to work on next.</li>
      <li>Know how to influence the team&rsquo;s plans.</li>
    </ul></li>
    <li>Middle management: focus on roadmaps.</li>
  </ul></li>
</ul>]]></description></item><item><title>Application configuration good practices </title><link>https://danlebrero.com/2022/06/29/application-configuration-good-practices/</link><guid>https://danlebrero.com/2022/06/29/application-configuration-good-practices/</guid><pubDate>Wed, 29 Jun 2022 00:00:00 +0200</pubDate><description><![CDATA[<p>As an aftermath of our last production incident, here are a bunch of application configuration practices that have worked well enough for me over the years:</p>
<ol>
  <li>Version controlled.</li>
  <li>Self-service.</li>
  <li>Restricted secrets.</li>
  <li>Default to production.</li>
  <li>Fail fast.</li>
  <li>No logic.</li>
  <li>Staging == production.</li>
  <li>Avoid &ldquo;isDevEnv?&rdquo;</li>
  <li>Preconfigured local dev.</li>
  <li>Minimal.</li>
</ol><h2>Version controlled</h2><p>Same as code and infrastructure, configuration should be version controlled, so that you know who, when, how, why and what, and changes can be easily reviewed and rolled back.</p><h2>Self-service</h2><p>Ticketing systems to change configuration in production? Meh.</p><p>The team owning the service is already making any code changes that they want, so allowing them to change some configuration is not riskier.</p><p>If you really need gatekeeping, the owning team should be able to create pull requests with the required changes for the gatekeepers to approve/merge, reducing the chances of miscommunication.</p><h2>Restricted secrets</h2><p>Secrets that everybody can read are no secrets. Reduce your risks by restricting who can see and change which secrets.</p><h2>Default to production</h2><p>When adding some new configuration, always set the default to the production value.</p><p>This will avoid the most common issue with configuration: “Oh, the app does not start because we forgot to set the configuration for …” </p><p>And never ever default to some dev or testing value. Never ever.</p><p>Obviously, only default if it is safe. You don’t want to be sending emails to your real clients, connecting to your production data stores and such if some dev forgets to configure their local environment properly. </p><p>If not safe, the safe value is no default. In this case, add the production configuration as soon as possible. Do not wait for the code release. </p><h2>Fail fast</h2><p>Validate the configuration at start time, and crash the application if any value is missing or it has the wrong type.</p><h2>No logic</h2><p>Avoid any logic related to manipulating configuration, like string manipulation, url building or splitting. </p><p>It is less likely that you are be able to test it, and if the logic fails in production it will be harder to find out, especially for secret values.</p><h2>Staging == production</h2><p>The principle to make staging as similar as production includes configuration.</p><p>Especially important if you broke the “no logic” principle.</p><h2>Avoid “isDevEnv?”</h2><p>All config usually start with a simple “environment” configuration variable, that will sprinkle your codebase with “isDevEnv?” conditionals.</p><p>But soon enough, your app will be run in new environments (CI, test, staging, demo, training, load testing, hotbugfix-33, KafkaPoC, other team&rsquo;s local dev) and it will not be so clear what is dev and what is not.</p><p>So prefer explicit configuration variables to avoid implicit coupling of a bunch of behaviors to one configuration variable. </p><h2>Preconfigured local dev</h2><p>A big chunk of your configuration exists just for the local development environment, so given that most configuration is going to default to production values, it is important to make it easy to set up, add and update that configuration in every developer’s box.</p><p>My preferred approach is still a <a href="/2017/09/01/a-docker-compose-environment/#content">dockerized local environment</a>.</p><h2>Minimize configuration</h2><p>Less config, less chance for bugs. Same as code! <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">YAGNI</a>!</p>
<hr/><p>In case you wonder, in our production incident we committed three sins: defaulted to a dev value, logic in config, and staging different from production.</p><p>Why sin once when you can do it thrice for the same price?</p>]]></description></item><item><title>Schrödinger's functions: not the pure functions your are looking for </title><link>https://danlebrero.com/2022/06/01/pure-vs-impure-functions-schrodinger-functions/</link><guid>https://danlebrero.com/2022/06/01/pure-vs-impure-functions-schrodinger-functions/</guid><pubDate>Wed, 01 Jun 2022 09:00:00 +0200</pubDate><description><![CDATA[<p>Reading <a href="https://www.juxt.pro/blog/abstract-clojure">Abstract Clojure</a> fills me with angst.</p><p>The article ends up with the following design:</p><p><img src="/images/blog/abstract-clojure/final-design.png" alt="final design" /></p><p>I see that diagram and my reptilian brain just wants to run away and hide: this is no different from what my Java looked like ten years ago.</p><p>Is this design the best we can do for &ldquo;large&rdquo; applications? And if this is the case, why did I bother with Clojure?</p><h2>Pure functions</h2><p>To make your code more maintainable, a useful principle is to build your application mostly from pure functions, minimizing side-effecting code.</p><p>Pure functions are amazing as they are easier to understand than side-effecting code, hence easier to change.</p><p>Two reasons:</p>
<ol>
  <li>Their context is limited to their parameters: no need to worry about global variables or the database state.</li>
  <li>They are deterministic: for a given set of parameters, they always always always always return the same result. Always.</li>
</ol><p>An important side effect of these reasons is that, while you are trying to understand a pure function, you can stop at any layer down the call stack knowing no surprise is lurking further down, making it easier to understand the function.</p><h2>From impure to pure code</h2><p>As pure functions are important, let&rsquo;s see how to build them.</p><p>We start with a prototypical web controller that calls the database to do its job:</p>
<pre><code>(ns app.server
    (:require [app.db :as db]))

(defn get-article [data-source request]
    (let [id (get-in request [:path-params :id])
          article (db/get-article-by-id data-source id)] ;; &lt;&lt;-- PURE EVIL!!! Or should I say IMPURE EVIL?
        {:status 200
         :body article}))
</code></pre><p>The function <code>get-article</code> is not pure as it is not deterministic. Two consecutive calls to <code>get-article</code> can return completely different responses:</p>
<ol>
  <li>Nothing if the article does not exist yet.</li>
  <li>A version of the article.</li>
  <li>Another version of the article, if there has been some write between the two calls.</li>
  <li>An error if the database is down.</li>
  <li>May never finish the execution, if you forgot to <a href="/2019/12/11/apache-http-client-timeouts-config-production-asynchronous-http-client-pictures/#content">set your timeouts</a>.</li>
</ol><p>To smite this evil, Abstract Clojure tells us to add one level of indirection, by passing a function or protocol instead of the <code>data-source</code>, so that the <code>get-article</code> function is decoupled from the <code>database</code> namespace/package:</p>
<pre><code>(defprotocol ArticleRepository
    (create [_ article])
    (get-by-id [_ id])
    ,,,)

(defn get-article [article-repository request]
    (let [id (get-in request [:path-params :id])
          article (article-repository/get-by-id article-repository id)] ;; &lt;&lt;-- Beautiful!
        {:status 200
         :body article}))
</code></pre><p>And with this, our <code>get-article</code> function becomes pure. Victory!</p><p>Or not?</p><h2>Schrödinger&rsquo;s functions</h2><p>That last version of <code>get-article</code> makes me doubt.</p>
<blockquote><p>If a tree falls in a forest and no one is around to hear it, does it make a sound?</p>
</blockquote><p>Sorry, I meant:</p>
<blockquote><p>If a pure function is passed an impure function at runtime, does it make it impure?</p>
</blockquote><p><code>get-article</code> can be passed a pure or an impure function, so is <code>get-article</code> a Schrödinger&rsquo;s function? One that is sometimes pure while others is impure, and to find out you need to open the box and look into the implementation details of the <code>article-repository</code> passed as a parameter?</p><p>Before digging more into philosophy or quantum mechanics, let’s see if a statically typed language can shed some light:</p>
<pre><code class="text">find some **obvious** Haskell IO monad example and paste here
</code></pre><p>If that simple piece of monadic Haskell did not make sense, let me explain with some good old Java:</p>
<pre><code class="Java">public interface ArticleRepository {
    String createArticle(Article article);
    Article getById(String id);
}

class ArticleController {
    public HttpResponse getArticle(ArticleRepository articleRepository, HttpRequest request) {
        String id = request.getParams().get(&quot;id&quot;);
        Article article = articleRepository.getById(id);
        return HttpResponse.withStatus(200).withBody(article);
    }
}
</code></pre><p>So far, our non-idiomatic non-monadic Java does not help, but before complaining about Java’s crippled type system, let’s try to implement a DB based ArticleRepository:</p>
<pre><code class="Java">class DatabaseArticleRepository implements ArticleRepository {
    private DataSource dataSource;

    public Article getById(String id) {
        try (Connection connection = dataSource.getConnection()){
            try (PreparedStatement stmt = connection.prepareStatement(&quot;select * from article where id=?&quot;)) {
                stmt.setString(1, id);
                ResultSet resultSet = stmt.executeQuery();
                if (resultSet.next()) {
                    return new Article().withContent(resultSet.getString(&quot;content&quot;));
                } else
                    return null;
            }
        }
    }
}
</code></pre><p>But this does not compile:</p>
<pre><code class="text">DatabaseArticleRepository: unreported exception java.sql.SQLException; must be caught or declared to be thrown.
</code></pre><p>Same as Haskell&rsquo;s IO, Java&rsquo;s checked exceptions tag a function/method as not safe. But with IO you are only allowed to &ldquo;declare to be thrown&rdquo; (unless you want to be <a href="https://hackage.haskell.org/package/base-4.16.1.0/docs/System-IO-Unsafe.html">Unsafe</a>), so the only option is to rethrow the exception:</p>
<pre><code class="Java">class DatabaseArticleRepository implements ArticleRepository {
    private DataSource dataSource;
    public Article getById(String id) throws SQLException { // Throwing exception now. 
    ,,,
    }
}    
</code></pre><p>Now the compiler complains with:</p>
<pre><code class="text">getById(java.lang.String) in DatabaseArticleController cannot implement getById(java.lang.String) in ArticleRepository  overridden method does not throw java.sql.SQLException
</code></pre><p>Gosh! Let&rsquo;s add it to the ArticleRepository:</p>
<pre><code class="Java">public interface ArticleRepository {
    Article getById(String id) throws SQLException; // More throwing.
}
</code></pre><p>And recompile:</p>
<pre><code class="text">ArticleController: unreported exception java.sql.SQLException; must be caught or declared to be thrown
</code></pre><p>And finally, we need to bubble it up to the top of the stack:</p>
<pre><code class="Java">class ArticleController {
    public HttpResponse getArticle(...) throws SQLException { // Yet more throwing
        ...
    }
}
</code></pre><p>Java checked exceptions, just like Haskell IO, just like impure functions, are contagious. Like a virus, any function that comes in contact with them is infected.</p><p>So there are no Schrödinger&rsquo;s functions. A function that is passed an impure function at runtime, is an impure function (as long as it runs the impure function).</p><p>Our final version of the <code>get-article</code> function, even if it depends on an interface/protocol, is as impure as our initial one.</p><h4>Try/catch! RuntimeException!</h4><p>But if a function catches a checked exception, and swallows or rethrows it as a runtime exception, does it become a pure function?</p><p>You can pretend that it is a pure function, and I can pretend to know what I am talking about, but pretending does not make it real. </p><p>Also, we are using checked exceptions as an approximation. You can read the same argument but <a href="https://blog.ploeh.dk/2016/03/18/functional-architecture-is-ports-and-adapters/">with F# and Haskell</a>. </p><h2>Unstable</h2><p>Now that we know that depending on an interface/protocol does not make our functions pure, what does it mean for the stability of our design?</p>
<blockquote><p>Depend in the direction of stability – Stable Dependencies Principle</p>
</blockquote><p>This is a good principle to follow. Abstract Clojure defines stability as:</p>
<blockquote><p>In Clojure, we can consider a function to be stable if it is referentially transparent (== pure).</p>
</blockquote><p>If we accept this definition, our final design looks like:</p><p><img src="/images/blog/abstract-clojure/final-design-for-real.png" alt="unstable" /></p><p>So we are back to a completely unstable system, but with a lot more moving parts that the initial design. </p><p>More things, same stability? Does not seems like a winning design.</p><p>Maybe this is not the stability definition that you are looking for.</p>
<hr/><p>So what now? We will leave the questions on how to convert impure functions into pure functions and what stability is for another day. </p>]]></description></item><item><title>Book notes: Design It!: From Programmer to Software Architect</title><link>https://danlebrero.com/2022/05/04/design-it-book-summary/</link><guid>https://danlebrero.com/2022/05/04/design-it-book-summary/</guid><pubDate>Wed, 04 May 2022 00:00:00 +0200</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/3q8oElm">Design It!: From Programmer to Software Architect</a> by <a href="https://twitter.com/michaelkeeling">Michael Keeling</a>.</p><p>&ldquo;From Programmer to Software Architect&rdquo; is a spot on subtitle.</p><h1>Key Insights</h1>
<ul>
  <li>SW design is a constant struggle to find the right balance between the things you want and the reality you must accept.</li>
  <li>Every team has at least one architect. The best teams have several.</li>
  <li>For every SW system you build, briefly describe the system and what you learned during your time developing it.</li>
  <li>Design Thinking Principles (From <a href="https://amzn.to/3taqfJb">Design Thinking: Understand – Improve – Apply</a>):
  <ol>
    <li>All design is social in nature: for and with people.</li>
    <li>Preserve ambiguity:
    <ul>
      <li>Minimalist architecture:
      <ul>
        <li><a href="https://www.bredemeyer.com/pdf_files/MinimalistArchitecture.PDF">Less is More with Minimalist Architecture</a>.</li>
      </ul></li>
    </ul></li>
    <li>All design is redesign.</li>
    <li>Make ideas tangible to facilitate communication.</li>
  </ol></li>
  <li>Emphasize:
  <ol>
    <li>Treat solutions as experiments.</li>
    <li>Focus on reducing risks.</li>
    <li>Work to simplify problems.</li>
    <li>Iterate quickly to learn quickly.</li>
    <li>Think about the problem and solution at the same time.</li>
  </ol></li>
  <li><a href="#risk">Use risk to decide what to focus on.</a></li>
  <li>Architecturally Significant Requirements:
  <ol>
    <li>Constraints:
    <ul>
      <li>Well-chosen constraints simplify the problem.</li>
      <li>Early design decisions can become constraints in the future.</li>
    </ul></li>
    <li>Influential functional requirements:
    <ul>
      <li>Identifying influential functional requirements is equal part of art and science.</li>
    </ul></li>
    <li>Quality Attributes.</li>
    <li>Others:
    <ul>
      <li>Tech trends.</li>
      <li>Architecture skills, knowledge.</li>
      <li>Team skills, knowledge.</li>
      <li>Team organization.</li>
    </ul></li>
  </ol></li>
  <li>Our confidence in a decision increases after seeing multiple alternatives.</li>
  <li>Decision matrix: Do not use numbers as they give a false sense of confidence and precision.</li>
  <li>Complexity is an inevitable by-product of every successful software system.</li>
  <li>Discussion lacking in disagreement may seem like positive progress, but it is more likely to be the opposite.</li>
  <li>Sometimes a simple table is all that is needed.</li>
  <li>Precision gets in the way of communication: accurate, not precise.</li>
  <li>A good-looking document tells readers the content is trustworthy and was created by a professional.</li>
  <li>Sometimes your pile of rejected decisions can be more telling than a lengthy explanation.</li>
  <li>Keep design authority when risks of failure are high.</li>
  <li>The discussion is often more important than the option picked.</li>
  <li><a href="https://medium.com/the-xplane-collection/updated-empathy-map-canvas-46df22df3c8a">Empathy map</a>.</li>
  <li><a href="https://agilewarrior.wordpress.com/2010/11/06/the-agile-inception-deck/">The Agile Inception Deck</a>.</li>
</ul><h1>All activities</h1><h3>Understand</h3>
<table>
  <thead>
    <tr>
      <th>Activity </th>
      <th>Time </th>
      <th>Participants </th>
      <th>Notes </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Choose one thing </td>
      <td> </td>
      <td>All stakeholders </td>
      <td>Clear prioritization and disagreement. </td>
    </tr>
    <tr>
      <td>Empathy map </td>
      <td>10-30m </td>
      <td>Solo or 3-5. Devs + Arch </td>
      <td>For the team to develop empathy. </td>
    </tr>
    <tr>
      <td>Goal-Question-Metric workshop </td>
      <td>15-90m </td>
      <td>1-5 people. </td>
      <td>Prioritized metrics to gather. </td>
    </tr>
    <tr>
      <td>Interview stakeholders </td>
      <td>30-60m per interview </td>
      <td>1-2-1 or small stakeholder group </td>
      <td> </td>
    </tr>
    <tr>
      <td>List assumptions </td>
      <td>15-30m </td>
      <td>Whole team in 2-5 groups </td>
      <td>Take assumptions out of the shadows. </td>
    </tr>
    <tr>
      <td>Mini-Quality attributes workshop </td>
      <td>90-180m </td>
      <td>Arch + 3-5 stakeholders </td>
      <td> </td>
    </tr>
    <tr>
      <td>Point-of-View mad lib </td>
      <td>30-45m </td>
      <td>1-3 people. Any stakeholder </td>
      <td>Summarize business goals and other needs. </td>
    </tr>
    <tr>
      <td>Response measure straw man </td>
      <td>Combine with other </td>
      <td>Architect prepares </td>
      <td>Get conversation moving. </td>
    </tr>
    <tr>
      <td>Stakeholder map </td>
      <td>30-45m </td>
      <td>1-25. Whole team + stakeholders </td>
      <td>Relations and interactions.</td>
    </tr>
  </tbody>
</table><h3>Explore</h3>
<table>
  <thead>
    <tr>
      <th>Activity </th>
      <th>Time </th>
      <th>Participants </th>
      <th>Notes </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Personify the architecture </td>
      <td> </td>
      <td> </td>
      <td>It is ok to feel silly.</td>
    </tr>
    <tr>
      <td>Architecture flip book </td>
      <td>30-45m </td>
      <td>1-3 people </td>
      <td>Record all steps on design iteration.</td>
    </tr>
    <tr>
      <td>Component responsibility collaborator cards </td>
      <td>30-90m </td>
      <td>Solo or 3-5 </td>
      <td>Propose architectural elements. </td>
    </tr>
    <tr>
      <td>Concept map </td>
      <td>30-60m </td>
      <td>1-3 technical stakeholders </td>
      <td>Uncover missing domain concepts. </td>
    </tr>
    <tr>
      <td>Divide and conquer </td>
      <td> </td>
      <td>Groups of 2-4 </td>
      <td>To cover a lot of ground in parallel. </td>
    </tr>
    <tr>
      <td>Event Storming </td>
      <td>90m </td>
      <td>2-12. Expert + dev team </td>
      <td>Identify domain events. </td>
    </tr>
    <tr>
      <td>Group Posters </td>
      <td>20-30m </td>
      <td>Groups 2-5 people </td>
      <td>To summarize outcomes. </td>
    </tr>
    <tr>
      <td>Round-Robin design </td>
      <td>15-45m </td>
      <td>3-12 tech stakeholders </td>
      <td>Combine ideas + build consensus. </td>
    </tr>
    <tr>
      <td>Whiteboard Jam </td>
      <td>Up to the group </td>
      <td>3-5 tech stakeholders </td>
      <td> </td>
    </tr>
  </tbody>
</table><h3>Make</h3>
<table>
  <thead>
    <tr>
      <th>Activity </th>
      <th>Notes </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Architecture Decision Records </td>
      <td> </td>
    </tr>
    <tr>
      <td>Architecture haiku</td>
      <td>One-page uber-terse summary </td>
    </tr>
    <tr>
      <td>Context diagram </td>
      <td>Agreement with system scope</td>
    </tr>
    <tr>
      <td>Greatest hits reading list </td>
      <td> </td>
    </tr>
    <tr>
      <td>Inception deck </td>
      <td>10 important questions at the start of a new project </td>
    </tr>
    <tr>
      <td>Modular decomposition diagram </td>
      <td>Tree diagram that shows relationships at different granularities </td>
    </tr>
    <tr>
      <td>Paths not taken</td>
      <td> </td>
    </tr>
    <tr>
      <td>Prototype to learn or decide</td>
      <td> </td>
    </tr>
    <tr>
      <td>Sequential diagram</td>
      <td> </td>
    </tr>
    <tr>
      <td>System metaphor </td>
      <td> </td>
    </tr>
  </tbody>
</table><h3>Evaluate</h3>
<table>
  <thead>
    <tr>
      <th>Activity </th>
      <th>Time </th>
      <th>Participants </th>
      <th>Notes </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Architecture Briefing </td>
      <td>45-60m preparation. 30m present. 30m questions </td>
      <td>Arch + wide audience </td>
      <td> </td>
    </tr>
    <tr>
      <td>Code review </td>
      <td>Ongoing </td>
      <td>2 to whole team </td>
      <td> </td>
    </tr>
    <tr>
      <td>Decision Matrix </td>
      <td>Varies </td>
      <td>Arch + Stakeholders </td>
      <td> </td>
    </tr>
    <tr>
      <td>Observer Behaviour </td>
      <td> </td>
      <td> </td>
      <td>Observability in production </td>
    </tr>
    <tr>
      <td>Question-Comment-Concern </td>
      <td>30-90m </td>
      <td>Whole team </td>
      <td> </td>
    </tr>
    <tr>
      <td>Risk storming </td>
      <td>60-90m </td>
      <td>3-7 devs </td>
      <td> </td>
    </tr>
    <tr>
      <td>Sanity Check </td>
      <td>5-10m </td>
      <td>Whole team</td>
      <td>Pop quiz</td>
    </tr>
    <tr>
      <td>Scenario walk-through </td>
      <td>20-30m per quality attribute </td>
      <td>3-7 people </td>
      <td>Use early </td>
    </tr>
    <tr>
      <td>Sketch and Compare </td>
      <td>20-30m </td>
      <td>3-5 people </td>
      <td> </td>
    </tr>
  </tbody>
</table><p><br/></p><h1>TOC</h1>
<ul>
  <li><a href="#part-1">Part I - Introducing Software Architecture</a>
  <ul>
    <li><a href="#ch-1">Chapter 1 - Become a Software Architect</a></li>
    <li><a href="#ch-2">Chapter 2 - Design Thinking Fundamentals</a></li>
  </ul></li>
  <li><a href="#part-2">Part II - Architecture Design Fundamentals</a>
  <ul>
    <li><a href="#ch-3">Chapter 3 - Devise a Design Strategy</a></li>
    <li><a href="#ch-4">Chapter 4 - Empathize with Stakeholders</a></li>
    <li><a href="#ch-5">Chapter 5 - Dig for Architecturally Significant Requirements (ASR)</a></li>
    <li><a href="#ch-6">Chapter 6 - Choose an Architecture (Before It Chooses You)</a></li>
    <li><a href="#ch-7">Chapter 7 - Create a Foundation with Patterns</a></li>
    <li><a href="#ch-8">Chapter 8 - Manage Complexity with Meaningful Models</a></li>
    <li><a href="#ch-9">Chapter 9 - Host an Architecture Design Studio</a></li>
    <li><a href="#ch-10">Chapter 10 - Visualize Design Decisions</a></li>
    <li><a href="#ch-11">Chapter 11 - Describe the Architecture</a></li>
    <li><a href="#ch-12">Chapter 12 - Give the Architecture a Report Card</a></li>
    <li><a href="#ch-13">Chapter 13 - Empower the Architects of Your Team</a></li>
  </ul></li>
  <li><a href="#part-3">Part III - The Architect&rsquo;s Toolbox</a>
  <ul>
    <li><a href="#ch-14">Chapter 14 - Activities to Understand the Problem</a></li>
    <li><a href="#ch-15">Chapter 15 - Activities to Explore Potential Solutions</a></li>
    <li><a href="#ch-16">Chapter 16 - Activities to Make the Design Tangible</a></li>
    <li><a href="#ch-17">Chapter 17 - Activities to Evaluate Design Options</a></li>
  </ul></li>
</ul><h1><a name="part-1"></a>Part I - Introducing Software Architecture</h1><h2><a name="ch-1"></a>Chapter 1 - Become a Software Architect</h2>
<ul>
  <li>What architects do?
  <ol>
    <li>Define the problem from an engineering perspective.</li>
    <li>Partition the system and assign responsibilities.</li>
    <li>Keep an eye on the bigger picture:
    <ul>
      <li>System as a whole.</li>
      <li>SW design is a constant struggle to find the right balance between the things you want and the reality you must accept.</li>
    </ul></li>
    <li>Decide trade-offs among quality attributes.</li>
    <li>Manage technical debt.</li>
    <li>Grow the team&rsquo;s architecture skills:
    <ul>
      <li>Architecture design is a social activity.</li>
    </ul></li>
  </ol></li>
  <li>A system&rsquo;s software architecture is the set of significant design decisions about how the software is organized to promote desired quality attributes and other properties.</li>
  <li>Software structure&rsquo;s elements and relations:
  <ol>
    <li>Module: structure that exists at design time (class, DB table).</li>
    <li>Component and connector (C&amp;C): exits at runtime (object, process).</li>
    <li>Allocations: how modules and C&amp;C elements correspond to each other.
    <ul>
      <li>Aka: mapping structures.</li>
    </ul></li>
  </ol></li>
  <li>Quality attribute is any externally visible characteristic by which stakeholders judge a SW system&rsquo;s goodness.</li>
  <li>Every team has at least one architect. The best teams have several.</li>
  <li>For every SW system you build, briefly describe the system and what you learned during your time developing it.</li>
</ul><h2><a name="ch-2"></a>Chapter 2 - Design Thinking Fundamentals</h2>
<ul>
  <li>Design thinking: problem-solving approach that puts humans at the center.</li>
  <li>Principles (From <a href="https://amzn.to/3taqfJb">Design Thinking: Understand – Improve – Apply</a>):
  <ol>
    <li>All design is social in nature:
    <ul>
      <li>For and with people.</li>
    </ul></li>
    <li>Preserve ambiguity:
    <ul>
      <li>Minimalist architecture:
      <ul>
        <li><a href="https://www.bredemeyer.com/pdf_files/MinimalistArchitecture.PDF">Less is More with Minimalist Architecture</a>.</li>
        <li>Only focus on how high-priority quality attributes are achieved.</li>
      </ul></li>
    </ul></li>
    <li>All design is redesign.</li>
    <li>Make ideas tangible to facilitate communication.</li>
  </ol></li>
  <li>To design an architecture:
  <ol>
    <li>Pick a mindset.</li>
    <li>Pick a practice within that mindset.</li>
    <li>Apply practice to learn something new.</li>
    <li>Goto (1).</li>
  </ol></li>
  <li>Design mindsets:
  <ol>
    <li>Understand:
    <ul>
      <li>Requires empathy.</li>
    </ul></li>
    <li>Explore.</li>
    <li>Make.</li>
    <li>Evaluate.</li>
  </ol></li>
</ul><h1><a name="part-2"></a>Part II - Architecture Design Fundamentals</h1><h2><a name="ch-3"></a>Chapter 3 - Devise a Design Strategy</h2>
<ul>
  <li>Emphasize:
  <ol>
    <li>Treat solutions as experiments.</li>
    <li>Focus on reducing risks.</li>
    <li>Work to simplify problems.</li>
    <li>Iterate quickly to learn quickly.</li>
    <li>Think about the problem and solution at the same time.</li>
  </ol></li>
  <li>How much design up front:
  <ul>
    <li>Barry Boehm, Architecting: how much and when. Chapter 10 of <a href="https://amzn.to/3JS2POT">Making Software</a>.</li>
    <li>Total project time == dev time + architecture + rework.</li>
    <li>Architecture reduces rework time.</li>
    <li>Bigger systems benefit the most from more up-front architecture work.</li>
    <li><a href="http://cosysmo.mit.edu">COSYSMO</a> and <a href="https://en.wikipedia.org/wiki/COCOMO">COCOMO II</a>.</li>
  </ul></li>
  <li><a name="risk"></a>Use risk to decide what to focus on:
  <ul>
    <li>[conditions] might [consequences]</li>
    <li>Deal with risk:
    <ol>
      <li>Reduce probability.</li>
      <li>Reduce impact.</li>
      <li>Push out the time frame of the risk.</li>
      <li>Remove condition.</li>
      <li>Accept it and do nothing.</li>
    </ol></li>
    <li>Which mindset:
    <ul>
      <li>Understand: risk is about problem.</li>
      <li>Explore: risk is about solution.
      <ul>
        <li>Have you seen enough solution alternatives?</li>
      </ul></li>
      <li>Make: risk is about communication.
      <ul>
        <li>Do stakeholders fully understand design and architecture?</li>
      </ul></li>
      <li>Evaluate: risk involves a design decision or the design&rsquo;s overall fit.
      <ul>
        <li>Do we need to make a design decision?</li>
      </ul></li>
    </ul></li>
  </ul></li>
  <li>Create a design plan.</li>
</ul><h2><a name="ch-4"></a>Chapter 4 - Empathize with Stakeholders</h2>
<ul>
  <li>Create a stakeholder map with stakeholders, stakeholders groups and their relationship.</li>
  <li>Record business goal statements:
  <ul>
    <li>Subject, outcome, context.</li>
    <li>Outcome: measurable.</li>
    <li>Context: insightful and not obvious.</li>
  </ul></li>
  <li>Most systems only have three to five business goals.</li>
</ul><h2><a name="ch-5"></a>Chapter 5 - Dig for Architecturally Significant Requirements (ASR)</h2>
<ul>
  <li>4 Categories:
  <ol>
    <li>Constraints:
    <ul>
      <li>Unchangeable. Non-negotiable.</li>
      <li>Well-chosen constraints simplify the problem.</li>
      <li>Technical: programming lang, platforms, components, technology.</li>
      <li>Business: team structure, schedule, budget, legal.</li>
      <li>Early design decisions can become constraints in the future.</li>
      <li>Keep a XLS: constraint, origin, type, context.</li>
    </ul></li>
    <li>Influential functional requirements (FR):
    <ul>
      <li>Identifying influential functional requirements is equal part of art and science.</li>
    </ul>
    <ol>
      <li>Sketch notional architecture.</li>
      <li>Identify classes of requirements:
      <ul>
        <li>Group FR with the same architecture elements (like persistence).</li>
        <li>FR that seem difficult to implement.</li>
        <li>High-value, high-priority FR.</li>
      </ul></li>
      <li>Try each class of requirements against the notional architecture:
      <ul>
        <li>If it is not obvious how to implement, the it might be an influential FR.</li>
      </ul></li>
    </ol></li>
    <li>Others:
    <ul>
      <li>Tech trends.</li>
      <li>Architecture skills, knowledge.</li>
      <li>Team skills, knowledge.</li>
      <li>Team organization.</li>
    </ul></li>
    <li>Quality Attributes:
    <ul>
      <li>Use quality attribute scenarios:
      <ul>
        <li>Parts:
        <ul>
          <li>Stimulus: event that triggers the scenario.</li>
          <li>Source: who.</li>
          <li>Artifact: part of the system.</li>
          <li>Response: externally visible action by the artifact as result of the stimulus.</li>
          <li>Response measure:
          <ul>
            <li>Success criteria.</li>
            <li>Specific and measurable.</li>
          </ul></li>
          <li>Environment context: &ldquo;normal&rdquo;, peak load, failure condition.</li>
          <li>Keep in XLS:</li>
        </ul></li>
      </ul></li>
    </ul></li>
  </ol></li>
</ul>
<table>
  <thead>
    <tr>
      <th>Quality Attribute </th>
      <th>Scenario </th>
      <th>Priority </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Availability </td>
      <td>When DB does not respond, respond with stale data within 3 secs </td>
      <td>high </td>
    </tr>
    <tr>
      <td>&hellip; </td>
      <td>&hellip; </td>
      <td>&hellip; </td>
    </tr>
  </tbody>
</table>
<ul>
  <li>Build an architect significant requirements doc:
  <ul>
    <li>Purpose and scope.</li>
    <li>Intended audience.</li>
    <li>Business context.</li>
    <li>Quality attribute requirements:
    <ul>
      <li>Top scenarios.</li>
    </ul></li>
    <li>Influential FR:
    <ul>
      <li>Top users or user persona.</li>
      <li>Use cases or user stories.</li>
    </ul></li>
    <li>Appendix A: Glossary.</li>
    <li>Appendix B: Quality Attributes Taxonomy.</li>
  </ul></li>
</ul><h2><a name="ch-6"></a>Chapter 6 - Choose an Architecture (Before It Chooses You)</h2>
<ul>
  <li>Our confidence in a decision increases after seeing multiple alternatives.</li>
  <li>You need to explore:
  <ol>
    <li>Architecture elements and their responsibilities.</li>
    <li>How elements interact with each other. Their interfaces.</li>
    <li>Understand the domain.</li>
    <li>Tech and framework that promote quality attributes.</li>
    <li>How app will be deployed.</li>
    <li>Look at past designs.</li>
  </ol></li>
  <li>Decision matrix:
  <ul>
    <li>I personally like text + color (red, white, green).</li>
    <li>Do not use numbers as they give a false sense of confidence and precision.</li>
  </ul></li>
</ul>
<table>
  <thead>
    <tr>
      <th> </th>
      <th>Option A </th>
      <th>Option B </th>
      <th>Option C </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Property 1 </td>
      <td>promotes </td>
      <td>+ </td>
      <td><i class="fas fa-arrow-up"></i> </td>
    </tr>
    <tr>
      <td>Property 2 </td>
      <td>inhibits </td>
      <td>- </td>
      <td><i class="fas fa-arrow-down"></i> </td>
    </tr>
    <tr>
      <td>Property 3 </td>
      <td>neutral </td>
      <td>o </td>
      <td><i class="fas fa-arrow-right"></i> </td>
    </tr>
  </tbody>
</table>
<ul>
  <li>Create an element responsibility catalog:
  <ul>
    <li>Assign to each element the influential functional requirement.</li>
  </ul></li>
</ul><h2><a name="ch-7"></a>Chapter 7 - Create a Foundation with Patterns</h2>
<ul>
  <li>See <a href="/2021/11/17/fundamentals-of-software-architecture-summary/#content">Fundamentals of Software Architecture</a>.</li>
</ul><h2><a name="ch-8"></a>Chapter 8 - Manage Complexity with Meaningful Models</h2>
<ul>
  <li>Complexity is an inevitable by-product of every successful software system.</li>
  <li>Abstractions help us focus on specific details at the expense of others.</li>
  <li>Good architecture models:
  <ul>
    <li>Establish the vocabulary of design.</li>
    <li>Direct attention to interesting details.</li>
    <li>Allows to reason about quality attributes.</li>
    <li>Captures the architect&rsquo;s intention.</li>
  </ul></li>
  <li>Design a meta-model: concepts and rules to use those concepts.</li>
  <li>Building models into the code:
  <ul>
    <li>It is possible to shrink the model-code gap, but it cannot be closed completely.</li>
  </ul>
  <ol>
    <li>Use architecture vocabulary.</li>
    <li>Organize code following architecture elements.</li>
    <li>Enforce relations, so that it becomes impossible to violate the architecture.</li>
    <li>Add comments.</li>
  </ol></li>
</ul><h2><a name="ch-9"></a>Chapter 9 - Host an Architecture Design Studio</h2>
<ul>
  <li>Design studio encourages group collaboration and has strict time constraints to help the team see a broad range of ideas in a short time frame.</li>
  <li>Creates buy-in of everybody involved.</li>
  <li>Outcomes:
  <ul>
    <li>Things to make.</li>
    <li>Things to research more.</li>
    <li>New open questions.</li>
  </ul></li>
  <li>Typically, few hours to a day.</li>
  <li>Steps:
  <ol>
    <li>Prepare:
    <ul>
      <li>Business and workshop goals.</li>
      <li>Quality attributes.</li>
      <li>ASRs.</li>
      <li>Choose participants:
      <ul>
        <li>3-10.</li>
        <li>Diverse background.</li>
      </ul></li>
      <li>Discussion lacking in disagreement may seem like positive progress, but it is more likely to be the opposite.</li>
    </ul></li>
    <li>Kick-off:
    <ul>
      <li>Share context.</li>
    </ul></li>
    <li>Create:
    <ul>
      <li>Choose design activity:
      <ul>
        <li><a href="http://mydemolife.blogspot.com/2008/12/tell-show-tell-technique-what-else.html">Tell-show-tell</a> to explain the activity.</li>
        <li>Time boxed. Minimum 5 mins.</li>
      </ul></li>
    </ul></li>
    <li>Share:
    <ul>
      <li>3-5 mins.</li>
      <li>Only main points.</li>
      <li>No questions or comments.</li>
    </ul></li>
    <li>Critique:
    <ul>
      <li>Specific.</li>
      <li>Focus on facts.</li>
      <li>Point also good things.</li>
    </ul></li>
    <li>Iterate:
    <ul>
      <li>Go to 3.</li>
      <li>Tweak the group dynamics.</li>
    </ul></li>
    <li>Close:
    <ul>
      <li>Reflect.</li>
      <li>Decide specific actions.</li>
    </ul></li>
  </ol></li>
  <li>Use a parking lot to record interesting ideas for other time, and keep the workshop moving.</li>
</ul><h2><a name="ch-10"></a>Chapter 10 - Visualize Design Decisions</h2>
<ul>
  <li>Sometimes a simple table is all that is needed.</li>
  <li>Sometimes precision gets in the way of communication:
  <ul>
    <li>Accurate, not precise.</li>
  </ul></li>
  <li>Tips:
  <ul>
    <li>Always include a legend.</li>
    <li>Add a descriptive title.</li>
    <li>Highlight patterns.</li>
    <li>Be consistent.</li>
    <li>Provide descriptive prose, and/or text annotations.</li>
  </ul></li>
</ul><h2><a name="ch-11"></a>Chapter 11 - Describe the Architecture</h2>
<ul>
  <li>Which architecture description approach should I use?<br/> <img src="/images/blog/books/design-it/describe-architecture.jpg" alt="describe architecture" /></li>
  <li>Tribal:
  <ul>
    <li>Oral tradition, informal sketching, story telling.</li>
  </ul></li>
  <li>Communal:
  <ul>
    <li>When you find yourself telling the same story to more than a few people.</li>
    <li>Architecture Haiku, ADR, architecturally evident coding style.</li>
  </ul></li>
  <li>Formal:
  <ul>
    <li>High-risk systems or architecture decisions.</li>
    <li>Traditional SW architecture decision (SAD).</li>
    <li>Templates:
    <ul>
      <li><a href="https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=484159">SEI views and beyond</a>.</li>
      <li><a href="https://en.wikipedia.org/wiki/ISO/IEC_42010">ISO/IEC/IEEE 42010</a>.</li>
    </ul></li>
  </ul></li>
  <li>Always keep the audience in mind:
  <ul>
    <li>Use <a href="https://www.nngroup.com/articles/empathy-mapping/">empathy map</a>.</li>
  </ul></li>
  <li>A good-looking document tells readers the content is trustworthy and was created by a professional.</li>
  <li>Establish viewpoints:
  <ul>
    <li>Arch from the point of view of a related set of stakeholder concerns.</li>
    <li>Example standard viewpoints:
    <ul>
      <li>SEI views and beyond.</li>
      <li>Simon Brown&rsquo;s <a href="https://c4model.com/">C4 model</a>.</li>
      <li>Phillipe Krutchen&rsquo;s <a href="https://ieeexplore.ieee.org/document/469759">4+1 view model</a>.</li>
    </ul></li>
    <li>Usually organized around quality attributes or stakeholder needs.</li>
  </ul></li>
  <li>Explain rationale:
  <ul>
    <li>Sometimes your pile of rejected decisions can be more telling than a lengthy explanation.</li>
  </ul></li>
</ul><h2><a name="ch-12"></a>Chapter 12 - Give the Architecture a Report Card</h2>
<ul>
  <li>Benefits of evaluation:
  <ul>
    <li>Educate team.</li>
    <li>Create buy-in.</li>
    <li>Reduce delivery risks.</li>
    <li>Improve architecture.</li>
  </ul></li>
  <li>Design Rubric:
  <ul>
    <li>2 parts:
    <ol>
      <li>Criteria:
      <ul>
        <li>ASR as a guide.</li>
        <li>Important, essential, distinct, observable and measurable, precise and unambiguous.</li>
      </ul></li>
      <li>Rating:
      <ul>
        <li>Select scale:
        <ul>
          <li>1-2: all or nothing. Few reviewers.</li>
          <li>1-3: minimum acceptable threshold. Multiple reviewers.</li>
          <li>1-4: Detailed feedback desired.</li>
        </ul></li>
        <li>Discuss any &ldquo;1&rdquo; score, even if the average is acceptable.</li>
      </ul></li>
    </ol></li>
  </ul></li>
  <li>Organize an architecture evaluation workshop:
  <ul>
    <li>Steps: prepare, prime reviewers, assess, analyze, follow-up.</li>
    <li>It is important to understand why the design is fit (or not).</li>
    <li>Great designs can always be improved.</li>
    <li>Gold standard:
    <ul>
      <li><a href="https://en.wikipedia.org/wiki/Architecture_tradeoff_analysis_method">ATAM</a>.</li>
      <li>See <a href="https://amzn.to/3f7XMLS">Software Architecture in Practice</a>.</li>
      <li>Multi-day or multi-week.</li>
    </ul></li>
  </ul></li>
  <li>Evaluate early, often, continuously:
  <ul>
    <li>Risks.</li>
    <li>Unknowns.</li>
    <li>Problems.</li>
    <li>Gaps.</li>
    <li>Arch erosion.</li>
    <li>Contextual drift.</li>
  </ul></li>
  <li>Start with low ceremony methods.</li>
</ul><h2><a name="ch-13"></a>Chapter 13 - Empower the Architects of Your Team</h2>
<ul>
  <li>Modern SW dev teams need a different kind of leader than the traditional top-down architect.
  <ul>
    <li>Coach, mentor, technical guru.</li>
  </ul></li>
  <li>Teams who embrace the idea of SW architect as a way of thinking instead of as a role, produce better SW:
  <ul>
    <li>More eyes.</li>
    <li>Team buy-in. Ownership.</li>
  </ul></li>
  <li>Create opportunities for safe practice:
  <ul>
    <li>Pair design.</li>
    <li>Create scaffolding:
    <ol>
      <li>Build templates for delegated work.</li>
      <li>Provide feedback during peer reviews.</li>
      <li>Create checklists.</li>
    </ol></li>
    <li>Introduce architectural guide rails:
    <ul>
      <li>Guide rails (constraints) decreases the chances to mess up the architecture.</li>
    </ul></li>
    <li>Host information sessions.</li>
  </ul></li>
  <li>Keep design authority when risks of failure are high.</li>
</ul><h2><a name="part-3"></a>Part III - The Architect&rsquo;s Toolbox</h2><h2><a name="ch-14"></a>Chapter 14 - Activities to Understand the Problem</h2>
<ol>
  <li>Choose One Thing:
  <ul>
    <li>Discuss priorities by presenting an extreme choice.</li>
    <li>If you only get one thing, what will it be?</li>
    <li>Clear prioritization.</li>
    <li>Clear disagreement.</li>
    <li>The discussion is often more important than the option picked.</li>
    <li>Use early.</li>
  </ul></li>
  <li>Empathy Map:
  <ul>
    <li>Brainstorm and record responsibilities, thoughts and feelings for the team to develop empathy.</li>
    <li><a href="https://medium.com/the-xplane-collection/updated-empathy-map-canvas-46df22df3c8a">Updated version</a>.</li>
  </ul></li>
  <li>Goal-Question-Metric Workshop:
  <ul>
    <li>Identify metrics and response measures to connect data with business goals.<br/> <img src="/images/blog/books/design-it/goal-question-metric.png" alt="goal-question-metric" /></li>
    <li>Question to answer to know if we have met the goal.</li>
    <li>Result: prioritized data and metrics to gather.</li>
  </ul></li>
  <li>Interview Stakeholders:
  <ul>
    <li>Unstructured interviews should still have a checklist.</li>
  </ul></li>
  <li>List assumptions:
  <ul>
    <li>Take assumptions out of the shadows.</li>
    <li>Write down everything mentioned, even obvious ones.</li>
    <li>Pause to discuss surprising assumptions.</li>
  </ul></li>
  <li>Mini-Quality Attribute workshop:
  <ul>
    <li>Prepare:
    <ol>
      <li>Quality attribute taxonomy (max 7).</li>
      <li>Quality attribute scenario templates.</li>
      <li>Quality attribute web.</li>
      <li>As homework, refine top raw quality scenarios. Present in a follow-up meeting.</li>
    </ol></li>
  </ul></li>
  <li>Point-of-View Mad Lib:
  <ul>
    <li>Summarize business goals and other needs.</li>
    <li>Template:<br/> <img src="/images/blog/books/design-it/point-of-view-mad-lib-template.png" alt="point of view mad lib" /></li>
    <li>Consensus is not required.</li>
    <li>Outcome focused.</li>
  </ul></li>
  <li>Response Measure Straw Man:
  <ul>
    <li>Give stakeholders something to beat up until they arrive at their own answers.</li>
    <li>Response either:
    <ul>
      <li>Honest: if you are confident.</li>
      <li>Outrageous: to find boundaries.</li>
    </ul></li>
  </ul></li>
  <li>Stakeholder Map:
  <ul>
    <li>To visualize relationships, hierarchies and interactions between people involved or impacted by the system.</li>
    <li>Once completed ask who are the most important stakeholders.</li>
  </ul></li>
</ol><h2><a name="ch-15"></a>Chapter 15 - Activities to Explore Potential Solutions</h2>
<ol>
  <li>Personify the architecture:
  <ul>
    <li>Give it human qualities so that you can explore interactions among elements.</li>
    <li>How it &ldquo;reacts&rdquo; or &ldquo;feel&rdquo;, make it memorable through story telling.</li>
    <li>It is ok to feel a little silly.</li>
  </ul></li>
  <li>Architecture flip book:
  <ul>
    <li>Record every step of the design journey so others can follow along afterwards.</li>
    <li>Sketch + notes about incremental changes.</li>
    <li>Teach others how to think about design and modeling.</li>
    <li>On a slide deck, keep copying the last slide and editing it.</li>
  </ul></li>
  <li>Component responsibility collaborator cards:
  <ul>
    <li>Propose architectural elements, their responsibilities and how they come together to form a view of the architecture.<br/> <img src="/images/blog/books/design-it/crc-card.png" alt="crc card" /></li>
  </ul></li>
  <li>Concept map:
  <ul>
    <li>Visualize how concepts in the domain relate to one another.</li>
    <li>Helps to uncover missing, hidden, or implied domain concepts.</li>
  </ul></li>
  <li>Divide and conquer:<br/>  <img src="/images/blog/books/design-it/divide-and-conquer.png" alt="divide and conquer" />
  <ul>
    <li>Tight feedback loops work better.</li>
  </ul></li>
  <li>Event Storming:
  <ul>
    <li>Collaborative brainstorming technique used to identify domain events.</li>
    <li>To better engage subject-matter experts.</li>
    <li>Concrete and specific examples, not abstract.</li>
  </ul></li>
  <li>Group Posters:
  <ul>
    <li>Create a poster that conveys their design ideas for the architecture outcomes.</li>
    <li>To summarize outcomes.</li>
  </ul></li>
  <li>Round-Robin design:
  <ul>
    <li>Quickly explore a range of ideas, and then combine to start building consensus.</li>
    <li>Steps:
    <ol>
      <li>Sketch 5m.</li>
      <li>Rotate.</li>
      <li>Critique 3m.</li>
      <li>Rotate.</li>
      <li>Improve 5m.</li>
      <li>Review all sketches.</li>
    </ol></li>
  </ul></li>
  <li>Whiteboard Jam:
  <ul>
    <li>Collaboratively draw diagrams on a whiteboard.</li>
    <li>Pictures won&rsquo;t make sense to someone who wasn&rsquo;t there.</li>
  </ul></li>
</ol><h2><a name="ch-16"></a>Chapter 16 - Activities to Make the Design Tangible</h2>
<ol>
  <li>Architecture Decision Records:
  <ul>
    <li>Capture architecture design decisions using a lightweight text-based template.</li>
  </ul></li>
  <li>Architecture haiku:
  <ul>
    <li>Create bit-sized architecture summaries that stakeholders will actually use.</li>
    <li>Think through and articulate the essential parts.</li>
  </ul></li>
  <li>Context diagram:
  <ul>
    <li>Help stakeholders understand where the software system fits in the world.</li>
    <li>Agreement with system scope.</li>
  </ul></li>
  <li>Greatest hits reading list:
  <ul>
    <li>Help navigate the morass of design artifacts, so they can find relevant information.</li>
    <li>Links list with tile, overview and caveats.</li>
  </ul></li>
  <li>Inception deck:
  <ul>
    <li>Answer 10 important questions at the start of a new project to avoid common failures and align stakeholders.</li>
    <li><a href="https://agilewarrior.wordpress.com/2010/11/06/the-agile-inception-deck/">The Agile Inception Deck</a></li>
    <li>Customize questions to your context.</li>
    <li>Effort to create should be proportional to size and cost of project.</li>
  </ul></li>
  <li>Modular decomposition diagram:
  <ul>
    <li>Simple tree diagram that shows how abstractions at different granularities are related.</li>
    <li>Root is the whole system.</li>
    <li>Child are more and more specific.</li>
  </ul></li>
  <li>Paths not taken:
  <ul>
    <li>List options discarded with a brief explanation of why.</li>
  </ul></li>
  <li>Prototype to learn or decide:
  <ul>
    <li>Always prototype as quickly and cheaply as possible.</li>
  </ul></li>
  <li>Sequential diagram.</li>
  <li>System metaphor.</li>
</ol><h2><a name="ch-17"></a>Chapter 17 - Activities to Evaluate Design Options</h2>
<ul>
  <li>Evaluation is a continuous activity.</li>
</ul>
<ol>
  <li>Architecture Briefing:
  <ul>
    <li>Brief presentation on some part of the architecture, to get meaningful feedback.</li>
  </ul></li>
  <li>Code review:
  <ul>
    <li>From architecture point of view.</li>
  </ul></li>
  <li>Decision Matrix:
  <ul>
    <li>Visual comparison of alternatives.</li>
    <li>No more than 7 factors.</li>
    <li>No more than 5 design options.</li>
    <li>Take notes when filling the matrix.</li>
  </ul></li>
  <li>Observe Behaviour:
  <ul>
    <li>Add instrumentation to see runtime behaviours.</li>
  </ul></li>
  <li>Question-Comment-Concern:
  <ul>
    <li>Collaborative, visual activity to shine light on knowledge gaps, articulate issues, and establish known facts about the architecture.</li>
    <li>Team puts sticky notes (comments, questions, concerns) on views of the architecture.</li>
  </ul></li>
  <li>Risk storming:
  <ul>
    <li>Collaborative, visual technique for identifying risks in the architecture.</li>
  </ul></li>
  <li>Sanity check:
  <ul>
    <li>To expose issues in team communication or understanding.</li>
    <li>Pop quiz-like.</li>
  </ul></li>
  <li>Scenario walk-through:
  <ul>
    <li>Describe step-by-step how the architecture addresses a specific quality attribute scenario.</li>
    <li>Use early.</li>
    <li>Avoid problem-solving during the session.</li>
    <li>Architect + note taker + session moderator + few reviewers. 3-7 total.</li>
  </ul></li>
  <li>Sketch and Compare:
  <ul>
    <li>Create two or more alternatives of the same design, so it is easier to see the pros/cons.</li>
    <li>Always summarize the findings.</li>
  </ul></li>
</ol>]]></description></item></channel></rss>