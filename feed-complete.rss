<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="https://danlebrero.com" rel="self" type="application/rss+xml"/><title>Daniel Lebrero Berna Blog</title><link>https://danlebrero.com</link><language>en</language><lastBuildDate>Fri, 16 Aug 2024 00:00:00 +0200</lastBuildDate><pubDate>Fri, 16 Aug 2024 00:00:00 +0200</pubDate><description>Daniel Lebrero blog</description><generator>clj-rss</generator><item><title>Book notes: The HP Way</title><link>https://danlebrero.com/2024/08/16/the-hp-way-summary/</link><guid>https://danlebrero.com/2024/08/16/the-hp-way-summary/</guid><pubDate>Fri, 16 Aug 2024 00:00:00 +0200</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/4dKZsXY">The HP Way: How Bill Hewlett and I Built Our Company</a> by <a href="https://en.wikipedia.org/wiki/David_Packard">David Packard</a>.</p>
<blockquote><p>Not about adopting the HP way, but an example of the power of building a company based on a framework of principles.</p>
</blockquote><h1>Key Insights</h1>
<ul>
  <li>5 fundamental concepts:
  <ol>
    <li>HP exists to make a technical contribution:
    <ul>
      <li>Only pursue opportunities consistent with this purpose.</li>
    </ul></li>
    <li>HP demands of itself and its people superior performance.</li>
    <li>Best results come when you get the right people, trust them, give them freedom to find the best path to achieve objectives, and share in the rewards their work makes possible.</li>
    <li>Responsibility to contribute directly to the well-being of the communities in which it operates.</li>
    <li>Integrity.</li>
  </ol></li>
  <li>The principle that underpins every truly great company: preserve the core (what we stand for) and stimulate progress (how we do things):
  <ul>
    <li>Duality of continuity and change.</li>
  </ul></li>
  <li>Companies exist so a group of people are able to accomplish something collectively which they could not accomplish separately.</li>
  <li>Profit is the measure of how well we work together.</li>
  <li>Personal communication was often necessary to back up written instructions.</li>
  <li>To this day, HP has a profit-sharing program that encourages teamwork and maintains that important link between employee effort and corporate success.</li>
  <li>Our success depends in large part on giving the responsibility to the level where it can be exercised effectively, usually on the lowest possible level of the organization, the level nearest to the customer.</li>
  <li>If managers were to be guided by written objectives, they should have a part in developing them.</li>
  <li>Growth: as a measure of strength and a requirement for survival.</li>
  <li>No matter what the pay, the employee thinks they need about 10 percent more.</li>
  <li>One of the most important management tasks: Right balance between short-term profit and investment for growth.
  <ul>
    <li>R&amp;D between 8 to 10% of sales.</li>
  </ul></li>
  <li>There is no shortage of ideas. The problem is to select those likely to fill a read need in the marketplace.</li>
  <li>Products should at least deliver profit six times the cost of developing them:
  <ul>
    <li>The products that beat the six-to-one ratio by the widest margin were the most innovative.</li>
  </ul></li>
  <li>Bill Hewlett &ldquo;hat-wearing process&rdquo; to keep inventors motivated on the face their ideas being turned down:
  <ol>
    <li>Enthusiasm hat:
    <ul>
      <li>Listen.</li>
      <li>Express excitement and appreciation.</li>
      <li>Ask few gentle questions.</li>
    </ul></li>
    <li>Inquisition hat:
    <ul>
      <li>Few days later.</li>
      <li>Lots of very pointed questions.</li>
      <li>Thorough probing of the idea.</li>
    </ul></li>
    <li>Decision hat:
    <ul>
      <li>Shortly thereafter.</li>
      <li>With logic and sensitively, deliver judgement.</li>
    </ul></li>
  </ol></li>
  <li>People want to do a good job.</li>
  <li>Individual freedom and initiative while emphasizing commonness of purpose and teamwork.</li>
  <li>Acquisitions main difficulty: Blending two cultures, operating philosophies, and a management styles.</li>
  <li>No operating policy has contributed more to HP success than the policy of &ldquo;management by objectives&rdquo;:
  <ul>
    <li>Employees must take sufficient interest in their work to want to plan it, to propose new solutions to old problems, and to jmp in when they have something to contribute.</li>
  </ul></li>
  <li>The best job can be done when the manager has a genuine and thorough understanding of the work:
  <ul>
    <li>What standards to observe.</li>
    <li>What performance to require.</li>
    <li>How to measure results.</li>
  </ul></li>
  <li>In no way charts dictate the communication channels.</li>
  <li>Most successful companies have a practice of promoting from within.</li>
  <li>A career in business would ill prepare me for the frustrations of government bureaucracy.</li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#ch-0">Foreword</a></li>
  <li><a href="#ch-00">Speech by Dave Packard to HP managers, 1960</a></li>
  <li><a href="#ch-2">Chapter 2 - Friendship with Hewlett</a></li>
  <li><a href="#ch-4">Chapter 4 - Gaining More Space</a></li>
  <li><a href="#ch-5">Chapter 5 - From Partnership to Corporation</a></li>
  <li><a href="#ch-6">Chapter 6 - Growth from Profit</a></li>
  <li><a href="#ch-7">Chapter 7 - Commitment to Innovation</a></li>
  <li><a href="#ch-8">Chapter 8 - Listening to Customers</a></li>
  <li><a href="#ch-9">Chapter 9 - Trust in People</a></li>
  <li><a href="#ch-10">Chapter 10 - Growing the Organization</a></li>
  <li><a href="#ch-11">Chapter 11 - Managing the Organization</a></li>
  <li><a href="#ch-12">Chapter 12 - Responsibility to Society</a></li>
</ul><h1><a name="ch-0"></a>Foreword</h1>
<ul>
  <li>Not about adopting the HP way, but an example of the power of building a company based on a framework of principles.</li>
  <li>5 fundamental concepts:
  <ol>
    <li>HP exists to make a technical contribution:
    <ul>
      <li>Only pursue opportunities consistent with this purpose.</li>
    </ul></li>
    <li>HP demands of itself and its people superior performance.</li>
    <li>Best results come when you get the right people, trust them, give them freedom to find the best path to achieve objectives, and share in the rewards their work makes possible.</li>
    <li>Responsibility to contribute directly to the well-being of the communities in which it operates.</li>
    <li>Integrity.</li>
  </ol></li>
  <li>Cornerstone concept: contribution.
  <ul>
    <li>Not &ldquo;How can we succeed?&rdquo; but &ldquo;What can we contribute?&rdquo;</li>
  </ul></li>
  <li>The principle that underpins every truly great company: preserve the core (what we stand for) and stimulate progress (how we do things):
  <ul>
    <li>Duality of continuity and change.</li>
  </ul></li>
</ul><h1><a name="ch-00"></a>Speech by Dave Packard to HP managers, 1960</h1>
<ul>
  <li>Companies exist so a group of people are able to accomplish something collectively which they could not accomplish separately.</li>
  <li>Individuals work for money and to accomplish something worthwhile.</li>
  <li>People work best when they have a real objective and are able to use their own capabilities to the greatest extent:
  <ul>
    <li>Management by Objectives instead of Management by Control.</li>
  </ul></li>
  <li>Supervision is the job of providing the opportunity for people to use their capabilities efficiently and effectively.</li>
  <li>They get an instrument to the place where it is about ready to go and the job is about half done.</li>
  <li>As a supervisor, tolerance is tremendously significant.</li>
  <li>Profit is the measure of how well we work together.</li>
</ul><h1><a name="ch-2"></a>Chapter 2 - Friendship with Hewlett</h1>
<ul>
  <li>Terman: business opportunities were even greater for someone with a sound theoretical background.</li>
  <li>Personal communication was often necessary to back up written instructions:
  <ul>
    <li>Genesis of &ldquo;management by walking around&rdquo;.</li>
  </ul></li>
</ul><h1><a name="ch-4"></a>Chapter 4 - Gaining More Space</h1>
<ul>
  <li>More businesses die from indigestion than starvation.</li>
  <li>It was better to have two companies (competitors) introducing a new product, especially if it incorporated new tech, because that made it all the more credible to the customer.</li>
  <li>To this day, HP has a profit-sharing program that encourages teamwork and maintains that important link between employee effort and corporate success.</li>
  <li>Build a group of complementary products, rather than becoming involved in a lot of unrelated things.</li>
</ul><h1><a name="ch-5"></a>Chapter 5 - From Partnership to Corporation</h1>
<ul>
  <li>Hire top engineering graduates:
  <ul>
    <li>An important factor in the success of the company.</li>
    <li>Honors Cooperative Program: qualified HP engineers to pursue advance degrees at Standford, while at full salary, with HP paying part of full tuition.</li>
  </ul></li>
  <li>To get cattle through the gate:
  <ul>
    <li>Best was to apply steady gentle pressure from the rear.</li>
    <li>Too much pressure == panic and scattering.</li>
    <li>Too little == cattle just head back to their old grazing spots.</li>
    <li>This insight was useful throughout my management career.</li>
  </ul></li>
  <li>Our success depends in large part on giving the responsibility to the level where it can be exercised effectively, usually on the lowest possible level of the organization, the level nearest to the customer.</li>
  <li>90 eng in product dev: restructure into 4 smaller, more efficient groups.
  <ul>
    <li>In also allowed a design engineer to concentrate on one customer.</li>
  </ul></li>
  <li>If managers were to be guided by written objectives, they should have a part in developing them.</li>
  <li>Objectives were meant to be evaluated from time to time and to be modified if necessary.</li>
  <li>1966 objectives:
  <ol>
    <li>Profit: best single measurement of contribution to society and ultimate source of corporate strength.</li>
    <li>Customers: continual improvement in quality, usefulness and value we offer our customers.</li>
    <li>Field of interest. Focus.</li>
    <li>Growth: as a measure of strength and a requirement for survival.</li>
    <li>Employees:
    <ul>
      <li>Share HP success.</li>
      <li>Job security based on performance.</li>
      <li>Personal satisfaction from a sense of accomplishment.</li>
    </ul></li>
    <li>Organization: that fosters individual motivation, initiate and creativity, and wide latitude of freedom in working towards objectives.</li>
    <li>Citizenship: contribute to the community which generate the env in which we operate.</li>
  </ol></li>
  <li>Any org develops a philosophy, a set of values, a series of traditions and customs: there are unique to the org.</li>
</ul><h1><a name="ch-6"></a>Chapter 6 - Growth from Profit</h1>
<ul>
  <li>Financing growth primarily out of earnings rather than borrowing.</li>
  <li>Employee stock purchase plans provided significant amounts of cash:
  <ul>
    <li>Mistake: allow people to immediately sell stock.</li>
  </ul></li>
  <li>No matter what the pay, the employee thinks they need about 10 percent more.</li>
  <li>Self-financing requires constant vigilance and self-discipline.</li>
  <li>It is often more practical to acquire a company by an exchange of stock than by outright purchase.</li>
  <li>Good new products are the lifeblood of tech companies.</li>
  <li>One of the most important management tasks:
  <ul>
    <li>Right balance between short-term profit and investment for growth.</li>
  </ul></li>
  <li>R&amp;D between 8 to 10% of sales.</li>
  <li>Introducing a product at a price too low to make an adequate short-term profit, with the thinking that costs will go down in the future and enable good profit, rarely works.</li>
  <li>Capturing market share by undercutting competitor&rsquo;s price results in little or no profit.</li>
</ul><h1><a name="ch-7"></a>Chapter 7 - Commitment to Innovation</h1>
<ul>
  <li>There is no shortage of ideas. The problem is to select those likely to fill a read need in the marketplace:
  <ul>
    <li>Ideas must be practical and useful.</li>
    <li>Useful == fill a need + economical + efficient.</li>
  </ul></li>
  <li>Products should at least deliver profit six times the cost of developing them:
  <ul>
    <li>The products that beat the six-to-one ratio by the widest margin were the most innovative.</li>
  </ul></li>
  <li>Bill Hewlett &ldquo;hat-wearing process&rdquo; to keep inventors motivated on the face their ideas being turned down:
  <ol>
    <li>Enthusiasm hat:
    <ul>
      <li>Listen.</li>
      <li>Express excitement and appreciation.</li>
      <li>Ask few gentle questions.</li>
    </ul></li>
    <li>Inquisition hat:
    <ul>
      <li>Few days later.</li>
      <li>Lots of very pointed questions.</li>
      <li>Thorough probing of the idea.</li>
    </ul></li>
    <li>Decision hat:
    <ul>
      <li>Shortly thereafter.</li>
      <li>With logic and sensitively, deliver judgement.</li>
    </ul></li>
  </ol></li>
  <li>HP strives to add something new and different:
  <ul>
    <li>This was a hindrance in entering the PC field.</li>
    <li>We have to learn that the contribution HP can make is in ease of use, speed, reliability and affordability.</li>
  </ul></li>
  <li>Sometimes management turn down of a new idea doesn&rsquo;t effectively kill it:
  <ul>
    <li>How to distinguish between insubordination and entrepreneurship?
    <ul>
      <li>The difference lay in the intent: the engineer just wanted a success for HP.</li>
    </ul></li>
  </ul></li>
</ul><h1><a name="ch-8"></a>Chapter 8 - Listening to Customers</h1>
<ul>
  <li>Vice President of Marketing wanted our sales engineers to make the customer&rsquo;s side in any dispute with the company.</li>
  <li>We are not selling hardware; we&rsquo;re selling solutions to customers problems.</li>
  <li>Salespeople to never speak disparagingly of the competition.</li>
  <li>Gains in quality come from meticulous attention to detail and every step in the manufacturing process must be done as carefully as possible, not as quickly as possible.</li>
</ul><h1><a name="ch-9"></a>Chapter 9 - Trust in People</h1>
<ul>
  <li>People want to do a good job.</li>
  <li>High management positions must not only be enthusiastic themselves, they must be able to engender enthusiasm among their associates.</li>
  <li>Each person is important and every job is important:
  <ul>
    <li>Little details often make the difference between a quality product and one that isn&rsquo;t as good.</li>
  </ul></li>
  <li>Individual freedom and initiative while emphasizing commonness of purpose and teamwork.</li>
  <li>As the company grew, we could no longer take teamwork for granted:
  <ul>
    <li>Why profit sharing are provided not to selected individuals but to all eligible employees.</li>
  </ul></li>
  <li>My wife started the practice of buying a wedding gift for every employee who married and a baby blanket for every family having a baby:
  <ul>
    <li>Helped create a sense of belonging.</li>
  </ul></li>
  <li>Picnics were an important part of the HP Way.</li>
  <li>The underlying principle of HP&rsquo;s personnel policies became the concept of sharing:
  <ul>
    <li>Responsibility for defining and meeting goals.</li>
    <li>Company ownership through stock purchase plans.</li>
    <li>Profits.</li>
    <li>Opportunities for personal and professional development.</li>
    <li>Burden by downturns in business.</li>
  </ul></li>
  <li>Keep storerooms and part bins open:
  <ul>
    <li>Builds trust.</li>
    <li>Allow those who wanted to work out new ideas at home or on weekends.</li>
  </ul></li>
</ul><h1><a name="ch-10"></a>Chapter 10 - Growing the Organization</h1>
<ul>
  <li>Decentralized in order to retain emphasis on individual responsibility and achievement.</li>
  <li>Each division aimed to be autonomous.</li>
  <li>Company growth allows ample opportunity for personal growth and progress.</li>
  <li>Acquisitions useful for expanding a company&rsquo;s technology and gain quick entry into new markets.</li>
  <li>Acquisitions main difficulty:
  <ul>
    <li>Blending two cultures, operating philosophies, and a management styles.</li>
  </ul></li>
  <li>Split divisions when they are about 1500 people.</li>
  <li>By 1990, 65 divisions organized into 13 product groups.</li>
  <li>Widely decentralized companies should be alert to signs of cumbersome centralization.</li>
</ul><h1><a name="ch-11"></a>Chapter 11 - Managing the Organization</h1>
<ul>
  <li>No operating policy has contributed more to HP success than the policy of &ldquo;management by objectives&rdquo;:
  <ul>
    <li>Employees must take sufficient interest in their work to want to plan it, to propose new solutions to old problems, and to jmp in when they have something to contribute.</li>
  </ul></li>
  <li>Peter Drucker:
  <ul>
    <li>In emerging org, the skeleton or internal structure is a combination of mutual understanding and responsibility.</li>
  </ul></li>
  <li>The best job can be done when the manager has a genuine and thorough understanding of the work:
  <ul>
    <li>What standards to observe.</li>
    <li>What performance to require.</li>
    <li>How to measure results.</li>
  </ul></li>
  <li>Managing by walking around:
  <ul>
    <li>If done reluctantly or infrequently, it just won&rsquo;t work.</li>
    <li>It needs to be frequent, friendly, unfocused and unscheduled.</li>
    <li>It requires good listening.</li>
  </ul></li>
  <li>Open door policy:
  <ul>
    <li>Benefits outweigh interruptions.</li>
  </ul></li>
  <li>In no way charts dictate the communication channels:
  <ul>
    <li>An individual is expected to seek information from the most likely source.</li>
  </ul></li>
  <li>Nothing beats personal, two-way communication for fostering cooperation and teamwork and for building an attitude of trust and understanding.</li>
  <li>Managing succession is especially critical at the upper levels:
  <ul>
    <li>Responsibility of managers for selecting and training their potential successors.</li>
  </ul></li>
  <li>Yearly review of division operations by top-management:
  <ul>
    <li>One whole day + dinner.</li>
    <li>Key people asked to make a presentation as a way to assess their manager training and development responsibilities.</li>
  </ul></li>
  <li>Most successful companies have a practice of promoting from within.</li>
</ul><h1><a name="ch-12"></a>Chapter 12 - Responsibility to Society</h1>
<ul>
  <li>A career in business would ill prepare me for the frustrations of government bureaucracy.</li>
  <li>The betterment of our society is not a job to be left to a few; it is responsibility to be shared by all.</li>
</ul>]]></description></item><item><title>Book notes: Tidy First?</title><link>https://danlebrero.com/2024/08/07/tidy-first-summary/</link><guid>https://danlebrero.com/2024/08/07/tidy-first-summary/</guid><pubDate>Wed, 07 Aug 2024 00:00:00 +0200</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/3SFYhRM">Tidy First? A Personal Exercise in Empirical Software Design</a> by <a href="https://x.com/kentbeck">Kent Beck</a>.</p><p>The book takes you from basic entry level refactorings to the economics of optionality, all in less than 100 pages.</p><h1>Key Insights</h1>
<ul>
  <li>Coupling and cohesion are simply measures of complexity.</li>
  <li>SW design is an exercise in human relationships.</li>
  <li>Design some time around when you can take advantage of the design.</li>
  <li>Tidyings are a subset of refactoring that nobody could possibly hate on:
  <ul>
    <li>Tidying is geek self-care.</li>
  </ul></li>
  <li>As a code reader, you expect that difference means difference.</li>
  <li>Sometimes better cohesion helps you live with the coupling.</li>
  <li>Done well, SW design enables SW design that enables change.</li>
  <li>Sometimes because of how small pieces interact, the code is harder to understand than one big pile of code.</li>
  <li>More than one hour tidying at a time before making any behavioral changes, likely means you have lost track of the minimum set of structural changes needed.</li>
  <li>Tidying later is a learning tool.</li>
  <li>Understanding theory optimizes application.</li>
  <li>SW designers can only:
  <ul>
    <li>Create and delete elements.</li>
    <li>Create and delete relationships.</li>
    <li>Increase the benefit of a relationship.</li>
  </ul></li>
  <li>SW creates value in two ways:
  <ol>
    <li>What it does today (== behaviour).</li>
    <li>The possibility of new things we can make it do tomorrow (== optionality).</li>
  </ol></li>
  <li>SW structure creates options.</li>
  <li>We can&rsquo;t really tell if we have invested or invested enough in SW structure.</li>
  <li>Economic value of a SW system is the sum of the discounted future cash flows.</li>
  <li>Most SW design decisions are easily reversible, hence there is little value to avoiding mistakes, hence we shouldn&rsquo;t invest much in doing so.
  <ul>
    <li>Make decisions reversible.</li>
  </ul></li>
  <li>Analyzing coupling requires knowing what changes have happened and/or likely to happen.</li>
  <li>Cascading coupling are the bigger issue.</li>
  <li>Constantine&rsquo;s equivalence:
  <ul>
    <li>cost(sw) ~= cost(changes) ~= cost(big changes) ~= coupling.</li>
    <li>To reduce the cost of SW, we must reduce coupling.</li>
  </ul></li>
  <li>Make SW design an ordinary, balanced part of development.</li>
  <li>Tidy first? Likely yes. Just enough. You are worth it.</li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#ch-0">Foreword</a></li>
  <li><a href="#ch-00">Preface</a></li>
  <li><a href="#ch-000">Introduction</a></li>
  <li><a href="#p-1">Part I - Tidyings</a>
  <ul>
    <li><a href="#ch-1">Chapter 1 - Guard Clauses</a></li>
    <li><a href="#ch-2">Chapter 2 - Dead Code</a></li>
    <li><a href="#ch-3">Chapter 3 - Normalize Symmetries</a></li>
    <li><a href="#ch-4">Chapter 4 - New Interface, Old Implementation</a></li>
    <li><a href="#ch-5">Chapter 5 - Reading Order</a></li>
    <li><a href="#ch-6">Chapter 6 - Cohesion Order</a></li>
    <li><a href="#ch-7">Chapter 7 - Move Declaration and Initialization Together</a></li>
    <li><a href="#ch-8">Chapter 8 - Explaining Variables</a></li>
    <li><a href="#ch-9">Chapter 9 - Explaining Constants</a></li>
    <li><a href="#ch-10">Chapter 10 - Explicit Parameters</a></li>
    <li><a href="#ch-11">Chapter 11 - Chunk Statements</a></li>
    <li><a href="#ch-12">Chapter 12 - Extract Helper</a></li>
    <li><a href="#ch-13">Chapter 13 - One Pile</a></li>
    <li><a href="#ch-14">Chapter 14 - Explaining Comments</a></li>
  </ul></li>
  <li><a href="#p-2">Part II - Managing</a>
  <ul>
    <li><a href="#ch-16">Chapter 16 - Separate Tidying</a></li>
    <li><a href="#ch-17">Chapter 17 - Chaining</a></li>
    <li><a href="#ch-18">Chapter 18 - Batch Sizes</a></li>
    <li><a href="#ch-19">Chapter 19 - Rhythm</a></li>
    <li><a href="#ch-20">Chapter 20 - Getting Untangled</a></li>
    <li><a href="#ch-21">Chapter 21 - First, After, Later, Never</a></li>
  </ul></li>
  <li><a href="#p-3">Part III - Theory</a>
  <ul>
    <li><a href="#ch-22">Chapter 22 - Beneficially Relating Elements</a></li>
    <li><a href="#ch-23">Chapter 23 - Structure and Behaviour</a></li>
    <li><a href="#ch-24">Chapter 24 - Economics: Time Value and Optionality</a></li>
    <li><a href="#ch-25">Chapter 25 - A Dollar Today &gt; A Dollar Tomorrow</a></li>
    <li><a href="#ch-26">Chapter 26 - Options</a></li>
    <li><a href="#ch-27">Chapter 27 - Options Versus Cash Flows</a></li>
    <li><a href="#ch-28">Chapter 28 - Reversible Structure Changes</a></li>
    <li><a href="#ch-29">Chapter 29 - Coupling</a></li>
    <li><a href="#ch-30">Chapter 30 - Constantine&rsquo;s Equivalence</a></li>
    <li><a href="#ch-31">Chapter 31 - Coupling Versus Decoupling</a></li>
  </ul></li>
  <li><a href="#p-4">Conclusion</a></li>
</ul><h1><a name="ch-0"></a>Foreword</h1>
<ul>
  <li>Larry Constantine:
  <ul>
    <li>Complexity of code depends on how it is organized into parts, on how coupled those parts are with each other, and on how cohesive the parts are in themselves.</li>
  </ul></li>
  <li>Coupling and cohesion are simply measures of complexity.</li>
</ul><h1><a name="ch-00"></a>Preface</h1>
<ul>
  <li>SW design is an exercise in human relationships.</li>
  <li>Why do we go down the rabbit hole of cleaning code to the exclusion of work that would help our users?</li>
  <li>Design some time around when you can take advantage of the design:
  <ul>
    <li>This requires taste, negotiation and judgement.</li>
    <li>Taste and judgement is an inevitable weakness.</li>
  </ul></li>
</ul><h1><a name="ch-000"></a>Introduction</h1>
<ul>
  <li>How much and when to do sw design.</li>
</ul><h1><a name="p-1"></a>Part I - Tidyings</h1>
<ul>
  <li>Tidyings are a subset of refactoring that nobody could possibly hate on.</li>
</ul><h2><a name="ch-1"></a>Chapter 1 - Guard Clauses</h2>
<ul>
  <li>Make code easier to read.</li>
  <li>A routine with 7 or 8 guard clauses is not easier to read.</li>
</ul><h2><a name="ch-2"></a>Chapter 2 - Dead Code</h2>
<ul>
  <li>Delete it.</li>
  <li>If you suspect code isn&rsquo;t used, pre-tidy it by logging its use.</li>
</ul><h2><a name="ch-3"></a>Chapter 3 - Normalize Symmetries</h2>
<ul>
  <li>As a reader, you expect that difference means difference.</li>
</ul><h2><a name="ch-4"></a>Chapter 4 - New Interface, Old Implementation</h2>
<ul>
  <li>Implement the interface you wish you could call and call it.</li>
  <li>Creating a pass-through interface is the microscale essence of SW design.</li>
</ul><h2><a name="ch-5"></a>Chapter 5 - Reading Order</h2>
<ul>
  <li>No single ordering of elements is perfect.</li>
</ul><h2><a name="ch-6"></a>Chapter 6 - Cohesion Order</h2>
<ul>
  <li>Reorder code so the elements that change together are adjacent.</li>
  <li>Sometimes better cohesion helps you live with the coupling.</li>
</ul><h2><a name="ch-7"></a>Chapter 7 - Move Declaration and Initialization Together</h2>
<ul>
  <li>Is it easier to read if each var is declared and initialized just before it is used, or if they are all declared and initialized together at the top?</li>
</ul><h2><a name="ch-8"></a>Chapter 8 - Explaining Variables</h2>
<ul>
  <li>Extract subexpressions into named variables.</li>
</ul><h2><a name="ch-9"></a>Chapter 9 - Explaining Constants</h2>
<ul>
  <li>I agree with the principle, disagree with the example (404 vs HTTP.NOT_FOUND).</li>
</ul><h2><a name="ch-10"></a>Chapter 10 - Explicit Parameters</h2>
<ul>
  <li>A map with keys is not explicit enough.
  <ul>
    <li>Clojure?</li>
  </ul></li>
</ul><h2><a name="ch-11"></a>Chapter 11 - Chunk Statements</h2>
<ul>
  <li>Put a blank line between parts of a routine.</li>
  <li>Done well, sw design enables sw design that enables change.</li>
</ul><h2><a name="ch-12"></a>Chapter 12 - Extract Helper</h2>
<ul>
  <li>New interfaces emerge when we&rsquo;re ready to think more abstractly, to add words to our design vocabulary.</li>
</ul><h2><a name="ch-13"></a>Chapter 13 - One Pile</h2>
<ul>
  <li>Sometimes because of how small pieces interact, the code is harder to understand:
  <ul>
    <li>Inline as much code as you need and tidy from there.</li>
  </ul></li>
</ul><h2><a name="ch-14"></a>Chapter 14 - Explaining Comments</h2>
<ul>
  <li>Write down what isn&rsquo;t obvious from the code:
  <ul>
    <li>Keep other people&rsquo;s perspective in mind.</li>
  </ul></li>
</ul><h1><a name="p-2"></a>Part II - Managing</h1>
<ul>
  <li>Tidying is geek self-care.</li>
  <li>Just because you can tidy doesn&rsquo;t mean you should tidy.</li>
</ul><h2><a name="ch-16"></a>Chapter 16 - Separate Tidying</h2>
<ul>
  <li>Tidying go in their PRs, with as few tidying per PR as possible:
  <ul>
    <li>If you are comfortable with tidying, experiment with not requiring PRs for tidying.</li>
  </ul></li>
</ul><h2><a name="ch-17"></a>Chapter 17 - Chaining</h2>
<ul>
  <li>Stick to tiny tidying steps.</li>
</ul><h2><a name="ch-18"></a>Chapter 18 - Batch Sizes</h2>
<ul>
  <li>Tidying is not looking towards a far-ahead future, but the immediate need.</li>
  <li>Reduce the cost of reviews (for tidying).</li>
</ul><h2><a name="ch-19"></a>Chapter 19 - Rhythm</h2>
<ul>
  <li>More than one hour tidying at a time before making any behavioral changes, likely means you have lost track of the minimum set of structural changes needed.</li>
  <li>From Pareto rules, most changes will end up in a tidied up area.</li>
</ul><h2><a name="ch-20"></a>Chapter 20 - Getting Untangled</h2>
<ul>
  <li>If you end up with a mess of tidyings and changes all tangled together, discard them and start over, tidying first:
  <ul>
    <li>Is more works.</li>
    <li>Leaves a coherent chain of commits.</li>
    <li>You might see something new.</li>
  </ul></li>
</ul><h2><a name="ch-21"></a>Chapter 21 - First, After, Later, Never</h2>
<ul>
  <li>When to tidy?
  <ol>
    <li>Never:
    <ul>
      <li>If you are never ever going to touch the code again.</li>
      <li>Very unlikely.</li>
    </ul></li>
    <li>Later:
    <ul>
      <li>If you don&rsquo;t have enough time to do your work.</li>
      <li>Create a list of tidyings and work on them when you don&rsquo;t have the energy or time to start something big.</li>
      <li>Tidying later is a learning tool.</li>
      <li>Feels good: don&rsquo;t underestimate how much better you are as a programmer when you are happy.</li>
    </ul></li>
    <li>After:
    <ul>
      <li>If you are going to change the same are again soon.</li>
      <li>It is cheaper to do now.</li>
      <li>Is proportional to the cost of the behavioral change.</li>
    </ul></li>
    <li>First:
    <ul>
      <li>If the change is easier after the tidying.</li>
      <li>If it helps you understand the code.</li>
    </ul></li>
  </ol></li>
  <li>Be wary of tidying becoming an end in itself.</li>
</ul><h1><a name="p-3"></a>Part III - Theory</h1>
<ul>
  <li>Understanding theory optimizes application.</li>
  <li>If we disagree in principle, and we can discuss our principles, then we have a chance to agree sooner.</li>
</ul><h2><a name="ch-22"></a>Chapter 22 - Beneficially Relating Elements</h2>
<ul>
  <li>SW designers can only:
  <ul>
    <li>Create and delete elements.</li>
    <li>Create and delete relationships.</li>
    <li>Increase the benefit of a relationship.</li>
  </ul></li>
  <li>Structure of a system:
  <ul>
    <li>Element hierarchy.</li>
    <li>Relationship between elements.</li>
    <li>Benefits created by those relationships.</li>
  </ul></li>
</ul><h2><a name="ch-23"></a>Chapter 23 - Structure and Behaviour</h2>
<ul>
  <li>SW creates value in two ways:
  <ol>
    <li>What it does today (== behaviour).</li>
    <li>The possibility of new things we can make it do tomorrow (== optionality).</li>
  </ol></li>
  <li>The mere presence of a system behaving a certain way changes the desire for how the system should behave (Heisenberg&rsquo;s uncertainty principle).</li>
  <li>The more volatile the env is, the more valuable options become.</li>
  <li>A reason for option value to reduce is if exercising an option takes a month instead of a day.</li>
  <li>SW structure creates options.</li>
  <li>We can&rsquo;t really tell if we have invested or invested enough in SW structure.</li>
</ul><h2><a name="ch-24"></a>Chapter 24 - Economics: Time Value and Optionality</h2>
<ul>
  <li>When geeky imperatives clash with money imperatives, money wins.</li>
  <li>Nature of money:
  <ol>
    <li>A dollar today is worth more than a dollar tomorrow, so earn sooner and spend later.</li>
    <li>In a chaotic situation, options are better than things, so create options in the face of uncertainty.</li>
  </ol></li>
</ul><h2><a name="ch-25"></a>Chapter 25 - A Dollar Today &gt; A Dollar Tomorrow</h2>
<ul>
  <li>The time value of money encourages tidy after over tidy first.</li>
</ul><h2><a name="ch-26"></a>Chapter 26 - Options</h2>
<ul>
  <li>Economic value of a SW system is the sum of the discounted future cash flows:
  <ul>
    <li>We create value when we change those flows:
    <ul>
      <li>Earning more money, sooner, and with greater likelihood.</li>
      <li>Spending less money, later, and with less likelihood.</li>
    </ul></li>
  </ul></li>
</ul><h2><a name="ch-27"></a>Chapter 27 - Options Versus Cash Flows</h2>
<ul>
  <li>Tidying first may make economic sense in spite of discounted cash flows if the value of the options created is greater than the value lost by spending money sooner and with certainty:
  <ul>
    <li>We are firmly in the last of judgement here.</li>
  </ul></li>
</ul><h2><a name="ch-28"></a>Chapter 28 - Reversible Structure Changes</h2>
<ul>
  <li>There is great value in reviewing, double-checking irreversible decisions. The pace should b slow and deliberate.</li>
  <li>Most SW design decisions are easily reversible, hence there is little value to avoiding mistakes, hence we shouldn&rsquo;t invest much in doing so.</li>
  <li>Code reviews should distinguish between reversible and irreversible changes, and the investment should be accordingly.</li>
  <li>Make decisions reversible.</li>
</ul><h2><a name="ch-29"></a>Chapter 29 - Coupling</h2>
<ul>
  <li>If two elements are coupled with respect to a change that never happens, then they aren&rsquo;t coupled in a way that should concern us.</li>
  <li>Analyzing coupling requires knowing what changes have happened and/or likely to happen.</li>
  <li>Cascading coupling are the bigger issue.</li>
  <li>Coupling drives the cost of sw.</li>
</ul><h2><a name="ch-30"></a>Chapter 30 - Constantine&rsquo;s Equivalence</h2>
<ul>
  <li>The most expensive behaviour changes cost together far more than all the least expensive behaviour changes.</li>
  <li>Constantine&rsquo;s equivalence:
  <ul>
    <li>cost(sw) ~= cost(changes) ~= cost(big changes) ~= coupling.</li>
  </ul></li>
  <li>To reduce the cost of SW, we must reduce coupling.</li>
</ul><h2><a name="ch-31"></a>Chapter 31 - Coupling Versus Decoupling</h2>
<ul>
  <li>Coupling often isn&rsquo;t obvious until you step on it.</li>
  <li>The more you reduce coupling for one class of changes, the greater the coupling becomes for other classes of changes.</li>
</ul><h1><a name="p-4"></a>Conclusion</h1>
<ul>
  <li>Make SW design an ordinary, balanced part of development.</li>
  <li>Tidy first? Likely yes. Just enough. You are worth it.</li>
</ul>]]></description></item><item><title>Book notes: Unbundling the Enterprise</title><link>https://danlebrero.com/2024/07/31/unbundling-the-enterprise-book-summary/</link><guid>https://danlebrero.com/2024/07/31/unbundling-the-enterprise-book-summary/</guid><pubDate>Wed, 31 Jul 2024 00:00:00 +0200</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/3zETQQg">Unbundling the Enterprise: APIs, Optionality, &amp; the Science of Happy Accidents</a> by <a href="https://twitter.com/fistsofreason">Stephen Fishman</a> and <a href="https://twitter.com/MattMcLartyBC">Matt McLarty</a>.</p><p>Summary of summaries:</p>
<blockquote><p>Most valuable treasures out there are the ones you don&rsquo;t yet know to look for.</p>
</blockquote><h1>Key Insights</h1>
<ul>
  <li><code>OOOps</code>:
  <ul>
    <li>Create <strong>O</strong>ptionality through unbundled APIs
    <ul>
      <li>Spend less time trying to predict the future and more preparing for any eventuality.</li>
    </ul></li>
    <li>Identify <strong>O</strong>pportunities through value dynamics.</li>
    <li>Drive <strong>O</strong>ptimization through feedback loops:
    <ul>
      <li>Use APIs to collect feedback on business activity that can guide digital strategy.</li>
    </ul></li>
  </ul></li>
  <li>4 winning strategies:
  <ol>
    <li>Exchange optimization: adapt to the digital world, thus increasing speed and scale of value exchanges while lowering coordination costs.</li>
    <li>Distributed innovation:
    <ul>
      <li>16m software developers globally vs 1 billion knowledge workers.</li>
      <li>3 ways to increase innovation:
      <ol>
        <li>Involve non-IT knowledge workers.</li>
        <li>Involve sw developers that do not work for you.</li>
        <li>Your own customers.</li>
      </ol></li>
    </ul></li>
    <li>Capability capitalization: unbundle and rebundle business capabilities to create new products.</li>
    <li>Value aggregation: connect disparate value networks.</li>
  </ol></li>
  <li>Web functioned like an ecosystem: The more life there is, the more there is for everyone.</li>
  <li>We underestimate longer-term change because we fail to see that innovation happens in combination.</li>
  <li>Data is a non-rival good: it is not consumed or possessed by only one party at a time.
  <ul>
    <li>In digital products, the degree of convexity is driven by the cost of experimentation.</li>
  </ul></li>
  <li>Slowing down the process of making commitments conserves optionality.</li>
  <li>Data beats math.</li>
  <li>For experimentation at scale:
  <ul>
    <li>Feature flags.</li>
    <li>Ramps: funnel a controllable percentage of all application traffic.</li>
    <li>Visualization tools.</li>
    <li>Statistical literacy and tooling.</li>
  </ul></li>
  <li>Feedback without a strategy direction would just provide a more accurate means of demonstrating stagnation.</li>
  <li>Not a simple task to get all stakeholders aligned on the worthiness of making the investment when the outcome is undefined.
  <ul>
    <li>Finance and executive leadership are slow to recognize and support anything that can&rsquo;t be expressed in a deterministic financial model.</li>
    <li>How do you get the business to focus on walking away from revenue in the goal of eventually getting more revenue?</li>
  </ul></li>
  <li>Optionality:
  <ol>
    <li>The future is uncertain and inherently unpredictable.</li>
    <li>Optionality can be preserved at low cost.</li>
  </ol>
  <ul>
    <li>Then, potential gain is staggering because uncertainty increases the upside but not the downside. <img src="/images/blog/books/unbundling-the-enterprise/concave-and-convex-option.png" alt="concave and convex options model" /></li>
  </ul></li>
  <li>A large exposure to a single trial has lower expected return than a portfolio of small trials.</li>
  <li>Abandon your sense of knowledge and instead look for systems with asymmetry between pain and gain.</li>
  <li>Serial optionality, where winning options build upon each other to attain asymmetric gains.</li>
  <li>If you understand the futility of trying to predict the future in an uncertain world, then manufacturing and preserving convex optionality is the surest way to outperform the competition over time.</li>
  <li>The more uncertain the future, the greater the value of preserving optionality.</li>
  <li>Open by default is a better strategy than closed by default.</li>
  <li>Innovation is never done.</li>
  <li>Innovation can be optimized:
  <ol>
    <li>Compress the cycle time of experiments.</li>
    <li>Execute more experiments in parallel.</li>
  </ol></li>
  <li>You must consistently invest not only in creating the options themselves but also in cheapening the bets across the board.</li>
  <li>Time to market and future planning are opposing forces.</li>
  <li>Position shortcuts as the exception that needs scrutiny and justification.</li>
  <li>Keep your commons teams close to the highest EBITDA revenue in order to buffer them from the unyielding waves of market volatility.</li>
  <li>Jens Rasmussen and Dr. Richard Cook, <a href="https://medium.com/10x-curiosity/boundaries-of-failure-rasmussens-model-of-how-accidents-happen-58dc61eb1cf">Safe Boundary Model</a>. <img src="/images/blog/books/unbundling-the-enterprise/safe-boundary-model.png" alt="Safe boundary model" /></li>
  <li>You&rsquo;re never going to get the exact requirements to innovate.</li>
  <li>Default to buy, build as the exception.</li>
  <li>Firms adopting public APIs grew an additional 38.7% over sixteen years relative to similar non-adopters.</li>
  <li>Quantify the value of performance.</li>
  <li><a href="#ch-11">Risks</a>.</li>
  <li>For APIs, coordination costs will drop again as APIs become self-describing once LLM agents are pointed towards them.</li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#ch-0">Introduction</a>
  <ul>
    <li><a href="#p-1">Part 1 - Innovation By Accident</a></li>
    <li><a href="#ch-1">Chapter 1 - Treasure in Transformation</a></li>
    <li><a href="#ch-2">Chapter 2 - The Science of Happy Accidents</a></li>
    <li><a href="#ch-3">Chapter 3 - Optionality through API Unbundling</a></li>
    <li><a href="#ch-4">Chapter 4 - Opportunism through Value Dynamics</a></li>
    <li><a href="#ch-5">Chapter 5 - Optimization through Feedback Loops</a></li>
  </ul></li>
  <li><a href="#p-2">Part 2 - Success Strategies</a>
  <ul>
    <li><a href="#ch-6">Chapter 6 - Strategies of Success #1: Exchange Optimization</a></li>
    <li><a href="#ch-7">Chapter 7 - Strategies of Success #2: Distributed Innovation</a></li>
    <li><a href="#ch-8">Chapter 8 - Strategies of Success #3: Capability Capitalization</a></li>
    <li><a href="#ch-9">Chapter 9 - Strategies of Success #4: Value Aggregation</a></li>
  </ul></li>
  <li><a href="#p-3">Part 3 - Practical Considerations To Finding Digital Treasure</a>
  <ul>
    <li><a href="#ch-10">Chapter 10 - Getting Started on the Path to Scaled Results</a></li>
    <li><a href="#ch-11">Chapter 11 - Ensuring a Durable Transformation by Understanding the Risks</a></li>
    <li><a href="#ch-12">Chapter 12 - Embracing Uncertainty</a></li>
  </ul></li>
  <li><a href="#ch-13">Conclusion</a></li>
</ul><h1><a name="ch-0"></a>Introduction</h1>
<ul>
  <li>The most important aspect of API-enabled digital treasure hunting: you don&rsquo;t need a map.</li>
  <li>API allow them to be used in many unanticipated ways.</li>
  <li>Treasure-Hunting methods:
  <ol>
    <li>Create optionality through unbundling:
    <ul>
      <li>Spend less time trying to predict the future and more preparing for any eventuality.</li>
      <li>API: unbundle business capabilities into digital assets that can be combined and composed into new products, processes, and experiences that meet opportunities unlocked by innovation.</li>
    </ul></li>
    <li>Identify opportunities through value dynamics:
    <ul>
      <li>Value exchange by powering B2B.</li>
      <li>Value dynamics is a visual method of designing business models through value network and API-enabled value exchange.</li>
    </ul></li>
    <li>Optimize value through feedback loops:
    <ul>
      <li>Use APIs to collect feedback on business activity that can guide digital strategy.</li>
    </ul></li>
  </ol></li>
  <li>4 winning strategies:
  <ol>
    <li>Exchange optimization: adapt to the digital world, thus increasing speed and scale of value exchanges while lowering coordination costs.</li>
    <li>Distributed innovation: Innovation in the hands of business users.</li>
    <li>Capability capitalization: unbundle and rebundle business capabilities to create new products.</li>
    <li>Value aggregation: connect disparate value networks.</li>
  </ol></li>
  <li>This is a book about connection:
  <ul>
    <li>Business to technology.</li>
    <li>Long-term strategy to short term return on investment.</li>
    <li>Intuition to science.</li>
  </ul></li>
</ul><h2><a name="p-1"></a>Part 1 - Innovation By Accident</h2>
<ul>
  <li>&ldquo;Happy accidents&rdquo; occur too frequently to be dismissed as coincidences.</li>
</ul><h2><a name="ch-1"></a>Chapter 1 - Treasure in Transformation</h2>
<ul>
  <li>Whereas a product strategy is about trying to anticipate market and user needs and then delivering packaged products to meet those needs, a platform strategy is about giving the right tools to developers to test their own ideas and build their own products and services.</li>
  <li>The Golden Rule of Platform is that you &ldquo;Eat Your Own Dog-food&rdquo;.</li>
  <li><a href="https://nordicapis.com/the-bezos-api-mandate-amazons-manifesto-for-externalization/">Bezos API Mandate</a>.</li>
  <li>O&rsquo;Reilly listed four reasons Amazon needed to adopt a platform culture by unbundling their capabilities through APIs:
  <ul>
    <li>APIs would provide a gateway for all the smart and creative people who work outside of Amazon to create unanticipated innovation for the company.</li>
    <li>New revenue opportunities for Amazon if they were willing to be patient.</li>
    <li>Web functioned like an ecosystem: The more life there is, the more there is for everyone.</li>
  </ul></li>
  <li>Amazon &ldquo;New Process Initiative&rdquo; to prioritize funding for new ideas became a bottleneck:
  <ul>
    <li>They were able to unstick the process by addressing their software architecture.</li>
    <li>It took several years to address getting all the teams to have hard, well-documented APIs.</li>
  </ul></li>
</ul><h2><a name="ch-2"></a>Chapter 2 - The Science of Happy Accidents</h2>
<ul>
  <li>We underestimate longer-term change because we fail to see that innovation happens in combination.</li>
  <li>Digital strategy:
  <ol>
    <li>Orgs should strive to have a lot of capabilities.</li>
    <li>Those capabilities need to be &ldquo;combinable&rdquo;.</li>
  </ol></li>
  <li>Data is a non-rival good: it is not consumed or possessed by only one party at a time.</li>
  <li>Rival products are limited by unit costs:
  <ul>
    <li>Return is capped by logistic constraints within their market.</li>
    <li>Concave curve when plotting their costs vs returns.</li>
    <li>Non-rival goods are the opposite.</li>
  </ul></li>
  <li>In digital products, the degree of convexity is driven by the cost of experimentation.</li>
  <li><code>OOOps</code>:
  <ul>
    <li>Create <strong>O</strong>ptionality through unbundled APIs.</li>
    <li>Identify <strong>O</strong>pportunities through value dynamics.</li>
    <li>Drive <strong>O</strong>ptimization through feedback loops.</li>
  </ul></li>
  <li>Slowing down the process of making commitments conserves optionality.</li>
  <li>Business Model Canvas defines business models as the way companies create, deliver, and capture value:
  <ul>
    <li>Value dynamics is a visual method for mapping out business models by illustrating the flow of value in a digital ecosystem:
    <ul>
      <li>Shapes to depict constituents in the ecosystem.</li>
      <li>Arrows to show the flow of value between constituents.</li>
      <li>Icons that indicate what type of value &ldquo;currency&rdquo; is being exchanged.</li>
    </ul></li>
  </ul></li>
  <li>For experimentation at scale:
  <ul>
    <li>Feature flags.</li>
    <li>Ramps: funnel a controllable percentage of all application traffic.</li>
    <li>Visualization tools.</li>
    <li>Statistical literacy and tooling:
    <ul>
      <li>Data beats math.</li>
      <li>Statistics tools can be misleading and cause speed-killing friction when you don&rsquo;t have the expertise to discern what the results mean and what they don&rsquo;t.</li>
    </ul></li>
  </ul></li>
  <li>Feedback without a strategy direction would just provide a more accurate means of demonstrating stagnation.</li>
</ul><h2><a name="ch-3"></a>Chapter 3 - Optionality through API Unbundling</h2>
<ul>
  <li>Not a simple task to get all stakeholders aligned on the worthiness of making the investment when the outcome is undefined.
  <ul>
    <li>Finance and executive leadership are slow to recognize and support anything that can&rsquo;t be expressed in a deterministic financial model.</li>
    <li>There is a need for a new lens on how to view business forecasts along with a &ldquo;new math&rdquo; that will drive a different approach to investment and continual transformation.</li>
  </ul></li>
  <li><a href="https://en.wikipedia.org/wiki/Carliss_Y._Baldwin">Carliss Y. Baldwin</a>: Higher option value being present &ldquo;when consumer tastes are heterogeneous or unpredictable, and technological trajectories are uncertain&rdquo;.</li>
  <li><a href="https://en.wikipedia.org/wiki/Nassim_Nicholas_Taleb">Nassim Nicholas Taleb</a>:
  <ul>
    <li><a href="https://amzn.to/4eSpxFU">The Black Swan</a>.</li>
    <li><a href="https://amzn.to/3Wc5meM">Antifragile: Things That Gain from Disorder</a>.</li>
    <li>Two types of options: concave and convex.</li>
    <li>Three factors of optionality:
    <ul>
      <li>Incremental cost (pain) to generate and maintain the option.</li>
      <li>Potential value (gain) that could come when you exercise the option.</li>
      <li>How the value scales when the rate of change (variable/uncertainty) scales on the Y axis.</li>
    </ul></li>
    <li>When:
    <ol>
      <li>The future is uncertain and inherently unpredictable.</li>
      <li>Optionality can be preserved at low cost.</li>
    </ol>
    <ul>
      <li>Then, potential gain is staggering because uncertainty increases the upside but not the downside. <img src="/images/blog/books/unbundling-the-enterprise/concave-and-convex-option.png" alt="concave and convex options model" /></li>
    </ul></li>
    <li>A large exposure to a single trial has lower expected return than a portfolio of small trials.</li>
    <li>Attempts to use human understanding as a tool to predict future events are made in vain given that the prediction of future events in the modern worlds is impossible.</li>
    <li>Abandon your sense of knowledge and instead look for systems with asymmetry between pain and gain.</li>
    <li>Serial optionality, where winning options build upon each other to attain asymmetric gains.</li>
  </ul></li>
  <li>If you understand the futility of trying to predict the future in an uncertain world, then manufacturing and preserving convex optionality is the surest way to outperform the competition over time.</li>
  <li>The more uncertain the future, the greater the value of preserving optionality.</li>
  <li>Four rules:
  <ol>
    <li>Convexity is easier to attain than knowledge.</li>
    <li>A convexity strategy can be executed by:
    <ol>
      <li>Lowering the cost per unit of trail, and</li>
      <li>Increasing teh number of trails as large as possible.</li>
    </ol>
    <ul>
      <li>This minimized the probability of missing the winning option rather than maximizing the profits of a winning option.</li>
    </ul></li>
    <li>Preserving serial optionality beats a strategic plan:
    <ul>
      <li>Long term strategic plans tend to have the side effect of restricting optionality by locking teams and systems into rigid models and policies.</li>
    </ul></li>
    <li>Get into the habit of cataloging negative results.</li>
  </ol></li>
  <li>Casinos don&rsquo;t gamble: they provide entertainment to guests and work the math at scale.</li>
  <li>What tactics will be the most efficient and effective at lowering the costs per unit of a trial?</li>
  <li>Steps:
  <ul>
    <li>High concave:
    <ul>
      <li>Monolith apps + self-managed dedicated physical infrastructure.</li>
    </ul></li>
    <li>Partially transformed:
    <ul>
      <li>Infrastructure as a Service.</li>
      <li>Multi-variable testing.</li>
      <li>Still highly complex code that is conceptually tied to a single context of use.</li>
    </ul></li>
    <li>Highly convex:
    <ul>
      <li>Previous step plus decoupled APIs.</li>
    </ul></li>
  </ul></li>
  <li>Baldwin, <a href="https://www.hbs.edu/ris/Publication%20Files/09-034_149607b7-2b95-4316-b4b6-1df66dd34e83.pdf">The Architecture of Platforms</a>:
  <ul>
    <li>Controlling the interfaces to value rather than just the systems that deliver value is the better strategy.</li>
    <li>Open by default is a better strategy than closed by default.</li>
  </ul></li>
  <li>When you choose a popular and easy-to-understand interface, it is critical to make sure that your chosen interface won&rsquo;t be too easy to commoditize or one that is easily abstracted.</li>
</ul><h2><a name="ch-4"></a>Chapter 4 - Opportunism through Value Dynamics</h2>
<ul>
  <li>Value dynamics will improve your ability to identify high-value opportunities where you can exploit the optionality.</li>
  <li>Business model as &ldquo;the rationale of how an organization creates, delivers and captures value&rdquo;.</li>
  <li>Value dynamics is a way of visually analyzing business models in an ecosystem context to develop strategies on how to intentionally evolve them.</li>
  <li>Key concepts:
  <ul>
    <li>Value network: bounded business ecosystem within which value flows.</li>
    <li>Constituents: orgs and groups of people defined by a role or persona.</li>
    <li>Value exchange: bidirectional flow of value between two constituents.</li>
    <li>Discrete set of value currencies: <img src="/images/blog/books/unbundling-the-enterprise/value-currencies.jpeg" alt="Set value currency" /></li>
  </ul></li>
  <li>Value networks are typically centered around a specific constituent. <img src="/images/blog/books/unbundling-the-enterprise/values-network-example-facebook.png" alt="Value network example" /></li>
  <li>Opening business capabilities through APIs allowed an incremental rollout that gave the companies time to learn and adjust.</li>
  <li>Six ways to use value dynamics:
  <ol>
    <li>Analyze existing business models:
    <ul>
      <li>How balanced and sustainable are?</li>
      <li>How well-differentiated are your org&rsquo;s enabling capabilities?</li>
      <li>Are there additional value currencies that can be captured?</li>
      <li>Are there any constituents who are positioned to disrupt the overall ecosystem?</li>
    </ul></li>
    <li>Define new business models:
    <ul>
      <li>Start by charting a specific customer segment.</li>
      <li>Include intermediaries.</li>
      <li>Consider supporting constituents.</li>
      <li>What do my competitor&rsquo;s value network look like?</li>
      <li>Are there constituents or value exchanges missing?</li>
      <li>What do the value networks look like for orgs in similar positions in other industries?</li>
    </ul></li>
    <li>Find new value channels:
    <ul>
      <li>Identify missing links, specially between your org and its end customer.</li>
    </ul></li>
    <li>Augment current value exchanges:
    <ul>
      <li>All value exchanges are asymmetrical, as each constituent values the different currencies being exchanged differently.
      <ul>
        <li>So, it is quite possible that there are new currencies your org could request without constituents feeling that they are giving anything away.</li>
      </ul></li>
    </ul></li>
    <li>Optimize supply-side exchanges:</li>
  </ol>
  <ul>
    <li>Diversify a sole-supplier to reduce cost or risk.</li>
    <li>Are there suppliers that rise above their peers and warrant exclusivity?</li>
    <li>Any supplier that could be insourced or any capability outsourced?</li>
  </ul>
  <ol>
    <li>Connect value networks:
    <ul>
      <li>Connecting an org&rsquo;s value networks can improve an org&rsquo;s composite value proposition exponentially.</li>
    </ul></li>
  </ol></li>
</ul><h2><a name="ch-5"></a>Chapter 5 - Optimization through Feedback Loops</h2>
<ul>
  <li>Innovation is never done.</li>
  <li>Innovation can be optimized:
  <ol>
    <li>Compress the cycle time of experiments.</li>
    <li>Execute more experiments in parallel.</li>
  </ol></li>
  <li>When the cost to deliver change in an org drops precipitously, a new state of &ldquo;flow&rdquo; will inevitably emerge within that org.</li>
  <li>As the cost to make a small change falls, so does the opportunity cost of choosing one small change over another.
  <ul>
    <li>The demand to make those changes will inevitably go up.</li>
  </ul></li>
  <li><p>Focusing your resources on lowering the average cycle time of experiments within your enterprise is the most important concept in embracing optimization.</p>
  <blockquote>The only sustainable competitive advantage is an org&rsquo;s ability to learn faster than the competition. <cite>Peter Senge, <a href="https://amzn.to/4cDL5Vw">The Fifth Discipline</a></cite>
  </blockquote></li>
  <li><p>For the optionality-based approach to work at a financial level, you need to be able to place many low-cost bets.</p></li>
  <li>You must consistently invest not only in creating the options themselves but also in cheapening the bets across the board.</li>
</ul><h1><a name="p-2"></a>Part 2 - Success Strategies</h1><h2><a name="ch-6"></a>Chapter 6 - Strategies of Success #1: Exchange Optimization</h2>
<ul>
  <li>Making teams responsible for their own operational management acts as a forcing function to both keep teams honest on being efficient with their resources and to have them continually looking for ways to optimize the processes involved within their value-creating activities.</li>
  <li>Given the cost-versus-value culture in most organizations, a leader will have to chart a course to support efforts to unbundle capabilities without having a well understood path to revenue.</li>
  <li><a href="https://www.linkedin.com/in/davidlrice">David Rice</a>, SVP of Product and Engineering at Cox Automotive:
  <ul>
    <li>The barrier to achieving the potential value for all the stakeholders was more grounded in financial and operating structure than in the tech stacks and application infrastructure.</li>
    <li>How do you get the business to focus on walking away from revenue in the goal of eventually getting more revenue?</li>
    <li>What is more important than your org design is the remediations you put in place to deal with the fact that the org design is suboptimal in a bunch of other cases.</li>
    <li>The path technology teams must walk is simple but not easy.
    <ul>
      <li>It requires business and cultural change, which is where the real complexities lie.</li>
    </ul></li>
    <li>Decisions will inevitably skew to localized optimization at the expense of the whole, no matter what.</li>
    <li>Two clashing ideas that are simultaneously true:
    <ol>
      <li>The old way forces everything into a cost model.</li>
      <li>Modularity is the best hedge to &ldquo;manage the unpredictability of the future&rdquo;.</li>
    </ol></li>
    <li>Time to market and future planning are opposing forces.</li>
    <li>It is easy to optimize for time to market for the first version but that is not the strategy that easily scales when successful.</li>
    <li>Position shortcuts as the exception that needs scrutiny and justification:
    <ul>
      <li>&ldquo;Shortcut by default&rdquo; is always adding more barriers to flexibility with every choice made.</li>
    </ul></li>
    <li>We want to teach teams to feel the pain of the business and the business teams to see the commons as the engine of value creation.</li>
    <li>Keep your commons teams close to the highest EBITDA revenue in order to buffer them from the unyielding waves of market volatility.
    <ul>
      <li>Place development teams as close as possible to the point of revenue.</li>
      <li>Leaders of business teams become more familiar with the value that comes out of engineering.</li>
    </ul></li>
    <li>Key concepts for Rice&rsquo;s solution:
    <ol>
      <li>All org models are flawed. Choose the model that:
      <ul>
        <li>Has problem that are irrelevant for your context, or</li>
        <li>Are the sort of problems that you are well-prepared to mitigate.</li>
      </ul></li>
      <li>Finance respects growth above all else:
      <ul>
        <li>Stasis and growth below expectations is also treated as decline.</li>
      </ul></li>
    </ol></li>
  </ul></li>
  <li>Jens Rasmussen and Dr. Richard Cook, <a href="https://medium.com/10x-curiosity/boundaries-of-failure-rasmussens-model-of-how-accidents-happen-58dc61eb1cf">Safe Boundary Model</a>. <img src="/images/blog/books/unbundling-the-enterprise/safe-boundary-model.png" alt="Safe boundary model" /></li>
  <li>Three different development org topologies:
  <ol>
    <li>Traditional Enterprise IT:
    <ul>
      <li>IT teams are segmented from and have a transactional relationship with business teams.</li>
      <li>Who owns &ldquo;the what&rdquo; vs who owns &ldquo;the how&rdquo;.</li>
      <li>Optimized for hierarchy with clean distinctions on roles and responsibilities.</li>
      <li>High risk of deep cutbacks.</li>
    </ul></li>
    <li>Stream aligned:
    <ul>
      <li>Multidisciplinary teams that pull together all the required skills to design, create, and operate a value stream.</li>
      <li>Optimized for flow.</li>
      <li>Often rely on a centralized platform team.</li>
      <li>Platform team at risk.</li>
    </ul></li>
    <li>Business centric:
    <ul>
      <li>API product teams are integrated into business contexts as far as possible.</li>
      <li>Optimized for stability when financial disruption inevitably comes:
      <ul>
        <li>Fine-tuning and reinvestment.</li>
      </ul></li>
    </ul></li>
  </ol></li>
</ul><h2><a name="ch-7"></a>Chapter 7 - Strategies of Success #2: Distributed Innovation</h2>
<ul>
  <li>16m software developers globally vs 1 billion knowledge workers.</li>
  <li>3 ways to increase innovation:
  <ol>
    <li>Involve non-IT knowledge workers.</li>
    <li>Involve sw developers that do not work for you.</li>
    <li>Your own customers.</li>
  </ol></li>
  <li>The business model of using APIs to reach developers as customers created its own economy.</li>
  <li>&ldquo;Legacy modernization&rdquo; (shift-and-lift business to digital world) vs &ldquo;functional modernization&rdquo;.</li>
  <li>Coca-Cola:
  <ul>
    <li>Mindset: turning the enterprise into a platform of business capabilities.</li>
    <li>Productize business capabilities through APIs:
    <ul>
      <li>Without over-engineer the APIs for unknown consumers.</li>
    </ul></li>
    <li>Expanded from the core outward.</li>
    <li>Big emphasis on feedback loops.</li>
    <li>Solutions had two aspects: what they delivered and what they enabled.</li>
  </ul></li>
  <li>You&rsquo;re never going to get the exact requirements to innovate.
  <ul>
    <li>To innovate, people have to work together, see and feel something tangible, then iterate on that.</li>
  </ul></li>
  <li>Minimum Viable Extensible Product.</li>
</ul><h2><a name="ch-8"></a>Chapter 8 - Strategies of Success #3: Capability Capitalization</h2>
<ul>
  <li>Most lucrative:
  <ul>
    <li>Unbundle and re-bundle capabilities.</li>
  </ul></li>
  <li>While luck may be evenly distributed and out of your control, the skills and capabilities to exploit that luck and make a return on it are in your control.</li>
  <li>Case studies:
  <ul>
    <li>Amazon.</li>
    <li>Flickr.</li>
    <li>Slack:
    <ul>
      <li>The evolution from product to platform is all about letting users build.</li>
      <li>APIs are forever, and changing them is very hard.</li>
      <li>Has defined a set of API design guidelines that they share and use to allow teams work quickly and independently.</li>
    </ul></li>
    <li>Capital One.</li>
  </ul></li>
  <li>Build vs buy:
  <ol>
    <li>Default to buy, build as the exception.</li>
    <li>If you build, consider it as an opportunity for a market-facing service to capitalize on.</li>
  </ol></li>
</ul><h2><a name="ch-9"></a>Chapter 9 - Strategies of Success #4: Value Aggregation</h2>
<ul>
  <li>Use APIs as connection points between the models, use value dynamics to identify the opportunities for value network aggregation, and then adopt a &ldquo;whole is greater than the sum of its parts&rdquo; mentality to further optimize the landscape.</li>
  <li>The digital economy is largely a data economy.</li>
  <li>Amazon, Google, Facebook: data is what fuels and differentiates each of their business models.</li>
  <li>Data breaks many stands economic assumptions that were established in the physical goods economic paradigm.</li>
  <li>Data is:
  <ul>
    <li>Non-rival: can be consumed/held by multiple users.</li>
    <li>Non-fungible: sufficiently unique so that it cannot be substituted.</li>
    <li>Experience good:
    <ul>
      <li>Value is not know until it has been consumed.</li>
      <li>Opposite is search good, which value can be determined prior to consumption.</li>
      <li>There can be a wide variance in the perceived value depending on the consumer&rsquo;s context.</li>
    </ul></li>
    <li>Positive externalities:
    <ul>
      <li>Accumulating more data makes the data you already have more valuable.</li>
      <li>Data is the new oil: old is the exact opposite of data: a rival, fungible, search good.</li>
    </ul></li>
  </ul></li>
  <li>Data is how disparate value networks can be connected.</li>
  <li>Case studies:
  <ul>
    <li>Google Maps.</li>
    <li>Best Buy.</li>
  </ul></li>
</ul><h1><a name="p-3"></a>Part 3 - Practical Considerations To Finding Digital Treasure</h1><h2><a name="ch-10"></a>Chapter 10 - Getting Started on the Path to Scaled Results</h2>
<ul>
  <li><a href="https://amzn.to/4f87JXL">Platform Revolution</a>:
  <ul>
    <li>Study of Uber, Airbnb and PayPal.</li>
    <li>Two-sided marketplaces and network effects.</li>
    <li>&ldquo;Inverted firm&rdquo;: create platforms that capture value by intermediating value exchanges between third parties.</li>
  </ul></li>
  <li><a href="https://pubsonline.informs.org/doi/full/10.1287/mnsc.2023.4968">How APIs Create Growth by Inverting the Firm</a>:
  <ul>
    <li>Firms adopting public APIs grew an additional 38.7% over sixteen years relative to similar non-adopters.</li>
    <li>Relationship is causal, not just correlated.</li>
    <li>No statistically significant relationship between internal API adoption and firm performance.</li>
  </ul></li>
  <li>Considerations for API Providers (page 167 or 195 in pdf).</li>
  <li>Firms with public APIs see significantly increased risk of hack events in the years after opening an API.</li>
  <li>Legal as a tool to be managed rather than as a constraint of business possibilities.
  <ul>
    <li>Best managed as an advisory function in the go-to-market phase rather than a gating function in the ideation and prototyping phases.</li>
  </ul></li>
  <li>Launching external API-based offering without some form of centralized monitoring and governance capabilities is akin of running with scissors.</li>
  <li>Once you acknowledge that a specific future can&rsquo;t be predicted, the basic premise of being flexible in the face of generic future changes is the commonsense choice to at least hedge your uncertainty.</li>
  <li>Most critical business metrics for a digital transformation:
  <ol>
    <li>Time to experiment: time and resources required to expose an experimental delivery of value to the external market.</li>
    <li>Time to impactful insight: time and resources to evaluate the outcome of the experiment with meaningful business implications.</li>
    <li>Time to value: time and resources required to realize revenue from an experiment.</li>
  </ol></li>
</ul><h2><a name="ch-11"></a>Chapter 11 - Ensuring a Durable Transformation by Understanding the Risks</h2>
<ol>
  <li>Increased security risk:
  <ul>
    <li>Orgs with APIs that are widely used in external contexts have a lower frequency of breaches by malicious insiders than orgs that use exclusively internal APIs.</li>
    <li>Signs:
    <ul>
      <li>Security by obscurity.</li>
      <li>Teams are expected to come up with an approach that works for their unique context.</li>
    </ul></li>
    <li>Mitigation: appropriate tools and support to treat security management as non-deferrable scope.</li>
  </ul></li>
  <li>Increased performance risk:
  <ul>
    <li>Due to more network hops.</li>
    <li>Risk of degraded performance and increase in infrastructure cost is preferred to:
    <ul>
      <li>Over-engineering for performance.</li>
      <li>Productivity loss due to monolith.</li>
    </ul></li>
    <li>Mitigation:
    <ul>
      <li>Detailed profiling and optimization can wait, but enabling quick cycle time for isolating and solving performance issues cannot.</li>
      <li>Parity across technical environments.</li>
      <li>Quantify the value of performance.</li>
    </ul></li>
  </ul></li>
  <li>Increased risk to quality issues:
  <ul>
    <li>More moving parts means more things to break.</li>
    <li>Signs:
    <ul>
      <li>Overly reliant on manual testing practices.</li>
      <li>QA cycles and disciplines are segmented in a silo separated from sw dev.</li>
    </ul></li>
    <li>Mitigation:
    <ul>
      <li>Tools that help shift left.</li>
      <li>Compress the timeline, risk, and scale of experiments.</li>
    </ul></li>
  </ul></li>
  <li>Increased operational complexity:
  <ul>
    <li>More moving parts == more complex to operate.</li>
    <li>Signs:
    <ul>
      <li>Documentation is scarce.</li>
      <li>Automated onboarding tools for API consumers are not provisioned.</li>
      <li>Teams routinely engaged in unplanned work.</li>
    </ul></li>
    <li>Mitigation:
    <ul>
      <li>Prepare early and optimize late.</li>
    </ul></li>
  </ul></li>
  <li>Misapply the MVP concept:
  <ul>
    <li>MVP == maximum amount of validated customer feedback with minimal effort.
    <ul>
      <li>A tool for testing hypotheses and discovering what will meet customers&rsquo; needs.</li>
    </ul></li>
    <li>Signs:
    <ul>
      <li>Teams fail to consider that experiments must be iterative to yield useful feedback.</li>
    </ul></li>
  </ul></li>
  <li>Cannibalizing Existing Revenue:
  <ul>
    <li>Teams must have a nuanced understanding of financial details of the existing revenue streams.</li>
    <li>Signs:
    <ul>
      <li>Product dev team fails to evaluate how new offering would lead to revenue growth for existing offerings, or how to position it as extensions/add-ones to existing offerings.</li>
    </ul></li>
  </ul></li>
  <li>Technology centered transformation:
  <ul>
    <li>Technology-specific objectives rather than business objectives.</li>
  </ul></li>
  <li>Misaligned talent model and processes:
  <ul>
    <li>Signs:
    <ul>
      <li>Over-reliance on proxy metrics and singular numbers that don&rsquo;t convey context.</li>
      <li>Localized goals at the expense of enterprise goals.</li>
    </ul></li>
    <li>Mitigations:
    <ul>
      <li>&ldquo;m-shaped&rdquo; profiles.</li>
      <li>Training on data visualization and statistical literacy.</li>
    </ul></li>
  </ul></li>
  <li>Losing discipline in times of compression:
  <ul>
    <li>Financial compression tactics are not aligned with preservation of value creation.</li>
  </ul></li>
  <li>Choosing the wrong interface to control:
  <ul>
    <li>Control the interface to value rather than just the systems that deliver value is the better strategy.</li>
    <li>Signs:
    <ul>
      <li>Your teams don&rsquo;t have a process for understanding and evaluating how and when consumer value is added and harvested in your value stream.</li>
    </ul></li>
  </ul></li>
  <li>Pervasive use of performative behaviors (aka optionality theater):
  <ul>
    <li>Performative compliance.</li>
    <li>Signs:
    <ul>
      <li>Referring to hard rules that don&rsquo;t offer insight into applying them with a smart mindset.</li>
    </ul></li>
    <li>Mitigation:
    <ul>
      <li>Decision makers must have &ldquo;skin in the game&rdquo; for the impacts of their choices.</li>
    </ul></li>
  </ul></li>
</ol><h2><a name="ch-12"></a>Chapter 12 - Embracing Uncertainty</h2>
<ul>
  <li>The proliferation of hyper-specialized offerings is poised to continue its acceleration while simultaneously making larger firms more efficient and productive.
  <ul>
    <li>APIs are at the heart.</li>
  </ul></li>
  <li>One potential future implication of the fall in interaction costs is that large sectors of the global economy will depend upon increasingly complex networks of decoupled providers.
  <ul>
    <li>A natural outcome is the need to increase service robustness and fault-tolerant services.</li>
    <li>May cause the emergency of a new type of provider - a meta-aggregator that manages and routes traffic to the most efficient source of fulfillment.</li>
  </ul></li>
  <li>The semantic web:
  <ul>
    <li>Generative AI looks like the key that will unlock this capability.</li>
  </ul></li>
  <li>For APIs, coordination costs will drop again as APIs become self-describing once LLM agents are pointed towards them.</li>
</ul><h1><a name="ch-13"></a>Conclusion</h1>
<ul>
  <li>83% of all internet traffic in 2018 is API traffic.</li>
  <li>Most valuable treasures out there are the ones you don&rsquo;t yet know to look for.</li>
</ul>]]></description></item><item><title>Book notes: Who Does What By How Much?   </title><link>https://danlebrero.com/2024/07/09/who-does-what-by-how-much-book-summary/</link><guid>https://danlebrero.com/2024/07/09/who-does-what-by-how-much-book-summary/</guid><pubDate>Tue, 09 Jul 2024 00:00:00 +0200</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/3zETQQg">Who Does What By How Much? A practical guide to customer-centric OKRs</a> by <a href="https://x.com/jboogie">Jeff Gothelf</a> and <a href="https://x.com/jseiden">Josh Seiden</a>.</p><p>Found the book not only practical but inspirational. OKRs FTW!</p><h1>Key Insights</h1>
<ul>
  <li>OKRs high level steps:
  <ol>
    <li>Leadership identifies <strong>impact</strong>, and the <strong>strategy</strong> to achieve it.
    <ul>
      <li>Express them as high-level organizational OKRs.</li>
    </ul></li>
    <li>Teams create their ORKs, tied to the org OKRs, expressing KR as <strong>outcomes</strong>.</li>
    <li>Teams figure out and deliver <strong>outputs</strong>.</li>
  </ol></li>
  <li>OKRs do not contain solutions.</li>
  <li>OKR key principles:
  <ol>
    <li>Focus:
    <ul>
      <li>Real focus means fewer OKRs.</li>
    </ul></li>
    <li>Autonomy.</li>
    <li>Alignment.</li>
    <li>Accountability.</li>
    <li>Transparency.</li>
    <li>Agility:
    <ul>
      <li>Ability to change course in response of learning.</li>
      <li>Opinions and ideas, even the bosses ones, are all hypotheses; they have to be proven to be true.</li>
    </ul></li>
    <li>Customer-centric.</li>
  </ol></li>
  <li>Outcome:
  <ul>
    <li>Outcome is a measurable change in your customer&rsquo;s behaviour that creates value.</li>
    <li>Expressed in the form:
    <ul>
      <li><code>Who?</code> is your customer.</li>
      <li><code>Does what?</code> is their behaviour.</li>
      <li><code>By how much?</code> is the measure of change in their behaviour.</li>
    </ul></li>
  </ul></li>
  <li>OKRs work when they reflect and express your strategy.</li>
  <li>What challenge to tackle is the first strategy decision.</li>
  <li>Share your strategy as a compelling story.</li>
  <li>OKR writing:
  <ul>
    <li>Focus on the things you can control.</li>
    <li>Objective:
    <ul>
      <li>Provide a clear why.</li>
      <li>Not how you overcome the challenge but how the world has changed once we&rsquo;ve solved the problem.</li>
      <li>Inspirational, qualitative, time-boxed, specific.</li>
      <li>Positive statement.</li>
      <li>It has a parent OKR.</li>
    </ul></li>
    <li>Key result:
    <ul>
      <li>Expressed as an outcome.</li>
      <li>Target is often a guess, but there is a lot of value on the conversations to figure out.
      <ul>
        <li>Do <em>not</em> ask open-ended questions to figure out. Close-ended questions will move the discussion forward faster.</li>
      </ul></li>
      <li>Key result that you cannot measure are ok.</li>
    </ul></li>
  </ul></li>
  <li>Make a distinction between important business as usual work and OKRs.</li>
  <li>Do not use OKR at the individual level.</li>
  <li>Common pitfalls:
  <ol>
    <li>Key results as task lists.</li>
    <li>Writing OKRs to fit your preexisting to-do list.</li>
    <li>Measuring system behaviour instead of customer behaviour.</li>
    <li>Under-promising and over-delivering.</li>
  </ol></li>
  <li>Of all possible solutions, prioritize high potential value and low risk first.</li>
  <li>High risk, high value ideas should start with some learning (de-risking) activity.</li>
  <li>Learning is work and execution is work.</li>
  <li>Look at the rate of change in your metrics versus the effort you&rsquo;re putting in:
  <ul>
    <li>Consider if you want to change tactics or consider it &ldquo;done&rdquo;.</li>
  </ul></li>
  <li>Aligned autonomy requires transparency.</li>
  <li>Provide universal access to data:
  <ul>
    <li>Without data, you&rsquo;re going to have problems.</li>
    <li>The easiest to access the data, the faster teams can make decisions and move forward.</li>
    <li>Make access to data the path of the least resistance.</li>
  </ul></li>
  <li>Particular attention to blockers of:
  <ul>
    <li>Learning work.</li>
    <li>Data access.</li>
    <li>Team autonomy.</li>
  </ul></li>
  <li>Killing an idea that isn&rsquo;t going to work it is progress and cost savings.</li>
  <li>For new cultures to take hold, leaders must model them.</li>
  <li>It is better to deliver value in smaller batches, with consistency over time, than to swing for the fences with long-term, ambitious or wildly creative projects.</li>
  <li>Data from research rarely shows decisive results.</li>
  <li>Evaluate people&rsquo;s contribution towards the team&rsquo;s OKRs using the 7 key OKR principles.</li>
  <li>Operationalizing OKRs at scale across a large organization can often take years.</li>
  <li>Avoid &ldquo;cascading&rdquo; OKRs.</li>
  <li>Dependent teams might share OKRs.</li>
  <li>Every OKR implementation is different because every org is different.</li>
  <li>The most powerful predictors of success today are humility and curiosity:
  <ul>
    <li>Build cultures of learning and agility.</li>
  </ul></li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#ch-0">Intro</a></li>
  <li><a href="#p-1">Part 1 - What Are OKRs?</a>
  <ul>
    <li><a href="#ch-1">Chapter 1 - What Are OKRs?</a></li>
    <li><a href="#ch-2">Chapter 2 - Why Use OKRs?</a></li>
    <li><a href="#ch-3">Chapter 3 - OKRs and Outcomes</a></li>
  </ul></li>
  <li><a href="#p-2">Part 2 - Writing OKRs</a>
  <ul>
    <li><a href="#ch-4">Chapter 4 - Strategy and OKRs</a></li>
    <li><a href="#ch-5">Chapter 5 - Who Does What?</a></li>
    <li><a href="#ch-6">Chapter 6 - Writing OKRs</a></li>
    <li><a href="#ch-7">Chapter 7 - Setting OKRs Through Collaboration</a></li>
    <li><a href="#ch-8">Chapter 8 - Common Questions About Writing OKRs</a></li>
  </ul></li>
  <li><a href="#p-3">Part 3 - Using OKRs</a>
  <ul>
    <li><a href="#ch-9">Chapter 9 - The OKR Cycle</a></li>
    <li><a href="#ch-10">Chapter 10 - Working with OKRs</a></li>
    <li><a href="#ch-11">Chapter 11 - Checking In</a></li>
    <li><a href="#ch-12">Chapter 12 - Planning with OKRs</a></li>
  </ul></li>
  <li><a href="#p-4">Part 4 - Making OKRs Successful in Your Organization</a>
  <ul>
    <li><a href="#ch-13">Chapter 13 - Start with Why</a></li>
    <li><a href="#ch-14">Chapter 14 - Support OKRs from the Top</a></li>
    <li><a href="#ch-15">Chapter 15 - Managing Up. Changing Responsibilities</a></li>
    <li><a href="#ch-16">Chapter 16 - Scaling OKRs</a></li>
  </ul></li>
  <li><a href="#ch-20">Conclusion</a></li>
</ul><h1><a name="ch-0"></a>Intro</h1>
<ul>
  <li>Every org wants to get better.</li>
  <li>Orgs aren&rsquo;t worried about people working hard enough, but working on the wrong stuff:
  <ul>
    <li>Most common reason: people lose track of what their customers want.</li>
    <li>Other big problems: alignment, collaboration, strategic focus.</li>
  </ul></li>
  <li>OKR is a tool to align teams around customer needs and focus them on company strategy.</li>
  <li>Everyone has a customer.</li>
  <li>Outcome:
  <ul>
    <li><code>Who?</code> is your customer.</li>
    <li><code>Does what?</code> is their behaviour.</li>
    <li><code>By how much?</code> is the measure of change in their behaviour.</li>
  </ul></li>
</ul><h1><a name="p-1"></a>Part 1 - What Are OKRs?</h1><h2><a name="ch-1"></a>Chapter 1 - What Are OKRs?</h2>
<ul>
  <li>3 parts:
  <ol>
    <li>Goal-setting framework:
    <ul>
      <li>Objective:
      <ul>
        <li>The goal.</li>
        <li>Inspire the team and provide a clear why.</li>
        <li>Inspirational, aspirational, qualitative, time-boxed and specific enough to create urgency.</li>
      </ul></li>
      <li>Key result:
      <ul>
        <li>How you measure progress towards your goal.</li>
      </ul></li>
      <li>OKRs do not contain solutions.</li>
      <li>Outcome is a change in behaviour that creates value.</li>
    </ul></li>
    <li>OKRs are a process:
    <ul>
      <li>Not only how to set goals but also how work towards them: from daily to annual.</li>
      <li>OKR cycle.</li>
    </ul></li>
    <li>OKRs are a culture:
    <ul>
      <li>OKRs should reflect the specific culture of the org.</li>
      <li>OKRs should be customized for each company.</li>
    </ul></li>
  </ol></li>
</ul><h2><a name="ch-2"></a>Chapter 2 - Why Use OKRs?</h2>
<ul>
  <li>Key principles:
  <ol>
    <li>Focus:
    <ul>
      <li>Real focus means fewer OKRs.</li>
      <li>OKRs only current strategic priorities.
      <ul>
        <li>Everything else is either business as usual or must wait.</li>
      </ul></li>
    </ul></li>
    <li>Autonomy:
    <ul>
      <li>Teams writing their OKRs and creating the results.</li>
      <li>OKRs are set with a mix of top-down and bottom-up process.</li>
    </ul></li>
    <li>Alignment.</li>
    <li>Accountability.</li>
    <li>Transparency:
    <ul>
      <li>Puts pressure to improve data collection and access.</li>
    </ul></li>
    <li>Agility:
    <ul>
      <li>Ability to change course in response of learning.</li>
      <li>Opinions and ideas, even the bosses ones, are all hypotheses; they have to be proven to be true.</li>
    </ul></li>
    <li>Customer-centric.</li>
  </ol></li>
</ul><h2><a name="ch-3"></a>Chapter 3 - OKRs and Outcomes</h2>
<ul>
  <li>Success means that you&rsquo;ve created a valuable outcome.</li>
  <li>Outcome is a measurable change in your customer&rsquo;s behaviour that creates value:
  <ul>
    <li>Output -&gt; Outcome -&gt; Impact.</li>
    <li>Very rarely use impact to write objectives:
    <ul>
      <li>They are too big and the results of too many factors.</li>
    </ul></li>
  </ul></li>
  <li>High-level steps:
  <ol>
    <li>Leadership identifies impact, and the strategy to achieve it.
    <ul>
      <li>Express them as high-level organizational OKRs.</li>
    </ul></li>
    <li>Teams create their ORKs, expressing KR as outcomes.</li>
    <li>Teams figure out and deliver outputs.</li>
  </ol></li>
  <li>Value:
  <ol>
    <li>Make your customers successful.</li>
    <li>Respect their time.</li>
    <li>Solve real problems for them in meaningful ways.</li>
    <li>Are a delight to use.</li>
  </ol></li>
</ul><h1><a name="p-2"></a>Part 2 - Writing OKRs</h1><h2><a name="ch-4"></a>Chapter 4 - Strategy and OKRs</h2>
<ul>
  <li>You can write well-structured OKRs and still focus on the wrong thing.</li>
  <li>OKRs work when they reflect and express your strategy.</li>
  <li>Strategy is an opinionated and coherent approach to addressing an important challenge:
  <ul>
    <li>Important challenge: don&rsquo;t have obvious or easy solutions.</li>
  </ul></li>
  <li>If you&rsquo;ve setting OKRs for your team, then you&rsquo;re using strategy.</li>
  <li>What challenge to tackle is the first strategy decision.</li>
  <li>Strategy isn&rsquo;t a plan; it&rsquo;s an approach.</li>
  <li>Steps to create strategy:
  <ol>
    <li>Identify the biggest challenge:
    <ul>
      <li>Finding your most important challenge is a simple thing to describe, but it&rsquo;s hard to do.</li>
      <li>At an org level:
      <ul>
        <li>What&rsquo;s your goal?</li>
        <li>What are the obstacles to achieve that goal?</li>
      </ul></li>
      <li>At the team level:
      <ul>
        <li>What is the most impactful thing your team can do to support your org&rsquo;s strategy?</li>
        <li>Look at the intersection of your team&rsquo;s responsibilities and your org&rsquo;s goals.
        <ul>
          <li>Clear connection between your strategy and the org strategy.</li>
        </ul></li>
        <li>Consider your peers initiatives.</li>
      </ul></li>
    </ul></li>
    <li>Identify your market:
    <ul>
      <li>Who are the people you&rsquo;re going to focus on?</li>
    </ul></li>
    <li>Propose your unique competitive approach:
    <ul>
      <li>Prompt question on page 62.</li>
    </ul></li>
  </ol></li>
  <li>Share your strategy as a compelling story.</li>
</ul><h2><a name="ch-5"></a>Chapter 5 - Who Does What?</h2>
<ul>
  <li>To figure out who does what:
  <ol>
    <li>What does your team have control over?
    <ul>
      <li>Focus on the things you can control.</li>
      <li>If your team is not autonomous consider coordinating with overarching OKRs or complementary OKRs.</li>
    </ul></li>
    <li>Who: which customer will you target first?
    <ul>
      <li>Be as specific as possible.</li>
      <li>List 3 to 6 plausible roles.</li>
    </ul></li>
    <li>Figure out &ldquo;does what&rdquo;:
    <ul>
      <li>Tell a story about the customer&rsquo;s journey.
      <ul>
        <li>Pay attention to the &ldquo;does what&rdquo; in the story.</li>
        <li>Write down 3 to 6 important behaviours using the [who][does what] format.</li>
        <li>Pay attention also to the obstacles the customer has.</li>
        <li>Consider <a href="http://www.jpattonassociates.com/wp-content/uploads/2015/03/story_mapping.pdf">user story mapping</a>.</li>
      </ul></li>
    </ul></li>
  </ol></li>
</ul><h2><a name="ch-6"></a>Chapter 6 - Writing OKRs</h2>
<ul>
  <li>OKRs are best created in collaboration with your team.</li>
  <li>Objective: provide a clear why.</li>
  <li>To start:
  <ul>
    <li>At the org level, one OKR per business unit.</li>
    <li>At the team level, only one OKR.</li>
    <li>2 or 3 key results per objective.</li>
  </ul></li>
  <li>More OKR means less focus.</li>
  <li>Steps to create objective:
  <ol>
    <li>Gather what you need:
    <ul>
      <li>See chapter 4 and 5.</li>
    </ul></li>
    <li>Identify biggest obstacle:
    <ul>
      <li>See chapter 4 important challenge.</li>
      <li>From org&rsquo;s OKRs.</li>
    </ul></li>
    <li>Turn obstacles into positive statement:
    <ul>
      <li>Not how you overcome it but how the world has changed once we&rsquo;ve solved the problem.</li>
    </ul></li>
    <li>Self-check objective:
    <ul>
      <li>Check:
      <ul>
        <li>It is a positive statement.</li>
        <li>It does not contain a solution.</li>
        <li>Inspirational, qualitative, time-boxed, specific.</li>
      </ul></li>
    </ul></li>
    <li>Find your parent OKR:
    <ul>
      <li>No need to be strictly hierarchical.</li>
    </ul></li>
  </ol></li>
  <li>Steps to create key results:
  <ol>
    <li>Gather list of customers and customer story from chapter 5.</li>
    <li>Turn into 2 to 4 statements in the format: [who] + [does what] + [by how much].</li>
  </ol>
  <ul>
    <li>Self-check question: if we achieve all key results, will we have achieved our objective?
    <ul>
      <li>If not, some key result is missing.</li>
    </ul></li>
  </ul></li>
  <li>By how much?
  <ul>
    <li>Find a good enough target:
    <ol>
      <li>It is possible:
      <ul>
        <li>Often a guess, but there is a lot of value on the conversations to figure out.</li>
      </ul></li>
      <li>It is valuable:
      <ul>
        <li>Easier to answer.</li>
      </ul></li>
    </ol>
    <ul>
      <li>Do <em>not</em> ask open-ended questions to figure out. Close-ended questions will move the discussion forward faster.</li>
    </ul></li>
  </ul></li>
  <li>Scoring OKRs:
  <ul>
    <li>Bad:
    <ul>
      <li>It can lead to the team focusing on the scores themselves instead of on the results.</li>
      <li>Performance evaluations and compensation.</li>
    </ul></li>
    <li>Good:
    <ul>
      <li>Diagnosis tool.</li>
    </ul></li>
  </ul></li>
</ul><h2><a name="ch-7"></a>Chapter 7 - Setting OKRs Through Collaboration</h2>
<ul>
  <li>Top-down and bottom-up:
  <ul>
    <li>Goals are both strategic and realistic with deeper understanding.</li>
    <li>People are more motivated.</li>
  </ul></li>
  <li>Process to set OKRs collaboratively:
  <ol>
    <li>Top-Down</li>
    <li>Bottom-up.</li>
    <li>Collaboration:
    <ul>
      <li>With leaders and peers.</li>
      <li>Be prepared to defend your strategy, obstacle, parent OKR.</li>
      <li>Discuss key result numbers.</li>
      <li>Dependencies and collaborations with other teams.</li>
    </ul></li>
    <li>Revise and publish.</li>
  </ol></li>
</ul><h2><a name="ch-8"></a>Chapter 8 - Common Questions About Writing OKRs</h2>
<ul>
  <li>Make a distinction between important business as usual work and OKRs.</li>
  <li>Key result that you cannot measure is ok:
  <ul>
    <li>Use qualitative data instead.</li>
    <li>Use leading indicator.</li>
    <li>Ask for help to figure out how to measure it.</li>
  </ul></li>
  <li>Do not use OKR at the individual level.</li>
  <li>In some cases is ok for teams to share OKRs.</li>
  <li>Discipline-oriented teams struggle to adopt OKRs:
  <ol>
    <li>Share the OKRs of the team they are working with.</li>
    <li>OKR: make the team itself better.</li>
    <li>Treat other teams as clients, and set OKR accordingly.</li>
    <li>A mix f all of the above.</li>
  </ol></li>
  <li>Common pitfalls:
  <ol>
    <li>Key results as task lists.</li>
    <li>Writing OKRs to fit your preexisting to-do list.</li>
    <li>Measuring system behaviour instead of customer behaviour.</li>
    <li>Under-promising and over-delivering.</li>
  </ol></li>
</ul><h1><a name="p-3"></a>Part 3 - Using OKRs</h1><h2><a name="ch-9"></a>Chapter 9 - The OKR Cycle</h2><p><img src="/images/blog/books/who-does-what-by-how-much/okr-cycle.png" alt="OKR cycle" /></p>
<ul>
  <li>The only thing that matters is results.</li>
  <li>OKRs are one of the best frameworks for encouraging real agility.</li>
  <li>Learning and execution should happen continuously.</li>
  <li>Check-in:
  <ul>
    <li>Monthly: informal.</li>
    <li>Quarterly:
    <ul>
      <li>More structured.</li>
      <li>Recommit, update or discard OKRs.</li>
    </ul></li>
  </ul></li>
</ul><h2><a name="ch-10"></a>Chapter 10 - Working with OKRs</h2>
<ul>
  <li>OKRs align everyone around solving problems.</li>
  <li>Not &ldquo;when are we done?&rdquo; but &ldquo;How soon can we start creating value?&rdquo;</li>
  <li>Adopt an experimental mindset:
  <ul>
    <li>Express possible solutions as testable hypothesis:
    <ul>
      <li>&ldquo;We believe that [solution] will achieve [outcome]&rdquo;.</li>
    </ul></li>
  </ul></li>
  <li>Aim to be more experimental, outcome-oriented and customer-centric.</li>
  <li>Before executing, start by reviewing your OKR.</li>
  <li>Of all possible solutions, prioritize high potential value and low risk first.</li>
  <li>High risk, high value ideas should start with some learning (de-risking) activity.</li>
  <li>Learning activity:
  <ul>
    <li>First list what you are trying to learn.</li>
    <li>Consider what is the fastest way to learn so that you can make a decision:
    <ul>
      <li>Talk or watch your customers work.</li>
      <li>Avoid surveys:
      <ul>
        <li>Hard to do well.</li>
        <li>Talking to 6 clients &gt; 100 survey answers.</li>
      </ul></li>
    </ul></li>
  </ul></li>
  <li>Work in smaller increments.</li>
  <li>Learning is work and execution is work.</li>
  <li>Collect and share both quantitative and qualitative data throughout your org.</li>
  <li>Without data, you&rsquo;re going to have problems.</li>
</ul><h2><a name="ch-11"></a>Chapter 11 - Checking In</h2>
<ul>
  <li>Monthly and quarterly are required if you want to make OKRs work:
  <ul>
    <li>Retro and weekly can be added to other similar meetings.</li>
  </ul></li>
  <li>Assessing progress:
  <ol>
    <li>Outcomes i primary.</li>
    <li>Team&rsquo;s confidence on achieving the goal is a conversation starter.</li>
    <li>Scoring: most useful for quarterly check-ins.</li>
  </ol></li>
  <li>Weekly check-in:
  <ul>
    <li>Not problem-solving but status meeting.</li>
    <li>Only for the immediate team.</li>
    <li>30 mins:
    <ul>
      <li>10 mins:
      <ul>
        <li>Review key results.</li>
        <li>Highlights that require some attention from the team.</li>
        <li>Confidence review.</li>
      </ul></li>
      <li>10 mins:
      <ul>
        <li>Discuss issues from confidence review.</li>
        <li>Raise blockers.</li>
        <li>Major new learnings.</li>
      </ul></li>
      <li>10 mins:
      <ul>
        <li>Decide on actions and follow-ups.</li>
      </ul></li>
    </ul></li>
    <li>Keep an internal record for the team.</li>
    <li>Share anything important with stakeholders.</li>
  </ul></li>
  <li>Monthly check-in:
  <ul>
    <li>With stakeholders.</li>
    <li>60-90 mins.</li>
    <li>Opening:
    <ul>
      <li>Review key results.</li>
      <li>WIP review.</li>
      <li>Optional: confidence review.</li>
      <li>Stakeholders share any strategic updates that are important for the team&rsquo;s work.</li>
    </ul></li>
    <li>Middle:
    <ul>
      <li>Learnings: most important part of the meeting.</li>
      <li>Discuss obstacles: not problem-solving.</li>
      <li>Adjust OKRs: it should rarely happen.</li>
    </ul></li>
    <li>Closing: actions and follow-ups.</li>
    <li>Capture and share notes.</li>
  </ul></li>
  <li>Quarterly check-ins:
  <ul>
    <li>Same as weekly but emphasis on adjusting OKRs.</li>
    <li>With other teams.</li>
    <li>Look at the rate of change in your metrics versus the effort you&rsquo;re putting in:
    <ul>
      <li>Consider if you want to change tactics or consider it &ldquo;done&rdquo;.</li>
    </ul></li>
  </ul></li>
  <li>When changing OKRs:
  <ol>
    <li>It should never be a surprise.</li>
    <li>Prepare evidence.</li>
    <li>Bring an informed/educated proposal.</li>
    <li>Explain the cost of not changing OKRs.</li>
  </ol></li>
  <li>Retrospective meeting:
  <ul>
    <li>Post the key OKR principles to prompt feedback on how the team is doing on those.</li>
  </ul></li>
</ul><h2><a name="ch-12"></a>Chapter 12 - Planning with OKRs</h2>
<ul>
  <li>Embrace uncertainty and encourage agility:
  <ol>
    <li>Reduce the time horizon of your plans (up to 2 quarters in advance).</li>
    <li>Filter out work that does not or no longer help with the OKRs:
    <ul>
      <li>Sunk cost is lost.</li>
      <li>Hard part is saying &ldquo;no&rdquo;, specially to work in progress.</li>
    </ul></li>
    <li>Outcome-based roadmaps:
    <ul>
      <li>Quarterly OKRs + potential work items + learning activities.</li>
      <li>Date-driven work:
      <ol>
        <li>Reduce scope.</li>
        <li>Each small batch should generate a result.</li>
      </ol></li>
      <li>Review and update during checkins.</li>
    </ul></li>
  </ol></li>
</ul><h1><a name="p-4"></a>Part 4 - Making OKRs Successful in Your Organization</h1><h2><a name="ch-13"></a>Chapter 13 - Start with Why</h2>
<ul>
  <li>Why to adopt OKRs:
  <ol>
    <li>Problem statement.</li>
    <li>Vision for a positive future state.</li>
    <li>Hypothesis for the proposed process/culture.</li>
  </ol></li>
</ul><h2><a name="ch-14"></a>Chapter 14 - Support OKRs from the Top</h2>
<ul>
  <li>All change (good or bad) is hard.</li>
  <li>The most important predictor of success when going through any change is consistent and continuous leadership support.</li>
  <li>Ways for leaders to support OKRs:
  <ol>
    <li>Start with why (see chapter 13).</li>
    <li>Provide clear strategy and high-level OKRs first (see chapter 4).</li>
    <li>Trust the process and your teams:
    <ul>
      <li>Aligned autonomy requires transparency:
      <ul>
        <li>Weekly:
        <ul>
          <li>What they&rsquo;re working on.</li>
          <li>OKR progress.</li>
          <li>Learnings.</li>
          <li>Changes in plan.</li>
        </ul></li>
      </ul></li>
    </ul></li>
    <li>Support learning work.</li>
    <li>Provide universal access to data:
    <ul>
      <li>The easiest to access the data, the faster teams can make decisions and move forward.</li>
      <li>Make access to data the path of the least resistance.</li>
    </ul></li>
    <li>Create a safe culture of learning:
    <ul>
      <li>Learning is key for OKR success.</li>
      <li>Ask &ldquo;what did you learn this week?&rdquo; instead of &ldquo;when X will be done?&rdquo;</li>
      <li>Killing an idea that isn&rsquo;t going to work it is progress and cost savings.</li>
    </ul></li>
    <li>Model the values you want to see in your culture:
    <ul>
      <li>For new cultures to take hold, leaders must model them.</li>
      <li>As a leader you must demonstrate how much you value facts and data, even if they contradict what you said publicly.</li>
    </ul></li>
    <li>Design the org for collaboration and agility:
    <ul>
      <li>Be open to reorgs.</li>
    </ul></li>
  </ol></li>
</ul><h2><a name="ch-15"></a>Chapter 15 - Managing Up. Changing Responsibilities</h2>
<ul>
  <li>Middle managers have an even harder job:
  <ul>
    <li>They face pressure from every side.</li>
  </ul></li>
  <li>OKRs change how they do their jobs:
  <ol>
    <li>Manage up:
    <ul>
      <li>Tie any bosses request to an OKR:
      <ul>
        <li>If there is no connection, push back or make boss drop some OKR.</li>
      </ul></li>
      <li>Communicate, tying up to OKR.</li>
    </ul></li>
    <li>Changed responsibilities:
    <ul>
      <li>The taskmaster part of the manager&rsquo;s job goes out of the window.</li>
      <li>New job:
      <ul>
        <li>Ensure team&rsquo;s OKRs and work are aligned with strategic direction:
        <ul>
          <li>Keep an eye for when the team start drifting off.</li>
        </ul></li>
        <li>Setting guidelines and constraints around the team&rsquo;s scope of work:
        <ul>
          <li>It is better to deliver value in smaller batches, with consistency over time, than to swing for the fences with long-term, ambitious or wildly creative projects.</li>
        </ul></li>
        <li>Remove blockers:
        <ul>
          <li>Particular attention to blockers of:
          <ul>
            <li>Learning work.</li>
            <li>Data access.</li>
            <li>Team autonomy.</li>
          </ul></li>
        </ul></li>
        <li>Make key decisions when team needs guidance:
        <ul>
          <li>Data from research rarely shows decisive results.</li>
        </ul></li>
      </ul></li>
    </ul></li>
    <li>Adjust performance management criteria:
    <ul>
      <li>Do not create individual OKRs and then use them for individual performance management:
      <ul>
        <li>Dont do this.</li>
      </ul></li>
      <li>Evaluate people&rsquo;s contribution towards the team&rsquo;s OKRs using the 7 key OKR principles. Examples:
      <ul>
        <li>How well they used their time in service of the OKRs (focus, accountability, prioritization).</li>
        <li>How well they incorporate learning activities into their work (learning).</li>
        <li>How well they use evidence to inform their work and make decisions (agility, learning).</li>
      </ul></li>
      <li>Performance management changes are key as they incentivise people&rsquo;s behaviour.</li>
    </ul></li>
  </ol></li>
</ul><h2><a name="ch-16"></a>Chapter 16 - Scaling OKRs</h2>
<ul>
  <li>Operationalizing OKRs at scale across a large organization can often take years.</li>
  <li>Start with a clear org strategy.</li>
  <li>Avoid &ldquo;cascading&rdquo; OKRs.
  <ul>
    <li>Align by ensuring every OKR has a parent OKR.</li>
  </ul></li>
  <li>Dependent teams might share OKRs:
  <ul>
    <li>Avoid hyperlocal optimizations.</li>
    <li>Promote collaboration.</li>
    <li>Simplifies OKR management and review.</li>
  </ul></li>
  <li>Timebox OKR planning to 1 month after strategic direction has been set.</li>
  <li>When we roll out OKRs, the people in our org are our customers.</li>
  <li>Use a experimental mindset.</li>
  <li>Every OKR implementation is different because every org is different.</li>
  <li>For the pilot, err on the side of radical transparency.</li>
  <li>Start small.</li>
  <li>Put your best folks on the challenge.</li>
  <li>Dedicated full-time OKR coaches.</li>
  <li>At scale, the right OKR tool makes a significant difference.</li>
</ul><h1><a name="ch-20"></a>Conclusion</h1>
<ul>
  <li>The most powerful predictors of success today are humility and curiosity:
  <ul>
    <li>Build cultures of learning and agility.</li>
  </ul></li>
</ul>]]></description></item><item><title>"do" for a small speed up of your REPL feedback</title><link>https://danlebrero.com/2024/06/12/clojure-repl-do-to-speed-up-your-flow/</link><guid>https://danlebrero.com/2024/06/12/clojure-repl-do-to-speed-up-your-flow/</guid><pubDate>Wed, 12 Jun 2024 09:35:00 +0200</pubDate><description><![CDATA[<p>We have been <a href="https://lifecheq.freshteam.com/jobs">hiring at Lifecheq</a>, and I have been pleasantly surprised that all candidates used a &ldquo;proper&rdquo; REPL flow: </p>
<ol>
  <li>Code in your IDE.</li>
  <li>Send top-level form to REPL.</li>
  <li>Go to 1.</li>
</ol><p>The Clojure website has a good example of this workflow <a href="https://clojure.org/guides/repl/enhancing_your_repl_workflow#editor-integrations">in the docs</a>.</p><p>Following on the example for the docs:</p>
<pre><code class="clojure">(defn square 
  [x]
  (* x x))
  
(comment 
  (square 10))
</code></pre><p>if you find yourself moving your caret between the <code>square</code> fn definition and the <code>square</code> fn call, backwards and forwards, forwards and backwards, it is more efficient to:</p>
<pre><code class="clojure">(do
  (defn square 
    [x]
    (* x x))

  (square 10)
)
</code></pre><p>Wrapping both the function and the execution in a <code>do</code> block, means that the &ldquo;Send top-form to REPL&rdquo; will both redefine the function and run it, saving you a lot of arrow down and arrow up keystrokes, specially for long <code>square</code> functions.</p><p>You can also include in the <code>do</code> block multiple functions, and the tip also works if you are working inside a <code>comment</code> block, like:</p>
<pre><code class="clojure"><br/>(comment
  (do
    (defn square
      [x]
      (* x x))

    (square 10)
  ))
</code></pre><p>To remove the <code>do</code> once you are finished, if you have only one function you can use &ldquo;Raise&rdquo;, or if you have multiple functions you will need to &ldquo;Splice&rdquo; and clean up the <code>do</code> and <code>square</code> calls.</p><p>And if you find yourself wanting to run a lot of <code>square</code> calls with different parameters, consider writing some proper tests and/or using <a href="https://github.com/hyperfiddle/rcf">RCF</a>.</p>]]></description></item><item><title>Book notes: The Ascetic Programmer   </title><link>https://danlebrero.com/2024/05/29/the-ascetic-programmer-book-summary/</link><guid>https://danlebrero.com/2024/05/29/the-ascetic-programmer-book-summary/</guid><pubDate>Wed, 29 May 2024 00:00:00 +0200</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/3wO30sU">The Ascetic Programmer: How asceticism benefits programming, science, and the arts</a> by <a href="https://toot.community/@piccolbo">Antonio Piccolboni</a>.</p><p>A case to &ldquo;do more with less&rdquo; (conciseness) and &ldquo;less is more&rdquo; (frugality), without forgetting that is not that easy:</p>
<blockquote><p>I would have written a shorter letter, but I did not have the time <cite>Blaise Pascal</cite></p>
</blockquote><h1>Key Insights</h1>
<ul>
  <li><p>Lines of code are a valuable measure of program complexity.</p>
  <blockquote>If we wish to count lines of code, we should not regard them as &ldquo;lines produced&rdquo; but as &ldquo;lines spent&rdquo; <cite>Dijkstra</cite>
  </blockquote></li>
  <li>The difference between a compressed program and a concise one is that the latter is human-intelligible.</li>
  <li>I considered what was written eons ago sacred.</li>
  <li>More general functions create indirect dependencies between parts of a program and, thus, more of the entanglement.</li>
  <li>If keeping two programs completely independent is paramount, an option is duplicating.</li>
  <li>Often code can grow as an accumulation of special cases until we realize a general rule that can replace them and covers additional ones as a bonus.</li>
  <li>If a long variable name works as documentation, is having to read it every time you run into it a good idea?</li>
  <li>Any non-trivial program should define the concepts relevant to the task on hand and implement data structures and operations to represent and manipulate those concepts, and this extends the language.</li>
  <li>Languages are defined by what they allow and what they prevent.</li>
  <li>Languages that forbid many constructs preclude them from expressing valid computations, hence developers will have to use longer programs to define equivalent computations.</li>
  <li>A simpler language should also be less powerful and therefore require more code for the same tasks:
  <ul>
    <li>However, Lisp sidesteps this trade-off to some degree.</li>
  </ul></li>
  <li>Code generation isn&rsquo;t a suitable replacement for abstraction.</li>
  <li>Making many more assumptions about what you&rsquo;re trying to do allows to be much more concise, at some cost of generality.</li>
  <li>Developers give up on reading source code beyond what is strictly necessary to add their contributions.</li>
  <li>Machine Learning: the complexity just morphed, but it is learned from data rather than hand-coded.</li>
  <li>Short programs are easier to test.</li>
  <li>Maintaining simplicity in the face of supporting new features requires a constant, organized, resourced effort.</li>
  <li>Working on reducing complexity is generally considered second-class work and not career-boosting.</li>
  <li>You can&rsquo;t become a superstar if you have to pick the next entry in a so-called backlog.</li>
  <li>Lawrence Kesteloot: Every line of code you write is a potential bug.</li>
  <li>Two approaches in API design:
  <ol>
    <li>Minimal.</li>
    <li>Humane: strives to support as many reasonable use cases as possible.</li>
  </ol>
  <ul>
    <li>A developer writing against a minimal API will have to write more code but learn less than against a humane one.</li>
  </ul></li>
  <li>Bad code begets bad code.</li>
  <li>Let the rot spread a little and meet your deadline.</li>
  <li>Development these days is fragmented into long series of self-inflicted emergencies.</li>
  <li>Deep Learning: Sun and co-authors concluded that &ldquo;performance increases logarithmically based on volume of training data&rdquo;.</li>
  <li>The Parsimony Principle: plurality should not be posited without necessity.</li>
  <li>Shorter sentences are easier to read and understand.</li>
  <li>Everything that is not useful in the picture is, it follows, harmful.</li>
  <li>Not only can most things wait, most things should. You either can&rsquo;t stop thinking about them, or those thoughts fade away. Let time do some work for you.
  <ul>
    <li>Time acts as a filter.</li>
  </ul></li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#ch-0">Introduction</a></li>
  <li><a href="#ch-1">Chapter 1 - Computing</a>
  <ul>
    <li><a href="#ch-1.1">1.1 - Metrics</a></li>
    <li><a href="#ch-1.2">1.2 - Concise Software</a></li>
    <li><a href="#ch-1.3">1.3 - Frugal Software</a></li>
    <li><a href="#ch-1.4">1.4 - Hardware</a></li>
    <li><a href="#ch-1.5">1.5 - Verbosity and Bloatware</a></li>
    <li><a href="#ch-1.6">1.6 - Code Considered Harmful</a></li>
  </ul></li>
  <li><a href="#ch-2">Chapter 2 - Science and Engineering</a>
  <ul>
    <li><a href="#ch-2.1">2.1 - Epistemology, Statistics and Machine Learning</a></li>
    <li><a href="#ch-2.3">2.3 - Engineering and Design</a></li>
  </ul></li>
  <li><a href="#ch-3">Chapter 3 - Literature, Visual Arts and More</a>
  <ul>
    <li><a href="#ch-3.1">3.1 - Speaking and Writing</a></li>
    <li><a href="#ch-3.2">3.2 - Visual Arts</a></li>
    <li><a href="#ch-3.4">3.4 - Management</a></li>
  </ul></li>
</ul><h1><a name="ch-0"></a>Introduction</h1>
<ul>
  <li>Asceticism in programming comes in two flavors, roughly described by the slogans &ldquo;do more with less&rdquo; (conciseness) and &ldquo;less is more&rdquo; (frugality).</li>
  <li>Don&rsquo;t expect a grand theory, but rather a series of interconnected anecdotes and expert opinions, interspersed with the occasional theorem and research paper.</li>
</ul><h1><a name="ch-1"></a>Chapter 1 - Computing</h1><h2><a name="ch-1.1"></a>1.1 - Metrics</h2>
<ul>
  <li>Lines of code are a valuable measure of program complexity.</li>
</ul>
<blockquote><p>If we wish to count lines of code, we should not regard them as &ldquo;lines produced&rdquo; but as &ldquo;lines spent&rdquo; <cite>Dijkstra</cite></p>
</blockquote>
<ul>
  <li>Alternatives:
  <ul>
    <li>Counting tokens.</li>
    <li>Cyclomatic complexity:
    <ul>
      <li>Correlates well with program size.</li>
    </ul></li>
  </ul></li>
  <li>Properties that predict program size:
  <ul>
    <li>Number of bugs (<a href="https://en.wikipedia.org/wiki/Capers_Jones">Capers Jones</a>).</li>
    <li>Probability of project failure.</li>
  </ul></li>
</ul><h2><a name="ch-1.2"></a>1.2 - Concise Software</h2>
<ul>
  <li>There are entire methodologies aimed at creating arbitrary deadlines and fostering a fictional sense of emergency.
  <ul>
    <li>Limits on size are rarely, if ever, encountered.</li>
  </ul></li>
  <li>Sometimes you have to write 500 unnecessary lines of code to get to the 50 absolutely necessary lines of code.</li>
  <li>The difference between a compressed program and a concise one is that the latter is human-intelligible.</li>
  <li>A line of code&rsquo;s further costs are in the future and harder to estimate.
  <ul>
    <li>We hardly ever tried to estimate those delayed costs. Therefore, the incentives to delete are weaker.</li>
  </ul></li>
  <li>Nobody taught me how to delete code.
  <ul>
    <li>I considered what was written eons ago sacred.</li>
  </ul></li>
  <li>Where does the quasi-repetition stop, and where does the &ldquo;vaguely related code&rdquo; start?</li>
  <li>Even when identification is easy, there may not be time to eliminate repetition because of the work required.
  <ul>
    <li>However, writing a ticket to mark some duplication we left unattended generally isn&rsquo;t a career boosting move, and those tickets never get taken care of regardless.</li>
  </ul></li>
  <li>More general functions create indirect dependencies between parts of a program and, thus, more of the entanglement.</li>
  <li>If keeping two programs completely independent is paramount, an option is duplicating.</li>
  <li>Conciseness and modularity are two sides of coping with size.</li>
  <li>Often code can grow as an accumulation of special cases until we realize a general rule that can replace them and covers additional ones as a bonus.</li>
  <li>More code often means less flexibility and functionality.</li>
  <li>Different abstraction techniques are touted for their potential to reduce coupling and not for any conciseness advantage.</li>
  <li>Bill Atkinson used to report a negative number of lines contributed, including a &ldquo;-2000&rdquo; in the week he had rewritten some routines in QuickDraw to be six times faster.</li>
  <li>If a long variable name works as documentation, is having to read it every time you run into it a good idea?</li>
  <li>Who enjoys reading documentation?</li>
  <li>Joshua Bloch: APIs should be self-documenting.</li>
  <li>Any non-trivial program should define the concepts relevant to the task on hand and implement data structures and operations to represent and manipulate those concepts, and this extends the language.</li>
  <li>Languages are defined by what they allow and what they prevent.</li>
  <li>Paul Graham: Macros can do two things that functions can&rsquo;t: hey can control (or prevent) the evaluation of their arguments, and they are expanded right into the calling context.</li>
  <li>Guy Steele: It&rsquo;s really hard to make a language that&rsquo;s great at everything, in part just because there are only so many concise notations to go around. There&rsquo;s this Huffman encoding problem.</li>
  <li>Languages that forbid many constructs preclude them from expressing valid computations, hence developers will have to use longer programs to define equivalent computations.</li>
  <li>A language with many ways to express the same computation will lead to more verbose programs.</li>
  <li>Defining more common computations with shorter programs and accepting some verbosity for less common ones could be a good compromise but implies different languages tailored for different domains.</li>
  <li>A simpler language should also be less powerful and therefore require more code for the same tasks:
  <ul>
    <li>However, Lisp sidesteps this trade-off to some degree.</li>
  </ul></li>
  <li>Verbose code is something to skim in long, painful, lonely sessions.</li>
  <li>Users love these more concise forms, but having multiple evaluation rules makes programs harder to understand and hinders their parametrization and generalization.</li>
  <li>Code generation isn&rsquo;t a suitable replacement for abstraction.</li>
  <li>POJO-aggrieved Java programmers.</li>
  <li>No API designer can escape the compromise between the complexity of an API, its power, and the complexity of user code.</li>
  <li>Edward Tufte:
  <ul>
    <li>Data-ink ratio, the ratio of ink spent to display data vs the total amount used in a chart, and recommended maximizing it.</li>
    <li>Data density: the number of data points per unit of area.</li>
    <li>Display lots of data with just enough ink, minimize and de-emphasize everything that isn&rsquo;t data.</li>
  </ul></li>
  <li><a href="https://amzn.to/3VdaYoN">Grammar of graphics</a> by Leland Wilkinson.
  <ul>
    <li><a href="https://vega.github.io/vega/">Vega project</a>.</li>
  </ul></li>
  <li>Making many more assumptions about what you&rsquo;re trying to do allows to be much more concise, at some cost of generality.</li>
  <li>This lack of modularity is sometimes positively spun as coming &ldquo;batteries included&rdquo;, meaning that any integration challenges are taken care of.</li>
  <li>Two orders of magnitude fewer lines of code mean a lot less attack surface.</li>
  <li>A much smaller codebase also means code that is more likely to work the way it is supposed to.</li>
  <li>Developers give up on reading source code beyond what is strictly necessary to add their contributions.</li>
  <li>If you need one KLOC to fix a bug and can produce it within the available time, so be it. The maintenance bill doesn&rsquo;t reach the original author.</li>
  <li>Machine Learning: the complexity just morphed, but it is learned from data rather than hand-coded.</li>
  <li>Short programs are easier to test.</li>
  <li>GolfScript: unlike most code blocks in this book, we will not try to understand this one.</li>
  <li>What is valid for programs continues to be so at the level of system architecture.</li>
  <li>Heroku: Only by concertedly building a minimal stack that is stable and nearly operable can we maximize our ability to push forward with new products and ideas.</li>
  <li>Maintaining simplicity in the face of supporting new features requires a constant, organized, resourced effort.</li>
  <li>Minimalism is a necessary condition for the evolution of the product, not a &ldquo;nice to have&rdquo;.</li>
  <li>If the pressure to build new features engenders complexity, we can work to reduce it after the fact.</li>
  <li>The progression toward complexity is reversible.</li>
  <li>Working on reducing complexity is generally considered second-class work and not career-boosting.</li>
</ul><h2><a name="ch-1.3"></a>1.3 - Frugal Software</h2>
<ul>
  <li>It isn&rsquo;t so much the code they write, but they decide to work on.</li>
  <li>You can&rsquo;t become a superstar if you have to pick the next entry in a so-called backlog.</li>
  <li>Atwood: If you can&rsquo;t get away with no code, next best thing is to start with brevity.</li>
  <li>Lawrence Kesteloot: Every line of code you write is a potential bug.</li>
  <li>Atwood: visible logging code is clutter, it actively obscures the code that is doing the real work in the application. We have since removed all logging from Stack Overflow, relying exclusively on exception logging. Honestly, I don&rsquo;t miss it at all.</li>
  <li>Filter feature requests before queuing them.</li>
  <li>Two approaches in API design:
  <ol>
    <li>Minimal.</li>
    <li>Humane: strives to support as many reasonable use cases as possible.</li>
  </ol>
  <ul>
    <li>A developer writing against a minimal API will have to write more code but learn less than against a humane one.</li>
  </ul></li>
  <li>Josue Block:
  <ul>
    <li>API should be as small as possible, but not smaller.</li>
    <li>The two requirements seem to almost directly contradict each other.</li>
  </ul></li>
  <li>What is more frugal than an API with a single entry that does it all?</li>
  <li>&ldquo;Negative feature list&rdquo;: a list of features that it does not offer.</li>
  <li>Mythical Man-Month: it is better to have a system omit certain anomalous features and improvements, but to reflect one set of design ideas, than to have one that contains many good but independent and uncoordinated ideas.</li>
</ul><h2><a name="ch-1.4"></a>1.4 - Hardware</h2>
<ul>
  <li>The missing keyboard of the iPhone.</li>
  <li>RISC architecture.</li>
</ul><h2><a name="ch-1.5"></a>1.5 - Verbosity and Bloatware</h2>
<ul>
  <li>Hoare: Wouldn&rsquo;t you be delighted if your Fairy Godmother offered to wave her wand over your program to remove all its errors and only made the condition that you should write out and key in your whole program three times!</li>
  <li>After a bug was identified while in orbit, Boeing decided to review the whole code base for the project.
  <ul>
    <li>Unfortunately, there were already a million LOC to review.</li>
  </ul></li>
  <li>Maciej Ceglowski: two steps secret to improve the performance of any website:
  <ol>
    <li>Make sure that the most important elements of teh page download and render first.</li>
    <li><p>Stop there. You don&rsquo;t need all that other crap. </p>
    <blockquote>There are two ways of constructing a software design: one way is to make it so simple that there are obviously no deficiencies and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult. <cite><a href="http://zoo.cs.yale.edu/classes/cs422/2011/bib/hoare81emperor.pdf">Hoare</a></cite>
    </blockquote></li>
  </ol></li>
  <li>SQL is not a small language. PostgreSQL implementation contains 469 keywords. Just part 2 (out of 14) of the SQL:2016 standard has 1732 pages.</li>
  <li>If the DRY principle guides Python and Ruby, Java should be considered a WET language: Write Explicitly Tenfold.</li>
  <li>Bad code begets bad code.</li>
  <li>Let the rot spread a little and meet your deadline.</li>
  <li>Development these days is fragmented into long series of self-inflicted emergencies.</li>
</ul><h2><a name="ch-1.6"></a>1.6 - Code Considered Harmful</h2>
<ul>
  <li>Go To Statement.</li>
  <li>Ifs: <a href="https://www.antiifprogramming.com/about-the-anti-if.php">Anti-If Manifesto</a>.</li>
  <li>Class inheritance.</li>
  <li>You have never been paid to write code. Indeed, code is a nasty byproduct of being a sw dev.</li>
</ul><h1><a name="ch-2"></a>Chapter 2 - Science and Engineering</h1><h2><a name="ch-2.1"></a>2.1 - Epistemology, Statistics and Machine Learning</h2>
<ul>
  <li>The Parsimony Principle:
  <ul>
    <li>Plurality should not be posited without necessity.</li>
    <li>Aristotle: we may assume the superiority, other things being equal, of the demonstration which derives from fewer postulates or hypotheses.</li>
  </ul></li>
  <li>Bayesian statistics inadequate for science, as conclusions are too dependent on the choice of prior - that is why its dominant variant is called subjective Bayesianism.</li>
  <li>Deep Learning: Sun and co-authors concluded that &ldquo;performance increases logarithmically based on volume of training data&rdquo;.
  <ul>
    <li>An additive improvement requires order-of-magnitude larger datasets and models and two orders of magnitude more computing power.</li>
    <li>Convolutional nets and deep nets, which, for the same size, show better performance.</li>
  </ul></li>
</ul><h2><a name="ch-2.3"></a>2.3 - Engineering and Design</h2>
<blockquote><p>Perfection is finally attained not when there is no longer anything to add, but when there is no longer anything to take away <cite>Antonie de Saint-Exupery</cite></p>
</blockquote><h1><a name="ch-3"></a>Chapter 3 - Literature, Visual Arts and More</h1><h2><a name="ch-3.1"></a>3.1 - Speaking and Writing</h2>
<ul>
  <li>Shorter sentences are easier to read and understand.</li>
  <li>With strict paper length limits: Many a choice turn of phrase and illustrative simile had to be sacrificed to precision, flow and brevity.</li>
</ul>
<blockquote><p>I would have written a shorter letter, but I did not have the time <cite>Blaise Pascal</cite></p>
</blockquote>
<ul>
  <li>Plausibly extending a text was easier for this AI system than summarizing it.</li>
  <li>Lawyered-up companies try to gain the upper end on smaller ones or private citizens by overwhelming them with long and complex contracts.</li>
</ul><h2><a name="ch-3.2"></a>3.2 - Visual Arts</h2>
<ul>
  <li>Everything that is not useful in the picture is, it follows, harmful.</li>
</ul><h2><a name="ch-3.4"></a>3.4 - Management</h2>
<ul>
  <li>Not only can most things wait, most things should. You either can&rsquo;t stop thinking about them, or those thoughts fade away. Let time do some work for you.</li>
  <li>Time acts as a filter.</li>
</ul>]]></description></item><item><title>Book notes: Flow Engineering</title><link>https://danlebrero.com/2024/05/01/flow-enginnering-book-summary/</link><guid>https://danlebrero.com/2024/05/01/flow-enginnering-book-summary/</guid><pubDate>Wed, 01 May 2024 00:00:00 +0200</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/4bi6p1H">Flow Engineering: From Value Stream Mapping to Effective Action</a> by <a href="https://twitter.com/steveelsewhere/">Steve Pereira</a> and <a href="https://twitter.com/AndrewDavis_io">Andrew Davis</a>.</p><p>&ldquo;Flow Engineering is a set of practices that build on the foundations of cybernetics and the Toyota Production System to provide a lightweight and iterative way of building value, clarity, and flow.&rdquo;</p><p>I love the approach to do the minimal amount of work to take you to next step:</p>
<blockquote><p>Value Stream Map in Flow Engineering is significantly simpler than the traditional one.</p>
</blockquote><p>You can find a Miro board with <a href="https://miro.com/app/board/uXjVKNndJVU=/?share_link_id=73825138920">all Flow Engineering Maps</a>.</p><h1>Key Insights</h1>
<ul>
  <li>The default approach to addressing the problem of scale is to increase coordination.</li>
  <li>In the absence of a simple purpose oriented around the customer, teams default to acting in incoherent and self-serving ways.</li>
  <li>The fastest path to clarity is visibility.</li>
  <li>Silos are a natural consequence of specialization and scale.</li>
  <li>Ringelmann effect: as more people are involved in a task, their average performance decreases, with each participant tending to feel that their own effort is not critical to overall performance.</li>
  <li>Solution to scale must have:
  <ol>
    <li>Engage all participants, like generative methods, to avoid disengagement.</li>
    <li>Simple and aligned, like prescriptive methods, to avoid disorientation.</li>
    <li>Fast and easy to put into practice, unlike prescriptive methods, to avoid distraction.</li>
  </ol></li>
  <li>To manage and optimize the flow of work, we must first see the flow of work.</li>
  <li>Value is our target, clarity allow us to understand a path to the target, and flow is about optimizing that path.</li>
  <li>Value, clarity and flow are hard to establish and easily lost.</li>
  <li>The act of mapping enables you to learn by doing.</li>
  <li>Maps:
  <ol>
    <li>Outcome Map:
    <ul>
      <li>Goal is to focus the team while surfacing doubts, testing assumptions, and enabling the emergence of new insights.</li>
    </ul></li>
    <li>Current State Value Stream Map.</li>
    <li>Dependency Map: identify dependencies by studying constraints.</li>
    <li>Future State Value Stream Map: how things will look like in 6 months.</li>
    <li>Flow Roadmap: organize insights, actions, and ownership into an improvement roadmap.</li>
  </ol></li>
  <li>If there are no obstacle to achieving our desired goal, we would already be there.</li>
  <li>Explicit obstacles mean they can be dealt with consciously.</li>
  <li>Working backwards involves beginning with a clear definition of a desired target state (outcome) and using that target to guide decisions and actions.</li>
  <li>Where there is a customer, there is a value stream.</li>
  <li>For Value Stream Mapping (VSM) to be effective, the team needs to be aligned on their objectives and aspirations.</li>
  <li>Don Reinertsen, in <a href="https://amzn.to/3VP4c9k">Principles of Product Development Flow</a>:
  <ul>
    <li>The value added by an activity is the difference in the price that an economically rational buyer would pay for a work product before, and after, the activity is performed.</li>
  </ul></li>
  <li>Cocreating a Current State Value Stream Map reveals issues that allow teams to get at least 20% of their time back immediately.</li>
  <li>&ldquo;It depends&rdquo; isn&rsquo;t an acceptable excuse for deliberation.</li>
  <li>The rapid VSM done in Flow Engineering intentionally sacrifices precision for speed and ease:
  <ul>
    <li>Aim to gather just enough information to identify a critical constraint.</li>
  </ul></li>
  <li>Nothing is ever truly autonomous.</li>
  <li>An SLA will consume the maximum time the SLA allows.</li>
  <li><p>Approach Dependency Mapping with curiosity, not accusation or demand.</p>
  <blockquote>Seek first to understand, then to be understood <cite>Stephen Covey, The 7 Habits of Highly Effective People</cite>
  </blockquote></li>
  <li><a href="/2021/01/06/toyota-kata-in-software-development-continuous-improvement/">Improvement Kata cycle</a>:
  <ol>
    <li>Vision and challenge: Outcome Map.</li>
    <li>Gasp current condition: Current State Map and Dependency Map.</li>
    <li>Target condition: Future State Map.</li>
    <li>Experiments: Flow Roadmap.</li>
  </ol></li>
  <li>Work in progress is the silent killer of productivity.</li>
  <li>You may miss something going too fast, and you may waste time going too deep.</li>
  <li>Delivering value is an act of cooperation, not a zero-sum game.</li>
  <li>We can only measure value by getting feedback from those experiencing it.</li>
  <li>Flow implies a quality of steadiness in motion.</li>
  <li>Optimizing for flow is contradictory to optimizing for resource utilization.</li>
  <li>In sw dev, there is significant variation in how long work takes, so you need slack capacity to accommodate this variation.</li>
  <li>Creating a pull-based system of work is an extraordinary feat.</li>
  <li>Learning is central to removing waste.</li>
  <li>Streetlight effect: we tend to look for things where it&rsquo;s easy to look.</li>
  <li>If you are not getting better, you are getting worse.</li>
  <li><a href="#types">Developmental vs Operational</a> value streams and Core vs Supportive value streams.</li>
</ul>
<blockquote><p>Strategy is a commodity, execution is an art <cite>Peter Drucker</cite></p>
</blockquote><h1>TOC</h1>
<ul>
  <li><a href="#ch-0">Introduction</a></li>
  <li><a href="#p-1">Part 1 - The Flow Landscape</a>
  <ul>
    <li><a href="#ch-1">Chapter 1 - The Problem with Scale</a></li>
    <li><a href="#ch-2">Chapter 2 - Solutions to Scale</a></li>
    <li><a href="#ch-3">Chapter 3 - The Elements of Action</a></li>
    <li><a href="#ch-4">Chapter 4 - Flow Engineering</a></li>
  </ul></li>
  <li><a href="#p-2">Part 2 - Mapping the Landscape</a>
  <ul>
    <li><a href="#ch-5">Chapter 5 - Outcome Mapping</a></li>
    <li><a href="#ch-6">Chapter 6 - Current State Value Stream Mapping</a></li>
    <li><a href="#ch-7">Chapter 7 - Dependency Mapping</a></li>
    <li><a href="#ch-8">Chapter 8 - Future State Value Stream Mapping</a></li>
    <li><a href="#ch-9">Chapter 9 - The Flow Roadmap</a></li>
  </ul></li>
  <li><a href="#p-3">Part 3 - Navigating the Landscape</a></li>
  <li><a href="#ch-10">Chapter 10 - Principles of Flow Engineering</a>
  <ul>
    <li><a href="#ch-11">Chapter 11 - Leading Flow Engineering</a></li>
    <li><a href="#ch-12">Chapter 12 - Traps to Avoid</a></li>
    <li><a href="#ch-13">Chapter 13 - Value Stream Management</a></li>
    <li><a href="#ch-14">Chapter 14 - Scaling Flow Engineering</a></li>
  </ul></li>
</ul><h1><a name="ch-0"></a>Introduction</h1>
<ul>
  <li>Radical transformations (Lean/Agile/DevOps) often devolve into rebranding and renaming the status quo.</li>
  <li>Clarity is often sacrificed at the altar of getting things done.</li>
  <li>The default approach to addressing the problem of scale is to increase coordination.</li>
  <li>Maturation as an individual/team/org is shifting our energy from survival to benevolence.</li>
  <li>To enable an effective and sustainable flow of work, a team&rsquo;s shared purpose needs to be oriented around the customer.
  <ul>
    <li>In the absence of a simple purpose oriented around the customer, teams default to acting in incoherent and self-serving ways.</li>
  </ul></li>
  <li>The fastest path to clarity is visibility.</li>
  <li>The paradox of modern orgs is that the more specialized workers become, the more they struggle to understand the broader system in which they fit.
  <ul>
    <li>Silos are a natural consequence of specialization and scale.</li>
  </ul></li>
  <li>Flow Engineering is a series of collaborative mapping exercises designed to connect the dots between an unclear current state a clear path to a target state.</li>
</ul><h1><a name="p-1"></a>Part 1 - The Flow Landscape</h1><h2><a name="ch-1"></a>Chapter 1 - The Problem with Scale</h2>
<ul>
  <li>Scale undermines the foundations of effective action.</li>
  <li>Costs brought on by scale:
  <ul>
    <li>Distraction.</li>
    <li>Disorientation.</li>
    <li>Disengagement.</li>
  </ul></li>
  <li>Ringelmann effect: as more people are involved in a task, their average performance decreases, with each participant tending to feel that their own effort is not critical to overall performance.</li>
</ul><h2><a name="ch-2"></a>Chapter 2 - Solutions to Scale</h2>
<ul>
  <li>Prescriptive methods:
  <ul>
    <li>Centralized approach.</li>
    <li>Small number of leaders/experts define how teams should organize and interact.</li>
    <li>Provide more clarity and direction.</li>
    <li>Heavy and constraining.</li>
    <li>&ldquo;All or nothing&rdquo;.</li>
    <li>Requires massive investment in learning and structure.</li>
  </ul></li>
  <li>Generative methods:
  <ul>
    <li>Distributed approach.</li>
    <li>Bring stakeholders throughout the org and hope they find an emergent solution.</li>
    <li>When people are involved in creating a solution, they are more invested in delivering the outcome.</li>
    <li>Takes longer.</li>
    <li>Individual contributors can lack important context.</li>
    <li>Challenging to convert into clear, actionable business value.</li>
  </ul></li>
  <li>Solution to scale must have:
  <ol>
    <li>Engage all participants, like generative methods, to avoid disengagement.</li>
    <li>Simple and aligned, like prescriptive methods, to avoid disorientation.</li>
    <li>Fast and easy to put into practice, unlike prescriptive methods, to avoid distraction.</li>
  </ol></li>
  <li>Cybernetics: any attempt to navigate towards a goal depends on effective control systems.</li>
  <li>The scope of a value stream is the complete loop from customer need to customer satisfaction.
  <ul>
    <li>It represents a complete cybernetic control system.</li>
  </ul></li>
  <li>To manage and optimize the flow of work, we must first see the flow of work.</li>
  <li>Flow Engineering is a set of practices that build on the foundations of cybernetics and the Toyota Production System to provide a lightweight and iterative way of building value, clarity, and flow.</li>
</ul><h2><a name="ch-3"></a>Chapter 3 - The Elements of Action</h2>
<ul>
  <li>Value is our target, clarity allow us to understand a path to the target, and flow is about optimizing that path.</li>
  <li>Value, clarity and flow are hard to establish and easily lost.</li>
  <li>Human collaboration doesn&rsquo;t scale naturally.</li>
</ul><h2><a name="ch-4"></a>Chapter 4 - Flow Engineering</h2>
<ul>
  <li>The act of mapping enables you to learn by doing.</li>
  <li>Aim to address the gaps in understanding that arise from silos of activity, concern, and visibility.</li>
  <li>It enables effective collective action.</li>
  <li>Connects the dots from efforts, activities, and improvements to the most critical focus for the organization.</li>
  <li>Build relationships across stakeholders and contributors.</li>
  <li>5 key maps:
  <ol>
    <li>Outcome Map: target outcome.</li>
    <li>Current State Value Stream Map: constraints in the current workflow.</li>
    <li>Dependency Map: identify dependencies by studying constraints.</li>
    <li>Future State Value Stream Map.</li>
    <li>Flow Roadmap: organize insights, actions, and ownership into an improvement roadmap.</li>
  </ol></li>
  <li>When:
  <ul>
    <li>To cut costs, boost efficiency, or improve time to market.</li>
    <li>Reorg.</li>
    <li>Your calendar is eaten up by meetings.</li>
    <li>Acquisition.</li>
  </ul></li>
  <li>Who:
  <ul>
    <li>Responsible and accountable parties within a given value stream.</li>
    <li>Leadership and those who are able to change the system.</li>
    <li>You can maximize context and clarity by involved the same group in all mappings.</li>
    <li>12 people max.</li>
  </ul></li>
  <li>Facilitator:
  <ul>
    <li>Should not have skin in the game.</li>
    <li>Caution any individual from talking too much.</li>
    <li>Promote standard, non-disruptive interruption method.</li>
    <li>Emphasize the need to stay focused on the time horizon in question.</li>
  </ul></li>
  <li>First complete all maps in sequence, then redo individual maps depending on your needs.</li>
</ul><h1><a name="p-2"></a>Part 2 - Mapping the Landscape</h1><h2><a name="ch-5"></a>Chapter 5 - Outcome Mapping</h2>
<ul>
  <li>Future state you want to be in within a set amount of time.
  <ul>
    <li>Typically, 6 months.</li>
  </ul></li>
  <li>Desired outcome from the outset gives context and purpose to all the subsequent maps.</li>
  <li>Goal is to focus the team while surfacing doubts, testing assumptions, and enabling the emergence of new insights.</li>
  <li>5 stages:
  <ol>
    <li>Outcome discovery:
    <ul>
      <li>What is out target?</li>
      <li>Prompts: context, goals, pains, ideas, questions.</li>
    </ul></li>
    <li>Defining the Target Outcome:
    <ul>
      <li>What goal do we want to achieve?</li>
    </ul></li>
    <li>Defining Benefits:
    <ul>
      <li>Why does this outcome matter?</li>
      <li>3 different perspectives:
      <ul>
        <li>Value for customers.</li>
        <li>Value for the org.</li>
        <li>Value for individual contributors.</li>
      </ul></li>
      <li>If you struggle to define the benefits, either:
      <ul>
        <li>You should not be working on this.</li>
        <li>You haven&rsquo;t fully understood the broader context in which you are working.</li>
      </ul></li>
    </ul></li>
    <li>Defining Obstacles:
    <ul>
      <li>What could get in the way?</li>
      <li>If there are no obstacle to achieving our desired goal, we would already be there.</li>
      <li>Explicit obstacles mean they can be dealt with consciously.</li>
    </ul></li>
    <li>Defining Next Steps:
    <ul>
      <li>How are we going to proceed?</li>
    </ul></li>
  </ol></li>
  <li>Working backwards involves beginning with a clear definition of a desired target state (outcome) and using that target to guide decisions and actions.</li>
  <li>Flow Engineering mapping exercises are structured conversations with defined outputs.</li>
  <li>Who:
  <ul>
    <li>People involved in executing the workflow.</li>
    <li>People who have the situational awareness to accurately determine where changes can be made.</li>
    <li>Aim to involve the minimum number of people required to make decisions that will be trusted and accepted by the rest of the team.</li>
  </ul></li>
  <li>Time allocation: 60 mins.</li>
  <li>Mechanics:
  <ol>
    <li>Outcome mapping:
    <ul>
      <li>One color per category.</li>
    </ul>
    <ol>
      <li>Brain dump: 5 mins.</li>
      <li>Review, identifying perspectives and presenting themes. 5 mins.</li>
      <li>Group notes into themes/topics. 3 mins.</li>
      <li>Vote on which theme to tackle.  <img src="/images/blog/books/flow-engineering/flow-engineering-outcome-discovery-map.png" alt="Outcome discovery map" /><br/></li>
    </ol></li>
    <li>Defining target outcome:
    <ul>
      <li>Craft a target outcome that captures the information from the sticky notes from outcome mapping and represents a valuable target.</li>
      <li>Maybe have a secondary outcome to counterbalance.</li>
      <li>SMART goals.</li>
      <li>Add to &ldquo;outcome&rdquo; column</li>
    </ul></li>
    <li>Define benefits, obstacles, next steps:
    <ul>
      <li>For each column:
      <ol>
        <li>Reflect silently to generate ideas. 1 min.</li>
        <li>In pairs, share ideas. 2 mins.</li>
        <li>Join 2 pais and consolidate their ideas. 4 mins.</li>
        <li>Whole group votes on highest priority ideas and moves them to the top. 2 mins. <img src="/images/blog/books/flow-engineering/flow-engineering-outcome-map.png" alt="Outcome map" /><br></li>
      </ol></li>
    </ul></li>
  </ol></li>
</ul><h2><a name="ch-6"></a>Chapter 6 - Current State Value Stream Mapping</h2><p><img src="/images/blog/books/flow-engineering/flow-engineering-current-simplified-value-stream-map.png" alt="Current simplified value stream map" /></p>
<ul>
  <li>The stream already exists, and the flow is already present.</li>
  <li>Guiding principles to &ldquo;see&rdquo; value streams:
  <ul>
    <li>A value stream is just a pattern. Where this pattern appears, you can apply a consistent set of practices.</li>
    <li>Where there is a customer, there is a value stream.</li>
    <li>No stream is independent.</li>
    <li>Working backward is easier than forward.</li>
  </ul></li>
  <li>Hiring, customer onboarding, support, roadmap definition and quarterly planning can be treated as a value stream.</li>
  <li>Don Reinertsen, in <a href="https://amzn.to/3VP4c9k">Principles of Product Development Flow</a>:
  <ul>
    <li>The value added by an activity is the difference in the price that an economically rational buyer would pay for a work product before, and after, the activity is performed.</li>
  </ul></li>
  <li>For Value Stream Mapping (VSM) to be effective, the team needs to be aligned on their objectives and aspirations.</li>
  <li>Time is the one thing we can&rsquo;t scale and the easiest thing for us to waste. It&rsquo;s also quite factual.</li>
  <li>From raw materials (which in sw dev is typically just an idea) to a finished product (working software).</li>
  <li>Value Stream Map in Flow Engineering is significantly simpler than the traditional one.</li>
  <li>VSM is widely espoused but not frequently practiced.</li>
  <li>Other than process time and wait time, other metrics are added in a just-in-time fashion as investigations indicate the need.</li>
  <li>Cocreating a Current State Value Stream Map reveals issues that allow teams to get at least 20% of their time back immediately.</li>
  <li>90 mins at a brisk pace. 2 hours if it is your first time.</li>
  <li>Up to 10 people.</li>
  <li>Steps:
  <ol>
    <li>Stream selection:
    <ul>
      <li>Recent.</li>
      <li>Real: something that has business impact.</li>
      <li>Reach: traverses the full value stream.</li>
      <li>Representative: typical piece of work.</li>
      <li>Road-tested: in production.</li>
    </ul></li>
    <li>Add activities:
    <ul>
      <li>Work backwards.</li>
    </ul></li>
    <li>Add timing:
    <ul>
      <li>Typical cycle time (process time) and delay time (wait time).</li>
    </ul></li>
    <li>Add dimensions and total metrics:
    <ul>
      <li>Lead time = total cycle time + total wait time.</li>
      <li>Add any extra dimensions that seem relevant to your target outcome.</li>
    </ul></li>
    <li>Highlight constraint:
    <ul>
      <li>Target for future work and is the constraint used in Dependency Mapping.</li>
    </ul></li>
  </ol></li>
  <li>Focus on what is happening most often. This involved repeatedly asking the team, &ldquo;How long does it usually take?&rdquo; and reminding them that &ldquo;it depends&rdquo; isn&rsquo;t an acceptable excuse for deliberation.</li>
  <li>Don&rsquo;t try to thoroughly accommodate edge cases. If the flow seems to branch based on variations in process, capture it in a note but focus on what happens most often.</li>
  <li>Rough estimates are sufficient.</li>
  <li>If there&rsquo;s disagreement, take the worst-case time.</li>
  <li>If there is high variability, capture best and worse time.</li>
  <li>Focus the scope of the VSM on steps that are within this group&rsquo;s ability to influence.</li>
  <li>Other possible dimensions: Quality, efficiency, work in progress, queues, roles, tools, artifacts and deliverables.</li>
  <li>Tracking quality of work at each step typically requires intensive data-gathering and analysis. It can also be a bit of a sensitive topic.</li>
  <li>It is possible to parallelize the exercise by having each participant create their own representation of the VSM.</li>
  <li>It is possible to map asynchronously.</li>
  <li>If next steps seem unclear or blocked, you can use 15% solutions: &ldquo;What can you do without more resources or authority that would get you 15% of the way to a solution?&rdquo;.</li>
  <li>The analysis is focused on activities, not roles.</li>
</ul><h2><a name="ch-7"></a>Chapter 7 - Dependency Mapping</h2>
<ul>
  <li>The rapid VSM done in Flow Engineering intentionally sacrifices precision for speed and ease:
  <ul>
    <li>Aim to gather just enough information to identify a critical constraint.</li>
  </ul></li>
  <li>Dependency Mapping is specifically designed to improve the resolution on this critical constraint, so we can identify precise remedies.
  <ul>
    <li>Aim to gather just enough information to uncover viable opportunities for improvement.</li>
    <li>Challenge assumptions about where problems lie by digging deeper into likely hot spots.</li>
    <li>There is no need to analyze or understand every dependency.</li>
  </ul></li>
  <li>Stages:
  <ol>
    <li>Start with constraints:
    <ul>
      <li>Copy the Value Stream Map but remove all data that does not related to the constraint.</li>
    </ul></li>
    <li>Zoom in on a constraint by creating a sub-Value Stream Map:</li>
    <li>Identify hot spots.</li>
    <li>Identify direct causes for hot spots.</li>
    <li>Dig deeper into the constraint:
    <ul>
      <li>5 Whys.</li>
    </ul></li>
  </ol></li>
  <li>Nothing is ever truly autonomous.</li>
  <li>Participants: those who have a deep understanding of the constrained step.</li>
  <li>Key questions:
  <ol>
    <li>What is the precise process through which step is enabled?</li>
    <li>What are typical timings of the sub-steps in that process?</li>
    <li>What other challenges are we are aware of in this process?</li>
  </ol></li>
  <li>Consider conflicting incentives.</li>
  <li>Share context with the Outcome Map and VSM.</li>
  <li>An SLA will consume the maximum time the SLA allows.</li>
  <li>Approach Dependency Mapping with curiosity, not accusation or demand.</li>
</ul>
<blockquote><p>Seek first to understand, then to be understood <cite>Stephen Covey, The 7 Habits of Highly Effective People</cite></p>
</blockquote>
<ul>
  <li>Consider dependency matrix.</li>
  <li>Wardley mapping can be useful to explore the strategic impact of interdependent capabilities.</li>
  <li><a href="https://en.wikipedia.org/wiki/SIPOC">SIPOC</a> diagrams.</li>
  <li>RACI matrix.</li>
</ul><h2><a name="ch-8"></a>Chapter 8 - Future State Value Stream Mapping</h2>
<ul>
  <li>Ideal State Maps:
  <ul>
    <li>If we had all the necessary capabilities and resources and could remove all wait time between steps.</li>
    <li>Determined the upper limit of what is possible.</li>
    <li>Elicit creative ideas.</li>
  </ul></li>
  <li>Future State Maps: how things will look like in 6 months.</li>
  <li>Reducing or eliminating wait time can often reduce lead time by 80% or more.</li>
  <li>PDSA cycle:
  <ul>
    <li>Plan: Future State Map.</li>
    <li>Do: Flow Roadmap.</li>
    <li>Study and Act: every 3 months, reassess current VSM.</li>
  </ul></li>
  <li>Improvement Kata cycle:
  <ol>
    <li>Vision and challenge: Outcome Map.</li>
    <li>Gasp current condition: Current State Map and Dependency Map.</li>
    <li>Target condition: Future State Map.</li>
    <li>Experiments: Flow Roadmap.</li>
  </ol></li>
  <li>Stages:
  <ol>
    <li>Review the target outcome and finding from previous maps:
    <ul>
      <li>Make copy of Current State Map.</li>
      <li>10 mins.</li>
    </ul></li>
    <li>Identify targets for improvements:
    <ul>
      <li>Review DOWNTIME wastes.</li>
      <li>20 mins.</li>
    </ul></li>
    <li>Redesign the stream:
    <ul>
      <li>Modify the parts of teh map that constitute the bottleneck.</li>
      <li>10 mins.</li>
    </ul></li>
    <li>Measure the future state:
    <ul>
      <li>Estimate wait and cycle times.</li>
      <li>Focus on what can be achieved in the next 3 to 6 months.</li>
      <li>10 mins.</li>
    </ul></li>
  </ol></li>
  <li>Optimizing delivery is a fine balancing act, and teams can benefit as much from limiting controls as they can from expanding controls.</li>
  <li>Work in progress is the silent killer of productivity.</li>
  <li>Eight wastes of Lean in knowledge work (DOWNTIME):
  <ol>
    <li>Defects.</li>
    <li>Overproduction: features no used, abandoned tasks, data duplication.</li>
    <li>Waiting: delays, slow hand offs, queuing, approvals, unnecessary/inefficient meetings.</li>
    <li>Non-utilized talent: missing capabilities, insufficient tooling, inadequate training, underutilized staff, bad incentives, lost morale.</li>
    <li>Transport: moving data between teams/systems/databases/tools, manual hand offs.</li>
    <li>Inventory: queues, backlogs, WIP, branches.</li>
    <li>Motion: unnecessary hand-offs, context switching data transfer/duplication.</li>
    <li>Extra processing: Unnecessary gates/approvals/reviews/validation, excess requirement details, gold-plating, excess UAT, polished docs when rough docs will suffice.</li>
  </ol></li>
  <li>Reducing cognitive load can help reduce motion waste.</li>
  <li>Participants: original current VSM + key people from Dependency Mapping.</li>
  <li>Goal is to set a target. Details left for the Flow Roadmap.</li>
  <li>For your first Future State Map:
  <ul>
    <li>Aim for 3 improvements.</li>
    <li>Consider a shorter improvement horizon, such as 4-6 weeks.</li>
  </ul></li>
  <li>Add more people or resources, preprocess work to simplify or increase team&rsquo;s awareness of the backlog.</li>
  <li>A common reason for a team being overloaded is excessive work in progress (WIP):
  <ul>
    <li>Say &ldquo;no&rdquo;.</li>
  </ul></li>
</ul><h2><a name="ch-9"></a>Chapter 9 - The Flow Roadmap</h2>
<ul>
  <li>The Flow Roadmap is a plan for how to improve workflow.</li>
  <li>Plot actions, experiments, and mechanisms to improve the way you deliver.</li>
  <li>Stages:
  <ol>
    <li>Identify improvement opportunities:
    <ul>
      <li>List the target improvement areas identified during the Future State Map.</li>
      <li>For each, identify specific actions.</li>
    </ul></li>
    <li>Prioritize each activity:
    <ul>
      <li>Plot on the vertical axis the importance and the feasibility on the horizontal axis.</li>
      <li>Indicate dependencies.  <img src="/images/blog/books/flow-engineering/flow-engineering-action-priorities.png" alt="Action priorities" /><br/></li>
    </ul></li>
    <li>Sequence activities into a roadmap:
    <ul>
      <li>Pick the most important and feasible.</li>
      <li>Identify a measure of progress for the &ldquo;now&rdquo; actions.</li>
      <li>Assign owners to the actions.</li>
    </ul></li>
  </ol></li>
  <li>You may miss something going too fast, and you may waste time going too deep.</li>
  <li>Participants: Those likely to be involved in the next steps.</li>
  <li>Key questions:
  <ol>
    <li>What are the highest-priority actions to deliver out target outcome?</li>
    <li>How will we measure progress?</li>
    <li>Who will own the progress?</li>
  </ol></li>
  <li>In the upper left, include a copy of the Future State Map.</li>
  <li>Less feasible:
  <ol>
    <li>Multiple contributors.</li>
    <li>Lack of a capability.</li>
    <li>With dependencies on other teams.</li>
    <li>Unknown scopes.</li>
  </ol></li>
</ul><h1><a name="p-3"></a>Part 3 - Navigating the Landscape</h1><h2><a name="ch-10"></a>Chapter 10 - Principles of Flow Engineering</h2>
<ul>
  <li>Effective action depends on the ability of each individual to identify value, build clarity, and enable flow.</li>
  <li>Two different ways of seeing an org:
  <ol>
    <li>Prescriptive approach:
    <ul>
      <li>An org can be designed and engineered like a machine.</li>
    </ul></li>
    <li>Generative approach:
    <ul>
      <li>An org is composed of living workers whose behavior necessarily emerges from their own values and understanding.</li>
    </ul></li>
  </ol>
  <ul>
    <li>Both approaches needed as orgs have a dual nature.</li>
  </ul></li>
  <li>Principles:
  <ul>
    <li>Specify value:
    <ul>
      <li>Value is subjective and transitory because it is a measure of how positively we feel about something, and whether it addresses a need.</li>
      <li>Delivering value is an act of cooperation, not a zero-sum game.</li>
      <li>We can only measure value by getting feedback from those experiencing it.</li>
    </ul></li>
    <li>Map the value stream:
    <ul>
      <li>Western rationalism has habituated most of us to very linear ways of thinking.</li>
      <li>Visibility enables observability; observability enables clarity.</li>
      <li>Effort invested in gaining clarity allows us to avoid waste and risk.</li>
    </ul></li>
    <li>Create flow:
    <ul>
      <li>Flow implies a quality of steadiness in motion.</li>
      <li>Optimizing for flow is contradictory to optimizing for resource utilization.</li>
      <li>To maximize value, we must focus on flow efficiency (cycle time / lead time).</li>
      <li>In sw dev, there is significant variation in how long work takes, so you need slack capacity to accommodate this variation.</li>
      <li>Theory of Constraints: flow is always limited by one and only one constraint at any given time.</li>
    </ul></li>
    <li>Pull don&rsquo;t push:
    <ul>
      <li>Steve Spear in <a href="https://amzn.to/44zserv">The High-Velocity Edge</a>. The ideal:
      <ol>
        <li>Defect-free.</li>
        <li>On demand.</li>
        <li>One piece at a time.</li>
        <li>Immediate.</li>
        <li>Without waste.</li>
        <li>Safe.</li>
        <li>Secure.</li>
      </ol></li>
      <li>Pull creates a direct connection between what is needed and what is delivered.</li>
      <li>Creating a pull-based system of work is an extraordinary feat.</li>
    </ul></li>
    <li>Pursue perfection:
    <ul>
      <li>Learning is central to removing waste.</li>
      <li>Implicit in enabling learning is a sense of psychological safety.</li>
      <li>Learning implies letting go of our current models.</li>
    </ul></li>
  </ul></li>
</ul><h2><a name="ch-11"></a>Chapter 11 - Leading Flow Engineering</h2>
<ul>
  <li>Effective principles requires:
  <ul>
    <li>Consistent practice, which requires</li>
    <li>Discipline and mindfulness, which requires</li>
    <li>Strong and sustained effort, which requires</li>
    <li>Confidence, which requires</li>
    <li>Inspiration and vision.</li>
  </ul></li>
  <li>To safely deliver change, you must control risk, for which you need the ability to respond quickly and effectively when problems emerge.</li>
  <li><p>Feedback loops must also evolve as target outcome evolve.</p>
  <blockquote>Strategy is a commodity, execution is an art <cite>Peter Drucker</cite>
  </blockquote></li>
</ul><h2><a name="ch-12"></a>Chapter 12 - Traps to Avoid</h2>
<ul>
  <li>Top five:
  <ol>
    <li>Neglecting the narrative.</li>
    <li>Misaligned and conflicting incentives.</li>
    <li>Not mapping the complete stream.</li>
    <li>Craving unnecessary precision.</li>
    <li>Conflict with existing operating models.</li>
  </ol></li>
</ul><h2><a name="ch-14"></a>Chapter 13 - Value Stream Management</h2>
<ul>
  <li>A new strategic and operational approach to the data capture, analysis, planning and implementation of effective change within the core cross-functional or cross-company processes required to achieve a truly lean enterprise.</li>
  <li>Two primary activities:
  <ol>
    <li>Optimizing the flow of work that delivers customer value.</li>
    <li>Measuring those delivered outcomes to make better decisions.</li>
  </ol></li>
  <li>The transition from project to product is a story of flow.</li>
  <li>Streetlight effect: we tend to look for things where it&rsquo;s easy to look.</li>
  <li>If you are not getting better, you are getting worse.</li>
</ul><h2><a name="ch-14"></a>Chapter 14 - Scaling Flow Engineering</h2>
<ul>
  <li>To have a large-scale impact, you must achieve this across an entire organization:
  <ul>
    <li>That&rsquo;s neither feasible nor affordable one stream at a time.</li>
    <li>It is often simple to see that dependencies are common, and by addressing them for one stream, you can address them across the entire organization.</li>
  </ul></li>
  <li>Rapid methods to reach out beyond a single stream:
  <ul>
    <li>Sharing maps.</li>
    <li>Surveying.</li>
    <li>Communities of Practice.</li>
  </ul></li>
  <li><a name="types"></a>Developmental vs Operational value streams:
  <ul>
    <li>Developmental: focus on delivering something new each time.</li>
    <li>Operational: focus on delivering a consistent product.</li>
    <li>Don&rsquo;t choose one or the other, but one over the other.</li>
  </ul></li>
</ul>
<table>
  <thead>
    <tr>
      <th> </th>
      <th>Developmental </th>
      <th>Operational </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Focused on </td>
      <td>Effectiveness </td>
      <td>Efficiency </td>
    </tr>
    <tr>
      <td> </td>
      <td>Design </td>
      <td>Execution </td>
    </tr>
    <tr>
      <td> </td>
      <td>Innovation </td>
      <td>Stability </td>
    </tr>
    <tr>
      <td> </td>
      <td>Novelty </td>
      <td>Maintenance </td>
    </tr>
    <tr>
      <td> </td>
      <td>Value creation </td>
      <td>Value maximization </td>
    </tr>
    <tr>
      <td>Characterized by </td>
      <td>Variation </td>
      <td>Consistency </td>
    </tr>
    <tr>
      <td> </td>
      <td>Uncertainty </td>
      <td>Certainty </td>
    </tr>
    <tr>
      <td> </td>
      <td>Investigation </td>
      <td>Measurement </td>
    </tr>
    <tr>
      <td> </td>
      <td>Experimentation </td>
      <td>Optimization </td>
    </tr>
    <tr>
      <td>Function of constraints </td>
      <td>Enablement </td>
      <td>Governance </td>
    </tr>
  </tbody>
</table>
<ul>
  <li>Core vs Supportive value streams:
  <ul>
    <li>Core:
    <ul>
      <li>Directly contributes to revenue or value creation for the business.</li>
      <li>Contribute directly to external customer value.</li>
      <li>Are <em>why</em> you are in business.</li>
    </ul></li>
    <li>Supportive:
    <ul>
      <li>Provide services and capabilities to core streams.</li>
      <li>Are <em>how</em> you stay in business.</li>
    </ul></li>
  </ul></li>
  <li><a href="https://observablehq.com/@troymagennis/impact-of-multiple-team-dependencies-in-software-developm">Troy Magennis</a>: Every dependency you can remove DOUBLES your chances of successful on-time delivery.</li>
  <li>Started with Flow Engineering by conducting a conversational Outcome Map.</li>
  <li>Fit mapping into existing time boxes like retrospectives or off-site meetings.</li>
</ul>]]></description></item><item><title>Book notes: Continuous Discovery Habits</title><link>https://danlebrero.com/2024/02/28/continuous-discovery-habits-summary/</link><guid>https://danlebrero.com/2024/02/28/continuous-discovery-habits-summary/</guid><pubDate>Wed, 28 Feb 2024 00:00:00 +0100</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/48Ihqbv">Continuous Discovery Habits</a> by <a href="https://twitter.com/ttorres">Teresa Torres</a>.</p><p>Very practical advise and tool for Product Managers. To quote Teresa:</p>
<blockquote><p>Approach to give you confidence to act while preparing you to be wrong.</p>
</blockquote><p>Interestingly, a lot of the advice it very applicable to software architecture:</p>
<ul>
  <li>Best path to desired outcome is the &ldquo;ill-structured problem&rdquo;:
  <ul>
    <li>There is no right or wrong, only better or worse.</li>
    <li>Most of the work is framing the problem itself:
    <ul>
      <li>Framing impacts how we solve it.</li>
      <li>Good problem-solvers try many framings.</li>
    </ul></li>
  </ul></li>
</ul><h1>Key Insights</h1>
<ul>
  <li>Product trio:
  <ul>
    <li>Product Manager + Designer + SW eng.</li>
    <li>Product trios should interview together.</li>
  </ul></li>
  <li>At minimum, weekly touch points with customers by the team building the product where they conduct small research activities in pursuit of a desired outcome.
  <ul>
    <li>Continuous interviewing is the keystone habit for continuous discovery.</li>
  </ul></li>
  <li>Opportunity Solution Tree (OST):<br/>  <img src="/images/blog/books/continuous-discovery-habits/ost.jpg" alt="OST" /></li>
  <li>Avoid &ldquo;whether or not&rdquo; decisions, but a &ldquo;compare and contrast&rdquo;.</li>
  <li>Best designers evolve the problem and solution space together.</li>
  <li>When an idea does not work, take the time to reflect on what you learned.</li>
  <li>Josh Seiden, <a href="https://amzn.to/493cjm7">Outcomes Over Outputs</a>:
  <ul>
    <li>An outcome is a change in human behavior that drives business results.</li>
  </ul></li>
  <li>Primary research question:
  <ul>
    <li>What opportunity matter most to this customer?</li>
    <li>Best is to ask them to share specific stories about their experience:
    <ul>
      <li>Dig into the details.</li>
      <li>Don&rsquo;t allow them to generalize.</li>
    </ul></li>
  </ul></li>
  <li>An opportunity should have more than one potential solution, otherwise it is simply a solution in disguise.</li>
  <li>Do not score opportunities:
  <ul>
    <li>Make a data-informed, subjective comparison.</li>
  </ul></li>
  <li>Choosing an opportunity is an easily reversible decision, so:
  <ul>
    <li>Avoid analysis-paralysis:
    <ul>
      <li>We will learn more by acting.</li>
    </ul></li>
    <li>You are just committing to explore it further.</li>
  </ul></li>
  <li>Research shows:
  <ul>
    <li>More idea == more diverse and novel.</li>
    <li>Most original ideas tend to be generated toward the end of the ideation session.</li>
    <li>Individuals outperformed brainstorming groups.</li>
    <li>We are better at evaluating ideas as a group.</li>
    <li>Best:
    <ol>
      <li>Generate ideas individually.</li>
      <li>Share.</li>
      <li>Go to 1.</li>
    </ol></li>
  </ul></li>
  <li>Fast discovery iterations only possible if instead of testing ideas, test the assumptions that need to be true in order for the ideas to succeed.
  <ul>
    <li>Do not test one idea at a time, but assumptions from all ideas at the same time.</li>
    <li>Assumption tests should simulate an experience, so that the participant behaves, not only says that they will do or not.</li>
    <li>Define evaluation criteria upfront.</li>
    <li>You are not trying to prove that an assumption is true, but to reduce the risk.</li>
  </ul></li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#ch-0">Introduction</a></li>
  <li><a href="#p-1">Part I - What is Continuous Delivery?</a>
  <ul>
    <li><a href="#ch-1">Chapter 1 - The What and Why of Continuous Delivery</a></li>
    <li><a href="#ch-2">Chapter 2 - A Common Framework for Continuous Delivery</a></li>
  </ul></li>
  <li><a href="#p-2">Part II - Continuous Discovery Habits</a>
  <ul>
    <li><a href="#ch-3">Chapter 3 - Focusing on Outcomes over Outputs</a></li>
    <li><a href="#ch-4">Chapter 4 - Visualizing What You Know</a></li>
    <li><a href="#ch-5">Chapter 5 - Continuous Interviewing</a></li>
    <li><a href="#ch-6">Chapter 6 - Mapping the Opportunity Space</a></li>
    <li><a href="#ch-7">Chapter 7 - Prioritizing Opportunities, Not Solutions</a></li>
    <li><a href="#ch-8">Chapter 8 - Supercharged Ideation</a></li>
    <li><a href="#ch-9">Chapter 9 - Identifying Hidden Assumptions</a></li>
    <li><a href="#ch-10">Chapter 10 - Testing Assumptions, Not Ideas</a></li>
    <li><a href="#ch-11">Chapter 11 - Measure Impact</a></li>
    <li><a href="#ch-12">Chapter 12 - Managing The Cycles</a></li>
    <li><a href="#ch-13">Chapter 13 - Slow You Work</a></li>
  </ul></li>
  <li><a href="#p-3">Part III - Developing You Continuous Discovery Habits</a>
  <ul>
    <li><a href="#ch-14">Chapter 14 - Start Small, and Iterate</a></li>
  </ul></li>
</ul><h1><a name="ch-0"></a>Introduction</h1>
<ul>
  <li>Focus on customers was a better strategy than obsessing about our competitors.</li>
  <li>Naively thought business would be human centered.</li>
</ul><h1><a name="p-1"></a>Part I - What is Continuous Delivery?</h1><h2><a name="ch-1"></a>Chapter 1 - The What and Why of Continuous Delivery</h2>
<ul>
  <li>Questions:
  <ul>
    <li>Does the customer want it?</li>
    <li>Are you improving over time?</li>
    <li>Are you creating value for the customer and your business?</li>
  </ul></li>
  <li>Approach to give you confidence to act while preparing you to be wrong.</li>
  <li>Product trio:
  <ul>
    <li>Product Manager + Designer + SW eng.</li>
    <li>Other roles are welcomed but beware of the cost.</li>
  </ul></li>
  <li>Mindset:
  <ol>
    <li>Outcome-oriented.</li>
    <li>Customer-centric.</li>
    <li>Collaborative.</li>
    <li>Visual:
    <ul>
      <li>Humans have an immense capacity for spatial reasoning.</li>
    </ul></li>
    <li>Experimental.</li>
    <li>Continuous.</li>
  </ol></li>
  <li>At minimum, weekly touch points with customers by the team building the product where they conduct small research activities in pursuit of a desired outcome.</li>
</ul><h2><a name="ch-2"></a>Chapter 2 - A Common Framework for Continuous Delivery</h2>
<ul>
  <li>The focus on outcomes at the cost of the customer is not uncommon.</li>
  <li>Best path to desired outcome is the &ldquo;ill-structured problem&rdquo;:
  <ul>
    <li>There is no right or wrong, only better or worse.</li>
    <li>Most of the work is framing the problem itself:
    <ul>
      <li>Framing impacts how we solve it.</li>
      <li>Good problem-solvers try many framings.</li>
    </ul></li>
  </ul></li>
  <li>Pursue business value by creating customer value.</li>
  <li>Opportunity: customer needs, pain points or desires.</li>
  <li>Opportunity Solution Tree (OST):<br/> <img src="/images/blog/books/continuous-discovery-habits/ost.jpg" alt="OST" />
  <ul>
    <li>Shared understanding.</li>
    <li>Split big opportunities into smaller and smaller ones.</li>
  </ul></li>
  <li>Chip and Dan Heath, <a href="https://amzn.to/3Hx7x4I">Decisive Book</a>:
  <ul>
    <li>4 villains of decision-making:
    <ol>
      <li>Looking too narrowly at a problem.</li>
      <li>Confirmation bias.</li>
      <li>Letting short-term emotions affect decisions.</li>
      <li>Overconfidence.</li>
    </ol></li>
    <li>First book to read after this one.</li>
  </ul></li>
  <li>Avoid &ldquo;whether or not&rdquo; decisions, but a &ldquo;compare and contrast&rdquo;.</li>
  <li>Best designers evolve the problem and solution space together.</li>
  <li>When an idea does not work, take the time to reflect on what you learned.</li>
</ul><h1><a name="p-2"></a>Part II - Continuous Discovery Habits</h1><h2><a name="ch-3"></a>Chapter 3 - Focusing on Outcomes over Outputs</h2>
<ul>
  <li>Josh Seiden, <a href="https://amzn.to/493cjm7">Outcomes Over Outputs</a>:
  <ul>
    <li>An outcome is a change in human behavior that drives business results.</li>
  </ul></li>
  <li>Product teams have to do discovery work to identify the connection between product outcomes (metrics they can influence) and business outcomes (metrics that drive the business).</li>
  <li><a href="https://amzn.to/47M7Pzm">Measure What Matters</a> valid criticisms from <a href="https://felipecastro.com/en/blog/book-review-measure-what-matters/">Felipe Castro</a>.</li>
  <li>Outcomes communicate uncertainty.</li>
  <li>Multiple teams with the same business outcome make it easy to blame other teams for the lack of progress.</li>
  <li>Traction metrics (usage of a particular feature) do not give product teams any latitude:
  <ul>
    <li>They are outputs.</li>
    <li>Avoid them except:
    <ol>
      <li>Junior product teams.</li>
      <li>When optimizing a solution instead of finding a new solution.</li>
    </ol></li>
  </ul></li>
  <li>Outcome negotiated between product leader and product trio.</li>
  <li>Stable product trio focused on the same outcome is critical, so that they do not need to learn again how to move the metric:
  <ul>
    <li>Start with a learning goal, then move to a SMART goal.</li>
  </ul></li>
</ul><h2><a name="ch-4"></a>Chapter 4 - Visualizing What You Know</h2>
<ul>
  <li>Steps:
  <ol>
    <li>Agree on scope, focusing on desired outcome.</li>
    <li>Individually create an experience map.</li>
    <li>Study each other&rsquo;s map.</li>
    <li>Co-create a map:
    <ul>
      <li>Include all individual nodes of all maps.</li>
      <li>Collapse similar nodes.</li>
      <li>Map more than the happy path.</li>
      <li>Add context (visually if possible)</li>
    </ul></li>
  </ol></li>
  <li>Experience maps are visual.</li>
  <li>Drawing is more specific than writing. Language is vague.
  <ul>
    <li>I strongly disagree.</li>
  </ul></li>
  <li>Maps:
  <ul>
    <li>Nodes: moment in time, action or event.</li>
    <li>Links.</li>
  </ul></li>
  <li>Refine the map as you learn.</li>
</ul><h2><a name="ch-5"></a>Chapter 5 - Continuous Interviewing</h2>
<ul>
  <li>Interviewing is not to ask your customers what you should build:
  <ul>
    <li>It is to discover and explore opportunities.</li>
  </ul></li>
  <li>Direct (factual) questions require recalling facts without context:
  <ul>
    <li>Prone to cognitive biases.</li>
    <li>Answers not accurate.</li>
  </ul></li>
  <li>Confidence isn&rsquo;t a good indicator of truth or reality.</li>
  <li>When information is missing, our brains simply fill in details to make the story coherent.</li>
  <li>Primary research question:
  <ul>
    <li>What opportunity matter most to this customer?</li>
    <li>Best is to ask them to share specific stories about their experience:
    <ul>
      <li>Dig into the details.</li>
      <li>Don&rsquo;t allow them to generalize.</li>
    </ul></li>
    <li>Use the experience map as a guide.</li>
  </ul></li>
  <li>Research question: what you are trying to learn.</li>
  <li>Interview question: what you ask in your interview.</li>
  <li>Synthesize using an interview snapshot:
  <ul>
    <li>Quick facts: help identify type of customer.</li>
    <li>Opportunities: use customer&rsquo;s words.</li>
    <li>Top right, experience map for this customer.</li>
  </ul></li>
</ul><p><img src="/images/blog/books/continuous-discovery-habits/interview-snapshot.png" alt="Interview snapshot" /></p>
<ul>
  <li>Interview at least one customer every week.</li>
  <li>Source of candidates:
  <ul>
    <li>While users are using your product.</li>
    <li>Ads.</li>
    <li>Support.</li>
    <li>Marketing.</li>
    <li>Customer Advisory Board.</li>
  </ul></li>
  <li>Product trios should interview together.</li>
</ul><h2><a name="ch-6"></a>Chapter 6 - Mapping the Opportunity Space</h2>
<ul>
  <li>Our job is to address customer opportunities that drive our desired outcome.</li>
  <li>Branches in the OST must not have overlaps.</li>
  <li>Look for key moments (or nodes) in:
  <ol>
    <li>Experience Map.</li>
    <li>From patterns in interview experience maps.</li>
  </ol></li>
  <li>Avoid:
  <ul>
    <li>Opportunities framed from your company&rsquo;s perspective.</li>
    <li>Vertical opportunities (trees with no branches).</li>
    <li>Opportunities with two parents.</li>
    <li>Capturing feelings as opportunities.</li>
  </ul></li>
  <li>An opportunity should have more than one potential solution, otherwise it is simply a solution in disguise.</li>
</ul><h2><a name="ch-7"></a>Chapter 7 - Prioritizing Opportunities, Not Solutions</h2>
<ul>
  <li>Compare top level opportunities in the tree, and recursively do the same with the children of the chosen one.</li>
  <li>Comparison criteria:
  <ol>
    <li>Size: how many customers and how often?</li>
    <li>Market: how if affects our position in the market:
    <ul>
      <li>Differentiators vs table stakes.</li>
    </ul></li>
    <li>Company:
    <ul>
      <li>Does it support company/business unit/team vision/mission/strategy?</li>
      <li>Available skills in the team.</li>
    </ul></li>
    <li>Customer:
    <ul>
      <li>How important it is.</li>
      <li>How satisfied customers are with the current solution?</li>
    </ul></li>
  </ol></li>
  <li>Do not score opportunities:
  <ul>
    <li>Make a data-informed, subjective comparison.</li>
  </ul></li>
  <li>Choosing an opportunity is an easily reversible decision, so:
  <ul>
    <li>Avoid analysis-paralysis:
    <ul>
      <li>We will learn more by acting.</li>
    </ul></li>
    <li>You are just committing to explore it further.</li>
  </ul></li>
</ul><h2><a name="ch-8"></a>Chapter 8 - Supercharged Ideation</h2>
<ul>
  <li>Research shows:
  <ul>
    <li>More idea == more diverse and novel.</li>
    <li>Most original ideas tend to be generated toward the end of the ideation session.</li>
  </ul></li>
  <li>Brainstorming rules:
  <ol>
    <li>Focus on quantity.</li>
    <li>Defer judgement.</li>
    <li>Combine and improve ideas.</li>
    <li>Welcome unusual ideas.</li>
  </ol></li>
  <li>Research shows that individuals outperformed brainstorming groups due to:
  <ol>
    <li>Social loafing:
    <ul>
      <li>People tend to work harder on their own.</li>
    </ul></li>
    <li>Group conformity:
    <ul>
      <li>People censored themselves due to concerns about how others would judge their ideas.</li>
    </ul></li>
    <li>Production blocking:
    <ul>
      <li>You are about to say an idea, somebody else jumps in, and you forget your idea.</li>
    </ul></li>
    <li>Downward not setting:
    <ul>
      <li>Performance of a group tends to be limited to the lowest-performing member.</li>
    </ul></li>
  </ol></li>
  <li>Brainstorming groups are subject to &ldquo;illusion of group productivity&rdquo;:
  <ul>
    <li>Groups overestimate their performance, because &ldquo;cognitive failures&rdquo; (getting stuck) happens less often than to individuals.</li>
  </ul></li>
  <li>Best:
  <ol>
    <li>Generate ideas individually.</li>
    <li>Share.</li>
    <li>Go to 1.</li>
  </ol></li>
  <li>Tips for ideation:
  <ul>
    <li>Take frequent breaks.</li>
    <li>Walk.</li>
    <li>Change scenery.</li>
    <li>Try different times of the day.</li>
    <li>Sleep over it.</li>
    <li>Look at competitors or other industries for analogous problems.</li>
    <li>Pretend to have a magic want.</li>
  </ul></li>
  <li>Research shows that we are better at evaluating ideas as a group.</li>
  <li>Dot-vote ideas as a group:
  <ul>
    <li>First, remove ideas that do not address the opportunity.</li>
    <li>Only criteria is how well the idea addresses the target opportunity.</li>
    <li>Until you have set aside <em>3 ideas</em>.</li>
    <li>Each idea should have a strong advocate.</li>
  </ul></li>
  <li>Include the whole team in ideation:
  <ul>
    <li>Consider also including key stakeholders.</li>
  </ul></li>
</ul><h2><a name="ch-9"></a>Chapter 9 - Identifying Hidden Assumptions</h2>
<ul>
  <li>Fast discovery iterations only possible if instead of testing ideas, test the assumptions that need to be true in order for the ideas to succeed.</li>
  <li>Use story mapping to align/understand ideas:
  <ul>
    <li>Be specific.</li>
    <li>Story map what would be the best solution based on what we know right now.</li>
    <li>List assumptions in each step.</li>
  </ul></li>
  <li>Assumptions == risks (desirability, feasibility, usability) + ethical viability.</li>
  <li>Use pre-mortems:
  <ul>
    <li>Imagine it is 6 months into the future and the product/initiative launched, and it was a complete failure. What went wrong?</li>
  </ul></li>
  <li>Walk up the OST and be very specific about why the solution will address the opportunity and the opportunity the outcome.</li>
  <li>Prioritizing assumptions:
  <ul>
    <li>Place them relative to each other.</li>
    <li>Pick the 2-3 top right most.</li>
    <li>More important == less likely to have a workaround.</li>
  </ul></li>
</ul><p><img src="/images/blog/books/continuous-discovery-habits/opportunity-prioritization.png" alt="Prioritizing assumptions" /></p>
<ul>
  <li>Expect to generate ~20 assumptions per idea.</li>
  <li>Phrase your assumptions so that they need to be true:
  <ul>
    <li>NO: customer will not remember their password.</li>
    <li>YES: customers will remember their password.</li>
  </ul></li>
</ul><h2><a name="ch-10"></a>Chapter 10 - Testing Assumptions, Not Ideas</h2>
<ul>
  <li>Do not test one idea at a time, but assumptions from all three ideas at the same time:
  <ul>
    <li>Avoid confirmation bias and escalation of commitment.</li>
  </ul></li>
  <li>Assumption tests should simulate an experience, so that the participant behaves, not only says that they will do or not.</li>
  <li>It is common for ideas to share assumptions:
  <ul>
    <li>Can rule out multiple ideas at once.</li>
  </ul></li>
  <li>Define evaluation criteria upfront:
  <ul>
    <li>Be explicit:
    <ul>
      <li>How many people we&rsquo;ll test.</li>
      <li>How many people need to exhibit the behaviour.</li>
    </ul></li>
  </ul></li>
  <li>You are not trying to prove that an assumption is true, but to reduce the risk:
  <ul>
    <li>Start small and iterate to bigger, more reliable tests.</li>
  </ul></li>
  <li>In the majority of cases, you will learn plenty from small-scale tests.</li>
  <li>Tools:
  <ol>
    <li>Unmoderated user testing:
    <ul>
      <li>Produce a video test you can watch later.</li>
    </ul></li>
    <li>One-question surveys.</li>
  </ol></li>
</ul><h2><a name="ch-11"></a>Chapter 11 - Measure Impact</h2>
<ul>
  <li>Measure not only what you need to evaluate our assumption tests, but also what we need to measure impact on our outcome.</li>
  <li>Start small and experiment your way to the best instrumentation.</li>
</ul><h2><a name="ch-12"></a>Chapter 12 - Managing The Cycles</h2>
<ul>
  <li>Most of the work in discovery is not following the process; it is managing the cycles.</li>
</ul><h2><a name="ch-13"></a>Chapter 13 - Slow You Work</h2>
<ul>
  <li>Share with stakeholders your whole journey, so they can make their own conclusions and help co-create.</li>
  <li>Use your discovery framework to help stakeholders see where their idea does (or does not) fit.</li>
  <li>You aren&rsquo;t going to win the ideological war in one conversation (or never).</li>
</ul><h1><a name="p-3"></a>Part III - Developing You Continuous Discovery Habits</h1><h2><a name="ch-14"></a>Chapter 14 - Start Small, and Iterate</h2>
<ul>
  <li>Continuous interviewing is the keystone habit for continuous discovery.</li>
  <li>The best time to advocate for discovery is when a feature falls short of expectations.</li>
  <li>Consider what you can do in the unique company&rsquo;s context and let go of the &ldquo;That would never work here&rdquo;.</li>
</ul>]]></description></item><item><title>Book notes: The Staff Engineer's Path: A Guide for Individual Contributors Navigating Growth and Change</title><link>https://danlebrero.com/2024/01/24/the-staff-engineers-path-summary/</link><guid>https://danlebrero.com/2024/01/24/the-staff-engineers-path-summary/</guid><pubDate>Wed, 24 Jan 2024 00:00:00 +0100</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/3thSc4p">The Staff Engineer&rsquo;s Path: A Guide for Individual Contributors Navigating Growth and Change</a> by <a href="https://www.linkedin.com/in/tanyareilly">Tanya Reilly</a>.</p><p>Must-read for anybody interested on growing in the individual contributor track.</p>
<blockquote><p>Be the engineer that everyone wants to work with. <cite>Tanya Reilly, this book</cite></p>
</blockquote><h1>Key Insights</h1><p><img src="/images/blog/books/staff-engineers-path/pillars.png" alt="Staff engineer pillars" /></p>
<ul>
  <li>Staff eng roles come in a lot of shapes, but not all orgs will need all kinds of staff engs.</li>
  <li>Senior is a &ldquo;tenure&rdquo; level: you don&rsquo;t need to go further.</li>
  <li>Whenever there is a feeling of &ldquo;someone should do something here&rdquo;, there is a reasonable change that the someone is you.</li>
  <li>Autonomous: Find your own problems to work on.</li>
  <li>Know why the problem you are working on is strategically important, and it is not, do something else.</li>
  <li>Not necessary to provide solution but to ensure there is agreed-upon, well-understood solution that solves the problem.</li>
  <li>Feedback loops will be months.</li>
  <li>Write down a &ldquo;what do I do here?&rdquo; doc to ensure expectations/focus in shared with manager and peers.</li>
  <li>Vision/Strategy is not always needed:
  <ul>
    <li>It is a big project.</li>
    <li>Getting the people to agree <strong>is</strong> the work.</li>
  </ul></li>
  <li>None of the options can make everybody happy:
  <ul>
    <li>Rather than asking &ldquo;Is everyone ok with option A?&rdquo; ask &ldquo;Can anyone not live with option A?&rdquo;</li>
    <li>Not deciding is a decision, usually not a good one.</li>
  </ul></li>
  <li>You have to make peace with walking past things that are broken or suboptimal.</li>
  <li>Do what is important for the company, but also what is important for you.</li>
  <li>Notice when you are doing busy work because you are tired, and find a way to rest instead.</li>
  <li>Put non meetings in the calendar too:
  <ul>
    <li>Not &ldquo;make time&rdquo; but specific items.</li>
  </ul></li>
  <li>The usual reason why a project is difficult is that you are dealing with ambiguity.</li>
  <li>Number one tool for project success: writing things down.</li>
  <li>As a project lead, you will fill any roles that you don&rsquo;t have someone in them.</li>
  <li>Recruit people that are optimistic, good at conflict resolution and comms.</li>
  <li>Better wrong than vague: chance to change direction early.</li>
  <li>If it seems trivial, it is because you do not understand it.</li>
  <li>Writing code is rarely the highest leverage thing you can spend time on.
  <ul>
    <li>Coding gives you a depth of understanding that is hard to gain otherwise.</li>
  </ul></li>
  <li>Something will always go wrong:
  <ul>
    <li>Take it as an opportunity to learn.</li>
  </ul></li>
  <li>Techniques to get unstuck:
  <ol>
    <li>Understand and explain.</li>
    <li>Make the work easier.</li>
    <li>Get org support.</li>
    <li>Make alternative plans.</li>
  </ol></li>
  <li>Supporting an untrained person through making a change in a difficult codebase takes more effort than doing it yourself.</li>
  <li>Three bullet points and a call to action:
  <ul>
    <li>Three bullet points detailing the issue at hand.</li>
    <li>One and only one call to action.</li>
  </ul></li>
  <li>Blocked by:
  <ul>
    <li>A decision: make a guess and document it with an ADR.</li>
  </ul></li>
  <li>No talk about implementation until all agree about the problem.</li>
  <li>Don&rsquo;t just tell people that the solution exists: you need to keep telling them.</li>
  <li>If the project is not in good shape by the end of it, it will never be.</li>
  <li>People assume that you know what you are talking about, so be careful with what you say.</li>
  <li>Values is what you do.</li>
  <li>The degree to which other people want to work with you is a direct indication of how successful you&rsquo;ll be in your career as an engineer.</li>
  <li>Do not accept a management role until you are a solid senior engineer.</li>
  <li><a href="https://medium.com/@ElizAyer/dont-ask-forgiveness-radiate-intent-d36fd22393a3">Radiating intent</a> (instead of seeking permission or asking for forgiveness).</li>
  <li>Attributes of a staff engineer:
  <ol>
    <li>Competent.</li>
    <li>Responsible.</li>
    <li>Remembers the goal:
    <ul>
      <li>SW is a means to a goal, not a goal itself.</li>
      <li>There is always a budget.</li>
    </ul></li>
    <li>Look Ahead.</li>
  </ol></li>
  <li>Don&rsquo;t jump to give advice, sometimes the mentee just need to vent or get empathy on the situation.</li>
  <li>If you cannot think on what to improve, ask yourself why they aren&rsquo;t one level more senior.</li>
  <li>You cannot be an expert in everything.</li>
  <li>Every job should help you grow towards your long-term goals and meet your immediate needs.</li>
  <li>Keep a weekly record of your job signals.</li>
  <li>Staying in one place for long gives you the feedback loop that comes from seeing the consequences of your actions.</li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#ch-0">Introduction</a></li>
  <li><a href="#p-1">Part I - The Big Picture</a>
  <ul>
    <li><a href="#ch-1">Chapter 1 - What would you say you do here?</a></li>
    <li><a href="#ch-2">Chapter 2 - Three Maps</a></li>
    <li><a href="#ch-3">Chapter 3 - Creating the Big Picture</a></li>
  </ul></li>
  <li><a href="#p-2">Part II - Execution</a>
  <ul>
    <li><a href="#ch-4">Chapter 4 - Finite Time</a></li>
    <li><a href="#ch-5">Chapter 5 - Leading Big Projects</a></li>
    <li><a href="#ch-6">Chapter 6 - Why Have We Stopped?</a></li>
  </ul></li>
  <li><a href="#p-3">Part III - Leveling Up</a>
  <ul>
    <li><a href="#ch-7">Chapter 7 - You&rsquo;re a Role Model Now (Sorry)</a></li>
    <li><a href="#ch-8">Chapter 8 - Good Influence at Scale</a></li>
    <li><a href="#ch-9">Chapter 9 - What&rsquo;s Next?</a></li>
  </ul></li>
</ul><h1><a name="ch-0"></a>Introduction</h1>
<ul>
  <li>Both paths need many of the same skills.</li>
  <li>Pillars:
  <ol>
    <li>Big-picture thinking.</li>
    <li>Execution.</li>
    <li>Leveling up others.</li>
  </ol></li>
  <li>When acting as a role model, you need to be right.</li>
</ul><p><img src="/images/blog/books/staff-engineers-path/pillars.png" alt="Staff engineer pillars" /></p><h1><a name="p-1"></a>Part I - The Big Picture</h1><h2><a name="ch-1"></a>Chapter 1 - What would you say you do here?</h2>
<ul>
  <li>Staff eng roles come in a lot of shapes, but not all orgs will need all kinds of staff engs.</li>
  <li>Senior is a &ldquo;tenure&rdquo; level: you don&rsquo;t need to go further.</li>
  <li>Big picture:
  <ul>
    <li>Good decisions need context:
    <ul>
      <li>Gathering context requires time and effort.</li>
    </ul></li>
    <li>Managers, as the people responsible for assigning headcount to technical initiatives, need to be part of major tech decisions.</li>
  </ul></li>
  <li>Project management:
  <ul>
    <li>Unstuck.</li>
    <li>Tech quality.</li>
    <li>High level system design.</li>
  </ul></li>
  <li>Whenever there is a feeling of &ldquo;someone should do something here&rdquo;, there is a reasonable change that the someone is you.</li>
  <li><a href="https://kind.engineering/">https://kind.engineering/</a>.</li>
  <li>Programming will often not be the best use of your time:
  <ul>
    <li>Enough work to make problems manageable by someone else:
    <ul>
      <li>Growth opportunity for less experience devs.</li>
    </ul></li>
  </ul></li>
  <li>Autonomous: Find your own problems to work on.</li>
  <li>Not necessary to provide solution but to ensure there is agreed-upon, well-understood solution that solves the problem.</li>
  <li>Who you report to influences:
  <ol>
    <li>Support you receive.</li>
    <li>Information you can access.</li>
    <li>How you are perceived.</li>
    <li>Scope: domain, teams:
    <ul>
      <li>Too broad:
      <ul>
        <li>Lack of impact: distracted with side-quests.</li>
        <li>Become a bottleneck: take part on every decision.</li>
        <li>Decision fatigue.</li>
        <li>Missing relationships: not enough regular contact.</li>
      </ul></li>
      <li>Too narrow:
      <ul>
        <li>Lack of impact.</li>
        <li>Opportunity cost: working on less important stuff.</li>
        <li>Overshadowing other engineers: no room for other engs to solve problems.</li>
        <li>Over-engineering: too much time on your hands.</li>
      </ul></li>
    </ul></li>
  </ol></li>
  <li>Ensure your scope is aligned to your preference of broad vs deep work.</li>
  <li>4 disciplines in any job:
  <ul>
    <li>Core tech skills.</li>
    <li>Product management.</li>
    <li>Project management.</li>
    <li>People management.</li>
  </ul></li>
  <li>Consider how much you want to code.</li>
  <li>Feedback loops will be months.</li>
  <li>Know why the problem you are working on is strategically important, and it is not, do something else.</li>
  <li><a href="/2022/02/23/staff-engineering-leadership-beyond-the-management-track-book-summary/#ch-1">4 staff eng archetypes</a>.</li>
  <li>Write down a &ldquo;what do I do here?&rdquo; doc to ensure expectations/focus in shared with manager and peers:
  <ul>
    <li>Overview.</li>
    <li>Goals.</li>
    <li>Sample activities.</li>
    <li>What success looks like?</li>
  </ul></li>
</ul><h2><a name="ch-2"></a>Chapter 2 - Three Maps</h2>
<ol>
  <li>Locator map:
  <ul>
    <li>Where are you in the org, and what is outside your bubble.</li>
    <li>Put your work in a bigger context.</li>
    <li>To make good decisions, you&rsquo;ll need to be able to see from others point of view.</li>
    <li>Risk of focusing only on your context:
    <ol>
      <li>Prioritizing badly:
      <ul>
        <li>Your problems seem more important and special.</li>
        <li>It is unusual to find a problem that is genuinely brand now.</li>
      </ul></li>
      <li>Losing empathy:
      <ul>
        <li>Think other domains are simpler.</li>
        <li>Overestimate what others know from your domain.</li>
      </ul></li>
      <li>Tuning out the background noise:
      <ul>
        <li>Stop noticing some problems because you get so used to them.</li>
      </ul></li>
      <li>Forgetting what they work is for:
      <ul>
        <li>Lose connection with the company&rsquo;s goals.</li>
      </ul></li>
    </ol></li>
  </ul></li>
  <li>Topological map:
  <ul>
    <li>Discover existing &ldquo;dangers&rdquo; and paths:
    <ul>
      <li>How leaders prefer to work.</li>
      <li>How decisions are made.</li>
      <li>&ldquo;Shadow org&rdquo; charts.</li>
    </ul></li>
    <li>Issues without one:
    <ol>
      <li>Your good ideas don&rsquo;t get traction.</li>
      <li>You don&rsquo;t find the difficult parts until you get there.</li>
      <li>Everything takes longer.</li>
    </ol></li>
    <li>Understand your org:
    <ul>
      <li>Culture:
      <ul>
        <li>Open or secret?
        <ul>
          <li>Open information can lead to more drama.</li>
        </ul></li>
        <li>Oral or written?</li>
        <li>Top-down or bottom-up?</li>
        <li>Fast change or deliberate change?
        <ul>
          <li>Tightly connected to oral/written.</li>
        </ul></li>
        <li>Back channels or front doors?</li>
        <li>Allocated or available?
        <ul>
          <li>If there are plenty of available people, changes are that a competing novel grassroots initiatives are about to start.</li>
        </ul></li>
        <li>Liquid (meritocracy of sorts) or crystallized (structured hierarchy and promotion)?</li>
      </ul></li>
    </ul></li>
    <li>Points of interests:
    <ol>
      <li>Chasms between teams/orgs:
      <ul>
        <li>Difficult to communicate, make decisions and resolve disputes.</li>
      </ul></li>
      <li>Fortresses:
      <ul>
        <li>Well-intended gatekeepers, but stop projects/change from happening.</li>
        <li>Avoid a battle, even if you might win.</li>
      </ul></li>
      <li>Disputed territory:
      <ul>
        <li>When two or more teams need to work closely together, their projects can fall into chaos if they don&rsquo;t have the same clear view of where they are trying to get to.</li>
      </ul></li>
      <li>Uncrossable desserts:
      <ul>
        <li>Unwinnable battles.</li>
      </ul></li>
      <li>Paved roads, shortcuts and busy ways around.</li>
    </ol></li>
    <li>You need to be technically correct and convince the right people.</li>
    <li>Figure out where decisions are happening:
    <ul>
      <li>You can influence higher up decisions by making sure relevant information reaches via your reporting chain.</li>
      <li>Ask to join but show how it will make the org more likely to achieve its goals.</li>
      <li>Figure out shadow org chart:
      <ul>
        <li>Connectors: people that know everybody.</li>
        <li>Old-timers.</li>
      </ul></li>
    </ul></li>
    <li>Be a bridge.</li>
  </ul></li>
  <li>Treasure map:
  <ul>
    <li>Where and why.</li>
    <li>Destination and stop points.</li>
    <li>Long term view.</li>
    <li>If only short term vision:
    <ol>
      <li>Harder to keep everybody going in the same direction.</li>
      <li>Not finish big things.</li>
      <li>Accumulate cruft.</li>
      <li>Competing initiatives.</li>
      <li>Engineers stop growing:
      <ul>
        <li>Small project problems != big project ones.</li>
      </ul></li>
    </ol></li>
    <li>If the map is not clear, create a new one.</li>
    <li>Trail map:
    <ul>
      <li>Tell the story of the work.</li>
      <li>Every small task become part of a bigger story.</li>
    </ul></li>
  </ul></li>
</ol>
<ul>
  <li>You learn some parts of the map through everyday learning, but you need to be deliberate for others.</li>
  <li>Hiking example: easy to find out what you miss by looking at others:
  <ul>
    <li>They had learned to pay attention adn they know what they were looking for.</li>
  </ul></li>
  <li>Habit of paying attention:
  <ul>
    <li>Take notes.</li>
    <li>What? Anything that helps you or others:
    <ul>
      <li>Have context.</li>
      <li>Navigate your org.</li>
      <li>Progress towards your goals.</li>
    </ul></li>
  </ul></li>
  <li>Techniques for seeing the bigger picture:
  <ol>
    <li>Taking an outsider view:
    <ul>
      <li>A new person to the team/org can always see the problems.</li>
    </ul></li>
    <li>Befriend other staff eng to understand from their point of view what your team/group looks like.</li>
    <li>Befriend non-eng to learn what is important for business.</li>
    <li>Understand your customer.</li>
    <li>Understand what already exists inside and outside your org before creating something new.</li>
  </ol></li>
  <li><a href="https://www.thevoid.community/report">The VOID report</a>: incidents newsletter.</li>
  <li><a href="https://www.rawsignal.ca/newsletter">Raw signal</a>: management and leadership newsletter.</li>
</ul><h2><a name="ch-3"></a>Chapter 3 - Creating the Big Picture</h2>
<ul>
  <li>Tech vision:
  <ul>
    <li>Describe future as if all work to get there had been done.</li>
    <li>Any scope:
    <ul>
      <li>Smaller scopes should inherit from larger ones.</li>
    </ul></li>
  </ul></li>
  <li>Tech strategy:
  <ul>
    <li>Plan of action: how to achieve your goals, and navigating past the obstacles.</li>
    <li><a href="/2020/08/31/good-strategy-bad-strategy-summary/#content">Good/Bad strategy</a>:
    <ol>
      <li>Diagnosis: distill the situation to its most essential characteristic.</li>
      <li>Guiding policy: short and clear signpost, marking the direction forward.</li>
      <li>Coherent action: specific based from diagnosis/guiding policy.
      <ul>
        <li>They are a time commitment.</li>
      </ul></li>
    </ol>
    <ul>
      <li>Strategy should draw on your advantages.</li>
      <li>Strategy is realistic and within your org constraints.</li>
    </ul></li>
  </ul></li>
  <li>Vision/Strategy is not always needed:
  <ul>
    <li>It is a big project.</li>
    <li>Getting the people to agree <strong>is</strong> the work.</li>
  </ul></li>
  <li>The approach:
  <ul>
    <li>Good strategy is boring to write about:
    <ul>
      <li>Should be obvious.</li>
    </ul></li>
    <li>Join existing initiatives.</li>
    <li>Find a sponsor:
    <ul>
      <li>Ensure your plan fix some of their problems.</li>
      <li>Elevator pitch.</li>
    </ul></li>
    <li>Choose your core group:
    <ul>
      <li>Makes you accountable.</li>
      <li>Small (2-4), committed to 8-12 hours per week.</li>
      <li>Consider bringing those who will oppose the most.</li>
      <li>Keep a broader set of allies informed and engaged.</li>
    </ul></li>
    <li>Set scope:
    <ul>
      <li>How much of the ord you plan to influence.</li>
    </ul></li>
    <li>Make sure it is achievable:
    <ul>
      <li>Cut scope.</li>
      <li>Be prepared to give up.</li>
    </ul></li>
    <li>Make it official.</li>
  </ul></li>
  <li>The writing:<br/> <img src="/images/blog/books/staff-engineers-path/writing.png" alt="Writing process" />
  <ul>
    <li>Questions:
    <ul>
      <li>What is great as it is?</li>
      <li>What is important?</li>
      <li>What will future you wish that present you had done?</li>
    </ul></li>
    <li>Reviewers will be biased by what is already in the doc:
    <ul>
      <li>Mitigations:
      <ul>
        <li>Talk more before writing.</li>
        <li>Make clear what parts you don&rsquo;t feel strong about.</li>
      </ul></li>
    </ul></li>
    <li>Interviews final questions:
    <ul>
      <li>What else should I have asked you?</li>
      <li>Is there anything important I missed?</li>
    </ul></li>
    <li>None of the options can make everybody happy:
    <ul>
      <li>Rather than asking &ldquo;Is everyone ok with option A?&rdquo; ask &ldquo;Can anyone not live with option A?&rdquo;</li>
      <li>Decide upfront who is the tiebreaker.</li>
      <li>Not deciding is a decision, usually not a good one.</li>
      <li>Document any decision, including trade-offs and reasons.</li>
    </ul></li>
  </ul></li>
  <li>Alignment:
  <ul>
    <li>Stay aligned with your sponsor, at minimum in the major checkpoints.</li>
    <li>Nemawashi: by the time of voting, you should know the result.</li>
    <li>Vision or strategy that not everyone knows is of little value.</li>
    <li>Find a one-liner slogan.</li>
    <li>What is the difference between your document being yours and the organizations?
    <ul>
      <li>Belief.</li>
      <li>Staffing the work, second.</li>
    </ul></li>
  </ul></li>
</ul><h1><a name="p-2"></a>Part II - Execution</h1><h2><a name="ch-4"></a>Chapter 4 - Finite Time</h2>
<ul>
  <li>You have to make peace with walking past things that are broken or suboptimal.</li>
  <li>Do what is important for the company, but also what is important for you.
  <ul>
    <li>Consider:
    <ul>
      <li>Energy:
      <ul>
        <li>Your current level and what the project will consume.</li>
        <li>Different people need different levels of energy for the same project.</li>
        <li>How many things are you already doing? Limit WIP.</li>
        <li>Does this kind of work give you or take energy?</li>
        <li>Are you procrastinating?
        <ul>
          <li>Notice when you are doing busy work because you are tired, and find a way to rest instead.</li>
        </ul></li>
        <li>Is this fight worth it?
        <ul>
          <li>Compare with other work.</li>
        </ul></li>
      </ul></li>
      <li>Quality of life:
      <ul>
        <li>Do you enjoy this work?</li>
        <li>How do you feel about the project&rsquo;s goals?</li>
      </ul></li>
      <li>Credibility:
      <ul>
        <li>Does this project use your technical skills?</li>
        <li>Does this project show your leadership skills?</li>
      </ul></li>
      <li>Social capital:
      <ul>
        <li>It this the kind of work that your company and your manager expect at your level?
        <ul>
          <li>Making your reporting chain successful gives them social capital that they can spend to help you.</li>
        </ul></li>
        <li>Will this work be respected?</li>
        <li>Are you squandering the capital you have built?</li>
      </ul></li>
      <li>Skills:
      <ul>
        <li>Each project will increase or decrease these.</li>
        <li>Will this project teach you something you want to learn?</li>
        <li>Will people around you raise your game?</li>
      </ul></li>
    </ul></li>
  </ul></li>
  <li>Everything you commit to have an opportunity cost.</li>
  <li>Put non meetings in the calendar too:
  <ul>
    <li>Not &ldquo;make time&rdquo; but specific items.</li>
  </ul></li>
  <li>Don&rsquo;t allocate 100% of your time:
  <ul>
    <li>Spikes in work will spill to your personal life.</li>
  </ul></li>
  <li>Increase your skills in three ways:
  <ol>
    <li>Deliberately learn something: take a class, buy a book, take a toy project.
    <ul>
      <li>Unlikely to happen at work.</li>
    </ul></li>
    <li>Work with someone more skilled.</li>
    <li>Learn by doing: most common.</li>
  </ol></li>
  <li>What if it is the wrong project?
  <ul>
    <li>If it is temporal, maybe do it.</li>
    <li>Let others lead: mentorship opportunity.</li>
    <li>Resize it.</li>
    <li>Say no.</li>
  </ul></li>
</ul><h2><a name="ch-5"></a>Chapter 5 - Leading Big Projects</h2>
<ul>
  <li>A great project lead has:
  <ul>
    <li>Perseverance.</li>
    <li>Courage.</li>
    <li>Willingness to talk to other people.</li>
  </ul></li>
  <li>The usual reason why a project is difficult is that you are dealing with ambiguity.</li>
  <li>Big project == several months + multiple teams.</li>
  <li>Number one tool for project success: writing things down.</li>
  <li>Ambiguity is the nature of the work.</li>
  <li>To make a project less overwhelming at the beginning:
  <ol>
    <li>Write things down: ideas, leads, rumors, to-dos, &hellip;</li>
    <li>Talk to your sponsor: understand what they want to achieve.</li>
    <li>Find at least one person that you can be open and unsure with.</li>
    <li>Give yourself a win: small steps.</li>
    <li>Use your strengths.</li>
  </ol></li>
  <li>Building context:
  <ol>
    <li>Goals: why are you doing this project?</li>
    <li>Understand customers:
    <ul>
      <li>Working with PMs, ask for their advice.</li>
    </ul></li>
    <li>Success metrics.</li>
    <li>Stakeholders.</li>
    <li>Figure out fixed constraints.</li>
    <li>Risks and mitigations.</li>
    <li>History of the project:
    <ul>
      <li>Respect what came before.</li>
      <li>Where it did come from?</li>
      <li>How was it announced?</li>
      <li>Who has already tried? What they left behind?</li>
    </ul></li>
    <li>Team.</li>
  </ol></li>
  <li>Project structure:
  <ul>
    <li>Define roles:
    <ul>
      <li>Specially important if multiple senior people are involved.</li>
      <li>To avoid overlaps and cracks/orphaned work/responsibilities.</li>
      <li><a href="https://www.cio.com/article/287088/project-management-how-to-design-a-successful-raci-project-plan.html">RACI matrix</a>:
      <ul>
        <li>Responsible: doing the work.</li>
        <li>Accountable: only one per task.</li>
        <li>Consulted.</li>
        <li>Informed.</li>
      </ul></li>
      <li>As a project lead, you will fill any roles that you don&rsquo;t have someone in them.</li>
    </ul></li>
    <li>Recruit people that are optimistic, good at conflict resolution and comms.</li>
    <li>Scope and milestones:
    <ul>
      <li>People don&rsquo;t act with a sense of urgency until there is a deadline that they cannot avoid thinking about.</li>
    </ul></li>
    <li>I have met almost nobody who is good at time estimation.</li>
    <li>Estimating should take into account other teams that you depend on:
    <ul>
      <li>If you ask those teams for last minute changed, you are disrupting the time estimation of other projects.</li>
    </ul></li>
    <li>Set rituals, comm channels, dev practices.</li>
    <li>Kick off meeting.</li>
  </ul></li>
  <li>Driving the project:
  <ul>
    <li><a href="https://leaddev.com/agile-other-ways-working/avoid-lake">Avoid the lake!</a> by Kripa Krishnan.</li>
  </ul>
  <ol>
    <li>Explore:
    <ul>
      <li>Get to the point where you can concisely explain what different teams in the project want in a way that they&rsquo;ll agree is accurate:
      <ul>
        <li>Loads of talking <strong>and listening</strong>.</li>
      </ul></li>
      <li>Build elevator pitch: reduce it to its most important aspects.</li>
    </ul></li>
    <li>Clarify:
    <ul>
      <li>Give mental models for what you are all doing:
      <ul>
        <li>Hook your model to the person&rsquo;s existing knowledge.</li>
        <li>Analogies and metaphors.</li>
      </ul></li>
      <li>Glossary: ubiquitous language.</li>
      <li>Graph/pictures.</li>
    </ul></li>
    <li>Design:
    <ul>
      <li>A written design is a very cheap iteration, <a href="https://www.linkedin.com/in/cian-synnott/">Cian Synnott</a>.</li>
    </ul></li>
  </ol></li>
</ul>
<blockquote><p>We are built for novelty and excitement, not for careful attention to detail. Discipline is something we have to work at. <cite>Atul Gawande, <em>The Checklist Manifesto</em></cite></p>
</blockquote>
<ul>
  <li>RFC:
  <ul>
    <li>The implementation should serve the goal; it should not be the goal.</li>
    <li>Design section:
    <ul>
      <li>Readers should understand what you intend to do, and should be able to tell you whether they think it will work.</li>
      <li>Better wrong than vague: chance to change direction early.</li>
      <li>Avoid passive voice:
      <ul>
        <li>Dr. Rebecca Johnson: If you can insert &lsquo;by zombies&rsquo; after the verb, you have passive voice.</li>
      </ul></li>
      <li>If it seems trivial, it is because you do not understand it.</li>
      <li>Any part of your solution that involves humans changing their workflows or behaviour will be difficult and needs to be part of the design.</li>
      <li>Figure the hard parts earlier.</li>
      <li>Name who will be on call for any new system.</li>
    </ul></li>
  </ul></li>
  <li>Coding:
  <ul>
    <li>Writing code is rarely the highest leverage thing you can spend time on.</li>
    <li>Coding gives you a depth of understanding that is hard to gain otherwise.</li>
    <li>Avoid being in the critical path.</li>
    <li>Set example (design, patterns, &hellip;).</li>
  </ul></li>
  <li>Communicating well is key for delivering a project in time.</li>
  <li>If your project is stuck, don&rsquo;t hide it: ask for help.</li>
  <li>Something will always go wrong:
  <ul>
    <li>Take it as an opportunity to learn.</li>
  </ul></li>
</ul><h2><a name="ch-6"></a>Chapter 6 - Why Have We Stopped?</h2>
<ul>
  <li>Techniques to get unstuck:
  <ol>
    <li>Understand and explain.</li>
    <li>Make the work easier.</li>
    <li>Get org support:
    <ul>
      <li>Show it is an objective.</li>
      <li>Show value.</li>
      <li>Escalate.</li>
    </ul></li>
    <li>Make alternative plans.</li>
  </ol></li>
  <li>Supporting an untrained person through making a change in a difficult codebase takes more effort than doing it yourself.</li>
  <li>Three bullet points and a call to action:
  <ul>
    <li>Three bullet points detailing the issue at hand.</li>
    <li>One and only one call to action.</li>
  </ul></li>
  <li>Blocked by:
  <ul>
    <li>A decision: make a guess and document it with an ADR.</li>
    <li>A single &ldquo;please click this button&rdquo;:
    <ul>
      <li>Might be a big queue of &ldquo;just click this button&rdquo;.</li>
      <li>The other person is responsible for the result.</li>
    </ul></li>
    <li>Unassigned work:
    <ul>
      <li>Rollup the context to make it explicit.</li>
      <li>Volunteer to mentor/advise/join the team that will own it.</li>
    </ul></li>
    <li>By a huge crowd of people:
    <ul>
      <li>Like a migration.</li>
      <li>Be a bridge
      <ul>
        <li>The team pushing for the migration to do as much work as possible.</li>
        <li>Make the new way the default:
        <ul>
          <li>Consider adding some friction to the old way.</li>
        </ul></li>
      </ul></li>
    </ul></li>
  </ul></li>
  <li>You are stuck:
  <ul>
    <li>Don&rsquo;t know where you&rsquo;re all going:
    <ul>
      <li>No agreement. Too many disparate voices, all interested in the problem:
      <ol>
        <li>Clarify roles:
        <ul>
          <li>Leader is the final decision maker.</li>
        </ul></li>
        <li>Choose strategy:
        <ul>
          <li>No talk about implementation until all agree about the problem.</li>
          <li>Don&rsquo;t try to solve everything neither please everyone.</li>
        </ul></li>
        <li>Choose stakeholder:
        <ul>
          <li>Reorient the project around getting something to someone.</li>
          <li>Vertical slices.</li>
        </ul></li>
      </ol></li>
    </ul></li>
    <li>You don&rsquo;t know how to get there:
    <ul>
      <li>Path is unknown but not unknowable.</li>
      <li>Articulate the problem.</li>
      <li>Revisit your assumptions:
      <ul>
        <li>Have you already assumed a specific solution?</li>
      </ul></li>
      <li>Step away from the problem for a few days.</li>
      <li>Look for prior art, including outside IT.</li>
      <li>Connect with the community.</li>
      <li>Start small.</li>
      <li>Look at the problem from a completely different angles.</li>
      <li>Ask for help.</li>
    </ul></li>
    <li>You don&rsquo;t know where you stand:
    <ul>
      <li>Is the work still necessary?</li>
      <li>Less comms or interest from leadership.</li>
      <li>Go and ask.</li>
      <li>You will not get what you want if you don&rsquo;t ask for it.</li>
    </ul></li>
  </ul></li>
  <li>Team thinks project is done but problem is not solved:
  <ol>
    <li>&ldquo;Finished&rdquo; but not usable yet:
    <ul>
      <li>Agree on a definition of done.</li>
      <li>Be your own user.</li>
      <li>Celebrate only once users are happy.</li>
    </ul></li>
    <li>Done but nobody uses it:
    <ul>
      <li>Don&rsquo;t just tell people that the solution exists: you need to keep telling them.</li>
      <li>Make it easy to find.</li>
    </ul></li>
    <li>Built on shaky foundations:
    <ul>
      <li>If the project is not in good shape by the end of it, it will never be.</li>
      <li>Set a culture of quality.</li>
      <li>User stories out of bugs and incidents.</li>
      <li>Negotiate ring-fencing resources for technical work.</li>
    </ul></li>
  </ol></li>
  <li>Reasons to stop:
  <ul>
    <li>Further investment is not worth the cost.</li>
    <li>You learn that it will not work.</li>
    <li>Project cancelled by higher management:
    <ul>
      <li>Even if it is for good reasons, you will feel bad about it.</li>
      <li>Be the one telling the team.</li>
    </ul></li>
    <li>You finished! Celebrate!</li>
  </ul></li>
</ul><h1><a name="p-3"></a>Part III - Leveling Up</h1><h2><a name="ch-7"></a>Chapter 7 - You&rsquo;re a Role Model Now (Sorry)</h2>
<ul>
  <li>People assume that you know what you are talking about, so be careful with what you say.</li>
  <li>You are a role model: how you behave is how others will behave.</li>
  <li>Values is what you do.</li>
  <li>The clearest indication of what the company is what gets people promoted.</li>
  <li>Attributes of a staff engineer:
  <ol>
    <li>Competent:
    <ol>
      <li>Technically:
      <ul>
        <li>You can learn a lot from books but there is no substitute for doing it yourself.</li>
        <li>Do not accept a management role until you are a solid senior engineer.</li>
        <li>Beware if you are only learning how your company operated, but nothing technical.</li>
      </ul></li>
      <li>Self-aware:
      <ul>
        <li>What you cant do.</li>
        <li>How long will take.</li>
        <li>What you don&rsquo;t know.</li>
        <li>Your own context (which will be different from others).</li>
      </ul></li>
      <li>High standards:
      <ul>
        <li>Seek constructive criticism.</li>
        <li>Own your mistakes:
        <ul>
          <li>Communicate clearly and quickly.</li>
          <li>Set to fix it.</li>
        </ul></li>
      </ul></li>
      <li>Be reliable: finish what you start.</li>
    </ol></li>
    <li>Responsible:
    <ol>
      <li>Take ownership:
      <ul>
        <li><a href="https://medium.com/@ElizAyer/dont-ask-forgiveness-radiate-intent-d36fd22393a3">Radiating intent</a> (instead of seeking permission or asking for forgiveness).</li>
        <li>Make decisions.</li>
        <li>Ask &ldquo;obvious&rdquo; questions: make the implicit explicit.</li>
        <li>Glue work.</li>
      </ul></li>
      <li>Take charge:
      <ul>
        <li>Redirecting colleagues to more valuable work.</li>
        <li>Take control of a mess/incident.</li>
        <li>Drive meetings:
        <ul>
          <li>Take notes.</li>
          <li>Ensure agenda.</li>
          <li>Keep it focused.</li>
        </ul></li>
        <li>Speak up when you see behavioral problems.</li>
      </ul></li>
      <li>Create calm:
      <ul>
        <li>Make big problems small.</li>
        <li>Keep small problems small.</li>
        <li>Be consistent.</li>
        <li>Take time off.</li>
      </ul></li>
    </ol></li>
    <li>Remember the goal:
    <ul>
      <li>SW is a means to a goal, not a goal itself.</li>
      <li>There is always a budget.</li>
    </ul></li>
    <li>Look Ahead:
    <ul>
      <li>Don&rsquo;t optimize for now at the cost of future velocity or capability.</li>
      <li>Announce intention to deprecate old systems.</li>
      <li>Continually make your environment better.</li>
      <li>Faster safer deploys.</li>
      <li>Document.</li>
      <li>Build the expectation of failure into your products.</li>
      <li>Optimize for maintenance, not creation.</li>
      <li>Keep it simple: spend at least the same amount of time on possible second solution as you will in the first one.</li>
      <li>Build with decommission in mind.</li>
      <li>Create future leaders.</li>
    </ul></li>
  </ol></li>
  <li>The degree to which other people want to work with you is a direct indication of how successful you&rsquo;ll be in your career as an engineer. Be the engineer that everyone wants to work with.</li>
</ul><h2><a name="ch-8"></a>Chapter 8 - Good Influence at Scale</h2>
<ul>
  <li>Three tiers of influence:
  <ul>
    <li>Individual.</li>
    <li>Group.</li>
    <li>Catalyst: your influence continue even after you step away.</li>
    <li>Do the first two first, only go broader if value is clear.</li>
  </ul></li>
  <li>4 forms:</li>
</ul>
<table>
  <thead>
    <tr>
      <th> </th>
      <th>Individual </th>
      <th>Group </th>
      <th>Catalyst </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Advice </td>
      <td>Mentoring, sharing knowledge, feedback </td>
      <td>Tech talks, documentation, articles </td>
      <td>Mentorship program, tech talk events </td>
    </tr>
    <tr>
      <td>Teaching </td>
      <td>Code reviews, design review, coaching, pairing, shadowing </td>
      <td>Classes, codelabs </td>
      <td>Onboarding curriculum, teaching people to teach </td>
    </tr>
    <tr>
      <td>Guardrails </td>
      <td>Code review, change review, design review </td>
      <td>Processes, linters, style guides </td>
      <td>Frameworks, culture change </td>
    </tr>
    <tr>
      <td>Opportunity </td>
      <td>Delegating, sponsorship, cheerleading, ongoing support </td>
      <td>Sharing the spotlight, empowering your team </td>
      <td>Creating a culture of opportunity, watching with pride as your superstar junior colleagues change the world </td>
    </tr>
  </tbody>
</table>
<ol>
  <li>Advise:
  <ul>
    <li>Should be tailored to the person receiving it.</li>
    <li>Mentorship:
    <ul>
      <li>Sharing <strong>your</strong> experience so others can leverage on it:
      <ul>
        <li>Might not be useful/applicable.</li>
      </ul></li>
      <li>Don&rsquo;t jump to give advice, sometimes the mentee just need to vent or get empathy on the situation.</li>
      <li>Set objectives for mentorship.</li>
    </ul></li>
    <li>Be kindly honest.</li>
    <li>Peer reviews:
    <ul>
      <li>2 audiences:
      <ul>
        <li>Person who asked for feedback.</li>
        <li>Their manager.</li>
      </ul></li>
      <li>If you cannot think on what to improve, ask yourself why they aren&rsquo;t one level more senior.</li>
    </ul></li>
    <li>Encourage people to write things down.</li>
  </ul></li>
  <li>Teaching:
  <ul>
    <li>Code reviews:
    <ul>
      <li>Careful to not destroy somebody&rsquo;s confidence and growth mindset.</li>
      <li>Call out the good as well as the bad.</li>
    </ul></li>
  </ul></li>
  <li>Guardrails:
  <ul>
    <li>Encourage autonomy, exploration and innovation:
    <ul>
      <li>They will not stop you going over the edge.</li>
    </ul></li>
    <li>Reviews:
    <ul>
      <li>Should the work exists?</li>
      <li>Does it solve the problem?</li>
      <li>Will it handle failure?</li>
      <li>Understandable?</li>
      <li>Fits the bigger picture?</li>
      <li>Do the right people know about it?</li>
    </ul></li>
  </ul></li>
  <li>Opportunity:
  <ul>
    <li>Finding people the experience that they need to grow.</li>
    <li>Delegation:
    <ul>
      <li>Give them a messy, unscoped project with a bit of a safety net.</li>
      <li>When you delegate, you are not going to get a clone:
      <ul>
        <li>Good as long as they achieve the goals.</li>
      </ul></li>
    </ul></li>
    <li>Sponsorship:
    <ul>
      <li>You are investing your time and social capital in their growth.</li>
    </ul></li>
  </ul></li>
</ol><h2><a name="ch-9"></a>Chapter 9 - What&rsquo;s Next?</h2>
<ul>
  <li>Expand your perspective by reading, attending conferences and asking others about their journey.</li>
  <li>You cannot be an expert in everything.</li>
  <li>If the work fills you with dread or exhausts you, instead of exciting you, look for a different path to your goal.</li>
  <li><a href="https://www.scienceofpeople.com/conference-networking/">How to network</a> by Vanessa Van Edwards.</li>
  <li>Build visibility.</li>
  <li>The most time-efficient way to build skills, visibility and contacts is as part of your job. You&rsquo;ll get better at whatever you spend time on.</li>
  <li>Every job should help you grow towards your long-term goals and meet your immediate needs.</li>
  <li>Keep a weekly record of your job signals:
  <ol>
    <li>Are you growing/learning?</li>
    <li>Are the skills transferable?</li>
    <li>Would you recruit friends to your company?</li>
    <li>How is your confidence? How capable you feel?</li>
    <li>How stressed you feel?</li>
  </ol></li>
  <li>Staying in one place for long gives you the feedback loop that comes from seeing the consequences of your actions.</li>
  <li>What to do next:
  <ul>
    <li>You may just want to use your current skills and keep doing much the same job until you retire.</li>
    <li>Promotion.</li>
    <li>Work less:
    <ul>
      <li>If you weren&rsquo;t able to avoid working overtime at five days a week, why you think you can stick to working four?</li>
    </ul></li>
    <li>Change internal team.</li>
    <li>New specialization.</li>
    <li>Management.</li>
    <li>Find/invent your own niche:
    <ul>
      <li>Learn what your strengths are, and then finding &ldquo;holes that are shaped like you&rdquo;.</li>
    </ul></li>
    <li>Same job, different employer.</li>
    <li>Change jobs and level up or down.</li>
    <li>Your own start-up.</li>
    <li>Go independent.</li>
    <li>Change careers.</li>
  </ul></li>
</ul>]]></description></item><item><title>Book notes: Deming's Journey to Profound Knowledge: How Deming Helped Win a War, Altered the Face of Industry, and Holds the Key to Our Future</title><link>https://danlebrero.com/2024/01/04/deming-journey-to-profound-knowledge-summary/</link><guid>https://danlebrero.com/2024/01/04/deming-journey-to-profound-knowledge-summary/</guid><pubDate>Thu, 04 Jan 2024 00:00:00 +0100</pubDate><description><![CDATA[<p>These are my notes on <a href="https://amzn.to/3FFsMQH">Deming&rsquo;s Journey to Profound Knowledge: How Deming Helped Win a War, Altered the Face of Industry, and Holds the Key to Our Future</a> by <a href="https://twitter.com/botchagalupe">John Willis</a> with <a href="https://www.linkedin.com/in/dereklewisbooks/">Derek Lewis</a>.</p><p>&ldquo;This book is truly about how the lens of Profound Knowledge was found&rdquo;.</p><h1>Key Insights</h1>
<ul>
  <li>Deming is the foundation of Lean, Agile and DevOps.</li>
  <li>Variability is a fact of life.</li>
  <li>Elements of the System of Profound Knowledge:
  <ol>
    <li>A Theory of Knowledge: How we know what we believe we know?</li>
    <li>A Theory of Variation: How do we analyze and understand what we know?</li>
    <li>A Theory of Psychology: How do we account for human behaviour?</li>
    <li>An Appreciation of Systems/Systems Thinking: Are we seeing the bigger picture?</li>
  </ol></li>
  <li>The opposite of analytic thinking is systems thinking.</li>
  <li>Japanese workers believed they were doing something that <em>mattered</em>.</li>
  <li>No matter how precise the machines and the processes, the outputs all slightly varied from each other.</li>
  <li>Less waste allowed manufacturers to do more and more with less and less.</li>
  <li>Shewhart’s method enabled management to see defects as result of process instead of the workers.</li>
  <li>Defect classification:
  <ol>
    <li>Common cause: variations that could be predicted and should be planned for.</li>
    <li>Special cause: couldn&rsquo;t be predicted and shouldn&rsquo;t be planned for.</li>
  </ol></li>
  <li>The real value of Statistical Process Control is that it allows you to observe variation and look at random vs non-random patterns:
  <ul>
    <li>A random pattern represents a stable process, aka a process &ldquo;under control&rdquo;.</li>
    <li>A non-random pattern is a useful predictor of potential defects, signaling an amount of uncertainly in the process.</li>
    <li>And here is the root of all evil: misidentifying variation.</li>
  </ul></li>
  <li>Under-performing and brand-new operators would have 100% of their work inspected until their work fell within the control limits.</li>
  <li>We really didn’t believe. We did what we were told and it worked.</li>
  <li>They shouldn’t strive to be better than others but to strive to be better than themselves - that is true competition.</li>
  <li>Management by means (MBM):
  <ul>
    <li>If you don&rsquo;t know how you achieved your objective, how do you know if you can do it again?</li>
  </ul></li>
  <li><a href="https://deming.org/explore/fourteen-points/">14 Points for Management</a></li>
  <li>A common disease that afflicts management is the impression that “our problems are different”.</li>
  <li>Only 6% of problems are due to human error. 94% are system error. And since the system is the responsibility of management, 94% of problems are caused by bad management.</li>
  <li><p>Quality is not so much about improving the product as it is about improving the process.</p>
  <blockquote>In God we trust. All others must bring data. <cite>Dr. Deming</cite>
  </blockquote></li>
  <li>Organizations need to be a place where people can teach themselves.</li>
  <li>Perfection is not for this world.</li>
</ul><h1>TOC</h1>
<ul>
  <li><a href="#p-0">Preface</a></li>
  <li><a href="#p-00">Introduction</a></li>
  <li><a href="#p-1">Part I - Foundations of Profound Knowledge</a>
  <ul>
    <li><a href="#ch-1">Chapter 1 - Humble Origins &amp; Non-Determinism</a></li>
    <li><a href="#ch-2">Chapter 2 - The Jungle in Paradise</a></li>
    <li><a href="#ch-3">Chapter 3 - The Birth of Quality Control &amp; Standardization</a></li>
    <li><a href="#ch-4">Chapter 4 - The Root of All Evil</a></li>
    <li><a href="#ch-5">Chapter 5 - Pragmatist</a></li>
  </ul></li>
  <li><a href="#p-2">Part II - Applications of Profound Knowledge</a>
  <ul>
    <li><a href="#ch-6">Chapter 6 - Dr. Deming Goes to Washington</a></li>
    <li><a href="#ch-7">Chapter 7 - Rosie &amp; World War II</a></li>
    <li><a href="#ch-8">Chapter 8 - CLASSIFIED</a></li>
  </ul></li>
  <li><a href="#p-3">Part III - International Implications of Profound Knowledge</a>
  <ul>
    <li><a href="#ch-9">Chapter 9 - Samurai Statistics</a></li>
    <li><a href="#ch-10">Chapter 10 - JUSE &amp; the Gentle Giant</a></li>
    <li><a href="#ch-11">Chapter 11 - The Butterfly Effect</a></li>
    <li><a href="#ch-12">Chapter 12 - Made in Japan</a></li>
    <li><a href="#ch-13">Chapter 13 - Rising Sun, Falling Eagle</a></li>
    <li><a href="#ch-14">Chapter 14 - Demingmania</a></li>
    <li><a href="#ch-15">Chapter 15 - Dr. Quinn, Medicine Woman</a></li>
  </ul></li>
  <li><a href="#p-4">Part IV - The Next Generation of Profound Knowledge</a>
  <ul>
    <li><a href="#ch-16">Chapter 16 - The Digital Cambrian Explosion</a></li>
    <li><a href="#ch-17">Chapter 17 - What Would Deming Do?</a></li>
    <li><a href="#ch-18">Chapter 18 - Deming&rsquo;s Dark Legacy</a></li>
    <li><a href="#ch-19">Chapter 19 - Out of the Cyber Crisis</a></li>
  </ul></li>
</ul><h1><a name="p-0"></a>Preface</h1>
<ul>
  <li><a href="https://amzn.to/3s94VpF">Eliyahu Goldratt</a> books:
  <ul>
    <li>The Goal.</li>
    <li>Theory of Constraints.</li>
    <li>Critical Chain.</li>
    <li>It&rsquo;s Not Luck.</li>
    <li>Necessary but Not Sufficient.</li>
  </ul></li>
  <li>Deming is the foundation of Lean, Agile and DevOps.</li>
</ul><h2><a name="p-00"></a>Introduction</h2>
<ul>
  <li>The Allies won because the US outproduced the rest of the world:
  <ul>
    <li>Despite the absence of millions of skilled American workers and managers.</li>
    <li>Thanks to the statistical process control method.</li>
  </ul></li>
  <li>The very nature of reality is random.</li>
  <li>Variability is a fact of life.</li>
  <li>Elements of the System of Profound Knowledge:
  <ol>
    <li>A Theory of Knowledge: How we know what we believe we know?</li>
    <li>A Theory of Variation: How do we analyze and understand what we know?</li>
    <li>A Theory of Psychology: How do we account for human behaviour?</li>
    <li>An Appreciation of Systems/Systems Thinking: Are we seeing the bigger picture?</li>
  </ol></li>
  <li>Deming&rsquo;s mission was to work himself out of a job.</li>
</ul><h1><a name="p-1"></a>Part I - Foundations of Profound Knowledge</h1><h2><a name="ch-1"></a>Chapter 1 - Humble Origins &amp; Non-Determinism</h2>
<ul>
  <li>Determinism (Newtonian Physics): World operates solely on cause and effect.</li>
  <li>Non-Determinism:
  <ul>
    <li>No matter how much you know, there is an infinite amount of change and randomness in the universe.</li>
    <li>No such thing as absolute certainty.</li>
    <li>Crucial role in shaping Deming&rsquo;s worldview:
    <ol>
      <li>Long-established and long-held beliefs weren&rsquo;t necessarily true.</li>
      <li>Underpinnings of our very existence are random.</li>
      <li>Forced him to look at problems as multifaceted, complex systems.</li>
    </ol></li>
  </ul></li>
  <li>The opposite of analytic thinking is systems thinking.</li>
</ul><h2><a name="ch-2"></a>Chapter 2 - The Jungle in Paradise</h2>
<ul>
  <li>Hawthorne Works:
  <ul>
    <li>Treated its workers more like partners than peasants. And it worked.</li>
    <li>Corporate success forged a bond of loyalty with its employees.</li>
    <li>&ldquo;Hawthorne Effect&rdquo;:
    <ul>
      <li>The act of subjects changing their behaviour in response to being observed.</li>
    </ul></li>
  </ul></li>
  <li>Japanese workers believed they were doing something that <em>mattered</em>.</li>
  <li>Workers:
  <ul>
    <li>Ford:
    <ul>
      <li>Saw them as inconvenient cogs in the machine.</li>
      <li>Standardize to make them interchangeable.</li>
    </ul></li>
    <li>Taylor:
    <ul>
      <li>Scientific management.</li>
      <li>Saw them as machines themselves.</li>
      <li>Optimize them for maximum efficiency, through right physical and psychological conditions.</li>
    </ul></li>
    <li>Both:
    <ul>
      <li>Think that workers don&rsquo;t want to work.</li>
      <li>Antagonism between workers and managers.</li>
    </ul></li>
  </ul></li>
  <li>Piecework is man&rsquo;s lowest degradation:
  <ul>
    <li>Incentivices workers to focus on quantity, not quality.</li>
  </ul></li>
</ul><h2><a name="ch-3"></a>Chapter 3 - The Birth of Quality Control &amp; Standardization</h2>
<ul>
  <li>The eternal question of quality has always been this: &ldquo;How good is good enough?&rdquo;</li>
  <li>Machine age: standardization was the catalyst.</li>
  <li>Interchangeable parts were the turning point in the history of quality control and led to the theory of variation.</li>
  <li>No matter how precise the machines and the processes, the outputs all slightly varied from each other:
  <ul>
    <li>This spawned a need to allow for variance in product specifications.</li>
    <li>This is more in line with a non-deterministic approach.</li>
  </ul></li>
</ul><h2><a name="ch-4"></a>Chapter 4 - The Root of All Evil</h2>
<ul>
  <li>Statistics is about how confident you feel when dealing with uncertainty.</li>
  <li>Operational definition: procedure agreed upon to translate a concept into a precise measurement.</li>
  <li>If you can track variation, then you can trace variation to better understand why a production line creates defects and detect it much earlier in the process.</li>
  <li>Statistical Process Control (SPC) let managers compare variation across workers and machines.</li>
  <li>Less waste allowed manufacturers to do more and more with less and less.</li>
  <li>Shewhart&rsquo;s method enabled management to see defects as result of process instead of the workers.</li>
  <li>Plan, do, check, study.</li>
  <li>Defect classification:
  <ol>
    <li>Common cause: variations that could be predicted and should be planned for.</li>
    <li>Special cause: couldn&rsquo;t be predicted and shouldn&rsquo;t be planned for.</li>
  </ol></li>
  <li>Shewhart: as long as the variance fell within standard-deviation limits, the variance was inherent to the manufacturing process (common cause).</li>
  <li>The real value of SPC is that it allows you to observe variation and look at random vs non-random patterns:
  <ul>
    <li>A random pattern represents a stable process, aka a process &ldquo;under control&rdquo;.</li>
    <li>A non-random pattern is a useful predictor of potential defects, signaling an amount of uncertainly in the process.</li>
    <li>And here is the root of all evil: misidentifying variation.</li>
    <li>As a result, managers can spend their time on things they can control.</li>
  </ul></li>
  <li>SPC allows you to statistically predict defects before they occur.</li>
</ul><h2><a name="ch-5"></a>Chapter 5 - Pragmatist</h2>
<ul>
  <li>The philosophy of pragmatism, what Deming would later call the Theory of Knowledge.</li>
  <li>A meter would be defined as the cord length needed for a clock&rsquo;s pendulum to travel one swing per second.</li>
  <li>Two types of knowledge: a priori and a posteriori.</li>
  <li>A posteriori thinkers or &ldquo;pragmatists&rdquo;:
  <ul>
    <li>Experience is the best teacher.</li>
    <li>Begin with observations and empirical data (hard evidence) and then work their way backwards.</li>
  </ul></li>
  <li>A standard is a measurement that suffices and that everybody agrees upon.</li>
</ul><h1><a name="p-2"></a>Part II - Applications of Profound Knowledge</h1><h2><a name="ch-6"></a>Chapter 6 - Dr. Deming Goes to Washington</h2>
<ul>
  <li>Under-performing and brand-new operators would have 100% of their work inspected until their work fell within the control limits.</li>
</ul><h2><a name="ch-7"></a>Chapter 7 - Rosie &amp; World War II</h2>
<ul>
  <li>Victory came because the US outproduced the rest of the world.</li>
</ul><h2><a name="ch-8"></a>Chapter 8 - CLASSIFIED</h2>
<ul>
  <li>Bounded rationality: humans can process only so much information at a time.</li>
  <li>David Woods: Anomaly response situations frequently involved time pressure, multiple interacting goals, high consequences of failure, and multiple interleaved tasks.</li>
</ul><h1><a name="p-3"></a>Part III - International Implications of Profound Knowledge</h1><h2><a name="ch-9"></a>Chapter 9 - Samurai Statistics</h2>
<ul>
  <li>The US used statistics to win the war, even as Japan threw statistics out of the windows. Afterwards, Japan used statistics to win the economic war, even as the US threw statistics out the window.</li>
</ul><h2><a name="ch-10"></a>Chapter 10 - JUSE &amp; the Gentle Giant</h2>
<ul>
  <li>SPC wasn&rsquo;t just about applying statistics to output. Quality touched everything in the process, including the quality of raw materials and components received from supplier and vendors.</li>
  <li>Ed knew that unless it included top management, the classes were unlikely to succeed.</li>
  <li>JUSE used the proceeds from the lecture fees and book royalties to fund a prize in Deming&rsquo;s honor. Accomplished three critical purposes:
  <ol>
    <li>Associated JUSE with one of the most famous statisticians in the world.</li>
    <li>Laid a sort of territorial claim to the man.</li>
    <li>Guaranteed Deming&rsquo;s involvement in Japan.</li>
  </ol></li>
  <li>Deming: They wanted more conferences, so we had more. It was a terrifying experience for me because I was new at it. I was a technical man.</li>
  <li>We really didn&rsquo;t believe. We did what we were told and it worked.</li>
  <li>He inspired hope, if not confidence.</li>
</ul><h2><a name="ch-11"></a>Chapter 11 - The Butterfly Effect</h2>
<ul>
  <li>He demonstrated how even competitors working together benefited their respective companies and, more importantly, their customers.</li>
  <li>What is Deming&rsquo;s real legacy? It is seeing the grander scheme and preaching cooperation instead of competition.</li>
  <li>They shouldn&rsquo;t strive to be better than others but to strive to be better than themselves - that is true competition.</li>
</ul><h2><a name="ch-12"></a>Chapter 12 - Made in Japan</h2>
<ul>
  <li>Because demand and profit margins were so high, US companies could afford waste, rework, stockpiling inventory, and other inefficiencies.</li>
  <li>Taylorism focused on eliminating individual waste. Ohno focused on systemic waste.</li>
  <li>Assembly-line workers were cross-trained in different positions.</li>
  <li>Machines were make multipurpose.</li>
  <li>Kanban:
  <ul>
    <li>The aim was to produce only what was needed, when it was needed, and in the amount needed.</li>
    <li>It went against everything Henry Ford believed and practiced.</li>
  </ul></li>
</ul><h2><a name="ch-13"></a>Chapter 13 - Rising Sun, Falling Eagle</h2>
<ul>
  <li>Kaizen: a process of deliberate, patient, continual refinement.</li>
  <li>How long do you think it will take the US to catch up with Japan?
  <ul>
    <li>Do you think Japan is standing still?</li>
  </ul></li>
  <li>What made one manufacturing plant better than others? Adopting a lean manufacturing philosophy trumped all those other factors.</li>
  <li>US companies focused on the process but forgot the people.</li>
</ul><h2><a name="ch-14"></a>Chapter 14 - Demingmania</h2>
<ul>
  <li>Management by means (MBM):
  <ul>
    <li>If you don&rsquo;t know how you achieved your objective, how do you know if you can do it again?</li>
  </ul></li>
  <li><a href="https://deming.org/explore/fourteen-points/">14 Points for Management</a>:
  <ul>
    <li>Improve constantly and forever the system.</li>
    <li>Eliminate slogans, exhortations, and targets for the workforce asking for zero defects and new levels of productivity. Such exhortations only create adversarial relationships, as the build of the causes of low quality and low productivity belong to the system and thus lie beyond the power of the workforce.</li>
  </ul></li>
  <li>Waraniak didn&rsquo;t focus on the race: he looked at the preparations and training leading up to it:
  <ul>
    <li>By using two cars and two teams in the design, training, and setup phases, GM could prototype twice the number of ideas and innovations.</li>
  </ul></li>
</ul><h2><a name="ch-15"></a>Chapter 15 - Dr. Quinn, Medicine Woman</h2><h1><a name="p-4"></a>Part IV - The Next Generation of Profound Knowledge</h1><h2><a name="ch-16"></a>Chapter 16 - The Digital Cambrian Explosion</h2>
<ul>
  <li>Dr. Deming reaction to someone who was complaning that he had changed something in his teaching: &ldquo;I will never apologize for learning&rdquo;.</li>
  <li>Lean development focus on waste, whereas agile focus on delivery.</li>
  <li>Steve Blank, The Lean Startup: putting together build, measure, learn and MVP with agile and lean methodologies.</li>
  <li>DevOps: collaboration between devs and ops, and automation of agile and lean principles.</li>
  <li>Read Deming&rsquo;s 14 Points of Management to understand the roots of DevOps.</li>
</ul><h2><a name="ch-17"></a>Chapter 17 - What Would Deming Do?</h2>
<ul>
  <li>A common disease that afflicts management is the impression that &ldquo;our problems are different&rdquo;:
  <ul>
    <li>They are different, to be sure, but the principles that will help are universal in nature.</li>
  </ul></li>
  <li>To profoundly change a system, requires know-how outside of that system.
  <ul>
    <li>If the system had the knowledge, then it would change itself on its own.</li>
    <li>Ed&rsquo;s System of Profound Knowledge does not require someone from the outside.</li>
  </ul></li>
  <li>Only 6% of problems are due to human error. 94% are system error.
  <ul>
    <li>And since the system is the responsibility of management, 94% of problems are caused by bad management.</li>
  </ul></li>
</ul><h2><a name="ch-18"></a>Chapter 18 - Deming&rsquo;s Dark Legacy</h2>
<ul>
  <li>From 2021, federal government&rsquo;s vendors are required to supply a software bill of materials.</li>
</ul><h2><a name="ch-19"></a>Chapter 19 - Out of the Cyber Crisis</h2>
<ul>
  <li>When you silo cybersecurity, seeing it as an independent component instead of a system, you put your entire organization at risk.</li>
  <li><p>Shannon Lietz: security needs to be designed into an organization&rsquo;s system.</p>
  <blockquote>It is not necessary to change. Survival is not mandatory. <cite>Dr. Deming</cite>
  </blockquote></li>
  <li>Today, leaders wait until there is a problem before they fix it.</li>
  <li>Quality is not so much about improving the product as it is about improving the process.</li>
  <li>Tighter relationships with fewer suppliers lead to increased process alignment and lower overall costs.</li>
  <li>In God we trust. All others must bring data.</li>
  <li>Instead of looking at incidents through arbitrary categories (P1 to P4), System of Profound Knowledge could be used to identify common-cause and special-cause patterns across all incidents.</li>
  <li>Blameless post-mortem: instead of assigning a problem to a certain person, blame would be placed on the system.</li>
  <li>&ldquo;I didn&rsquo;t question it&rdquo;: famous last words.</li>
  <li>Plenty of executive managers still don&rsquo;t understand the nature of the digital world and demand &ldquo;zero defects&rdquo; or &ldquo;never fail&rdquo; software.</li>
  <li>Maginot Line thinking is when you expend considerable resources in an effort to counteract a past threat.</li>
  <li>The security industry should assume that hackers will gain access to the system. We should plan for the inevitability of them getting in.</li>
  <li>Too often, managing by hard numbers sacrifices quality.</li>
  <li>Organizations need to be a place where people can teach themselves.</li>
  <li>Perfection is not for this world.</li>
</ul>]]></description></item></channel></rss>