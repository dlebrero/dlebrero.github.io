<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://danlebrero.com' rel='self' type='application/rss+xml'/>
<title>
Daniel Lebrero Berna Blog
</title>
<link>
http://danlebrero.com
</link>
<language>
en
</language>
<lastBuildDate>
Fri, 01 Sep 2017 00:00:00 +0200
</lastBuildDate>
<pubDate>
Fri, 01 Sep 2017 00:00:00 +0200
</pubDate>
<description>
Daniel Lebrero blog
</description>
<generator>
clj-rss
</generator>
<item>
<title>
Why to Docker Compose a calm environment
</title>
<link>
http://danlebrero.com/2017/09/01/a-docker-compose-environment/
</link>
<guid>
http://danlebrero.com/2017/09/01/a-docker-compose-environment/
</guid>
<pubDate>
Fri, 01 Sep 2017 00:00:00 +0200
</pubDate>
<description>
Setting up or upgrading a developer environment should be an easy and repeatable process. Docker Compose is the tool to achieve it.
</description>
</item>
<item>
<title>
Applying stability patterns: a case study - Devoxx PL 2017
</title>
<link>
http://danlebrero.com/2017/08/03/stability-patterns-a-case-study-devoxx-pl-2017-video/
</link>
<guid>
http://danlebrero.com/2017/08/03/stability-patterns-a-case-study-devoxx-pl-2017-video/
</guid>
<pubDate>
Thu, 03 Aug 2017 11:00:00 +0200
</pubDate>
<description>
Video from my presentation on Devoxx PL 2017 on stability patterns
</description>
</item>
<item>
<title>
A more efficient developer: write programs for yourself
</title>
<link>
http://danlebrero.com/2017/08/03/efficient-developer-write-programs-for-yourself/
</link>
<guid>
http://danlebrero.com/2017/08/03/efficient-developer-write-programs-for-yourself/
</guid>
<pubDate>
Thu, 03 Aug 2017 00:00:00 +0200
</pubDate>
<description>
The shoemaker's son always go barefoot.
</description>
</item>
<item>
<title>
A more efficient developer: master your IDE
</title>
<link>
http://danlebrero.com/2017/08/02/efficient-developer-master-your-ide/
</link>
<guid>
http://danlebrero.com/2017/08/02/efficient-developer-master-your-ide/
</guid>
<pubDate>
Wed, 02 Aug 2017 00:00:00 +0200
</pubDate>
<description>
A professional developer should look professional while using his main tool.
</description>
</item>
<item>
<title>
A more efficient developer: disable notifications
</title>
<link>
http://danlebrero.com/2017/08/01/efficient-developer-disable-notifications/
</link>
<guid>
http://danlebrero.com/2017/08/01/efficient-developer-disable-notifications/
</guid>
<pubDate>
Tue, 01 Aug 2017 00:00:00 +0200
</pubDate>
<description>
How to become X times more efficient in one simple step.
</description>
</item>
<item>
<title>
Error budget: Google's solution for innovating at a sustainable pace
</title>
<link>
http://danlebrero.com/2017/07/16/error-budget-google-solution-for-innovating-at-a-sustainable-pace/
</link>
<guid>
http://danlebrero.com/2017/07/16/error-budget-google-solution-for-innovating-at-a-sustainable-pace/
</guid>
<pubDate>
Sun, 16 Jul 2017 00:00:00 +0200
</pubDate>
<description>
New features always trump technical work. Can we objectively measure and decide when they should not?
</description>
</item>
<item>
<title>
Atoms, delays and side effects: a resource management idiom for Clojure
</title>
<link>
http://danlebrero.com/2017/06/21/atoms-delays-and-side-effects-resource-managent-in-clojure/
</link>
<guid>
http://danlebrero.com/2017/06/21/atoms-delays-and-side-effects-resource-managent-in-clojure/
</guid>
<pubDate>
Wed, 21 Jun 2017 14:15:00 +0200
</pubDate>
<description>
Concurrency in Clojure is easy peasy, unless you have to deal with side effects. But atoms and delays can still help us. Let's look at an idiom for resource management.
</description>
</item>
<item>
<title>
Delay: Clojure's forgotten concurrency primitive
</title>
<link>
http://danlebrero.com/2017/06/12/delay-clojure-forgotten-concurrency-primitive/
</link>
<guid>
http://danlebrero.com/2017/06/12/delay-clojure-forgotten-concurrency-primitive/
</guid>
<pubDate>
Mon, 12 Jun 2017 09:00:00 +0200
</pubDate>
<description>
When talking about Clojure's concurrency primitives, we often forget &quot;delay&quot;. Let's see how it can help us.
</description>
</item>
<item>
<title>
Testing or Monitoring? MTBF or MTTR? Make your choice!
</title>
<link>
http://danlebrero.com/2017/06/05/testing-or-monitoring-mtbf-mttr-make-your-choice/
</link>
<guid>
http://danlebrero.com/2017/06/05/testing-or-monitoring-mtbf-mttr-make-your-choice/
</guid>
<pubDate>
Mon, 05 Jun 2017 18:00:00 +0200
</pubDate>
<description>
What is more important testing or monitoring? Should you optimize for mean time between failures (MTBF) or mean time to repair (MTTR)?
</description>
</item>
<item>
<title>
Clojure's most important lesson
</title>
<link>
http://danlebrero.com/2017/05/24/clojure-most-important-lesson/
</link>
<guid>
http://danlebrero.com/2017/05/24/clojure-most-important-lesson/
</guid>
<pubDate>
Wed, 24 May 2017 20:00:00 +0200
</pubDate>
<description>
Clojure has a lot of important and unique lessons to teach, but which one is the most important?
</description>
</item>
</channel>
</rss>
