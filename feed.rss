<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://danlebrero.com' rel='self' type='application/rss+xml'/>
<title>
Daniel Lebrero Berna Blog
</title>
<link>
http://danlebrero.com
</link>
<language>
en
</language>
<lastBuildDate>
Wed, 21 Jun 2017 14:15:00 +0200
</lastBuildDate>
<pubDate>
Wed, 21 Jun 2017 14:15:00 +0200
</pubDate>
<description>
Daniel Lebrero blog
</description>
<generator>
clj-rss
</generator>
<item>
<title>
Atoms, delays and side effects: a resource management idiom for Clojure
</title>
<link>
http://danlebrero.com/2017/06/21/atoms-delays-and-side-effects-resource-managent-in-clojure/
</link>
<guid>
http://danlebrero.com/2017/06/21/atoms-delays-and-side-effects-resource-managent-in-clojure/
</guid>
<pubDate>
Wed, 21 Jun 2017 14:15:00 +0200
</pubDate>
<description>
Concurrency in Clojure is easy peasy, unless you have to deal with side effects. But atoms and delays can still help us. Let's look at an idiom for resource management.
</description>
</item>
<item>
<title>
Delay: Clojure's forgotten concurrency primitive
</title>
<link>
http://danlebrero.com/2017/06/12/delay-clojure-forgotten-concurrency-primitive/
</link>
<guid>
http://danlebrero.com/2017/06/12/delay-clojure-forgotten-concurrency-primitive/
</guid>
<pubDate>
Mon, 12 Jun 2017 09:00:00 +0200
</pubDate>
<description>
When talking about Clojure's concurrency primitives, we often forget &quot;delay&quot;. Let's see how it can help us.
</description>
</item>
<item>
<title>
Testing or Monitoring? MTBF or MTTR? Make your choice!
</title>
<link>
http://danlebrero.com/2017/06/05/testing-or-monitoring-mtbf-mttr-make-your-choice/
</link>
<guid>
http://danlebrero.com/2017/06/05/testing-or-monitoring-mtbf-mttr-make-your-choice/
</guid>
<pubDate>
Mon, 05 Jun 2017 18:00:00 +0200
</pubDate>
<description>
What is more important testing or monitoring? Should you optimize for mean time between failures (MTBF) or mean time to repair (MTTR)?
</description>
</item>
<item>
<title>
Clojure's most important lesson
</title>
<link>
http://danlebrero.com/2017/05/24/clojure-most-important-lesson/
</link>
<guid>
http://danlebrero.com/2017/05/24/clojure-most-important-lesson/
</guid>
<pubDate>
Wed, 24 May 2017 20:00:00 +0200
</pubDate>
<description>
Clojure has a lot of important and unique lessons to teach, but which one is the most important?
</description>
</item>
<item>
<title>
Automating resilience testing with Docker and Property Based Testing - Devoxx UK 2017
</title>
<link>
http://danlebrero.com/2017/05/20/automating-resilience-testing-with-docker-and-property-based-testing-devoxx-uk-2017-video/
</link>
<guid>
http://danlebrero.com/2017/05/20/automating-resilience-testing-with-docker-and-property-based-testing-devoxx-uk-2017-video/
</guid>
<pubDate>
Sat, 20 May 2017 00:00:00 +0200
</pubDate>
<description>
Video from my presentation on Devoxx UK 2017 on Docker, resilience and property based testing
</description>
</item>
<item>
<title>
Joins on stateful stream processing using Kafka Streams' KTables and GlobalKTables
</title>
<link>
http://danlebrero.com/2017/05/07/kafka-streams-ktable-globalktable-joining-reference-data/
</link>
<guid>
http://danlebrero.com/2017/05/07/kafka-streams-ktable-globalktable-joining-reference-data/
</guid>
<pubDate>
Sun, 07 May 2017 13:00:00 +0200
</pubDate>
<description>
Exploring different options in Kafka Streams to join KTables, both with and without shared keys.
</description>
</item>
<item>
<title>
Documenting your architecture: Wireshark, PlantUML and a REPL to glue them all.
</title>
<link>
http://danlebrero.com/2017/04/06/documenting-your-architecture-wireshark-plantuml-and-a-repl/
</link>
<guid>
http://danlebrero.com/2017/04/06/documenting-your-architecture-wireshark-plantuml-and-a-repl/
</guid>
<pubDate>
Thu, 06 Apr 2017 10:00:00 +0200
</pubDate>
<description>
Instead of drawing UML diagrams, why not generate them from a network traffic capture of the running system?
</description>
</item>
<item>
<title>
Kerberos explained in pictures
</title>
<link>
http://danlebrero.com/2017/03/26/Kerberos-explained-in-pictures/
</link>
<guid>
http://danlebrero.com/2017/03/26/Kerberos-explained-in-pictures/
</guid>
<pubDate>
Sun, 26 Mar 2017 00:00:00 +0100
</pubDate>
<description>
Kerberos is a single sign on authentication protocol, we will try to explain how it works with some hopefully simple diagrams.
</description>
</item>
<item>
<title>
Proof of concept using KafkaStreams and KTables - implementation notes, gotchas and Docker Compose example
</title>
<link>
http://danlebrero.com/2017/01/06/proof-of-concept-using-kafkastreams-and-ktables-implementation-notes-gotchas-and-docker-compose/
</link>
<guid>
http://danlebrero.com/2017/01/06/proof-of-concept-using-kafkastreams-and-ktables-implementation-notes-gotchas-and-docker-compose/
</guid>
<pubDate>
Fri, 06 Jan 2017 14:00:00 +0100
</pubDate>
<description>
Implementation details from a proof of concept using Kafka Streams and KTables using Clojure and Docker
</description>
</item>
<item>
<title>
Proof of concept using KafkaStreams and KTables
</title>
<link>
http://danlebrero.com/2017/01/05/proof-of-concept-using-kafkastreams-and-ktables/
</link>
<guid>
http://danlebrero.com/2017/01/05/proof-of-concept-using-kafkastreams-and-ktables/
</guid>
<pubDate>
Thu, 05 Jan 2017 17:00:00 +0100
</pubDate>
<description>
Exploring how to use KafkaStreams and KTables for building a stateful stream processing application
</description>
</item>
</channel>
</rss>
